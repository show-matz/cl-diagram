
#+BEGIN_SRC lisp
(in-package :cl-diagram-user)

(let ((svg (create-svg (:width 600 :height 400 :desc "test SVG" :encoding :utf8)
	  (css "
  .inner        { fill:lime; stroke:blue; stroke-width:1 }
")
	  (rectangle 300 200 600 400 :fill :lightgray :id :background)
	  (circle 100 100 25
			  :link "http://www.google.co.jp"
			  :fill :darkslategray :stroke '(:color :black :width 2) :id :circle1)
	  (rectangle (+ circle1[right] 100) (+ circle1[bottom] 100) 200 200
				 :fill :khaki :stroke '(:color :black :width 2) :id :rect1
				 :contents
				 ((ellipse 35 50 30 40 :class :inner
							  #|:fill :lime :stroke '(:color :blue :width 1)|# :id :inner)))
	  (path `(,(move-to 200 200)
			,(3d-curve-to 275 150 575 100 500 200)) :stroke :red)
	  (arc 300 50 25 30 330 :stroke '(:color :green :width 4))
	  (line '(300 200 350 200 380 280) :stroke :blue
			:end1 '(:type :arrow  :stroke :blue :fill :blue)
			:end2 '(:type :circle :stroke :blue :fill :blue))
	  (polygon '(448 16 416 96 496 48 400 48 480 96) :fill :slategray :stroke :navy)
	  (rectangle 400 250 30 30 :stroke :brown  :fill :none :id :rectA)
	  (rectangle 500 300 30 30 :stroke :purple :fill :none :id :rectB)
	  (connector :rectA :rectB :style :T3T1 :stroke :red :end2 :arrow)
	  (text 20 370 "This is test string." :align :left
            :link "http://www.google.co.jp"
            :font '(:size 20 :color :blue :decoration :underline))
	  (paragraph 350 350 "This is paragraph text.
multi-line is OK." :align :left :valign :top
            :link "http://www.google.co.jp"
            :font '(:size 12 :color :red :decoration :underline :line-spacing 5)))))
  (with-open-file (stream "./tmp.svg" :direction :output :if-exists :supersede)
	(princ svg stream)
	nil))
#+END_SRC

* 実験的な移植作業
** base [6/6]

  - [X] point.lisp
  - [X] mathutil.lisp
  - [X] canvas.lisp
  - [X] dictionary.lisp
  - [X] layer-manager.lisp
  - [X] svg-writer.lisp

** info 系 [6/6]

  - [X] fill-info.lisp
  - [X] stroke-info.lisp
  - [X] font-info.lisp
  - [X] link-info.lisp
  - [X] label-info.lisp
  - [X] endmark-info.lisp

** entity とその派生 [2/3]

  - [X] entity.lisp
  - [X] entity 派生 [7/7]
    - [X] css.lisp
    - [X] line.lisp [1/1]
      - [X] connector.lisp
    - [X] path.lisp [1/1]
      - [X] arc.lisp
    - [X] polygon.lisp
    - [X] raw-svg.lisp
    - [X] shape.lisp
    - [X] text.lisp
  - [-] shape 派生 [4/6]
    - [X] circle.lisp
    - [X] ellipse.lisp
    - [ ] group.lisp
    - [ ] image.lisp
    - [X] paragraph.lisp
    - [X] rectangle.lisp

** 未整理 [4/5]

  - [X] CL-SVG.asd -> cl-diagram.asd
  - [X] CL-SVG.lisp -> cl-diagram.lisp
  - [X] constants.lisp
  - [X] create-svg.lisp
  - [ ] svg-main.lisp

* xxx [0/6]
** TODO dictionary.lisp::dict-history-kwd-p は labels にできる
** TODO entity-canvas と shape-canvas : なんか変じゃない？
** TODO add rule( :nonzero|:evenodd ) to fill-info

　essentials(PDF p58) では default が nonzero とされているが、evenodd にみえる。

** TODO stroke-linecap to stroke ( essentials 2nd : p85 )
** TODO css 

　以下のように記述できるようにしたい。

#+BEGIN_SRC lisp
(css
  (style :rect.inner :fill '(:color :red :opacity 0.2)
					 :stroke '(:color :black :width 1))
  (style :.foo :font (make-font :family "foobar")))
#+END_SRC

** TODO endmark

　fill 指定がなければ stroke の color で塗り潰す、ができてない

　default で親 line の stroke color とかを使用、もできていない

** TODO 外部ライブラリ依存の除去 [1/4]
*** TODO jp
*** TODO pathnames
*** DONE strings
*** TODO cl-binary
