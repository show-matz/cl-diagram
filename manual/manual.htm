<html>
<header>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<meta http-equiv="Content-Style-Type" content="text/css">
	<title>diagram readme</title>
	<link rel=stylesheet href="./default.css">
</header>
<body>
<!-- define: APPNAME = diagram -->
<!-- define: BLANK_PARAGRAPH = '　　' -->
<!-- config:term-link-in-header -->			
<!-- config:write-comment -->			
<!-- config:header-numbering 2 4 -->			
<h1><a name='8DhcAacagke'></a>README - diagram</h1>
<p>　この文書は、 <strong>diagram</strong> のためのマニュアル文書です。</p>
<h2><a name='0qJQvVjc3Xy'></a>1 Table of contents</h2>
<ul>
<li><a href='#0qJQvVjc3Xy'>1 Table of contents</a></li>
<li><a href='#0Ofny2DArqY'>2 diagram とは</a></li>
<li><a href='#9LLncE6hWlx'>3 簡単なサンプル</a></li>
<li><a href='#aOvOKsKAT1o'>4 線・塗り潰し・文字</a></li>
<ul>
<li><a href='#4HFjqmTuIU6'>4.1 ストローク</a></li>
<ul>
<li><a href='#ezUVhtPwl3J'>4.1.1 make-stroke 関数</a></li>
<li><a href='#bw6LIFogC17'>4.1.2 ＊default-stroke＊ 変数</a></li>
</ul>
<li><a href='#dBUd7L4C3dx'>4.2 フィル</a></li>
<li><a href='#3kZ9FkounyK'>4.3 フォント</a></li>
</ul>
<li><a href='#7TyOD7TaDM2'>5 リファレンス</a></li>
<ul>
<li><a href='#hK4u1oSPHKz'>5.1 create-svg</a></li>
<li><a href='#cO92wFlsFW7'>5.2 with-subcanvas</a></li>
</ul>
<li><a href='#dGdSPnvay5N'>6 更新履歴</a></li>
</ul>
<p>　　</p>
<h2><a name='0Ofny2DArqY'></a>2 diagram とは</h2>
<p>　diagram は、テキストベースの作図ツールです。テキスト形式で作成したデータファイルを入力として、SVG 形式<sup><a name='footnote_ref1' href='#footnote1'>1</a></sup>の画像ファイルを生成します。</p>
<p>　入力データの記述には Common LISP 言語を使用します。これは、diagram 自身が Common LISP で書かれているからですが、</p>
<h2><a name='9LLncE6hWlx'></a>3 簡単なサンプル</h2>
<p>　簡単なサンプルから始めましょう。以下のような入力を diagram に与えると、</p>
<!-- snippet: FIRST-SAMPLE
(create-svg (:width 300 :height 150)
  (rectangle '( 50  50) 80 60 :id :x)
  (circle    '(250 100) 40    :id :y)
  (connector :x :y :end2 :arrow))
-->
<pre class='code'>
(create-svg (<span class='keyword3'>:width</span> 300 <span class='keyword3'>:height</span> 150)
  (rectangle '( 50  50) 80 60 <span class='keyword3'>:id</span> <span class='keyword3'>:x</span>)
  (circle    '(250 100) 40    <span class='keyword3'>:id</span> <span class='keyword3'>:y</span>)
  (connector <span class='keyword3'>:x</span> <span class='keyword3'>:y</span> <span class='keyword3'>:end2</span> <span class='keyword3'>:arrow</span>))
</pre>
<p>　　</p>
<p>　以下のような画像が生成されます。</p>
<div align='center'>
<?xml version='1.0' encoding='utf-8' ?>
<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' baseProfile='full' xml:space='default' width='300' height='150'>
	
	<!-- x : rectangle -->
	<rect id='x' x='10' y='20' width='80' height='60' fill='none' stroke='black' stroke-width='1' />
	<!-- y : circle -->
	<circle id='y' cx='250' cy='100' r='40' fill='none' stroke='black' stroke-width='1' />
	<!-- connector from x to y -->
	<polyline fill='none' stroke='black' stroke-width='1' points=' 90.0,60.0 211.1943,90.29858' />
	<polyline fill='none' stroke='black' stroke-width='1' points='196.77277,94.42401 211.1943,90.29858 200.4108,79.87188' />

</svg>
</div>

<p class='fig_title'><a name='euwIyAjslFq'></a>Figure.1 簡単なサンプル</p>
<ul>
<li>create-svg で、幅 300、高さ 150 の画像を作成します</li>
<li>rectangle で、左上から (50, 50) の位置に幅 80、高さ 60 の矩形を作成し、これに :x という ID をつけます</li>
<li>circle で、左上から (250, 100) の位置に半径 40 の円を作成し、これに :y という ID をつけます</li>
<li>connector で、:x から :y に向かって接続線を引き、終端の形状を矢印にしています</li>
</ul>
<!-- snippet: SECOND-SAMPLE
(create-svg (:width 300 :height 200)
; (rectangle '(150 100) 300 200)
  (rectangle '( 50  50) 50 50     :id :a1)
  (circle    (point/x+ a1.center 100) 25 :id :a2)
  (rectangle (point/y+ a2.center 100) 50 50 :id :a3)
  (circle    (point/x+ a3.center 100) 25 :id :a4)
  (connector :a1 :a2 :end2 :arrow)
  (connector :a2 :a3 :end2 :arrow)
  (connector :a3 :a4 :end2 :arrow))
-->
<pre class='code'>
(create-svg (<span class='keyword3'>:width</span> 300 <span class='keyword3'>:height</span> 200)
<span class='comment'>; (rectangle '(150 100) 300 200)</span>
  (rectangle '( 50  50) 50 50     <span class='keyword3'>:id</span> <span class='keyword3'>:a1</span>)
  (circle    (point/x+ a1.center 100) 25 <span class='keyword3'>:id</span> <span class='keyword3'>:a2</span>)
  (rectangle (point/y+ a2.center 100) 50 50 <span class='keyword3'>:id</span> <span class='keyword3'>:a3</span>)
  (circle    (point/x+ a3.center 100) 25 <span class='keyword3'>:id</span> <span class='keyword3'>:a4</span>)
  (connector <span class='keyword3'>:a1</span> <span class='keyword3'>:a2</span> <span class='keyword3'>:end2</span> <span class='keyword3'>:arrow</span>)
  (connector <span class='keyword3'>:a2</span> <span class='keyword3'>:a3</span> <span class='keyword3'>:end2</span> <span class='keyword3'>:arrow</span>)
  (connector <span class='keyword3'>:a3</span> <span class='keyword3'>:a4</span> <span class='keyword3'>:end2</span> <span class='keyword3'>:arrow</span>))
</pre>
<div align='center'>
<?xml version='1.0' encoding='utf-8' ?>
<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' baseProfile='full' xml:space='default' width='300' height='200'>
	
	<!-- a1 : rectangle -->
	<rect id='a1' x='25' y='25' width='50' height='50' fill='none' stroke='black' stroke-width='1' />
	<!-- a2 : circle -->
	<circle id='a2' cx='150' cy='50' r='25' fill='none' stroke='black' stroke-width='1' />
	<!-- a3 : rectangle -->
	<rect id='a3' x='125' y='125' width='50' height='50' fill='none' stroke='black' stroke-width='1' />
	<!-- a4 : circle -->
	<circle id='a4' cx='250' cy='150' r='25' fill='none' stroke='black' stroke-width='1' />
	<!-- connector from a1 to a2 -->
	<polyline fill='none' stroke='black' stroke-width='1' points=' 75.0,50.0 125.0,50.0' />
	<polyline fill='none' stroke='black' stroke-width='1' points='112.00962,57.5 125.0,50.0 112.00962,42.5' />
	<!-- connector from a2 to a3 -->
	<polyline fill='none' stroke='black' stroke-width='1' points=' 150.0,75.0 150.0,125.0' />
	<polyline fill='none' stroke='black' stroke-width='1' points='142.5,112.00962 150.0,125 157.5,112.00962' />
	<!-- connector from a3 to a4 -->
	<polyline fill='none' stroke='black' stroke-width='1' points=' 175.0,150.0 225.0,150.0' />
	<polyline fill='none' stroke='black' stroke-width='1' points='212.00961,157.5 225.0,150.0 212.00961,142.5' />

</svg>
</div>

<p class='fig_title'><a name='aw36ReN8sMQ'></a>Figure.2 簡単なサンプル-2</p>
<h2><a name='aOvOKsKAT1o'></a>4 線・塗り潰し・文字</h2>
<h3><a name='4HFjqmTuIU6'></a>4.1 ストローク</h3>
<h4><a name='ezUVhtPwl3J'></a>4.1.1 make-stroke 関数</h4>
<pre class='code'>
(make-stroke 10)       <span class='comment'>;; equal to (make-stroke :width 10)</span>

(make-stroke <span class='keyword3'>:blue</span>)    <span class='comment'>;; equal to (make-stroke :color :blue)</span>

(make-stroke <span class='keyword3'>:color</span> <span class='keyword3'>:red</span> <span class='keyword3'>:width</span> 3)

(make-stroke '(<span class='keyword3'>:color</span> <span class='keyword3'>:red</span> <span class='keyword3'>:width</span> 3))

</pre>
<pre class='code'>
(<span class='keyword1'>defun</span> <span class='keyword5'>make-stroke</span> <span class='keyword2'>&amp;key</span> <span class='keyword3'>:color</span> <span class='keyword3'>:width</span> <span class='keyword3'>:opacity</span> <span class='keyword3'>:linecap</span>
                        <span class='keyword3'>:linejoin</span> <span class='keyword3'>:miterlimit</span> <span class='keyword3'>:dasharray</span> <span class='keyword3'>:dashoffset</span>)
</pre>
<p class='tbl_title'><a name='8gU4HDke41S'></a>Table.1 make-stroke 関数のパラメータ</p>
<table align='center'>
<tr><th>parameter</th><th>description</th><th>default 値</th></tr>
<tr><td nowrap align='left'>:color</td><td align='left'></td><td nowrap align='left'>:black</td></tr>
<tr><td nowrap align='left'>:width</td><td align='left'></td><td nowrap align='left'>1</td></tr>
<tr><td nowrap align='left'>:opacity</td><td align='left'></td><td nowrap align='left'>nil</td></tr>
<tr><td nowrap align='left'>:linecap</td><td align='left'></td><td nowrap align='left'>nil</td></tr>
<tr><td nowrap align='left'>:linejoin</td><td align='left'></td><td nowrap align='left'>nil</td></tr>
<tr><td nowrap align='left'>:miterlimit</td><td align='left'></td><td nowrap align='left'>nil</td></tr>
<tr><td nowrap align='left'>:dasharray</td><td align='left'></td><td nowrap align='left'>nil</td></tr>
<tr><td nowrap align='left'>:dashoffset</td><td align='left'></td><td nowrap align='left'>nil</td></tr>
</table>
<p>　　</p>
<div align='center'>
<?xml version='1.0' encoding='utf-8' ?>
<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' baseProfile='full' xml:space='default' width='400' height='100'>
	
	<!-- line -->
	<polyline fill='none' stroke='black' stroke-width='4' stroke-dasharray='8 4 ' points=' 30.0,20.0 70.0,20.0' />
	<!-- line -->
	<polyline fill='none' stroke='black' stroke-width='4' stroke-dasharray='8 4 ' stroke-dashoffset='2' points=' 30.0,40.0 70.0,40.0' />
	<!-- line -->
	<polyline fill='none' stroke='black' stroke-width='4' stroke-dasharray='8 4 ' stroke-dashoffset='4' points=' 30.0,60.0 70.0,60.0' />
	<!-- line -->
	<polyline fill='none' stroke='black' stroke-width='4' stroke-dasharray='8 4 ' stroke-dashoffset='6' points=' 30.0,80.0 70.0,80.0' />
	<!-- line -->
	<polyline fill='none' stroke='black' stroke-width='8' points=' 130.0,20.0 170.0,20.0' />
	<!-- line -->
	<polyline fill='none' stroke='black' stroke-width='8' stroke-linecap='butt' points=' 130.0,40.0 170.0,40.0' />
	<!-- line -->
	<polyline fill='none' stroke='black' stroke-width='8' stroke-linecap='round' points=' 130.0,60.0 170.0,60.0' />
	<!-- line -->
	<polyline fill='none' stroke='black' stroke-width='8' stroke-linecap='square' points=' 130.0,80.0 170.0,80.0' />
	<!-- line -->
	<polyline fill='none' stroke='black' stroke-width='12' stroke-linejoin='miter' points=' 230.0,60.0 245.0,45.0 260.0,60.0' />
	<!-- line -->
	<polyline fill='none' stroke='black' stroke-width='12' stroke-linejoin='round' points=' 290.0,60.0 305.0,45.0 320.0,60.0' />
	<!-- line -->
	<polyline fill='none' stroke='black' stroke-width='12' stroke-linejoin='bevel' points=' 350.0,60.0 365.0,45.0 380.0,60.0' />

</svg>
</div>

<p class='fig_title'><a name='4fQnwjWZpzi'></a>Figure.3 dashoffset, linecap, linejoin のサンプル</p>
<h4><a name='bw6LIFogC17'></a>4.1.2 ＊default-stroke＊ 変数</h4>
<h3><a name='dBUd7L4C3dx'></a>4.2 フィル</h3>
<h3><a name='3kZ9FkounyK'></a>4.3 フォント</h3>
<h2><a name='7TyOD7TaDM2'></a>5 リファレンス</h2>
<h3><a name='hK4u1oSPHKz'></a>5.1 create-svg</h3>
<h3><a name='cO92wFlsFW7'></a>5.2 with-subcanvas</h3>
<h2><a name='dGdSPnvay5N'></a>6 更新履歴</h2>
<p>　更新履歴です。</p>
<hr>
<p class='footnote'><a name='footnote1' href='#footnote_ref1'>1</a> : SVG は Scalable Vector Graphics の略です。</p>
</body>
</html>
