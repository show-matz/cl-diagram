#<begin task ID:037QO0Om4sK>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2020/03/25
PRIORITY:3
STATUS:done
TITLE:fill に rule (nonzero|evenodd) を追加する
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view

　詳細は確認が必要。-> essentials 2nd PDF - p58

　default が nonzero とされているが、ビューワーによっては evenodd にみえる。

* log
** 2020/03/24

　起票。

** 2020/03/25

　やっつけた。ポイントは、デフォルトを nil にして、明示的に指定しない限りは出力
されないこと。ほとんど常に指定する必要がないからな。クローズ。

#<end update:2020/03/25 18:49:35 access:2020/03/25 18:49:43>
#<begin task ID:0pjVNFLLhuI>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/04/21
PRIORITY:3
STATUS:done
TITLE:inheritanceからgeneralizationへ
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　「UMLモデリングのエッセンス第３版」によれば、汎化は generalization であって 
inheritance ではない。これは直す必要がありそうだ。


* log
** 2015/04/21

　起票。そして着手。さらに完了。



&pagetag( "UML", "タグマップ#UML" )

#<end update:2020/02/20 16:19:49>
#<begin task ID:0sEJs0h1J6E>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/02/09
PRIORITY:3
STATUS:done
TITLE:locateの廃止
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view

　entity 派生クラスに課せられる locate メソッドを廃止し、必要な処理はコンストラ
クタでやることにする。


* log
** 2015/02/05

　起票、そして着手。

** 2015/02/06

　そもそも、locate メソッドは CL-SVG 開発着手当初の想定から必要と判断された機能
の遺物だ。それは、「ファイル内部での出現順に依存せず、タグ（当時は ID をそう呼ん
でいた）参照を可能とする」という想定で、実装が複雑になる上にそれほどメリットがな
いという理由により、後に前方参照のみが許可されるように変更されたのだ。この変更に
より、locate メソッドは事実上不要なモノとなってしまった。

　単純に不要なだけで害をなさないのであれば放っておけば良いが、そこには廃止したい
理由がある。要素に渡したパラメータはまだない（つまり自分よりも後ろで定義される）
要素を参照しているかもしれないから、マクロを使用し、lambda 式でくるむことで評価
を遅らせる。その評価をするのが locate メソッドというわけだ。

　locate が生まれた理由はこれでわかった。では、不要になった理由はなんだろう。も
ちろん前述の通り、当初の想定が覆ったからだが、結果として、locate は entity 派生
オブジェクトを new したそのほとんど直後に実行されることになってしまった。不要に
なった一番わかりやすい理由はこれだ。

　では、削除したい積極的な理由はなんだろう。それはいくつかあるのだが、とりあえず
言えるのは、無駄なクロージャの作成が鼻につくということ。パラメータの評価をひと呼
吸遅らせるためだけに、即値でないものは全て lambda 式でくるんでいるのだ。locate 
では「渡されたパラメータが function 型であれば（引数なしで）評価する」ことで実際
のパラメータを取得するということをしている。しかし、たとえば stroke-info などは 
CL-CLASS のオブジェクト、すなわちクロージャだ。結果、「locate を２回コールできな
い」ことになってしまう。

　ここまでをまとめるとすれば、以下のような感じだ。

	* 全方向参照という前提があったため、locate メソッドが必要になった。
	* しかし、全方向参照という前提が覆ったため、不要となった。
	* locate の仕組みは、無駄にクロージャを作らせている。



　まぁ、なんというか、すっきりさせたいわけだ。正直なところ、「全方向参照」という
要件が今後復活しないとも限らないが、現状の「なんか変な感じ」はどうにも我慢がなら
ないのだ。そんなわけで、「locate廃止」が本当に全てのクラスで実現可能かを調べてい
くことにしようか。

　調べた結果、以下のような感じに。

	class			parent		locate処理のコンストラクタへの移動
	entity			----		可能。
	css				entity		可能。
	text			entity		可能。
	raw-svg			entity		可能。
	line			entity		可能。
	connector		line		super::locate コールが最後。注意。
	path			entity		可能。
	arc				path		super::locate コールが最後。注意。
	polygon			entity		可能。
	shape			entity		可能。
	circle			shape		可能。
	ellipse			shape		可能。
	image			shape		可能。
	paragraph		shape		可能。
	rectangle		shape		可能。
	lib/grid		entity		可能。
	lib/textbox		shape		多分可能。
	lib/uml-actor	shape		多分可能。



** 2015/02/07

　さてさて、昨日調べた結果として、connector と arc がマズそうなことがわかった。
どうマズいかというと、基底クラスの locate を、自身の locate の最後で呼び出してい
ることだ。これは、基底クラスが保有するデータを書き換えるためで、これをそのままコ
ンストラクタに持っていくことはできない。なぜなら、基底クラスのコンストラクタ呼び
出しは必ず最初に行なわれるからだ。さて、これをどうするか。考えてみよう。

　最初に思いつく対処は、locate の存続だ。ただし、パラメータは全て関数的な値渡し
にして、locate は必ずコンストラクタ内部からコールすることにする。それだけ。正直
安直で気にいらない。気にいらないのには理由があって、それは CL-CLASS に protected 
のメソッドというものがないことだ。そのために、たとえば connector が line の 
locate をコールできるということは、外部からでもそれをコールできるということを意
味する。だからイヤなのだ。

　次に思いつくのは、connector と arc の基底クラスである line と path の locate 
を「緩くする」ことだ。connector と arc は、それぞれ基底クラスの points や d といっ
たパラメータを書き換える。コンストラクタの時点ではそれらは nil に設定されるのだ。
line と path がこの nil を許容するようにすれば、locate 呼び出しを最初に持ってく
ることができる。しかしこれも気にいらない。理由は、それを許してしまうと、普通に 
line を使用するときに points に nil を設定できてしまうからだ。まぁ、とりあえず 
'(0 0 0 0) とか指定してやれば良いのだが。


** 2015/02/08

　思いついたことがある。たとえば line のコンストラクタで、(class:type-id 
class:this) をやってみて、自身が本当に line だった場合だけチェックをする、という
のはどうだろうか。以下のコードで試してみた。

#+BEGIN_SRC lisp
 (class:define foo
   :constructors
   ((foo () ()
         (format t "constructor of foo called. type-id is '~A'.~%"
                   (class:type-id class:this)))))
 
 (class:define bar :inherits foo
   :constructors
   ((bar () ((super))
         (format t "constructor of bar called. type-id is '~A'.~%"
                   (class:type-id class:this)))))

#+END_SRC


　残念ながら、結果としては「ダメ」。理由は、bar の構築で (new foo) をしているも
のの、その時点では foo のコンストラクタから見える class:this は foo オブジェクト
でしかないからだ。これは CL-CLASS のバグのような気もするが、「オブジェクトの構築
が完了するまでは云々」という原則から考えても、決して間違いではないだろう。

　では、別の方策を考えなければならない。まず、「チェックはオブジェクトの構築が完
全に完了してから」とするべきだという原則を再度確認しよう。現在の locate を丸ゴト
コンストラクタに持っていこうとしているのが間違いなのだ。データメンバの設定は（た
とえ不完全であっても）コンストラクタでやり、チェックのみを独立したメソッドでやる。
それなら、そのチェックメソッドが public でも問題ないだろう。

　というわけで、現時点で妥当と思える方針をまとめてみよう。

	* とにかく、マクロでクロージャを作成して locate で確定させることはヤメる。
	* これで、locate がやることはパラメータ渡しでないデータメンバの生成、およびチェックだけになる。
	* 上記のうち、チェック以外をコンストラクタに持っていく。そしてチェックは check メソッドに。

** 2015/02/09

　一応、昨日の段階で修正はほぼ完了した。結構バタバタと直した感じなので、網羅的な
テストの整備が待たれる。ひとまずクローズで良いか。

#<end update:2020/02/20 12:52:47>
#<begin task ID:0B9y2Iy4cna>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/05/13
PRIORITY:3
STATUS:done
TITLE:やっぱりpackageのタブに名前を描画する
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:0B9y2Iy4cna.20150513.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　やっぱりできるべきだ。contents が存在する場合、パッケージ名をタブ部分に描画する。


* log
** 2015/05/12

　起票。

　‥‥‥さて、このタスクに着手するとしようか。おそらくなのだけれど、タブのサイズを
動的に計算しなきゃならないので修正量は多そうだ。腰をすえてかかる必要があるな。

** 2015/05/13

　とりあえず、直観に従って書いてみた。概ねできてるが、やっぱりおかしい。あと、やっ
ぱりタブ内部にテキストを書く場合は余白が必要なようだ。

　マージン設定を追加して、必要な修正を施す‥‥‥よし、できた。っぽい。クローズ。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150513
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-package)
 (create-svg (:width 400 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-font* (font :family "Courier New" :width-spice 0.8 :line-spacing 3))
           (*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
	   (uml-package :foo 200 200 :width 300 :height 300
					:contents
					((uml-package :foobar 150 150 :keyword "container" :width 200 :height 200
								  :contents
								  ((uml-package :quux 100 100 :keyword :foo?)))))))
;;END_SVG
#+END_SRC

[[./0B9y2Iy4cna.20150513.svg]]


&pagetag( "改善", "タグマップ#改善" )
&pagetag( "UML／パッケージ図", "タグマップ#UML／パッケージ図" )

#<end update:2020/02/21 09:31:11>
#<begin task ID:0NICe1Ad5yJ>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/03/03
PRIORITY:3
STATUS:done
TITLE:line-spacingとwidth-spiceをfont-infoメンバにする
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　主に paragraph で使用していた width-spice と line-spacing だが、これらを 
font-info のメンバということにしようと思う。検討し、実装する。


* log
** 2015/03/03

　起票。着手。まずは影響範囲から明らかにしようか。grep してみた感じ、以下のクラ
スで使用しているようだ。

	* paragraph
	* textbox
	* uml-note
	* uml-usecase


　基本的な方針は、最初に font-info にメンバを追加し、上記のクラス群においてそち
らを使用するように変更。最後に上記クラス達からメンバやパラメータを削除する。

　しかし、width-spice はいいとしても、line-spacing は本当に font-info のメンバと
して良いものだろうか？　まぁ、いいだろう。では作業開始。

　‥‥‥ひとまずできた。思いつくこともないので、クローズ。



&pagetag( "仕様変更", "タグマップ#仕様変更" )
&pagetag( "font-info", "タグマップ#font-info" )

#<end update:2020/02/20 16:11:32>
#<begin task ID:1unYYFdqGmj>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/04/13
PRIORITY:3
STATUS:done
TITLE:外部ステンシルを取り込んだ場合の扱いについて
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　近い将来、UML関連のステンシルを CL-SVG に取り込む作業が予定されている。また、今
後もステンシルとして実装されたものが CL-SVG に取り込まれることはありえる。この時、
既存のコードで (load-stencil :foo) としているものがエラーになってしまうことにな
るが、これは避けたい事態である。方策を考え、実装する。


* log
** 2015/04/07

　起票。そして着手。

　まぁ、やりたいことは大体決まっている。過去外部ステンシルだったが取り込んだもの
のリストを load-stencil に保持させ、マッチした場合には無視するというものだ。もち
ろん、なんらかの警告は出した方が良い。そのあたりの方式を検討する必要があるな。

　とりあえず、単純に対象のキーワードをリストにしたものを保持し、common-lisp:find 
でもって探す、という方法をとるとしよう。見つからなければ従来どおりの処理をするし、
見つかれば警告を発して無視する、と。

　ここで問題。警告はどうしようか？　これは懸案事項であるエラーとも関係するので、
〔別タスク(TASK-0064：エラーと警告の整備)〕でちゃんとやるとしよう。

** 2015/04/08

　CL-STL を参照したところ、警告は普通に warn をコールしていただけだった。これで
たしかに CL-PREFAB 連携では警告が出力されるが、他の行とは別の出方をしているので、
これはこれで気持ち悪い。「実用CommonLisp」を読みなおして、警告のハンドリングの仕
方をおさらいしなきゃかもだな。

　それはそれとして、load-stencil の冒頭部分は現在以下のようになっている。

#+BEGIN_SRC lisp
 (defun load-stencil (stencil-name)
   (check-type stencil-name keyword)
   (let ((tmp (find stencil-name '(:foo :bar) :test #'eq)))
     (when tmp
       (warn "no more need load-stencil for ~A." stencil-name)        ;;ToDo : temporary...
       (return-from load-stencil)))
   (unless include-cache
     (setf include-cache (make-hash-table :test 'eq)))

#+END_SRC

　最初、取り込み済みステンシルのキーワードと日付の組みを include-cache に入れて
おけばいいのでは？　と思ったが、これはダメだった。なぜなら、include-cache にすで
にエントリが登録されてしたとしても、やはりファイルを探してその更新日時と比較する、
ということをやっているからだ。

　次の問題は、上記コードでは '(:foo :bar) としている部分。これは長期的には長いリ
ストになる。これをどうしようか、という話。まぁ関数を包むレキシカルコンテキストで
いいかな‥‥‥結局、こうなった。

#+BEGIN_SRC lisp
 (let ((include-cache nil)
       (warn-list     '(:foo :bar)))    ;;ToDo : temporary...
   (defun reset-stencil-load-cache ()
       (setf include-cache nil))
   (defun load-stencil (stencil-name)
     (check-type stencil-name keyword)
     (when (find stencil-name warn-list :test #'eq)
       (warn "no more need load-stencil for ~A." stencil-name)        ;;ToDo : temporary...
       (return-from load-stencil))
     (unless include-cache
       (setf include-cache (make-hash-table :test 'eq)))
                :
                :

#+END_SRC

　あとは、〔エラーと警告の整備タスク(TASK-0064：エラーと警告の整備)〕の結果を受
けて作業するとしようか。

　‥‥‥その前に、ちょっとメモ。基本的に、CL-SVG の機能を裸でコールするのであれば、
警告であれエラーであれ、そのまま通知してしまって良いと思う。つまり、キャッチしな
いということだ。で、CL-APPS.exe cl-svg とか CL-APPS.exe cl-prefab とかの場合、
呼び出し元でキャッチして適切にハンドリングしましょうね、という話だ。

　その上で、警告やエラーをどう扱いましょうか、どう定義しましょうか、という話にな
るのだけれど、結局 CL-SVG のコード以前にエラーになる可能性は常に残る。定義されて
いない関数とか変数とか、括弧の不整合とか。こういったモノたちは独自のエラーに封入
できないので、その対応は必ず必要になる‥‥‥これは気にいらないが、仕方ない。

** 2015/04/13

　さて、このタスクに帰ってきた。とりあえず、ここ数日の間に warn 呼び出しは 
throw-caution 呼び出しになった。warn-list の保守はまだ始まっていなくて、それは実
際ライブラリから取り込まれたステンシルがまだないからだ。

　このような状況で、何かこのタスクについてできることはあるだろうか？　とりあえず
のテストとして、現状ダミーで warn-list に書かれている :foo を load-stencil して
みた。結果、ちゃんと警告が出てくれたし、処理は続行された。ということは、このタス
クはクローズして良いのではないだろうか。いいと思う。クローズ。





&pagetag( "機能追加", "タグマップ#機能追加" )
&pagetag( "ステンシル", "タグマップ#ステンシル" )

#<end update:2020/02/20 16:17:43>
#<begin task ID:2e8d0PJT6mH>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/03/18
PRIORITY:3
STATUS:rejected
TITLE:ラベル向けのline端点取得機能追加
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　UML の association 族のためのサポート機能。線の端点と、端点における線の傾きを
返すメソッドを提供する。


* log
** 2015/03/06

　起票。〔中心点の作業(TASK-0006：lineの中心点を取得可能にする)〕はほぼ１ヶ月前
だったか。ラベルの描画位置を確定するためにやらなきゃならないことは結構あったので、
中心点のやつと処理を共用できたらいいな。

** 2015/03/18

　冷静に考えると、line クラスには get-endpoints というメソッドがすでにあった。し
かし、point オブジェクトの cons を返すというイマイチな作り。これをそのまま使用す
るのであれば、まぁこのタスクでやることはない。が、どうしたものか。

　‥‥‥結局、line クラスの get-endpoints メソッドでなんとかなると判断。このタスク
は却下。


&pagetag( "機能追加", "タグマップ#機能追加" )
&pagetag( "line", "タグマップ#line" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/20 16:13:07>
#<begin task ID:2KKIRTnrXYV>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/02/10
PRIORITY:3
STATUS:done
TITLE:ステンシルのリロードをサポートする
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　stencilファイルの作成をしていると、何度もリロードをしたくなる。が、
load-stencil がロードしたステンシルを覚えてしまっているため、CL-SVG 本体をリロー
ドする必要がある。これをなんとかするための方式を検討し、実装する。


* log
** 2015/02/09

　起票。

　最初は reset-stencil-load-cache という関数でも作成してハッシュ表をクリアしよう
かと思っていたが、それよりもファイルの更新日付を見た方が良い気がしてきた。

　だがしかし。推移的な依存関係をどうするかという問題があるのだ。大丈夫だろうか。
基本的には、

	1.要求されたステンシルがまだハッシュ表に登録されていなければロードする。この
	  際、ステンシルファイルの更新日付をハッシュ表に記録する。
	2.上記以外の場合、過去にロードした時点のファイル更新日付を取得し、現在のステ
	  ンシルファイルの更新日付と比較する。
		1.比較の結果、現在のステンシルファイルの日付の方が新しければロードし、ハッ
		  シュ表に記録してあるファイル更新日付も更新する。
		2.上記以外の場合、ロードの必要がないと判断し、何もしない。← '''ここ、問題。'''


　問題は最後のポイントだ。そのステンシルファイル自体が更新されていないとしても、
そのステンシルファイルが依存する別のファイルは更新されているかもしれない。それに
よって、動作が変わるかもしれないのだ。そしてそれは再帰的な問題だ。

　これをまともに解決しようと思ったら、結構な仕組みを導入する必要があるだろう。そ
れだったらやっぱり reset-stencil-load-cache の方が良いのではないだろうか。

　しかし、これはどちらかを選ばなければならない問題だろうか。更新日付による制御は
提供しておき、推移的なファイルの問題に関しては reset-stencil-load-cache で対処
する、というのではダメだろうか。

** 2015/02/10

　昨日、問題をとりあえず二択に仕立てた。それは、以下のようなものだった。

	* reset-stencil-load-cache を提供し、リロードが必要な場合はこれをコールさせ
	  る。
	* 上記に加えて、ファイルの更新日付を確認する方式を実装する。load-stencil で
	  直接ロードされるステンシルファイルの更新であれば、これで対処できる。


　というわけで、まずはいずれにせよやることになる reset-stencil-load-cache から実
装してみよう。

　‥‥‥できた。実は、キャッシュに使用しているハッシュ表がステンシル名を示すキーワー
ドでなく pathname を保存するようになってしまっていた。そのハッシュ表は eq で比較
をするようになっていたため、実はキャッシュによる多重ロード回避が全然機能していな
かったのだ。あれまぁ。でもこれも同時に修正した。

　では次。更新日付を使用した処理について。これは簡単だった。pathnames:get-time 
を使えば良かったからだ。ひとまず良好に動作しているようなので、クローズ。




&pagetag( "改善", "タグマップ#改善" )
&pagetag( "ステンシル", "タグマップ#ステンシル" )

#<end update:2020/02/20 16:04:40 access:2020/02/20 16:04:47>
#<begin task ID:2O6Y7IfFQQ8>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/05/19
PRIORITY:3
STATUS:done
TITLE:uml-nodeの作成
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:2O6Y7IfFQQ8.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　配置図のための uml-node のステンシルを作成する。


* sample

[[./2O6Y7IfFQQ8.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-node)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
;	   (*default-font*   (font :family "Times New Roman" :size 11 :width-spice 0.7 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1))
	   (*uml-node-depth* 20))
   (macrolet ((state (&rest args) `(uml-state ,@args))
			  (tran  (&rest args) `(uml-state-tran ,@args)))
	 (create-svg (:width 600 :height 600)
		(grid)
		(uml-node "Web server" 300 300 :width 200 :height 200 :keyword :server :id :srv
				  :contents
				  ((uml-class :foo 100 100)))
		(let ((*uml-node-fill-1* :lightblue)
			  (*uml-node-fill-2* :skyblue)
			  (*uml-node-depth*  10))
		  (let ((x srv[center])
				(y (- srv[middle] 200)))
			(uml-node :pc00 (+ x -130) y) (connector :$1 :srv :line-style :B3T1)
			(uml-node :pc01 (+ x    0) y) (connector :$1 :srv :line-style :B2T2)
			(uml-node :pc02 (+ x  130) y
						   :keyword :foo) (connector :$1 :srv :line-style :B1T3))
		  (let ((x (+ srv[center] 200))
				(y srv[middle]))
			(uml-node :pc05 x (+ y  80)) (connector :$1 :srv :line-style :CC)
			(uml-node :pc04 x (+ y   0)) (connector :$1 :srv :line-style :CC)
			(uml-node :pc03 x (+ y -80)) (connector :$1 :srv :line-style :CC))
		  (let ((x srv[center])
				(y (+ srv[middle] 200)))
			(uml-node :pc08 (+ x -130) y) (connector :$1 :srv :line-style :T3B1)
			(uml-node :pc07 (+ x    0) y) (connector :$1 :srv :line-style :T2B2)
			(uml-node :pc06 (+ x  130) y) (connector :$1 :srv :line-style :T1B3))
		  (let ((x (- srv[center] 200))
				(y srv[middle]))
			(uml-node :pc09 x (+ y  80)) (connector :$1 :srv :line-style :CC)
			(uml-node :pc10 x (+ y   0)) (connector :$1 :srv :line-style :CC)
			(uml-node :pc11 x (+ y -80)) (connector :$1 :srv :line-style :CC))))))
;;END_SVG
#+END_SRC

* log
** 2015/05/18

　起票。

** 2015/05/19

　それでは着手。基本的に、以下の要素が必要だ。

	* キーワードを明示できる
	* 名前を表示できる
	* contents を配下に従えるコンテナとなる
	* 上記より、width / height 明示的に指定することもできる
	* その他、font / fill / stroke / link / layer / id


　だいたいこんなところだろうか。結果、uml-node は uml-package に酷似する。そのへ
んから手をつけてみよう。


　‥‥‥とりあえず、動作するところまではいった。残すところ、「上端および右端へのコ
ネクタ接続において、接続点を立体的っぽく頑張るのか」という課題がある。あと、ToDo
コメントが１つくらいあるかも。


　立体っぽく頑張ってみた。このページ冒頭のサンプル画像を参照のこと。あとは ToDo 
コメントか。


　‥‥‥これも解消。クローズ。




&pagetag( "ステンシル作成", "タグマップ#ステンシル作成" )
&pagetag( "UML／配置図", "タグマップ#UML／配置図" )

#<end update:2020/02/21 09:52:14>
#<begin task ID:2Oy4hZw41ku>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/05/18
PRIORITY:3
STATUS:done
TITLE:状態遷移の作成
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:2Oy4hZw41ku.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　ステートマシン図のための状態遷移を作成する。


* sample

[[./2Oy4hZw41ku.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-state)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 400 :height 200)
		(grid)
		(uml-state :state1 100 75)
		(uml-state :state2 300 $1[middle])
		(uml-state-tran :$2 :$1 :label :click)
		(uml-state-tran :$2 :$3 :line-style :BB
						:label (:trigger :cancel :condition :focused :action "close form"))))
;;END_SVG
#+END_SRC

* log
** 2015/04/17

　起票。そして着手。

　基本的な考えは単純で、uml-dependency あたりを実線にするだけだ。しかし、以下の
疑問がある。

	* ステレオタイプって必要だっけ？
	* 他の何かを指定可能じゃなかったっけ？


　とりあえず、uml-dependency からコピーして uml-state-tran クラスを作成。ひとま
ず動作するようにはなった。しかし、*default-stroke* をベースにして実線ストローク
を作成するところで問題発覚。*default-stroke* の dasharray が非 nil だと、以下の
記述でそれが実現できないのだ。

#+BEGIN_SRC lisp
 (stroke :dasharray nil :base *default-stroke*)
#+END_SRC

　この問題は〔独立したタスク(TASK-0068：strokeのbase指定でnil上書きできない)〕と
して扱うことにした。終わったら戻ってこよう。


　‥‥‥当日で終わってしまった。というか、「*default-stroke* をベースにして実線スト
ロークを作成」しているところなんて、既存の UML ステンシルにたくさんあったぞ。こ
れまで気付かなかったのはマズいなぁ。

　さて、そういうわけなので、前述の確認事項の情報が揃うまではしばらくペンディング。
他の作業をやろうか。

** 2015/05/16

　保留状態を解除。とりあえず、以下の作業がある。

	* ステレオタイプ（というかキーワード）はとりあえずいらない。
	* uml-state の内部に書けるやつを指定可能。


　‥‥‥では、頑張ってみようか。「uml-state の内部に書くやつ」は、現状ではキーワー
ドか文字列で指定している。しかし、状態遷移のラベルにも指定できるようにする以上、
クラス化した方が良さそうだ。

** 2015/05/18

　作業を再開。クラス名は、uml-state-tranlabel とした。このクラスは、３つのパラメー
タをとる。いずれも文字列かキーワードシンボルだ。

	* トリガー
	* ガード条件
	* アクション

　で、これを トリガー[ガード条件]/アクション という書式で文字列化してコネクタ線
に添える、と。となると、:draw-beside-line メソッドを持っているクラスからコピって
くるのが良いだろう。uml-keyword-info クラスだな。

　‥‥‥ひとまず、動作はするところまで来た。では、この uml-state-tranlabel を状態内
部に記述するという作業をやるとしようか。〔もちろんuml-stateの作成をしていた別タ
スク(TASK-0065：uml-stateの作成)〕でだ。

　‥‥‥ひとまずクローズ。


&pagetag( "ステンシル作成", "タグマップ#ステンシル作成" )
&pagetag( "UML／状態マシン図", "タグマップ#UML／状態マシン図" )

#<end update:2020/02/21 12:02:13 access:2020/02/21 12:02:22>
#<begin task ID:378zB8R0hlD>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/02/13
PRIORITY:3
STATUS:done
TITLE:shape派生クラスのコンポジション化サポート
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　rectangle と textbox、ellipse と uml-usecase など、shape 派生クラスをさらに複
合化させることは今後も発生する。そこで、shape 自体にそのサポートをさせることはで
きないだろうか。検討し、可能ならば仕様を決めて実装する。


* log
** 2015/02/12

　起票。

　そして着手。要件のところに書いた textbox や uml-usecase は、実際にはできていな
い。というか、textbox の作成にうんざりしてしまったのだ。uml-usecase で同じように
面倒な思いをしたくない。だから、なんとか cl-svg:shape にサポート機能を組み込みた
い‥‥‥というわけだ。

　さて、今考えているポイントは以下の通りだ。

	* 基本的には、cl-svg:shape から直接派生するクラス ── これをひとまず 
	  rectangle として説明しよう ── が draw を実装する。
	* cl-svg:shape は、空の on-postdraw メソッドを定義しており、rectangle クラス
	  の draw 実装は自身の描画の後に on-postdraw をコールする。rectangle を直接
	  使用している限り、このコールは空振りに終わる。
	* rectangle から派生する textbox クラスは、on-postdraw メソッドをオーバーラ
	  イドする。そこで、rectangle の上にテキストを描画する。


　基本的にはこんな感じだ。いささか回りくどい仕組みになっているのは、shape および
その基底クラスである entity が持っている以下のデータメンバの出力を考慮しなければ
ならないからだ。

	* entity の id
	* shape の link

　おさらいしよう。通常は rectangle などに id 属性を出力するが、link が指定されて
いる場合は rectangle タグを a タグで括らなければならず、その場合には a タグをさ
らに括る g タグにその id を設定する必要がある（そしてその場合、rectangle には id 
属性はつかない）。

　一般に、CL-SVG パッケージにおける shape 派生クラスというのは皆単独のタグで出力
される（おっと paragraph のことを忘れていた）。だから基本的には id 属性はそのタ
グそのものに付加されるのだ。だが、link があったり複数の要素からなるオブジェクト
（shape派生じゃないけど、endmark付きのlineとか）は、グループで括ってそれに id を
付ける必要があるというわけだ。

** 2015/02/13

　で、shape がコンポジション化をサポートとするとなると、「グループで括ってやる」
必要を生じさせる事由がひとつ増えることになる。結局、「コンポジション化」というの
は「複数の要素で描画すべきもの」という意味だからだ。問題は、on-postdraw のデザイ
ンでいくと、あくまで draw を実行する主体は（例えば）rectangle であり、その派生ク
ラスは on-postdraw を実装してフックを仕込むだけ。にも関わらず、rectangle 自身が
「グループ化が必要かどうか判断しなければならない」のだ。

　これを実現するには、派生クラスがオーバーライドできるメソッドがもうひとつ必要に
なる。is-composition だ。これは shape::has-link を衣替えするかたちになるだろう。
shape のデフォルト実装では is-composition は has-link と同じ結果を返すし、
is-composition が導入されたら、has-link はおそらく使用されなくなるからだ。で、
rectangle の派生クラスは is-composition に無条件で t を返すようにする。これで 
rectangle はリンクの有無に関わらずグループタグで括るし、本体描画後に on-postdraw 
をコールすることで rectangle 派生クラスの描画もできるという寸法だ。古いな寸法。

　とりあえずデザインとしてはこんなところだろうか。それでは実装してみようか。

　‥‥‥名前は post-draw に変えた。出来心で、pre-draw も追加した。そして、これら２
つを利用することで、link やグループのためのタグ出力を shape に集約できるんではな
いかと考え始める。これは circle をモデルに作業してみようか。


　‥‥‥結構できた。そして、この仕組みを利用して group という抽象クラスも作成。ライ
ブラリ作成を簡単にするためのモノだ。以下のライブラリもそれを使ったかたちに書き換
えた（というか、今回新規作成したものもある）。

	* uml-actor
	* uml-note
	* uml-package


　いいでしょう。クローズ。



&pagetag( "改善", "タグマップ#改善" )
&pagetag( "shape", "タグマップ#shape" )

#<end update:2020/02/20 16:05:25>
#<begin task ID:3ilbfuOFbA9>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/04/20
PRIORITY:3
STATUS:done
TITLE:クラス操作のUML準拠作業
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:3ilbfuOFbA9.20150420.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　「UMLモデリングのエッセンス第３版」より、クラスの操作について以下の対応をする。

	1.クラスの操作は :methods でなく :operations とする。
	2.可視性には、:public :protected :private :package がある。
	  それぞれ、+ # - ~ の4文字で表す。
	3.属性の書式は以下の通り。
		1.可視性 名前(パラメータ) : タイプ {プロパティ文字列}


* log
** 2015/04/20

　起票。そして着手。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150420
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
;           (*default-font*   (font :family "Arial" :size 11 :width-spice 0.65))
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-class :test-class 200 100 :keyword :test
				  :operations (:method1
							   (:protected :method2 :type :string)
							   (:private   :method3 :property :readonly)
							   (:package   :method4 :abstract t :params (:arg1 :arg2) :type :int)
							   (:public    :method5 :params (:arg) :type :int :property "foo")))))
;;END_SVG
#+END_SRC

[[./3ilbfuOFbA9.20150420.svg]]

　‥‥‥大丈夫みたい。クローズ。




&pagetag( "UML／クラス図", "タグマップ#UML／クラス図" )
&pagetag( "uml-class", "タグマップ#uml-class" )

#<end update:2020/02/21 12:01:20>
#<begin task ID:3iPbh1Ccks9>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/03/30
PRIORITY:3
STATUS:done
TITLE:connectorをもっと賢くする：LRパターン
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:3iPbh1Ccks9.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　〔TASK-0042：connectorをもっと賢くする〕から派生したタスク。:LR のパターンでの
挙動を整理し、実装する。


* 現状

[[./3iPbh1Ccks9.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 400 :height 600 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-textbox-align* :center)
		   (*default-connector-style* :LR))
	   (macrolet ((box (x y w h id)
					`(rectangle ,x ,y ,w ,h :id ,id
								:contents
								((text (/ ,w 2) (/ ,h 2)
									   ,(string-downcase (symbol-name id))
									   :align :center)))))
		 ;;-------------------------------------------
		 (let ((x1  50)
               (x2 150))
		   (box x1  50 40 40 :d01) (box x2  50 40 40 :f01) (connector :f01 :d01 :end2 :arrow)
		   (box x1 130 40 40 :d02) (box x2 100 40 40 :f02) (connector :f02 :d02 :end2 :arrow)
		   (box x1 180 40 40 :d03) (box x2 210 40 40 :f03) (connector :f03 :d03 :end2 :arrow))
		 (let ((x1  70)
               (x2 130))
		   (box x1 320 40 40 :d04) (box x2 270 40 40 :f04) (connector :f04 :d04 :end2 :arrow)
		   (box x1 380 40 40 :d05) (box x2 430 40 40 :f05) (connector :f05 :d05 :end2 :arrow))
		 (let ((x1 300)
               (x2 250))
		   (box x1 100 40 40 :d06) (box x2  40 40 40 :f06) (connector :f06 :d06 :end2 :arrow)
		   (box x1 170 40 40 :d07) (box x2 230 40 40 :f07) (connector :f07 :d07 :end2 :arrow))
		 (let ((x1 330)
               (x2 270))
		   (box x1 360 40 40 :d08) (box x2 340 40 40 :f08) (connector :f08 :d08 :end2 :arrow :line-style :L1R1)
		   (box x1 420 40 40 :d09) (box x2 420 40 40 :f09) (connector :f09 :d09 :end2 :arrow :line-style :L2R2)
		   (box x1 510 40 40 :d10) (box x2 530 40 40 :f10) (connector :f10 :d10 :end2 :arrow :line-style :L3R3)
		 (box 70 500 40 40 :d11) (box 90 530 40 40 :f11) (connector :f11 :d11 :end2 :arrow)))))

;;END_SVG
#+END_SRC

* log
** 2015/03/25

　起票。

** 2015/03/30

　着手。

　‥‥‥一応できたかな。とりあえずクローズ。




&pagetag( "改善", "タグマップ#改善" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/21 12:15:45>
#<begin task ID:3lelWhCFaIV>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/05/22
PRIORITY:3
STATUS:done
TITLE:uml-componentの作成
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:3lelWhCFaIV.20150518.png,3lelWhCFaIV.20150522.svg,3lelWhCFaIV.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　コンポーネント図のための uml-component のステンシルを作成する。


* sample

[[./3lelWhCFaIV.sample.svg]]

** source
#+BEGIN_SRC lisp
;;BEGIN_SVG sample
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-component)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
;	   (*default-font*   (font :family "Times New Roman" :size 11 :width-spice 0.7 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (macrolet ((state (&rest args) `(uml-state ,@args))
			  (tran  (&rest args) `(uml-state-tran ,@args)))
	 (create-svg (:width 600 :height 600)
		(grid)
		(let ((*uml-component-iconsize*   30)
			  (*uml-component-iconoffset* 10))
		  (uml-component "Web server" 300 300 :width 200 :height 200 :keyword :server :id :srv
						 :contents
						 ((uml-class :foo 100 100))))
		(let ((*uml-component-fill* :skyblue))
		  (let ((x srv[center])
				(y (- srv[middle] 200)))
			(uml-component :pc00 (+ x -130) y) (connector :$1 :srv :line-style :B3T1)
			(uml-component :pc01 (+ x    0) y) (connector :$1 :srv :line-style :B2T2)
			(uml-component :pc02 (+ x  130) y
						   :keyword :foo) (connector :$1 :srv :line-style :B1T3))
		  (let ((x (+ srv[center] 200))
				(y srv[middle]))
			(uml-component :pc05 x (+ y  80)) (connector :$1 :srv :line-style :CC)
			(uml-component :pc04 x (+ y   0)) (connector :$1 :srv :line-style :CC)
			(uml-component :pc03 x (+ y -80)) (connector :$1 :srv :line-style :CC))
		  (let ((x srv[center])
				(y (+ srv[middle] 200)))
			(uml-component :pc08 (+ x -130) y) (connector :$1 :srv :line-style :T3B1)
			(uml-component :pc07 (+ x    0) y) (connector :$1 :srv :line-style :T2B2)
			(uml-component :pc06 (+ x  130) y) (connector :$1 :srv :line-style :T1B3))
		  (let ((x (- srv[center] 200))
				(y srv[middle]))
			(uml-component :pc09 x (+ y  80)) (connector :$1 :srv :line-style :CC)
			(uml-component :pc10 x (+ y   0)) (connector :$1 :srv :line-style :CC)
			(uml-component :pc11 x (+ y -80)) (connector :$1 :srv :line-style :CC))))))
;;END_SVG
#+END_SRC

* log
** 2015/04/17

　起票。

** 2015/05/18

　起票から１ヶ月。ようやく着手。

　uml-class から派生しようかとも思ったが、以下のサイトなどを見て気が変わった。

	* http://www.itsenka.com/contents/development/uml/component.html


　一応、上記サイトから画面イメージだけ集約した画像を貼り付けておこう。これらを見
る限り、uml-package のような感じで contents を配下におけるコンテナにした方が良さ
そうだ。

[[./3lelWhCFaIV.20150518.png]]

** 2015/05/19

　さて、〔TASK-0088：uml-nodeの作成〕が完了して、これを流用してコンポーネントの
ステンシルを作成しようという気になっている。その方向でやってみようか。

** 2015/05/22

　別作業のため数日放置。頑張ったため、コンポーネントアイコンの描画までできた。最
後に、コンテンツとして描画してアイコンなどがズレないことを確認しよう。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150522
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-package)
 (load-stencil :uml-component)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 400 :height 400)
		(grid)
		(uml-package "foo package" 200 200 :width 300 :height 300 :id :pkg
					 :contents
					 ((uml-component :foo 100 100)
					  (uml-component :bar 200 200)))))
;;END_SVG
#+END_SRC

[[./3lelWhCFaIV.20150522.svg]]

　‥‥‥ほかに思いつくこともないのでクローズ。



&pagetag( "ステンシル作成", "タグマップ#ステンシル作成" )
&pagetag( "UML／コンポーネント図", "タグマップ#UML／コンポーネント図" )

#<end update:2020/02/21 09:22:53>
#<begin task ID:3xF9q5MqbsO>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/05/07
PRIORITY:3
STATUS:wait
TITLE:pattern要素の追加
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!edit


　grid でやっているような pattern を CL-SVG としてサポートする。


* log
** 2015/05/07

　起票。



&pagetag( "機能追加", "タグマップ#機能追加" )
&pagetag( "pattern", "タグマップ#pattern" )

#<end update:2020/02/20 16:20:48 access:2020/02/21 08:55:23>
#<begin task ID:3LpasLFiuyW>
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/03/03
PRIORITY:3
STATUS:done
TITLE:必須パラメータの明確化
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　これまで、ステンシルのインスタンスを作成する（たいていはクラスと同名の）マクロ
は、全てのパラメータをキーワードパラメータとしていた。しかし、使い慣れてくると逆
にどれが「必須パラメータ」なのかわからなくなってしまう。任意の順番で指定できるメ
リットよりもそのデメリットの方が大きいようだ。必須パラメータについては &key から
外すことにする。


■作業状況

	【場所】	【名前】					【完了】
	lib		grid					○
	lib		test-util				○
	lib		textbox					○
	lib		uml-actor				○
	lib		uml-dependency			○
	lib		uml-implementation		○
	lib		uml-generalization			○
	lib		uml-interface			○
	lib		uml-note				○
	lib		uml-package				○
	lib		uml-stereotype-info		○
	lib		uml-usecase				○
	src		label-info				○
	src		link-info				○
	src		endmark-info			○
	src		stroke-info				○
	src		font-info				○
	src		arc						○
	src		circle					○
	src		connector				○
	src		css						○
	src		ellipse					○
	src		image					○
	src		line					○
	src		paragraph				○
	src		path					○
	src		polygon					○
	src		raw-svg					○
	src		rectangle				○
	src		text					○


* log
** 2015/03/03

　事後起票。すぐに着手状態に。昨日あたりから lib 内のコードには手をつけていたの
で、残るは src 側の作業。ひとまず順番に片付けていこう。

　‥‥‥わりあい簡単に完了した。思いつくこともないので、クローズ。




&pagetag( "仕様変更", "タグマップ#仕様変更" )

#<end update:2020/02/20 16:11:24>
#<begin task ID:3NaPGEbsNRQ>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/03/30
PRIORITY:3
STATUS:done
TITLE:connectorをもっと賢くする：BTパターン
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:3NaPGEbsNRQ.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　〔TASK-0042：connectorをもっと賢くする〕から派生したタスク。:BT のパターンでの
挙動を整理し、実装する。


* 現状

[[./3NaPGEbsNRQ.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 600 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-textbox-align* :center)
		   (*default-connector-style* :BT))
	   (macrolet ((box (x y w h id)
					`(rectangle ,x ,y ,w ,h :id ,id
								:contents
								((text (/ ,w 2) (/ ,h 2)
									   ,(string-downcase (symbol-name id))
									   :align :center)))))
		 ;;-------------------------------------------
		 (let ((y1  50)
               (y2 150))
		   (box  50 y1 40 40 :f01) (box  50 y2 40 40 :d01) (connector :f01 :d01 :end2 :arrow)
		   (box 130 y1 40 40 :f02) (box 100 y2 40 40 :d02) (connector :f02 :d02 :end2 :arrow)
		   (box 180 y1 40 40 :f03) (box 210 y2 40 40 :d03) (connector :f03 :d03 :end2 :arrow))
		 (let ((y1  70)
               (y2 130))
		   (box 320 y1 40 40 :f04) (box 270 y2 40 40 :d04) (connector :f04 :d04 :end2 :arrow)
		   (box 380 y1 40 40 :f05) (box 430 y2 40 40 :d05) (connector :f05 :d05 :end2 :arrow))
		 (let ((y1 300)
               (y2 250))
		   (box 100 y1 40 40 :f06) (box  40 y2 40 40 :d06) (connector :f06 :d06 :end2 :arrow)
		   (box 170 y1 40 40 :f07) (box 230 y2 40 40 :d07) (connector :f07 :d07 :end2 :arrow))
		 (let ((y1 330)
               (y2 270))
		   (box 360 y1 40 40 :f08) (box 340 y2 40 40 :d08) (connector :f08 :d08 :end2 :arrow :line-style :B1T1)
		   (box 420 y1 40 40 :f09) (box 420 y2 40 40 :d09) (connector :f09 :d09 :end2 :arrow :line-style :B2T2)
		   (box 510 y1 40 40 :f10) (box 530 y2 40 40 :d10) (connector :f10 :d10 :end2 :arrow :line-style :B3T3)
		 (box 500 70 40 40 :f11) (box 530 90 40 40 :d11) (connector :f11 :d11 :end2 :arrow)))))

;;END_SVG
#+END_SRC

* log
** 2015/03/25

　起票。

** 2015/03/28

　〔RRパターン(TASK-0049：connectorをもっと賢くする：RRパターン)〕が終わったので
着手。これまでの U 形状から変わってここからは Z 形状。じっくり考えていこう。

** 2015/03/30

　とりあえず、現状欄にパターンを書き出してみて思ったことを整理。

	1.上→下で、水平方向も同一座標であれば、直線にできる。
	2.上→下で、上記以外の場合、いわゆる Z 形状。
	3.上記いずれでもない場合、６点。


　3 番目は、さらに分かれるかもしれない。あと、2 の場合でも、from と dest が近過
ぎれば 3 の扱いにする方が良いかも。こう考えると、結構面倒だな。

　‥‥‥一応できたかな。とりあえずクローズ。



&pagetag( "改善", "タグマップ#改善" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/21 12:15:02>
#<begin task ID:3THN0DmmhmH>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/04/02
PRIORITY:3
STATUS:done
TITLE:connectorをもっと賢くする：LBパターン
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:3THN0DmmhmH.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　〔TASK-0042：connectorをもっと賢くする〕から派生したタスク。:LB のパターンでの
挙動を整理し、実装する。


* 現状

[[./3THN0DmmhmH.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 600 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-textbox-align* :center)
		   (*default-connector-style* :LB))
	   (macrolet ((box (x y w h id)
					`(rectangle ,x ,y ,w ,h :id ,id
								:contents
								((text (/ ,w 2) (/ ,h 2)
									   ,(string-downcase (symbol-name id))
									   :align :center)))))
		 ;;-------------------------------------------
		 (let ((y1  30)
			   (y2 100))
		   (box  30 y1 40 40 :d01) (box 110 y2 40 40 :f01) (connector :f01 :d01 :end2 :arrow)
		   (box 200 y1 40 40 :d02) (box 240 y2 40 40 :f02) (connector :f02 :d02 :end2 :arrow)
		   (box 400 y1 40 40 :d03) (box 380 y2 40 40 :f03) (connector :f03 :d03 :end2 :arrow)
		   (box 550 y1 40 40 :d04) (box 500 y2 40 40 :f04) (connector :f04 :d04 :end2 :arrow))
		 (let ((y1 150)
			   (y2 220))
		   (box  30 y1 40 40 :d05) (box 110 y2 40 40 :f05) (connector :f05 :d05 :end2 :arrow)
		   (box 200 y1 40 40 :d06) (box 240 y2 40 40 :f06) (connector :f06 :d06 :end2 :arrow)
		   (box 400 y1 40 40 :d07) (box 380 y2 40 40 :f07) (connector :f07 :d07 :end2 :arrow)
		   (box 550 y1 40 40 :d08) (box 500 y2 40 40 :f08) (connector :f08 :d08 :end2 :arrow))
		 (let ((y1 350)
			   (y2 280))
		   (box  30 y1 40 40 :d09) (box 110 y2 40 40 :f09) (connector :f09 :d09 :end2 :arrow)
		   (box 200 y1 40 40 :d10) (box 240 y2 40 40 :f10) (connector :f10 :d10 :end2 :arrow)
		   (box 400 y1 40 40 :d11) (box 380 y2 40 40 :f11) (connector :f11 :d11 :end2 :arrow)
		   (box 550 y1 40 40 :d12) (box 500 y2 40 40 :f12) (connector :f12 :d12 :end2 :arrow))
)))

;;END_SVG
#+END_SRC

* log
** 2015/03/25

　起票。

** 2015/04/02

　着手。

　‥‥‥できたかな、クローズ。


&pagetag( "改善", "タグマップ#改善" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/21 12:14:23>
#<begin task ID:3UMYehtnsvo>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/02/03
PRIORITY:3
STATUS:done
TITLE:textとparagraphにおける文字エスケープ処理
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view

　text がどうしても描画されなくてパニックになったが、文字列に & が含まれているこ
とが原因だった。エスケープ処理をしなきゃだね。


* log
** 2015/02/02

　起票。

** 2015/02/03

　着手。そして完了。CL-PREFAB から escape-characters をもってきただけ。まぁひと
まず。

#<end update:2020/02/20 12:45:15 access:2020/02/20 14:21:46>
#<begin task ID:40gdNMcCBbV>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/03/05
PRIORITY:3
STATUS:done
TITLE:uml-actorの作成
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:40gdNMcCBbV.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　uml-actor のステンシルを作成する。


* sample

[[./40gdNMcCBbV.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :uml-actor)
 (load-stencil :uml-note)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-actor "CL-SVG" 100 120 :id :actor)
       (uml-note 300 50 "I am actor." :targets :actor)))
;;END_SVG
#+END_SRC


* log
** 2015/03/02

　事後起票。

** 2015/03/05

　過去に作成した svguml のリファレンスを参照してみたが、CL-SVG でも同等のパラメー
タ指定は網羅しているようだ（eventは除くけど）。というわけで、ひとまずはクローズ
とする。



&pagetag( "ステンシル作成", "タグマップ#ステンシル作成" )
&pagetag( "UML／ユースケース図", "タグマップ#UML／ユースケース図" )

#<end update:2020/02/21 12:00:24>
#<begin task ID:4Cyk5WFvG2z>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/02/17
PRIORITY:3
STATUS:done
TITLE:uml-packageにstereotypeパラメータを追加する
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　やらなきゃね。


* log
** 2015/02/15

　起票。

** 2015/02/17

　着手‥‥‥は多分昨日した。〔TASK-0018：uml-stereotype-infoの追加〕が完了したので、
実際に uml-package で使用してみる。まぁまぁいい感じにできていると思うのでクローズ。



&pagetag( "機能追加", "タグマップ#機能追加" )
&pagetag( "UML／パッケージ図", "タグマップ#UML／パッケージ図" )

#<end update:2020/02/20 16:06:25>
#<begin task ID:4DT4GKKbkE2>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/03/24
PRIORITY:3
STATUS:done
TITLE:UMLロールのためのクラス作成
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:4DT4GKKbkE2.20150319.01.svg,4DT4GKKbkE2.20150319.02.svg,4DT4GKKbkE2.20150319.03.svg,4DT4GKKbkE2.20150323.01.svg,4DT4GKKbkE2.sample1.svg,4DT4GKKbkE2.sample2.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　UML の association 族のためのサポートクラス。ロール名を指定するためのクラスと
サポートマクロ。

* sample
** sample1

[[./4DT4GKKbkE2.sample1.svg]]

*** source
#+BEGIN_SRC lisp
;;BEGIN_SVG sample1
 (load-stencil :grid)
 (load-stencil :uml-association)
 (create-svg (:width 400 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (rectangle 200 200 230 230 :id :r0
				  :contents
				  ((rectangle 180  50 30 30 :id :r1)
				   (rectangle  50 180 30 30 :id :r2)
				   (uml-association :r1 :r0 :arrows 2 :line-style :TT :role1 :tag1 :role2 :tag2)
				   (uml-association :r1 :r0 :arrows 2 :line-style :RR :role1 "tag3" :role2 "tag4")
				   (uml-association :r2 :r0 :arrows 2 :line-style :LL :role1 (role :tag5) :role2 (role "tag6"))
				   (uml-association :r2 :r0 :arrows 2 :line-style :BB :role1 :tag7 :role2 :tag8)))))
;;END_SVG
#+END_SRC

** sample2

[[./4DT4GKKbkE2.sample2.svg]]

*** source
#+BEGIN_SRC lisp
;;BEGIN_SVG sample2
 (load-stencil :grid)
 (load-stencil :uml-association)
 (create-svg (:width 400 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-connector-style* :CC)
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (rectangle 200 200 360 360 :id :r0
				  :contents
				  ((rectangle 120  60 20 20 :id :r1)
				   (rectangle 240  60 20 20 :id :r2)
				   (rectangle 300 120 20 20 :id :r3)
				   (rectangle 300 240 20 20 :id :r4)
				   (rectangle 240 300 20 20 :id :r5)
				   (rectangle 120 300 20 20 :id :r6)
				   (rectangle  60 240 20 20 :id :r7)
				   (rectangle  60 120 20 20 :id :r8)
				   (uml-association :r1 :r2 :arrows 2 :role1 :from1 :role2 :dest2)
				   (uml-association :r2 :r3 :arrows 2 :role1 :from2 :role2 :dest3)
				   (uml-association :r3 :r4 :arrows 2 :role1 :from3 :role2 :dest4)
				   (uml-association :r4 :r5 :arrows 2 :role1 :from4 :role2 :dest5)
				   (uml-association :r5 :r6 :arrows 2 :role1 :from5 :role2 :dest6)
				   (uml-association :r6 :r7 :arrows 2 :role1 :from6 :role2 :dest7)
				   (uml-association :r7 :r8 :arrows 2 :role1 :from7 :role2 :dest8)
				   (uml-association :r8 :r1 :arrows 2 :role1 :from8 :role2 :dest1)))))
;;END_SVG
#+END_SRC

* log
** 2015/03/18

　起票。そして検討開始。

　‥‥‥おおむね動作した。が、:line-style :CC の場合の位置決めだけがまだ多重度とカ
ブっているので、なんとかしなければ。

** 2015/03/19

　:line-style :CC の場合でも、垂直あるいは水平であるような場合には三角関数を使用
しない実装に変更した。これで悩ましいのは「本当にナナメっている」場合のみとなった。
さて、それをどうするか、だな。

　‥‥‥考えれば考えるほどマズいことがわかる。一番アレなのは align だ。例えば、現状
でも以下の左は（少なくとも align に関しては）正しいが、ちょっと角度が変わって右
のようになると、もうダメなのだ（以下の図は画像にしてないので、今後より改善される
可能性がある）。

[[./4DT4GKKbkE2.20150319.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150319.01
 (load-stencil :grid)
 (load-stencil :uml-association)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-connector-style* :CC)
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (rectangle  80  20 30 30 :id :r1)
       (rectangle 120 180 30 30 :id :r2)
       (uml-association :r1 :r2 :arrows 2 :role1 :from1 :role2 :dest2)))
;;END_SVG
#+END_SRC

[[./4DT4GKKbkE2.20150319.02.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150319.02
 (load-stencil :grid)
 (load-stencil :uml-association)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-connector-style* :CC)
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (rectangle  20  80 30 30 :id :r1)
       (rectangle 180 120 30 30 :id :r2)
       (uml-association :r1 :r2 :arrows 2 :role1 :from1 :role2 :dest2)))
;;END_SVG
#+END_SRC


　直観的に感じるのは、45度が境目になるということだ。なぜなら、connector の対象は
shape だから、ひとまず矩形であると判断できるからだ。となると、以下のように考えれ
ば良いことになる‥‥‥


[[./4DT4GKKbkE2.20150319.03.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150319.03
 (load-stencil :grid)
 (load-stencil :uml-association)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (circle 100 100 75)
       (let ((*default-stroke* (stroke :color :blue :width 1 :dasharray '(3 3)))
			 (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
		 (line '( 30 30 170 170))
		 (line '(170 30  30 170))
		 (text 150 100 "right" :align :center)
		 (text  50 100 "left"  :align :center)
		 (text 100  50 "right" :align :center)
		 (text 100 150 "left"  :align :center))))
;;END_SVG
#+END_SRC



　‥‥‥いや、これはダメだ。無邪気に上のように考えられるのは、shape の矩形が正方形
の場合だけだ。縦か横のどちらかに長い長方形を考えてみれば、上の考え方がダメな理由
がわかるだろう。

　ここまででも、「完璧な解決」は無理だとわかる。connector の接続面の状態を知る方
法がない以上、それは仕方がないことなのだ。では、どうしたものだろうか。考えられる
対処は以下の通りだ。

	1.前述の「shapeが正方形だと仮定しちゃうよ」という前提で、できるだけのことを
	  する。
	2.「現状でまぁいいや」レベルの諦めのもと、「CCでナナメに接続する場合はイマイ
	  チだよ？」と言ってのける。


　‥‥‥そりゃ１で行きたいもんだ。

** 2015/03/23

　さて、shape が正方形だと仮定した上でできるだけのことをする、とは言ってみたもの
の、正直面倒臭い。あと、〔connectorのCC接続に関するバグ(TASK-0043：connectorのCC
接続がCCにならない)〕も関係するコトなので、そっちを先にやろうかと思う。

　「〔そっち(TASK-0043：connectorのCC接続がCCにならない)〕」は、割りと簡単にクロー
ズしてしまった‥‥‥というわけでこのタスクに復帰。。

　とりあえずこのタスクでやるべきことは、以前にも出てきた以下の条件で処理を切り分
けることだ。

[[./4DT4GKKbkE2.20150323.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150323.01
 (load-stencil :grid)
 (load-stencil :uml-association)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (circle 100 100 75)
       (let ((*default-stroke* (stroke :color :blue :width 1 :dasharray '(3 3)))
			 (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
		 (line '( 30 30 170 170))
		 (line '(170 30  30 170))
		 (text 150 100 "right" :align :center)
		 (text  50 100 "left"  :align :center)
		 (text 100  50 "right" :align :center)
		 (text 100 150 "left"  :align :center))))
;;END_SVG
#+END_SRC



　考え方なのだけれど、+45度して cos の値が０だったら良いのではないだろうか？　‥‥‥試
してみる。うん、align については良くなってきたようだ。あとは位置取りか。

** 2015/03/24

　ここまでやっておいてアレなのだけれど、ロールのためのラベル位置（および align
方向）の決定方法を完全に変えてしまおうかと考えている。というのも、昨日までで 
align はいい感じになってきたとはいえ、正確な位置取りがうまくやれそうにないのだ。
そこで、根本的に方式を変え、以下のような感じにする案を考えている。

	1.line の endmark の arrow の要領で、ベースになる位置を決める。
	2.上記で決めた位置と、対象となる端点の位置関係を考慮して align などを決定す
	  る。

　ベースになる位置は、arrow が描く矢印の端点よりも外側が良いだろう。そして、その
結果を見てさらに細かく調整を加えていく。具体的には、

	* 端点よりも下に位置する場合、文字サイズ分 y 座標を下げる。
	* 端点よりも右に位置する場合、align を left にする。
	* 端点よりも左に位置する場合、align を right にする。


　‥‥‥こんな感じでどうだろうか。これでも、線本体と交差する可能性はあるのだが、そ
れは流石に仕方ないものとせざるをえないだろう。

　実際にやってみた。そして、いい感じであると判断。もうこれくらいにしておこう。最
後に、定数にしていた「端点における角度と距離」をダイナミック変数にして変更可能と
し、クローズ。よほど気にいらない部分に気付くようなことがあったら戻ってくることに
する。



&pagetag( "機能追加", "タグマップ#機能追加" )
&pagetag( "UML", "タグマップ#UML" )

#<end update:2020/02/26 16:12:42 access:2020/02/26 16:12:45>
#<begin task ID:4NbyONqSXCv>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
DATE:2015/02/19
PRIORITY:3
STATUS:done
TITLE:CL-PREFAB連携におけるリンク先ページ指定の方法
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　CL-PREFAB との連携において、CL-SVG 入力データ中に CL-PREFAB のページをリンク先
に指定したい場合はどうすれば良いだろうか。検討し、方法をまとめる。


* log
** 2015/02/19

　起票。そして着手。

　CL-PREFAB のデータファイル内に記述する以上、それはあくまで CL-PREFAB のデータ
だ。だから、マクロで解決するのが正道だろう。組込みマクロ @outfile をプリプロセス
時点で使用すれば解決する。以下の要領だ。

　%dlr()@outfile( "TASK-0007：locateの廃止", true ) → $@outfile( "TASK-0007：locateの廃止", true )


　ひとまず解決かと思う。クローズ。



&pagetag( "機能追加", "タグマップ#機能追加" )
&pagetag( "CL-PREFAB連携", "タグマップ#CL-PREFAB連携" )

#<end update:2020/02/20 16:08:15>
#<begin task ID:4OBeHVvM8Vz>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/04/02
PRIORITY:3
STATUS:done
TITLE:connectorをもっと賢くする：RTパターン
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:4OBeHVvM8Vz.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　〔TASK-0042：connectorをもっと賢くする〕から派生したタスク。:RT のパターンでの
挙動を整理し、実装する。


* 現状

[[./4OBeHVvM8Vz.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 600 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-textbox-align* :center)
		   (*default-connector-style* :RT))
	   (macrolet ((box (x y w h id)
					`(rectangle ,x ,y ,w ,h :id ,id
								:contents
								((text (/ ,w 2) (/ ,h 2)
									   ,(string-downcase (symbol-name id))
									   :align :center)))))
		 ;;-------------------------------------------
		 (let ((y1 100)
			   (y2  30))
		   (box 110 y1 40 40 :d01) (box  30 y2 40 40 :f01) (connector :f01 :d01 :end2 :arrow)
		   (box 240 y1 40 40 :d02) (box 200 y2 40 40 :f02) (connector :f02 :d02 :end2 :arrow)
		   (box 380 y1 40 40 :d03) (box 400 y2 40 40 :f03) (connector :f03 :d03 :end2 :arrow)
		   (box 500 y1 40 40 :d04) (box 550 y2 40 40 :f04) (connector :f04 :d04 :end2 :arrow))
		 (let ((y1 220)
			   (y2 150))
		   (box 110 y1 40 40 :d05) (box  30 y2 40 40 :f05) (connector :f05 :d05 :end2 :arrow)
		   (box 240 y1 40 40 :d06) (box 200 y2 40 40 :f06) (connector :f06 :d06 :end2 :arrow)
		   (box 380 y1 40 40 :d07) (box 400 y2 40 40 :f07) (connector :f07 :d07 :end2 :arrow)
		   (box 500 y1 40 40 :d08) (box 550 y2 40 40 :f08) (connector :f08 :d08 :end2 :arrow))
		 (let ((y1 300)
			   (y2 370))
		   (box 110 y1 40 40 :d09) (box  30 y2 40 40 :f09) (connector :f09 :d09 :end2 :arrow)
		   (box 240 y1 40 40 :d10) (box 200 y2 40 40 :f10) (connector :f10 :d10 :end2 :arrow)
		   (box 380 y1 40 40 :d11) (box 400 y2 40 40 :f11) (connector :f11 :d11 :end2 :arrow)
		   (box 500 y1 40 40 :d12) (box 550 y2 40 40 :f12) (connector :f12 :d12 :end2 :arrow))
)))

;;END_SVG
#+END_SRC

* log
** 2015/03/25

　起票。

** 2015/04/02

　着手。

　‥‥‥できたかな、クローズ。





&pagetag( "改善", "タグマップ#改善" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/21 12:13:46>
#<begin task ID:4Tbj1y9DpLm>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/05/15
PRIORITY:3
STATUS:done
TITLE:ディクショナリ参照で「直前に登録したやつ」を指定可能にする
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:4Tbj1y9DpLm.20150514.01.svg,4Tbj1y9DpLm.20150515.01.svg,4Tbj1y9DpLm.20150515.02.svg,4Tbj1y9DpLm.20150515.03.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　要素を２つ書いて、直後にコネクタで接続するだけであれば ID 指定を省けると便利だ。
CL のプロンプトのように、* や ** などで「直前の登録」、「その前の登録」を参照で
きるようにしたい。


* log
** 2015/05/14

　起票。そして着手。

　基本的な方針は、ディクショナリに番号で参照できるようなデータ保持の仕方をつけ加
えることだ。現在ディクショナリは裸のハッシュテーブルだが、いい機会なのでクラス化
してしまおう。クラス名は dictionary だ。こいつはハッシュテーブルを内蔵し、キーワー
ドで entity を取得する既存の機能に加え、「直前に追加したやつ」みたいな問合せにも
答える。

　で、その「直前に追加したやつ」などの指定方法だが、考えた末に :$N というキーワー
ドを指定させることにした。N という部分が 1 以上の数値になる。いくつまで指定でき
るようにするかはとりあえず保留で、ハッシュテーブルとは別にリストで保有するように
した。

　影響範囲は、思いの他狭い。実際にディクショナリを使用しているのは以下の個所だけ
だった。

	* CL-SVG.lisp - with-dictionary
	* create-svg.lisp - create-svg
	* connector.lisp - check
	* uml-note - check
	* uml-interface-request - check


　必要な修正をすませ、テストコードを書いてみる。connector で指定するタイプと、
with-dictionary で展開するタイプの両方だ。以下のように。

#+BEGIN_SRC lisp
 (in-package :cl-svg-user)
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-font* (font :family "Courier New" :width-spice 0.8 :line-spacing 3))
           (*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle  50 100 40 40 :fill :skyblue)
       (rectangle (+ $1[center] 100) $1[middle] 40 40)
       (connector :$2 :$1 :end2 :arrow)))

#+END_SRC




　実行結果は以下の通りだ。上手く動いているようだ。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150514.01
(in-package :cl-svg-user)
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-font* (font :family "Courier New" :width-spice 0.8 :line-spacing 3))
           (*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
	   (rectangle  50 100 40 40 :fill :skyblue)
	   (rectangle (+ $1[center] 100) $1[middle] 40 40)
	   (connector :$2 :$1 :end2 :arrow)))

;;END_SVG
#+END_SRC

[[./4Tbj1y9DpLm.20150514.01.svg]]


　さて、このタスクではあと何をすればいいんだっけ？　思いつくままに書いてみようか。

	* dictionary は現在 :$N 参照が無限に可能。これに制限をかける。
	* あとは‥‥‥なんだっけ。

** 2015/05/15

　では、とりかかるとしよう。

　一言で「制限をかける」といっても、できればその数は設定で可変にしたいものだ。そ
れはいいとしても、問題はデータの保存をどうやってやるか。配列だと線型時間がかかる
し、しかしコンスリストだとすっきり書けない。はてさて。

　ちょっと選択肢を列挙してみようか。

	* コンスリストでやる。
	* 配列でいく。
	* いっそ、:$1 - :$9 などの ID をハッシュテーブル側に登録しちゃう。


　どの方法をとるにしても、ヒストリの最大数を維持するには多少のコストがかかる。い
ずれも線型時間だ。配列と、ちょっとした計算を用いればこれを固定のコストに落とし込
めるが、正直面倒でもある。

　‥‥‥いや、それくらいしか解決方法がない気がするな。ちょっと図にしてみよう。今、
ヒストリの最大数が 7 だったとする。用意するのは要素数７の配列だ。この配列に、最
初に要素（これを A としよう）を追加する場合、その格納先はインデックス６（つまり
最後）だ。そして要素数は１となり、「現在の先頭インデックス」は６になる。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150515.01
(in-package :cl-svg-user)
 (load-stencil :grid)
 (create-svg (:width 300 :height 100 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white))
	   (do ((i 0 (1+ i)))
		   ((<= 7 i) nil)
		 (rectangle (+ 30 (* i 40)) 50 40 40)
		 (text (+ 30 (* i 40)) 25 (format nil "~A" i) :align :center))
	   (text 270 55 "A" :align :center)
	   (text 270 85 "↑" :align :center)))

;;END_SVG
#+END_SRC

[[./4Tbj1y9DpLm.20150515.01.svg]]


　２つめの要素 B を追加する場合、その手前に置かれることになる。そして要素数は２
となり、「現在の先頭インデックス」は５になる。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150515.02
(in-package :cl-svg-user)
 (load-stencil :grid)
 (create-svg (:width 300 :height 100 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white))
	   (do ((i 0 (1+ i)))
		   ((<= 7 i) nil)
		 (rectangle (+ 30 (* i 40)) 50 40 40)
		 (text (+ 30 (* i 40)) 25 (format nil "~A" i) :align :center))
	   (text 270 55 "A" :align :center)
	   (text 230 55 "B" :align :center)
	   (text 230 85 "↑" :align :center)))

;;END_SVG
#+END_SRC

[[./4Tbj1y9DpLm.20150515.02.svg]]



　このまま A, B, C, D, E, F, G と追加していき、８つめの H を追加する時、ようやく
話の本題に入ることになる。先頭インデックスは折り返し、最初に追加した A が上書き
される（そして「現在の先頭インデックス」は６に戻る）。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150515.03
(in-package :cl-svg-user)
 (load-stencil :grid)
 (create-svg (:width 300 :height 100 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white))
	   (do ((i 0 (1+ i)))
		   ((<= 7 i) nil)
		 (rectangle (+ 30 (* i 40)) 50 40 40)
		 (text (+ 30 (* i 40)) 25 (format nil "~A" i) :align :center))
	   (text 270 55 "H" :align :center)
	   (text 230 55 "B" :align :center)
	   (text 190 55 "C" :align :center)
	   (text 150 55 "D" :align :center)
	   (text 110 55 "E" :align :center)
	   (text  70 55 "F" :align :center)
	   (text  30 55 "G" :align :center)
	   (text 270 85 "↑" :align :center)))

;;END_SVG
#+END_SRC

[[./4Tbj1y9DpLm.20150515.03.svg]]


　もちろん、最初にどのインデックスに要素を入れるかはあまり問題ではない。要は計算
でちゃんと処理できればそれで良いのだ。その計算だが、「現在の先頭インデックス」に
対して、N 番目ならば N を足し、配列長で割った余りをとれば良い。それだけだ。

　これを試すコードとして、以下のようなのを書いてみた。特に問題なく動いているよう
だ。では組み込んでいくとしようか。

#+BEGIN_SRC lisp
 (let* ((max 7)
        (arr (make-array max))
        (top 0)
        (cnt 0))
   (defun register-history (val)
     (decf top)
     (when (< top 0)
       (setf top (1- max)))
     (setf (svref arr top) val)
     (when (< cnt max)
       (incf cnt)))
   (defun get-history (index)    ; base 1.
     (when (< cnt index)
       (error "cnt < index"))
     (svref arr (mod (+ top (1- index)) max)))
   (defun dump-history ()
     (format t "history :")
     (do ((i 1 (1+ i)))
         ((< cnt i) nil)
       (format t " ~A" (get-history i)))))

#+END_SRC


　‥‥‥組込んでみた。不正な番号を与えた場合は例外を投入するかたちにした。クローズ
でいいかな。





&pagetag( "機能追加", "タグマップ#機能追加" )
&pagetag( "dictionary", "タグマップ#dictionary" )

#<end update:2020/02/21 12:43:38>
#<begin task ID:5j3qgzNBsVA>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/02/15
PRIORITY:3
STATUS:done
TITLE:link指定の省略記法
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　現在、:label (label "name" :below) と書くかわりに、:label "name" と書くことが
できる。これと同じように :link (link "http://www.foo.com/") と書くかわりに 
:link "http://www.foo.com/" と書けるようにしたい。


* log
** 2015/02/15

　起票。

　そして着手。さらに完了。fix-link-info というマクロを提供。


&pagetag( "改善", "タグマップ#改善" )
&pagetag( "link", "タグマップ#link" )

#<end update:2020/02/20 16:07:39 access:2020/02/21 11:54:40>
#<begin task ID:5OzQYmQY9RX>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/02/04
PRIORITY:3
STATUS:doing
TITLE:tagをidにしてsvgにも出力する
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!edit

　現在、tag で要素を識別できるようになっているが、これは CL-SVG の世界のことでし
かない。しかし、SVG 仕様には id という属性があり、これで要素を識別できるという。
だったら、CL-SVG の tag を id として出力すればいいんではなかろうか、という話。


* log
** 2015/01/29

　起票。

** 2015/01/30

　着手。とりあえず、entity の m-tag を m-id に変更し、できるところから id 属性を
出力するようにしてみた。しかし、以下の問題点に気付く。

	* たとえば line は、end1 などの指定によって複数の要素から構成されることにな
	  る。これに id を指定するならば、それは g タグで括ってやらなければならない。
	* さらに、link 指定で a タグで括られることになるモノは a タグで括ったモノを
	  さらに g で括る必要があるだろう。

　まとめると、以下の考慮をしなければならないのだ。

	* 複数の要素で描画されるか？
	* link 指定があるか？

　上記の両方に対して No であった場合のみ、自身の描画要素に id 属性を書き込んで良
い‥‥‥ということになる。しかし、現在 shape とその派生クラスでは、shape が派生クラ
スの描画全体を a で括ってしまう。そのあたりから考え直す必要があるだろう。

** 2015/02/02

　引き続き検討。考えなければならないパターンの例として、textbox がある。これは 
shape 派生だが、複合オブジェクトだ。こういうのがあると、shape などの基底クラスに
おいて出力を行うのが非常に怖くなる。shape にリンクや ID を設定していると、それが
さらに別のクラスに派生されている場合でも g タグや a タグで括ることになる。それも
どうかと思うのだ。

　とはいえ、プロトコルとしての shape や entity から派生するだけでそれよりも下位
の具象クラスから派生しなければ大丈夫なんだけどな。その意味で問題になるのは line 
と connector だろう。connector は line から派生してしまっている。あ、でも 
connector は自分自身で draw しないからいいのか。なんだか良くわからなくなってきた。

　ちょっとコードを書いてみる。entity に以下のような２つの関数を置く。

#+BEGIN_SRC lisp
   (:public begin-id-group (canvas writer)
        (declare (ignore canvas))
        (when m-id
          (class:invoke writer :write "<g id='" m-id "'>")
          (class:invoke writer :incr-level)))
 
   (:public end-id-group (canvas writer)
        (declare (ignore canvas))
        (when m-id
          (class:invoke writer :decr-level)
          (class:invoke writer :write "</g>")))
#+END_SRC


　でもって、shape クラスの draw は以下のようになった。必要ならば link タグで括ら
れるし、さらに必要ならば g タグで id が付与される。そして shape 派生クラスの場合、
実際の描画は draw-shape で行う、と。

#+BEGIN_SRC lisp
   (:public draw (canvas writer)
        (class:invoke class:super :begin-id-group canvas writer)
        (class:invoke m-link-info :draw-begin writer)
        (class:invoke class:this  :draw-shape canvas writer)
        (class:invoke m-link-info :draw-end   writer)
        (class:invoke class:super :end-id-group canvas writer))))
#+END_SRC


　たしかにこれで動作する。動作するのだけれど、これじゃイマイチなのだ。なんでかと
いうと、単一の要素にも関わらず g タグで id が出力されてしまう場合があるからだ。
そう、これこそが漠然と感じていた「難しさ」の正体だ。単純に g タグで括るだけなら
いい。だが単一要素ならば id 属性はわざわざ g タグで括ったりしたくない。だが link 
がある場合はそうせざるをえないのだ。

　少なくとも個人的には、SVG ファイルの最小化というのはあまり気にしていない。が、
無様に見えるのは嫌なのだ。だから頑張る必要がある。で、現在話をややこしくしている
のは、前述の shape::draw だろう。これを純粋仮想に再度戻して、draw-shape を廃止す
るのだ。

　‥‥‥ひとまず途中まで。残っているのは以下の４つ。このうち、arc と connector は 
draw を持たない（基底クラスの実装をそのまま使用）するので対象外。あと２つ。

	* path
	* arc
	* line
	* connector


　確認したところ、path は link を指定できず、かつ常に単一の path 要素で描画され
るため、今回の対応の対象外。すると残るは line だけだ。

　line についても確認。line もまた link を指定できないが、複数の polyline で描画
されうる。だから対応は必要だ。

　‥‥‥一応できた。あとは動作確認か。

** 2015/02/04

　とりあえず、テストデータを少しずつ作成。当面終わらない。

#<end update:2020/02/20 12:44:01 access:2020/02/26 17:42:14>
#<begin task ID:60ToUqmNgRX>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
DATE:2020/03/24
PRIORITY:3
STATUS:done
TITLE:dictionary.lisp::dict-history-kwd-p は labels にできる
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view

* log
** 2020/03/24

　さくっと終了。

#<end update:2020/03/24 19:32:48>
#<begin task ID:61ZxT9hLMky>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/04/07
PRIORITY:3
STATUS:done
TITLE:uml-implementationの作成
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:61ZxT9hLMky.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　uml-implementation のステンシルを作成する。


* sample

[[./61ZxT9hLMky.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :textbox)
 (load-stencil :uml-implementation)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (textbox 100 100 "class"     :align :center :id :class)
       (textbox 300 100 "interface" :align :center :id :interface)
       (uml-implementation :class :interface)))
;;END_SVG
#+END_SRC

* log
** 2015/03/02

　事後起票。

** 2015/04/07

　〔uml-generalizationのタスク(TASK-0026：uml-generalizationの作成)〕と同じ理由でクロー
ズ。




&pagetag( "ステンシル作成", "タグマップ#ステンシル作成" )
&pagetag( "UML", "タグマップ#UML" )
&pagetag( "uml-implementation", "タグマップ#uml-implementation" )

#<end update:2020/02/21 11:59:43 access:2020/03/03 09:35:45>
#<begin task ID:6gdeRvbrJrI>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:red
DATE:2020/03/25
PRIORITY:3
STATUS:done
TITLE:カレントディレクトリとデータファイルのディレクトリが一致しないと image が処理できない
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view

　CL-APPS に入れて使う場合には問題にはならないと思うが。

* log
** 2020/03/25

　起票。

　path/get-current-directory で merge-pathnames してやったら動作するようになった。
クローズ。

#<end update:2020/03/25 07:48:50 access:2020/03/25 18:25:33>
#<begin task ID:6lVQ3ZMTUu0>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
DATE:2020/02/26
PRIORITY:3
STATUS:doing
TITLE:fist データ上での SVG 図形の記述と生成・更新の方法を刷新する
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:6lVQ3ZMTUu0.NAME.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!edit

　可能な限り楽にやりたい。このタスクを作成する直前まで試行錯誤していた以下のタス
クデータが中途半端になっているので注意。

	* {{jzNIuyE99IV:uml-classの作成}}

* 出来上がったスクリプトの使い方
** CL-SVG ソースの埋め込み

　ソースは以下のように埋め込む。NAME 部分はデータ内部で一意な名前で、かつファイ
ル名として使える文字列であること。これによって生成される SVG ファイルのファイル
名は、DATAID.NAME.svg になる。

#+BEGIN_SRC lisp
;;BEGIN_SVG NAME
(load-stencil :grid)
(load-stencil :uml-class)
(create-svg (:width 400 :height 200 :encoding :utf8)
  (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-class :test-class 200 100 :keyword :test
				  :operations ((:public :do-something :params (:arg1 :arg2) :type :int)))))
;;END_SVG
#+END_SRC

** スクリプトの実行

　スクリプト svggen（ という名前で ln してあるはず）に、対象となるデータを渡す。
そんなに速くはない。

#+BEGIN_EXAMPLE
$ svggen 6lVQ3ZMTUu0
generating 6lVQ3ZMTUu0.NAME.svg ...
#+END_EXAMPLE

** データへのダイアグラム埋め込み

　（orgモードなら）以下のようにしてインラインで表示させる（実際にリンクにならない
ように全角括弧を使っている）。

［［./DATAID.NAME.svg］］

　実際の例は以下。

[[./6lVQ3ZMTUu0.NAME.svg]]

* log
** 2020/02/20

　起票。

　以下でほぼ動作するようになってきている。

	* {{64woneaDKXd:research：update SVG}}


　まだ問題がいくつかある。セッション中の

	* .makename がない fist 環境でも動作させる必要がある（あるいは無ければエラー
	  終了とする）
	* 大量のデータについて、上記のような記述に変更する必要がある

** 2020/02/21

　スクリプトは一応完成。編集中でもそうでなくても動作するようになった‥‥‥と書いて
から、view 中だったらとか new 状態だったらとか考えるとまだやることはあるけどな。

	⇒ [[出来上がったスクリプトの使い方]] に整理


　続いて、既存データに対する作業をしなければならない。だがそれは別タスクにするか。

	* {{7yMc7Seq7DH:既存データの埋め込みダイアグラムを処理する}}


　このタスクはほぼ終了という認識。頃合いを見てクローズする。

** 2020/02/26

　試験運用中の fist の最新版でスクリプトが動作しない。仕方がないので、bash で動
かせる部分は抜き出して解決する。

#<end update:2020/02/28 15:43:40 access:2020/02/28 15:43:45>
#<begin task ID:6nL7kR1zVn1>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/02/16
PRIORITY:3
STATUS:done
TITLE:uml-stereotype-infoの追加
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　当初、uml 向けのステレタイプは文字列またはキーワードで良いかなと思っていたが、
「UMLモデリングのエッセンス第３版」には、'''UML2以降、ステレオタイプは複数してい
るできるようになった'''などと不吉なことが書かれている。そこで、
uml-stereotype-info クラスを作成し、将来的な不安要素をひとまとめにしておきたい。


* log
** 2015/02/16

　起票。そして着手。

　基本的には label-info や link-info と同じ考え方になるだろう。

　‥‥‥ひとまず動作するようにはなった。残る問題は、やっぱり font とか class とか。
どうしようかな。以前からぼんやり考えていたことではあるのだけれど、たとえば UML 
図におけるステレオタイプとか、個別にフォント指定ができる必要はないだろう。むしろ、
積極的に統一させた方が良いとさえ思える。となるとアレだ。*uml-stereotype-font* と
かのスペシャル変数を用意して、それを束縛する以外に指定方法がない、みたいになって
れば良いのではないか。

　いやいや待てよ、現状、stereotype-info は sformat だけだ。ということは、font だ
の class だのはクライアント側でなんとかせねばならんのか。それはそれで嫌なので、
ちゃんと draw できるようにしようか。

　‥‥‥とりあえず、sformat を消して draw を実装。まだ font と class はコメントアウ
ト状態。単純に *uml-stereotype-font* とか作って参照しようと思ったのだが、以前と
同じ落とし穴にはまりそうになっているコトに気付く。draw でスペシャル変数にアクセ
スしようとしても、すでに diagram ファイル内部での束縛がなくなっているのだ。
create-svgfile 全体を括ってやれば良いのだが、現在のように内部で束縛を作っている
と正しく動作しない。結局、コンストラクタまたは check の段階でスペシャル変数の状
態をキャッシュしなければならないのだ。

&pagetag( "機能追加", "タグマップ#機能追加" )
&pagetag( "UML", "タグマップ#UML" )

#<end update:2020/02/20 16:07:56>
#<begin task ID:6qBusJh1auF>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/04/01
PRIORITY:3
STATUS:done
TITLE:connectorをもっと賢くする：TRパターン
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:6qBusJh1auF.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　〔TASK-0042：connectorをもっと賢くする〕から派生したタスク。:TR のパターンでの
挙動を整理し、実装する。


* 現状

[[./6qBusJh1auF.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 600 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-textbox-align* :center)
		   (*default-connector-style* :TR))
	   (macrolet ((box (x y w h id)
					`(rectangle ,x ,y ,w ,h :id ,id
								:contents
								((text (/ ,w 2) (/ ,h 2)
									   ,(string-downcase (symbol-name id))
									   :align :center)))))
		 ;;-------------------------------------------
		 (let ((y1 100)
			   (y2  30))
		   (box 110 y1 40 40 :f01) (box  30 y2 40 40 :d01) (connector :f01 :d01 :end2 :arrow)
		   (box 240 y1 40 40 :f02) (box 200 y2 40 40 :d02) (connector :f02 :d02 :end2 :arrow)
		   (box 380 y1 40 40 :f03) (box 400 y2 40 40 :d03) (connector :f03 :d03 :end2 :arrow)
		   (box 500 y1 40 40 :f04) (box 550 y2 40 40 :d04) (connector :f04 :d04 :end2 :arrow))
		 (let ((y1 220)
			   (y2 150))
		   (box 110 y1 40 40 :f05) (box  30 y2 40 40 :d05) (connector :f05 :d05 :end2 :arrow)
		   (box 240 y1 40 40 :f06) (box 200 y2 40 40 :d06) (connector :f06 :d06 :end2 :arrow)
		   (box 380 y1 40 40 :f07) (box 400 y2 40 40 :d07) (connector :f07 :d07 :end2 :arrow)
		   (box 500 y1 40 40 :f08) (box 550 y2 40 40 :d08) (connector :f08 :d08 :end2 :arrow))
		 (let ((y1 300)
			   (y2 370))
		   (box 110 y1 40 40 :f09) (box  30 y2 40 40 :d09) (connector :f09 :d09 :end2 :arrow)
		   (box 240 y1 40 40 :f10) (box 200 y2 40 40 :d10) (connector :f10 :d10 :end2 :arrow)
		   (box 380 y1 40 40 :f11) (box 400 y2 40 40 :d11) (connector :f11 :d11 :end2 :arrow)
		   (box 500 y1 40 40 :f12) (box 550 y2 40 40 :d12) (connector :f12 :d12 :end2 :arrow))
)))

;;END_SVG
#+END_SRC

* log
** 2015/03/25

　起票。

** 2015/04/01

　着手。

　‥‥‥とりあえず、実装はできたみたい。まぁ、クローズとするか。




&pagetag( "改善", "タグマップ#改善" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/21 12:13:09>
#<begin task ID:7g9REQIKOc3>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/02/24
PRIORITY:3
STATUS:done
TITLE:lineの中心点を取得可能にする
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view

　UML の association 族のためのサポート機能。線の中心点と、中心点における線の傾
きを返すメソッドを提供する。


* log
** 2015/02/03

　起票、そして着手。

** 2015/02/04

　とりあえず、それなりに良好な結果が得られるようにはなった。さて、このタスクでど
こまでやるかだが‥‥‥

** 2015/02/24

n　ひさしぶり。uml-dependency において、ステレオタイプの描画で初めて実際の使用を
してみた。たしかに中心点はとれているようだが、中心点を取ったあとに、線分の傾きを
考慮して描画位置を決定するのが面倒そうだ。たとえば stereotype-info の機能として
しまう、などといったかたちで局所化する必要がありそうだな。ただ、中心点を提供する
機能としてそれをやることはないと思う。というわけでクローズ。

#<end update:2020/02/20 12:49:35>
#<begin task ID:7guAPN3sW0C>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/04/21
PRIORITY:3
STATUS:done
TITLE:クラス操作パラメータのUML準拠作業
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:7guAPN3sW0C.20150421.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　「UMLモデリングのエッセンス第３版」より、クラス操作のパラメータについて以下の
対応をする。

	1.パラメータの書式は以下の通り。
		1.方向 名前 : タイプ = デフォルト値


* log
** 2015/04/21

　起票。そして着手。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150421
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-class :test-class 200 100 :keyword :test
				  :operations ((:public :method1 :params (:arg) :type :int)
							   (:public :method2 :params ((:arg :io :in :type :string :default "\"\"")))
							   (:public :method3 :params ((:arg1 :io :inout) (:arg2 :type :string) (:arg3 :default "\"\"")))))))
;;END_SVG
#+END_SRC


[[./7guAPN3sW0C.20150421.svg]]

　‥‥‥いいんでない？　クローズ。



&pagetag( "UML／クラス図", "タグマップ#UML／クラス図" )
&pagetag( "uml-class", "タグマップ#uml-class" )

#<end update:2020/02/21 12:03:09>
#<begin task ID:7l82ipTBWaG>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/03/24
PRIORITY:3
STATUS:done
TITLE:shapeの接続点を増やす
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:7l82ipTBWaG.20150324.01.svg,7l82ipTBWaG.20150324.02.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　shape の接続点を増やしたい。shape は矩形のイメージなので、各辺に３つとしたい。
従来の :BR などの記法との互換性を維持することも考えて。


* log
** 2015/03/24

　起票。そして検討開始。

　そもそもこれが必要だと思った最初の理由は、from と dest が同じであるような 
connector の接続が、現時点では実現できないことに気付いたことだった。現状でやりた
ければ、(connector :r1 :r1 :line-style :TR) みたいにして、上辺と右辺を四角形のよ
うな感じで線で結ぶしかないのだ。しかしそれも〔TASK-0042(TASK-0042：connectorをもっ
と賢くする)〕が完了すればの話なのだが。現在、そういうかたちの TR は線が r1 の内
部に描画される。

　で、まぁそれとは別に、コネクタの出入りが激しい shape では苦しいということもあ
り、接続点を増やしましょうかと、そういう話になった。とりあえず、以下の使用で考え
ている。

	* 各辺に３点。矩形全体で合計 12点。
	* たとえば上辺であればこれまで T としていたが、これが T1, T2, T3 となる。
	* 互換性のため、T は T2 の省略記法とされる。


　要するに、こういうことだ。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150324.01
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((size 160)
		   (*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (rectangle 100 100 size size :id :rect
				  :contents
				  ((let ((*default-fill* :blue)
                         (*default-stroke* (stroke :color :blue :width 1)))
					 (circle (* 1 (/ size 4))    0 2 :id :t1)
					 (circle (* 2 (/ size 4))    0 2 :id :t2)
					 (circle (* 3 (/ size 4))    0 2 :id :t3)
					 (circle (* 1 (/ size 4)) size 2 :id :b1)
					 (circle (* 2 (/ size 4)) size 2 :id :b2)
					 (circle (* 3 (/ size 4)) size 2 :id :b3)
					 (circle    0 (* 1 (/ size 4)) 2 :id :l1)
					 (circle    0 (* 2 (/ size 4)) 2 :id :l2)
					 (circle    0 (* 3 (/ size 4)) 2 :id :l3)
					 (circle size (* 1 (/ size 4)) 2 :id :r1)
					 (circle size (* 2 (/ size 4)) 2 :id :r2)
					 (circle size (* 3 (/ size 4)) 2 :id :r3))))
	   (text t1[center] (+ t1[bottom] 15) "T1" :align :center)
	   (text t2[center] (+ t2[bottom] 15) "T2" :align :center)
	   (text t3[center] (+ t3[bottom] 15) "T3" :align :center)
	   (text b1[center] (- b1[bottom] 10) "B1" :align :center)
	   (text b2[center] (- b2[bottom] 10) "B2" :align :center)
	   (text b3[center] (- b3[bottom] 10) "B3" :align :center)
	   (text (+ l1[center] 5) l1[bottom] "L1" :align :left)
	   (text (+ l2[center] 5) l2[bottom] "L2" :align :left)
	   (text (+ l3[center] 5) l3[bottom] "L3" :align :left)
	   (text (- r1[center] 5) r1[bottom] "R1" :align :right)
	   (text (- r2[center] 5) r2[bottom] "R2" :align :right)
	   (text (- r3[center] 5) r3[bottom] "R3" :align :right)))
;;END_SVG
#+END_SRC

[[./7l82ipTBWaG.20150324.01.svg]]


　T が T2 の省略であることについて補足しておくと、今後 line-style パラメータは正
式には :T1L2 のように指定することになる。しかし、:TL といった従来の記法もサポー
トし、それは :T2L2 に補完される、ということになる。

　この点について、正直なところチェックと補完の実装は面倒だな、と思う。面倒だと思
う理由は、正規表現を使えば簡単だからだ。しかしこれまで CL-SVG は CL-PPCRE を使用
してこなかった。だから手作業でやらなければならん気がしているわけだ。

　ちなみに、思いついたコードをとりあえずメモしておく。

#+BEGIN_SRC lisp
 (defun foo (arg)
   (#~m/^(?:CC|([TLBR])([123])?([TLBR])([123])?)$/i arg))

#+END_SRC



　‥‥‥本能にまかせて修正してみた。実験は以下のコード。

#+BEGIN_SRC lisp
 (rectangle 200 200 230 230 :id :r0
            :contents
            ((rectangle 180  50 30 30 :id :r1)
             (rectangle  50 180 30 30 :id :r2)
             (uml-association :r1 :r0 :arrows 2 :line-style :TT)
             (uml-association :r1 :r0 :arrows 2 :line-style :RR3)
             (uml-association :r2 :r0 :arrows 2 :line-style :L1L)
             (uml-association :r2 :r0 :arrows 2 :line-style :B3B3)
             (uml-association :r2 :r2 :arrows 1 :line-style :R1R3)))))

#+END_SRC


　結果は以下の通り。とりあえずイケたようなのでクローズしちゃおうか。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150324.02
 (load-stencil :grid)
 (load-stencil :uml-association)
 (create-svg (:width 400 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (rectangle 200 200 230 230 :id :r0
				  :contents
				  ((rectangle 180  50 30 30 :id :r1)
				   (rectangle  50 180 30 30 :id :r2)
				   (uml-association :r1 :r0 :arrows 2 :line-style :TT)
				   (uml-association :r1 :r0 :arrows 2 :line-style :RR3)
				   (uml-association :r2 :r0 :arrows 2 :line-style :L1L)
				   (uml-association :r2 :r0 :arrows 2 :line-style :B3B3)
				   (uml-association :r2 :r2 :arrows 1 :line-style :R1R3)))))

;;END_SVG
#+END_SRC

[[./7l82ipTBWaG.20150324.02.svg]]




&pagetag( "仕様変更", "タグマップ#仕様変更" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/21 12:36:22>
#<begin task ID:7tfSZyNIqAj>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:red
DATE:2015/03/23
PRIORITY:3
STATUS:done
TITLE:connectorのCC接続がCCにならない
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:7tfSZyNIqAj.00.png,7tfSZyNIqAj.sample1.svg,7tfSZyNIqAj.sample2.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　このタスクを起票した時点で、以下のような事象が出ている。正しいのは赤い点線なの
で、明らかに CC になっていない（これは記録として残すため、画像にしておく）。

[[./7tfSZyNIqAj.00.png]]


　コードは以下の通り。

#+BEGIN_SRC lisp
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-connector-style* :CC))
       (rectangle  50  70 20 100 :id :r1)
       (rectangle 150 130 20 100 :id :r2)
       (connector :r1 :r2)
       (line (list r1[center] r1[middle] r2[center] r2[middle])
             :stroke (stroke :color :red :dasharray '(3 3)))))

#+END_SRC

* 現状

#+BEGIN_SRC lisp
;;BEGIN_SVG sample1
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-connector-style* :CC))
       (rectangle  50  70 20 100 :id :r1)
       (rectangle 150 130 20 100 :id :r2)
       (connector :r1 :r2)
       (line (list r1[center] r1[middle] r2[center] r2[middle])
             :stroke (stroke :color :red :dasharray '(3 3)))))

;;END_SVG
#+END_SRC

[[./7tfSZyNIqAj.sample1.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG sample2
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-connector-style* :CC))
       (rectangle  70  50 100 20 :id :r1)
       (rectangle 130 150 100 20 :id :r2)
       (connector :r1 :r2)
       (line (list r1[center] r1[middle] r2[center] r2[middle])
             :stroke (stroke :color :red :dasharray '(3 3)))))

;;END_SVG
#+END_SRC

[[./7tfSZyNIqAj.sample2.svg]]

* log
** 2015/03/19

　起票。正直面倒だな。

** 2015/03/23

　面倒だけど、この件を片付けなければ。

　見ていくと、rectangle.lisp の get-rectangle-cc-point が間違っているらしいこと
がわかってきた。しかし、イマイチ掴めない。どうやら、sin / cos だけでなく、tan も
必要っぽいのだ。なおさら面倒臭いな。



　‥‥‥できた。矩形の右辺や左辺に接続する場合の座標位置の計算に誤りがあった。tan
を常に計算するようにしたら zero divide が発生してしまったのでそこだけ修正。ひと
まずクローズかな。

　いやいや待てよ。上辺や下辺に接続する場合をちゃんと検証していないぞ。というわけ
で、現状欄に追加。

　‥‥‥やっぱりダメだった。ちゃんと見直した結果、1 / tan を使えば良いことがわかっ
た。これがアークタンジェントなのかな？　とりあえずクローズ。



&pagetag( "バグ", "タグマップ#バグ" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/21 12:29:22 access:2020/02/26 16:13:55>
#<begin task ID:7yMc7Seq7DH>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
DATE:2020/02/26
PRIORITY:3
STATUS:done
TITLE:既存データの埋め込みダイアグラムを処理する
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


* 手順
** ~/task/cl-svg にて対象データを検索

#+BEGIN_EXAMPLE
search -gb '&svg('
#+END_EXAMPLE

** 頑張る

#+BEGIN_SRC lisp
;;BEGIN_SVG NAME
    ;
    ;
;;END_SVG
#+END_SRC

* 作業リスト [50/50]

  - [X]  41  dw2vob7TtnI   ネストとカンヴァスとディクショナリ再考
  - [X]  14  cgEI306bxmh   uml-interface-requestの作成
  - [X]   7  fQSbv6osQPt   UML要素におけるdefault-stroke使用時の挙動確認
  - [X]   6  4DT4GKKbkE2   UMLロールのためのクラス作成
  - [X]   4  4Tbj1y9DpLm   ディクショナリ参照で「直前に登録したやつ」を指定可能にする
  - [X]   3  itJNaq7qdbB   connectorをlineに接続可能にする
  - [X]   2  7l82ipTBWaG   shapeの接続点を増やす
  - [X]   2  flrZtAh7JWC   uml-generalizationの作成
  - [X]   2  gYO7DjnOQXy   CL-PREFAB連携の模索
  - [X]   2  7tfSZyNIqAj   connectorのCC接続がCCにならない
  - [X]   2  3lelWhCFaIV   uml-componentの作成
  - [X]   2  kyvrYILL7c6   開始と終了ステートの作成
  - [X]   2  inKYyRYNxUM   UML多重度のためのクラス作成
  - [X]   6  gZR5e7SFM3q   connectorをもっと賢くする：BBパターン
  - [X]   2  eFOeoIHnmFb   connectorをもっと賢くする：LLパターン
  - [X]   2  eGxPmN7aPNW   connectorをもっと賢くする：RRパターン
  - [X]   2  lPDgpmFIGvg   connectorをもっと賢くする：TTパターン
  - [X]   1  kIbztPia0yq   connectorをもっと賢くする：BLパターン
  - [X]   1  inXMgfPKHja   connectorをもっと賢くする：BRパターン
  - [X]   1  i116pu14Jga   connectorをもっと賢くする：LTパターン
  - [X]   1  3iPbh1Ccks9   connectorをもっと賢くする：LRパターン
  - [X]   1  3NaPGEbsNRQ   connectorをもっと賢くする：BTパターン
  - [X]   1  3THN0DmmhmH   connectorをもっと賢くする：LBパターン
  - [X]   1  4OBeHVvM8Vz   connectorをもっと賢くする：RTパターン
  - [X]   1  6qBusJh1auF   connectorをもっと賢くする：TRパターン
  - [X]   1  dQ0JEpwvWaP   connectorをもっと賢くする：TBパターン
  - [X]   1  ashNHUE2QdW   connectorをもっと賢くする：RLパターン
  - [X]   1  bJ1lB5W4Wzu   connectorをもっと賢くする：TLパターン
  - [X]   1  bRXyictetRU   connectorをもっと賢くする：RBパターン
  - [X]   1  gYyyed0UlLM   uml-dependencyの作成
  - [X]   1  0B9y2Iy4cna   やっぱりpackageのタブに名前を描画する
  - [X]   1  lv1wH6ms6l0   uml-associationの作成
  - [X]   1  gfDBGxxfNqg   uml-usecaseの作成
  - [X]   1  gqTg0mi7qli   uml-interfaceの作成
  - [X]   1  jYEoCkSP6CI   履歴ステートの作成
  - [X]   1  j8kVn5rZMZR   クラス属性のUML準拠作業
  - [X]   1  hnqwiNWDyF8   strokeのbase指定でnil上書きできない
  - [X]   1  hN9YHKIsE3A   arcが正しくない描画をする場合がある
  - [X]   1  lPGn2iQ6CFp   uml-noteの作成
  - [X]   1  7guAPN3sW0C   クラス操作パラメータのUML準拠作業
  - [X]   1  2O6Y7IfFQQ8   uml-nodeの作成
  - [X]   1  2Oy4hZw41ku   状態遷移の作成
  - [X]   1  3ilbfuOFbA9   クラス操作のUML準拠作業
  - [X]   1  40gdNMcCBbV   uml-actorの作成
  - [X]   1  61ZxT9hLMky   uml-implementationの作成
  - [X]   1  7CcagSgVKyn   カスタムendmark指定
  - [X]   1  8tI2983qU55   fontのbase指定でnil上書きできない
  - [X]   1  8vxD0Cjh1M0   uml-stateの作成
  - [X]   1  bWohJ8hPsfR   uml-compositionの作成
  - [X]   1  crW8tVg2EpC   uml-packageの作成

* log
** 2020/02/21

　起票。

　頑張って作業‥‥‥。残すところ 4 data。だけど、数が多いのが残ってる。

** 2020/02/26

　続き。cgEI306bxmh でエラーが出て解決できない。おそらく package の仕様変更前の
記述なんだろうな。

　‥‥‥違った。load-stencil が足りないだけだった。やれやれ。これで完了。クローズ。

#<end update:2020/02/26 17:04:29>
#<begin task ID:7CcagSgVKyn>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/05/15
PRIORITY:3
STATUS:done
TITLE:カスタムendmark指定
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:7CcagSgVKyn.20150514.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　現在、endmark は :arrow :triangle :diamond :circle から選択する仕様になってい
る。今後この種類が増えていく可能性はあるものの、それとは別に「カスタム描画」をサ
ポートしたい。これは、:arrow などのキーワードのかわりに関数を与えてしまい、それ
を描画に用いるというもの。


* log
** 2015/05/14

　起票。そして着手。

　さて、この機能追加を実現するには、ひとまず現状の endmark-info クラスを少し整理
しなくてはならない。少なくとも check メソッドが終わるまでの間に、保有するのが
:arrow などのキーワードではなく、描画関数そのものであるべきだ。

　あと、カスタム描画関数は当然ながら endmark クラスから見れば外部の関数のはずな
ので、これまでの関数のように endmark クラスのメンバにアクセスできるという前提を
置いてはならない。そのへんの整理をしなければな。

　とりあえず思いつく修正をして、endmark がカスタム関数を受け入れられるようにした。
試しに以下のようなコードを書いてみる。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150514
(in-package :cl-svg-user)
(load-stencil :grid)
(create-svg (:width 400 :height 400 :encoding :utf8)
    (grid)
    (let ((*default-font* (font :family "Courier New" :width-spice 0.8 :line-spacing 3))
          (*default-fill* :white)
          (*default-stroke* (stroke :color :black :width 1)))
      (macrolet ((entry (y end1 end2)
                   `(progn
                      (rectangle  50  ,y 40 40)
                      (rectangle 350  ,y 40 40)
                      (connector :$2 :$1 :end1 ,end1 :end2 ,end2))))
        (labels ((custom (points size class stroke fill writer)
                   (let* ((pt2 (cdr points)))
                     (class:with-access (writer pt2)
                       (writer->write  "<rect "
                                           "x='" (- pt2.x (/ size 2)) "' "
                                           "y='" (- pt2.y (/ size 2)) "' "
                                           "width='" size "' "
                                           "height='" size "' "
                                           (write-when class "class='" it "' ")
                                           (write-when fill  "fill='" it "' ")
                                           (cl-class:invoke stroke :to-string)
                                       "/>")))))
          (entry  50 :arrow             (endmark :arrow    :fill :white))
          (entry 100 :triangle          (endmark :triangle :fill :white))
          (entry 150 :diamond           (endmark :diamond  :fill :white))
          (entry 200 :circle            (endmark :circle   :fill :white))
          (entry 250 :rect              (endmark :rect     :fill :white))
          (entry 300 (endmark #'custom) (endmark #'custom  :fill :white))))))
;;END_SVG
#+END_SRC



　上記のコードを書いた当初、原因不明のエラーが出まくった。結局、fix-endmark-info
に対して「キーワードだけでなく関数も fix 対象とする」変更を加えたことが原因だっ
た。CL-CLASS のインスタンスもクロージャだから、カスタム関数でなく endmark-info 
インスタンスに対しても fix がかかってしまっていたというわけだ。

　それはそれとして、上記コードの結果は以下の通りだ。

[[./7CcagSgVKyn.20150514.svg]]


　‥‥‥実際問題としては、上記のようにダイアグラムコードに直接カスタム関数を書くこ
とはマズないだろう。connector 派生クラスでカスタム描画関数を追加する、というのが
妥当な方法だと思う。今後、その辺を整理していく感じになるかな。

　あとは何をすればいいかな？

	1.endmark 標準の機能として :rect 指定を追加する。
	2.あとは‥‥‥なんだっけ。

** 2015/05/15

　ではとりかかるとしようか。

　‥‥‥できたっぽい。もうちょっと何かしようか。何かないかな。endmark のカスタム関
数記述をサポートするような仕組みが欲しいような気がするが、それはそれで大変だ。いっ
たんクローズとしようか。



&pagetag( "機能追加", "タグマップ#機能追加" )
&pagetag( "endmark", "タグマップ#endmark" )

#<end update:2020/02/21 09:49:56 access:2020/02/21 09:49:59>
#<begin task ID:7Vyy0gVafhq>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/02/03
PRIORITY:3
STATUS:done
TITLE:load-stencilを文字列でなくキーワードで呼び出す
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view

　load-stencil が文字列呼び出しなのが気持ち悪い。キーワードにして、拡張子も省略
させたい。


* log
** 2015/02/03

　起票、そして着手。さらに完了。

#<end update:2020/02/20 12:46:55 access:2020/02/20 14:21:52>
#<begin task ID:8tI2983qU55>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:red
DATE:2015/04/17
PRIORITY:3
STATUS:done
TITLE:fontのbase指定でnil上書きできない
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:8tI2983qU55.20150417.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　〔TASK-0068：strokeのbase指定でnil上書きできない〕からの派生。同じ対処を 
font-info に対して実施する。


* log
** 2015/04/17

　起票。そして着手。そしてできたっぽいのでテスト。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150417
 (load-stencil :grid)
 (let ((*default-font*   (font :family     "Times New Roman"
                               :size       15
                               :color      :blue
                               :style      :italic
                               :decoration :underline
                               :weight     :bold)))
   (create-svg (:width 200 :height 400)
        (grid)
        (text 50  50 "default-font"     :align :left)
        (text 50 100 "reset family"     :align :left :font (font :family     nil :base *default-font*))
        (text 50 150 "reset size"       :align :left :font (font :size       nil :base *default-font*))
        (text 50 200 "reset color"      :align :left :font (font :color      nil :base *default-font*))
        (text 50 250 "reset style"      :align :left :font (font :style      nil :base *default-font*))
        (text 50 300 "reset decoration" :align :left :font (font :decoration nil :base *default-font*))
        (text 50 350 "reset weight"     :align :left :font (font :weight     nil :base *default-font*))))

;;END_SVG
#+END_SRC

[[./8tI2983qU55.20150417.svg]]

　‥‥‥いいだろう。クローズ。



&pagetag( "バグ", "タグマップ#バグ" )
&pagetag( "font-info", "タグマップ#font-info" )

#<end update:2020/02/21 11:58:33>
#<begin task ID:8vxD0Cjh1M0>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/05/18
PRIORITY:3
STATUS:done
TITLE:uml-stateの作成
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:8vxD0Cjh1M0.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　ステートマシン図のための uml-state のステンシルを作成する。


* sample

[[./8vxD0Cjh1M0.sample.svg]]

** source
#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :uml-state)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
;	   (*default-font*   (font :family "Times New Roman" :size 11 :width-spice 0.7 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (macrolet ((state (&rest args) `(uml-state ,@args))
			  (tran  (&rest args) `(uml-state-tran ,@args)))
	 (create-svg (:width 600 :height 400)
		(grid)
		(state :state1 100  75 :id :state1)
		(state :state2 500  75 :id :state2 :acts ((:trigger :enter :action :on-enter)
												  (:trigger :do    :action "Action")
												  (:trigger :exit  :action :on-exit)))
		(state :state3 300 250 :id :state3 :width 300 :height 200
			   :contents
			   ((let ((*uml-state-fill* :skyblue))
				  (state :state3-1 100  70)
				  (state :state3-2 200 130))
				(tran :$2 :$1 :line-style :RT)
				(tran :$2 :$3 :line-style :LB)))
		(tran :state1 :state2)
		(tran :state2 :state3 :line-style :BR)
		(tran :state3 :state1 :line-style :LB)
		(tran :state3 :state3 :line-style :B1B3))))
;;END_SVG
#+END_SRC

* log
** 2015/04/15

　起票。そして着手。

　もうほとんど直観で実装を開始。

** 2015/04/16

　‥‥‥とりあえず、動作するようになった。あとはアレだ。なんか、内部状態をもつ場合
に「状態を保存しますよ—」みたいな、丸の中に H を書くようなやつ、あれはまだ UML 
2.x にあるのだろうか？　それは後日確認として、他の作業をしよう。

** 2015/05/16

　保留状態から復帰。ちなみに履歴ステートについては、〔TASK-0087：履歴ステートの
作成〕で対応した。独立したステンシルになったわけだ。

　‥‥‥で、あとは何をするんだっけ。

** 2015/05/18

　〔状態遷移を作成していたタスク(TASK-0067：状態遷移の作成)〕にて、
trigger[guard]/action 形式のラベルを作成する uml-state-tranlabel というクラスを
作成した。これを uml-state でも使えるようにしよう。

　現在、uml-state には :entry :do :exit という３つのキーワードパラメータがある。
ここに :activities または :acts というキーワードパラメータを追加し、
uml-state-tranlabel のリストを指定できるようにする。最終的には :entry :do :exit 
は削除する。

　‥‥‥とりあえず動作する状態までいった。重要なポイントとして、uml-state 内部で使
う uml-state-tranlabel については、以下の２つのダイナミック変数が無視されるとい
うのがある。

	* *uml-state-tranlabel-font*
	* *uml-state-tranlabel-class*


　これらは、uml-state-tran で独立したテキストラベルとして描画される場合にみ有効
だ。entry / do / exit その他で uml-state 内部にテキストを描画する場合、上記のフォ
ント指定やクラス指定は無視され、uml-state の設定に従う。

　‥‥‥ひとまずクローズ。




&pagetag( "ステンシル作成", "タグマップ#ステンシル作成" )
&pagetag( "UML／状態マシン図", "タグマップ#UML／状態マシン図" )

#<end update:2020/02/21 09:45:51 access:2020/02/21 09:45:55>
#<begin task ID:8KilJq25v9i>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/02/15
PRIORITY:3
STATUS:done
TITLE:endmark指定の省略記法
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　現在、:label (label "name" :below) と書くかわりに、:label "name" と書くことが
できる。これと同じように :end1 (endmark :arrow) と書くかわりに :end1 :arrow と書
けるようにしたい。


* log
** 2015/02/15

　起票。

　そして着手。さらに完了。fix-endmark-info というマクロを提供。


&pagetag( "改善", "タグマップ#改善" )
&pagetag( "endmark", "タグマップ#endmark" )

#<end update:2020/02/20 16:07:31>
#<begin task ID:8PH7yRwkmul>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/02/03
PRIORITY:3
STATUS:done
TITLE:load-stencilにおける多重インクルード防止
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view

　現在、load-stencil はインクルードパスからファイルを探し、みつかるとそれを load 
する。しかし、これは何度も同じファイルをインクルードすることになりかねない（特に
複数の似たようなダイアグラムを生成する場合には）。なので、多重インクルード防止を
したい。


* log
** 2015/01/29

　起票。

** 2015/02/03

　着手。そして完了。以下のようにした。

#+BEGIN_SRC lisp
 (defparameter *include-paths* nil)
 
 (let ((include-cache nil))
   (defun load-stencil (stencil-name)
     (unless include-cache
       (setf include-cache (make-hash-table :test 'equalp)))
     (unless (gethash stencil-name include-cache)
       (labels ((find-stencil (lst)
                  (when lst
                    (let ((name (merge-pathnames stencil-name (car lst))))
                      ;;(format t "searching ~A ...~%" name)
                      (if (path:is-existing-file name)
                          name
                          (find-stencil (cdr lst)))))))
         (let ((found (or (find-stencil *include-paths*)
                          (find-stencil `(,(pathnames:get-current-directory))))))
           (unless found
             (error "stencil named '~A' not found." stencil-name))
           ;;(format t "loading ~A ...~%" found)
           (load found)
           (setf (gethash stencil-name include-cache) t))))))
#+END_SRC

#<end update:2020/02/20 12:43:44 access:2020/02/20 14:21:57>
#<begin task ID:9HZvVMWybmE>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:red
DATE:2020/04/30
PRIORITY:3
STATUS:wait
TITLE:endmark における stroke / fill の微妙なバグを改修する
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!edit

	* fill 指定がなければ stroke の color で塗り潰す、ができてない
	* default で親 line の stroke color とかを使用、もできていない

* log
** 2020/03/24

　起票。

#<end update:2020/03/24 19:39:07>
#<begin task ID:ashNHUE2QdW>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/03/30
PRIORITY:3
STATUS:done
TITLE:connectorをもっと賢くする：RLパターン
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:ashNHUE2QdW.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　〔TASK-0042：connectorをもっと賢くする〕から派生したタスク。:RL のパターンでの
挙動を整理し、実装する。


* 現状

[[./ashNHUE2QdW.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 400 :height 600 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-textbox-align* :center)
		   (*default-connector-style* :RL))
	   (macrolet ((box (x y w h id)
					`(rectangle ,x ,y ,w ,h :id ,id
								:contents
								((text (/ ,w 2) (/ ,h 2)
									   ,(string-downcase (symbol-name id))
									   :align :center)))))
		 ;;-------------------------------------------
		 (let ((x1  50)
               (x2 150))
		   (box x1  50 40 40 :f01) (box x2  50 40 40 :d01) (connector :f01 :d01 :end2 :arrow)
		   (box x1 130 40 40 :f02) (box x2 100 40 40 :d02) (connector :f02 :d02 :end2 :arrow)
		   (box x1 180 40 40 :f03) (box x2 210 40 40 :d03) (connector :f03 :d03 :end2 :arrow))
		 (let ((x1  70)
               (x2 130))
		   (box x1 320 40 40 :f04) (box x2 270 40 40 :d04) (connector :f04 :d04 :end2 :arrow)
		   (box x1 380 40 40 :f05) (box x2 430 40 40 :d05) (connector :f05 :d05 :end2 :arrow))
		 (let ((x1 300)
               (x2 250))
		   (box x1 100 40 40 :f06) (box x2  40 40 40 :d06) (connector :f06 :d06 :end2 :arrow)
		   (box x1 170 40 40 :f07) (box x2 230 40 40 :d07) (connector :f07 :d07 :end2 :arrow))
		 (let ((x1 330)
               (x2 270))
		   (box x1 360 40 40 :f08) (box x2 340 40 40 :d08) (connector :f08 :d08 :end2 :arrow :line-style :R1L1)
		   (box x1 420 40 40 :f09) (box x2 420 40 40 :d09) (connector :f09 :d09 :end2 :arrow :line-style :R2L2)
		   (box x1 510 40 40 :f10) (box x2 530 40 40 :d10) (connector :f10 :d10 :end2 :arrow :line-style :R3L3)
		 (box 70 500 40 40 :f11) (box 90 530 40 40 :d11) (connector :f11 :d11 :end2 :arrow)))))

;;END_SVG
#+END_SRC

* log
** 2015/03/25

　起票。

** 2015/03/30

　着手。

　‥‥‥一応できたかな。とりあえずクローズ。




&pagetag( "改善", "タグマップ#改善" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/21 12:11:36>
#<begin task ID:aEm6A6DZz0r>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/05/07
PRIORITY:3
STATUS:done
TITLE:フォント関連情報のキャッシュに関する問題再考
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　現在、多くの要素クラスで size や line-spacing、width-spice といった情報をキャッ
シュしている。これは、要素自身でサイズを算出しなければならない場合に必要な情報で
あり、かつ *default-font* や要素自身に指定された font-info が nil の場合がありう
るからである。結果、コードが無駄に複雑になってしまっている。この問題を解決する方
法を考える。

　方針としては、アプリケーションの開始時点で *default-font* が nil だった場合に
は、以下の情報群を使用して *default-font* を上書きする、という方法を検討していく。
問題は、おそらくそのタイミングになるだろう。

	* *default-font-family*
	* *default-font-size*
	* *default-font-color*
	* *default-font-style*
	* *default-font-decoration*
	* *default-font-weight*
	* *default-font-line-spacing*
	* *default-font-width-spice*


* log
** 2015/05/07

　起票。そして着手。

　要件にも書いた通り、問題はタイミングだ。おそらく create-svg マクロの展開時にコー
ドを埋め込むことになるが、create-svg に渡した body 部分で *default-font* の束縛
を作られるとそれが上書きされる‥‥‥いや、それでいいのか。そのような *default-font* 
の作成がいやならば、create-svg の外側で束縛を作って下さいね、という話になる。

　しかし、それによって *default-font* が非 nil であることを保証しても、
create-svg の body 内部で nil に再束縛されたらマズいことになる。とはいえ、それは
自己責任ということにしてもらうとしようか。

　以下のようなテストコードを作成。font-test を単体で呼び出すと nil を返すが、下
の大仰な let ブロックの内部からのコールでは font-info オブジェクトを返す。これで
イケるようだ。

#+BEGIN_SRC lisp
 (defun font-test () svg:*default-font*)
 
 (let ((svg:*default-font* (or svg:*default-font*
                               (font :family       svg:*default-font-family*
                                     :size         svg:*default-font-size*
                                     :color        svg:*default-font-color*
                                     :style        svg:*default-font-style*
                                     :decoration   svg:*default-font-decoration*
                                     :weight       svg:*default-font-weight*
                                     :width-spice  svg:*default-font-line-spacing*
                                     :line-spacing svg:*default-font-width-spice*))))
     (font-test))

#+END_SRC


　ひとまず、create-svg に上記のような補完束縛を行うコードは追加した。あとは、各
種の図形要素において *default-font* が nil だった場合の面倒臭いキャッシングコー
ドを除去していく作業か。本当面倒だな。頑張れ。

　‥‥‥一応終わったっぽい。ひとまずクローズ。




&pagetag( "改善", "タグマップ#改善" )
&pagetag( "font-info", "タグマップ#font-info" )

#<end update:2020/02/20 16:20:23>
#<begin task ID:aOoEWUrAQhU>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/03/09
PRIORITY:3
STATUS:done
TITLE:sformatの整理
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　svg-writer の sformat を check 配下でも使用するようになった。本来これは文字列
を作成するためだけのものなので svg-writer が提供する機能でなくても良い。そこで、
これを svg-writer から引き剥がし、独立させる。それに伴い、関数やメソッドの名前を
変更する。おおむね以下の要領。

	* svg-writer インターフェースおよびそれを実装するクラスの sformat は廃止。
	* 上記機能は、独立した関数として format-string とする。
	* font-info などについては、to-string メソッドと改名する。そこから 
	  format-string をコールするイメージ。
	* その他の sformat があれば、都度検討して対処する。


* log
** 2015/03/09

　起票。そして着手。

　作業を開始してすぐ、sformat の呼び出しが驚くほど少ないことに気付く。しかし、理
由はすぐに判明した。write-when と write-object-when マクロに隠されてしまっている
のだ。だからこれらも調べなければならない。

　‥‥‥作業完了。さしたる問題もなく、既存のテストは全て通った。クローズ。



&pagetag( "仕様変更", "タグマップ#仕様変更" )

#<end update:2020/02/20 16:13:20>
#<begin task ID:bIkrJyx7rij>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:red
DATE:2020/04/30
PRIORITY:3
STATUS:wait
TITLE:entity-canvas と shape-canvas の不整合を改善する
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!edit

　xxx

* log
** 2020/03/24

　起票。

#<end update:2020/03/24 19:39:11>
#<begin task ID:bJ1lB5W4Wzu>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/04/01
PRIORITY:3
STATUS:done
TITLE:connectorをもっと賢くする：TLパターン
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:bJ1lB5W4Wzu.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　〔TASK-0042：connectorをもっと賢くする〕から派生したタスク。:TL のパターンでの
挙動を整理し、実装する。


* 現状

[[./bJ1lB5W4Wzu.main.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG main
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 600 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-textbox-align* :center)
		   (*default-connector-style* :TL))
	   (macrolet ((box (x y w h id)
					`(rectangle ,x ,y ,w ,h :id ,id
								:contents
								((text (/ ,w 2) (/ ,h 2)
									   ,(string-downcase (symbol-name id))
									   :align :center)))))
		 ;;-------------------------------------------
		 (let ((y1 100)
			   (y2  30))
		   (box  30 y1 40 40 :f01) (box 110 y2 40 40 :d01) (connector :f01 :d01 :end2 :arrow)
		   (box 200 y1 40 40 :f02) (box 240 y2 40 40 :d02) (connector :f02 :d02 :end2 :arrow)
		   (box 400 y1 40 40 :f03) (box 380 y2 40 40 :d03) (connector :f03 :d03 :end2 :arrow)
		   (box 550 y1 40 40 :f04) (box 500 y2 40 40 :d04) (connector :f04 :d04 :end2 :arrow))
		 (let ((y1 220)
			   (y2 150))
		   (box  30 y1 40 40 :f05) (box 110 y2 40 40 :d05) (connector :f05 :d05 :end2 :arrow)
		   (box 200 y1 40 40 :f06) (box 240 y2 40 40 :d06) (connector :f06 :d06 :end2 :arrow)
		   (box 400 y1 40 40 :f07) (box 380 y2 40 40 :d07) (connector :f07 :d07 :end2 :arrow)
		   (box 550 y1 40 40 :f08) (box 500 y2 40 40 :d08) (connector :f08 :d08 :end2 :arrow))
		 (let ((y1 300)
			   (y2 370))
		   (box  30 y1 40 40 :f09) (box 110 y2 40 40 :d09) (connector :f09 :d09 :end2 :arrow)
		   (box 200 y1 40 40 :f10) (box 240 y2 40 40 :d10) (connector :f10 :d10 :end2 :arrow)
		   (box 400 y1 40 40 :f11) (box 380 y2 40 40 :d11) (connector :f11 :d11 :end2 :arrow)
		   (box 550 y1 40 40 :f12) (box 500 y2 40 40 :d12) (connector :f12 :d12 :end2 :arrow))
)))

;;END_SVG
#+END_SRC

* log
** 2015/03/25

　起票。

** 2015/04/01

　着手。

　‥‥‥とりあえず、実装はできたみたい。まぁ、クローズとするか。



&pagetag( "改善", "タグマップ#改善" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/21 12:10:51>
#<begin task ID:bRXyictetRU>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/04/02
PRIORITY:3
STATUS:done
TITLE:connectorをもっと賢くする：RBパターン
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:bRXyictetRU.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　〔TASK-0042：connectorをもっと賢くする〕から派生したタスク。:RB のパターンでの
挙動を整理し、実装する。


* 現状

[[./bRXyictetRU.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 620 :height 420 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-textbox-align* :center)
		   (*default-connector-style* :RB))
	   (macrolet ((box (x y w h id)
					`(rectangle ,x ,y ,w ,h :id ,id
								:contents
								((text (/ ,w 2) (/ ,h 2)
									   ,(string-downcase (symbol-name id))
									   :align :center)))))
		 ;;-------------------------------------------
		 (let ((y1  30)
			   (y2 100))
		   (box 110 y1 40 40 :d01) (box  30 y2 40 40 :f01) (connector :f01 :d01 :end2 :arrow)
		   (box 240 y1 40 40 :d02) (box 200 y2 40 40 :f02) (connector :f02 :d02 :end2 :arrow)
		   (box 380 y1 40 40 :d03) (box 400 y2 40 40 :f03) (connector :f03 :d03 :end2 :arrow)
		   (box 500 y1 40 40 :d04) (box 550 y2 40 40 :f04) (connector :f04 :d04 :end2 :arrow))
		 (let ((y1 150)
			   (y2 220))
		   (box 110 y1 40 40 :d05) (box  30 y2 40 40 :f05) (connector :f05 :d05 :end2 :arrow)
		   (box 240 y1 40 40 :d06) (box 200 y2 40 40 :f06) (connector :f06 :d06 :end2 :arrow)
		   (box 380 y1 40 40 :d07) (box 400 y2 40 40 :f07) (connector :f07 :d07 :end2 :arrow)
		   (box 500 y1 40 40 :d08) (box 550 y2 40 40 :f08) (connector :f08 :d08 :end2 :arrow))
		 (let ((y1 350)
			   (y2 280))
		   (box 110 y1 40 40 :d09) (box  30 y2 40 40 :f09) (connector :f09 :d09 :end2 :arrow)
		   (box 240 y1 40 40 :d10) (box 200 y2 40 40 :f10) (connector :f10 :d10 :end2 :arrow)
		   (box 380 y1 40 40 :d11) (box 400 y2 40 40 :f11) (connector :f11 :d11 :end2 :arrow)
		   (box 500 y1 40 40 :d12) (box 550 y2 40 40 :f12) (connector :f12 :d12 :end2 :arrow))
)))

;;END_SVG
#+END_SRC

* log
** 2015/03/25

　起票。

** 2015/04/02

　着手。

　‥‥‥できたかな、クローズ。





&pagetag( "改善", "タグマップ#改善" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/21 09:54:29 access:2020/02/21 09:54:31>
#<begin task ID:bWohJ8hPsfR>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/03/19
PRIORITY:3
STATUS:done
TITLE:uml-compositionの作成
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:bWohJ8hPsfR.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　uml-composition のステンシルを作成する。


* sample

[[./bWohJ8hPsfR.sample.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :textbox)
 (load-stencil :uml-composition)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (textbox 100 100 "classA" :align :center :id :clsA)
       (textbox 300 100 "classB" :align :center :id :clsB)
       (uml-composition :clsA :clsB :arrow nil :line-style :CC :keyword :arrows-nil)
       (uml-composition :clsA :clsB :arrow   t :line-style :BB :keyword :arrows-t)))
;;END_SVG
#+END_SRC

* log
** 2015/03/05

　起票。〔uml-associationができた(TASK-0034：uml-associationの作成)〕ら作業する
感じか。

** 2015/03/06

　〔uml-aggregation(TASK-0035：uml-aggregationの作成)〕と同じ理由で着手。

** 2015/03/19

　残すところ、ロールと多重度のみ。この点に関して uml-association が動作するよう
になったため、composition でもやってしまおうかと思っている。association とは異な
り、composition では dest 側だけになるけどな。

　‥‥‥それも完了。ひとまずクローズ。



&pagetag( "ステンシル作成", "タグマップ#ステンシル作成" )
&pagetag( "UML", "タグマップ#UML" )
&pagetag( "uml-composition", "タグマップ#uml-composition" )

#<end update:2020/02/21 09:44:38 access:2020/03/03 09:32:37>
#<begin task ID:c2R0XMJqVUn>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/02/17
PRIORITY:3
STATUS:done
TITLE:uml-actorにnameパラメータを追加する
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　やらなきゃね。name と nameposition だな。


* log
** 2015/02/15

　起票。そして着手。

　label-info というクラスを新規作成し、これをもってラベル指定を行う。一応動作す
るようにはなったが、ラベルテキストのための font と class 指定がまだできていない。

** 2015/02/17

　コードを見てマズい点に気付く。ラベルの location を決定する get-location-info 
は draw-beside-shape からコールされているが、これは *default-font* などのスペシャ
ル変数の束縛が外れた後だ。つまり、draw メソッドの内部から。だからここでスペシャ
ル変数を参照するコト自体が間違い。となると、やっぱり label-info 自体が font や 
class をメンバとして保有する必要が生じる。

　結局、stereotype-info と同じ方式をとることにした。つまり、個別には指定できない
ようにしたのだ。そして、スペシャル変数で制御することにした。完了。





&pagetag( "機能追加", "タグマップ#機能追加" )
&pagetag( "UML／ユースケース図", "タグマップ#UML／ユースケース図" )
&pagetag( "uml-actor", "タグマップ#uml-actor" )

#<end update:2020/02/20 16:07:10>
#<begin task ID:cgEI306bxmh>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/05/12
PRIORITY:3
STATUS:done
TITLE:uml-interface-requestの作成
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:cgEI306bxmh.20150421.01.svg,cgEI306bxmh.20150422.01.svg,cgEI306bxmh.20150423.01.svg,cgEI306bxmh.20150423.02.svg,cgEI306bxmh.20150424.01.svg,cgEI306bxmh.20150427.01.svg,cgEI306bxmh.20150511.01.svg,cgEI306bxmh.20150511.02.svg,cgEI306bxmh.20150512.01.svg,cgEI306bxmh.20150512.02.svg,cgEI306bxmh.20150512.03.svg,cgEI306bxmh.20150512.04.svg,cgEI306bxmh.20150512.05.svg,cgEI306bxmh.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　クラス図、コンポーネント図のための uml-interface-request のステンシルを作成する。

* 仕様まとめ
** マクロ

　マクロは１つで切り分ける想定だったが、２つに分割することになった。

#+BEGIN_SRC lisp
 (defmacro uml-interface-socket (x y from &key name line-style layer id)
   `(register-entity (ol:new uml-interface-socket ,x ,y ,from ,name ,line-style ,layer ,id)))
 
 (defmacro uml-interface-request (from dest &key name arrow line-style layer id)
   `(register-entity (ol:new uml-interface-request ,name ,from ,dest ,arrow ,line-style ,layer ,id)))

#+END_SRC

　uml-interface-socket は独立したソケットだけを描画する場合に使用し、uml-interface-request 
はインターフェースへの接続コネクタのように使用する。パラメータの詳細は以下の通り。

	【パラメータ】	【説明】
	x			socket のみ。ソケットの描画位置を指定する。
	y			socket のみ。ソケットの描画位置を指定する。
	from		そのインターフェース要求をする側の shape を指定する。
	dest		request のみ。要求されるインターフェースを指定する。
	name		任意。指定すると名前を印字する。
	arrow		任意。ソケットから dest に向かう破線矢印が描画される。
	line-style	任意。接続線の経路を指定する。
	layer		任意。レイヤー指定。
	id			任意。ID。

** クラス

　実装するクラスは以下の２つ。

	* uml-interface-request : uml-interface（と想定される shape）に接続する。
	* uml-interface-socket : 単独のソケットとして描画する場合に使用する。

** 描画位置確定手順
*** socket の場合

	1.%red( [座標 (x y) を中心とした円を dest と考える。] )
	2.from から dest に至る線分の座標集合を作成する。
	3.2 で取得した線の端と dest の中心がなす角度を計算する。これを z とする。
	4.ソケットの基準円 r を計算する。%red( [socket では dest に等しい。] )
	5.基準円 r と角度 z からソケットの描画範囲を確定する。

*** request の場合

	1.%red( [dest はパラメータとして与えられている。] )
	2.from から dest に至る線分の座標集合を作成する。
	3.2 で取得した線の端と dest の中心がなす角度を計算する。これを z とする。
	4.ソケットの基準円 r を計算する。%red( [dest から角度 z の方向へ一定距離移動するかたちになる。移動距離は arrow パラメータの有無による。] )
	5.基準円 r と角度 z からソケットの描画範囲を確定する。

* sample

[[./cgEI306bxmh.sample.svg]]

** source
#+BEGIN_SRC lisp
;;BEGIN_SVG sample
;(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-interface)
 (load-stencil :uml-interface-request)
 (load-stencil :uml-association)
 (let* ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1))
	   (title-font       (font :size 16 :weight :bold :base *default-font*)))
   (create-svg (:width 600 :height 200)
		(grid)
		(text 10 25 "socket" :font title-font)
		(uml-class :test1 100  75 :id :test1)
		(uml-class :test2 200 150 :id :test2)
		(uml-interface :foo 200 75 :id :foo)
		(uml-association :test1 :foo)
		(uml-interface-socket 90 150 :test2 :name :foo)
		(text 300 25 "requrest" :font title-font)
		(uml-class :test3 350  75 :id :test3)
		(uml-class :test4 550 150 :id :test4)
		(uml-interface :bar  470  75 :id :bar)
		(uml-interface :quux 420 150 :id :quux)
		(uml-association :test3 :bar)
		(uml-association :test4 :quux)
		(uml-interface-request :test3 :quux :arrow t :line-style :BL)
		(uml-interface-request :test4 :bar  :arrow t :line-style :TR)))

;;END_SVG
#+END_SRC

* log
** 2015/04/17

　起票。そして着手。といっても検討から。これは難物なのだ。

　どう難物かというと、こいつは通常コンポーネントまたはクラス要素から伸びた線の先
に描かれることになるが、その接続の向きによって描かれ方が変わるのだ。

** 2015/04/21

　気がつけば数日放置していた。サンプル欄に line と arc でイメージを書いていたら
「〔arc クラスのバグ(TASK-0075：arcが正しくない描画をする場合がある)〕」に気付い
てしまい、対処していたのだ。そちらは片付いたので、ここに戻ってきた。

　で、インターフェース要求だが、これは今までなかったタイプのステンシルになること
は明らかだ。他の（主にクラス）に接続できなければならないが、接続する線の入射角に
よって描画が変わる。これは従来の仕組みでは対応ができない。これをどうするか。

　ざっくり考えてみて、選択肢がいくつかある。明らかに無理なのもあるので、いったん
挙げてみてツブしていこうか。

	1.単純に shape 派生とし、独立したコネクタで接続する。
	2.connector 派生とし、端点をソケット形状にする。
	3.uml-note と同様の解決。つまり非コネクタとして実装し、「１本だけ」別の 
	  shape への接続を許可する。


　結局選択肢はないのだ。1 と 2 はそもそも無理だからである。1 はコネクタの入射角
に合わせてソケットを描画するのが無理だし、2 はそれ自体がコネクタなのであればどこ
かには接続しなければならないから無理。結局、3 しかない。

　では、3 にする方向で検討しよう。その場合、uml-interface-request は shape であ
るべきだろうか。それとも、他の何かであるべきだろうか。ここで考えなければならない
のは、以下のような描画（書くのが超絶面倒だった）もサポートできなければならないと
いうことだ。


[[./cgEI306bxmh.20150421.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150421.01
;(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-interface)
 (load-stencil :uml-association)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 400 :height 200)
		(grid)
		(uml-class :test1  75 100 :id :test1)
		(uml-interface :foo 175 100 :id :foo)
		(uml-association :test1 :foo)
		(line '(325 100 225 100))
		(uml-class :test2 325 100)
		(arc 215 100 10 270 90)
		(line '(225 100 185 100) :end2 :arrow :stroke (stroke :dasharray '(2 2) :base *default-stroke*))
		)))
;;END_SVG
#+END_SRC


　上図のような場合は、インターフェース要求とそこから伸びる依存の矢印全体を合わせ
て１つのコネクタとみることもできるだろう。

** 2015/04/22

　昨日最後に書いた図は、そもそも「uml-interface-request は shape であるべきだろ
うか」という話からだった。結論から言えば、shape ではありえない。理由は、依存の矢
印の出方だ。ソケットの円弧が、「全て描画されているわけではない円」の一部だとして、
その円全体が shape の領域だとするなら、左方向に伸びる依存の矢印が（図で言えば）
右端から描画されるのはおかしいだろう。shape ではこういうことはできない。だからイ
ンターフェース要求は shape ではない。

　それよりは、「インターフェース要求とそこから伸びる依存の矢印全体を合わせて１つ
のコネクタとみる」パターンの方が自然だろう。これで、２種類だ。

	1.ソケットが単体で存在し、それともう１つの何か（通常はクラス）を接続している
	  パターン。
	2.何か（通常はクラス）と何か（通常はインターフェース）を接続するコネクタのよ
	  うなパターン。


　問題は、明らかに上記の２種類は実装が根本的に異なるということだ。1 は uml-note
のような方式で実装されるだろうし、2 はひょっとしたら connector 派生クラスとして
実装されるかもしれない。

　あまりやりたくはないが、それが答えかもしれない。つまり、インターフェース要求を
実装するクラスを２つに分けるのだ。依存の矢印を描画する場合と、描画しない場合。そ
して、その使い分けはマクロで行なう‥‥‥と。その線で行くと、マクロのパラメータ設計
がかなり重要になる。普段はやらないが、とりあえずの候補を書いて、パラメータについ
てしっかり検討してみようか。

#+BEGIN_SRC lisp
 (defmacro uml-interface-request (from &key dest name x y line-style layer id) ...)

#+END_SRC

	【パラメータ】	【説明】
	from		必須。そのインターフェース要求をする側の shape を指定する。前の図で言えば test2。
	dest		任意。要求されるインターフェースを指定する。前の図で言えば foo。これを指定すると x と y が無視され、from から dest へのコネクタとして描画される。
	name		任意。指定すると名前を印字する。（dest が指定されると無視される、という仕様になるか？）
	x			任意。y とともに指定し、ソケットの描画位置を指定する。dest が指定されると無視される。
	y			任意。x とともに指定し、ソケットの描画位置を指定する。dest が指定されると無視される。
	line-style	任意。いずれにせよコネクタのような描画が行なわれるため、その経路を指定する。
	layer		任意。レイヤー指定。
	id			任意。ID。


　ということは、以下のような感じになるか？　まぁ、名前付けはともかくとして、こん
な感じではあるだろう。dest ありの場合は、しばらくの間 dependency を使うってのも
アリだし。

#+BEGIN_SRC lisp
 (defmacro uml-interface-request (from &key dest name x y line-style layer id)
   (if dest
       `(register-entity (ol:new uml-interface-request-1 ,from ,dest ,name ,line-style ,layer ,id))
       `(register-entity (ol:new uml-interface-request-2 ,from ,x ,y ,name ,line-style ,layer ,id))))

#+END_SRC


　では次。dest なしの場合なのだけれど、以下のような使い方も当然、考えられる。た
しか、「UMLモデリングのエッセンス第３版」では「コンポジット構造図でしか認められ
ない」記法だとされていた気がする。この場合、事実上インターフェースに接続している
感じになるわけなので、x と y を指定するにしても、foo の座標をそのまま指定できた
方が楽だろう。


[[./cgEI306bxmh.20150422.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150422.01
;(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-interface)
 (load-stencil :uml-association)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 400 :height 200)
		(grid)
		(uml-class :test1  75 100 :id :test1)
		(uml-interface :foo 200 100 :id :foo)
		(uml-association :test1 :foo)
		(line '(325 100 215 100))
		(uml-class :test2 325 100)
		(arc 205 100 10 290 70)
;		(arc 200 100 15 315 45)
		)))
;;END_SVG
#+END_SRC


　いや、上のような場合は、dest を指定した場合に含める方がいいのだろうか？　この
場合、依存の矢印を付けるか否かを指定するパラメータを追加することになる‥‥‥うん、
それがいいような気がしてきた。ここまでを「仕様まとめ」欄に整理。



　では、次に uml-interface-socket について考えていくとしよう。これはひとまず、
entity 派生クラスになると思う。そして、from で指定された shape と座標 (x y) を
結ぶ線を line-style で作成する。問題は、実際に座標 (x y) まで線をひいてはダメ、
ということだ。ソケットの描画を考慮しなければならない。面倒だな。

　この部分、実際の手順としては以下のようなモノになると思う。

	1.from から (x y) に至る線分の座標集合を作成する。
	2.座標 (x y) を中心とした円（ソケットの半径）と 1 の線分の交点を計算し、線分の終点を変更する。
	3.座標 (x y) と線分の終点がなす角度を確認し、ソケットの描画範囲を確定する。

** 2015/04/23

　最初から余談になるけれど、ソケットのデザイン、以下のどちらがいいだろう？　上の
方がお気に入りだが、インターフェース本体と中心点がズレているので描画は面倒だ。


[[./cgEI306bxmh.20150423.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150423.01
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-interface)
 (load-stencil :uml-association)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 400 :height 200)
		(grid)
		(let ((y 70))
		  (uml-class       :test1-1  75 y :id :test1-1)
		  (uml-interface   :foo-1   200 y :id :foo-1)
		  (uml-association :test1-1 :foo-1)
		  (line `(325 ,y 215 ,y))
		  (uml-class :test2-1 325 y)
		  (arc 205 y 10 290 70))
		(let ((y 130))
		  (uml-class       :test1-2  75 y :id :test1-2)
		  (uml-interface   :foo-2   200 y :id :foo-2)
		  (uml-association :test1-2 :foo-2)
		  (line `(325 ,y 215 ,y))
		  (uml-class :test2-2 325 y)
		  (arc 200 y 15 300 60))))
;;END_SVG
#+END_SRC



　本題に戻るとしよう。昨日最後に書いたことは、もうちょっと洗練する必要がありそう
だ。というのも、socket と request の場合でできるだけ処理を共通化したいからだ。そ
こで、以下のように変更してみる。socket と request で異なる部分は赤字にしてみた。

◇socket の場合

	1.%red( [座標 (x y) を中心とした円を dest と考える。] )
	2.from から dest に至る線分の座標集合を作成する。
	3.2 で取得した線の端と dest の中心がなす角度を計算する。これを z とする。
	4.ソケットの基準円 r を計算する。%red( [socket では dest に等しい。] )
	5.基準円 r と角度 z からソケットの描画範囲を確定する。

◇request の場合

	1.%red( [dest はパラメータとして与えられている。] )
	2.from から dest に至る線分の座標集合を作成する。
	3.2 で取得した線の端と dest の中心がなす角度を計算する。これを z とする。
	4.ソケットの基準円 r を計算する。%red( [dest から角度 z の方向へ一定距離移動するかたちになる。移動距離は arrow パラメータの有無による。] )
	5.基準円 r と角度 z からソケットの描画範囲を確定する。



　いいんではなかろうか？　なにより、今日最初に書いた、お気に入りのソケット描画の
やり方ができるというのも嬉しい。というのも、request の場合は arrow 対応の関係で
基準円をズラすことが最初から織り込み済みだからだ。ひとまずこれを「仕様まとめ欄」
に入れておこう。


　次なる問題は、socket と request がそれぞれどこから派生するべきか、という問題だ。
request は connector に非常に近いが、connector から派生するのが妥当かどうか、ちょっ
と自信がない。socket に至ってはどうすれば良いのやら、という感じだ。

　というわけで、〔クラス情報〕をみてみよう。複合的な描画をするという意味では
group かなとも思ったが、group にしてしまうと同時に shape でもあることになってし
まう。それだと、ソケットに何か別のコネクタを接続できてしまうことになるのだ。そう
考えると、group 以前に shape 派生クラスではない、ということになる。

　‥‥‥ひとまず、以下の２つを方針としようか。

	* socket は arc 派生。
	* requrest は connector 派生。


　あとは頑張るばかりなり‥‥‥かな？


　まだ完成ではないのだけれど、socket が描画できるようになった。以下。


[[./cgEI306bxmh.20150423.02.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150423.02
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-interface-request)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 300 :height 200)
		(grid)
		(uml-class :test 200 100 :id :test)
		(uml-interface-socket 100  50 :test :line-style :TR :name (label :foo :above))
		(uml-interface-socket 100 100 :test :line-style :CC :name :foo)
		(uml-interface-socket 100 150 :test :line-style :BR :name :foo)
		(uml-interface-socket 270  50 :test :line-style :CC :name :foo)))
;;END_SVG
#+END_SRC


　右上のヤツが（完成したらちゃんと描画されてしまうが）おかしいことからわかる通り、
ソケットを描画する arc の開始角と終了角を計算する部分だけが残っている。

　それと、懸念事項がひとつある。名前の描画は label-info を使用しているけれど、こ
いつに描画をさせる場合、shape を与える必要があるんだな。だから、socket のクラス
は check メソッドで作成した基準円をキャッシュしていて、それを使ってラベルを描画
している。そのため、どうなっても「少しズレて」しまうのだ。まぁこれは仕方ないかな。

　さて、では socket のクラスについて最後の作業。arc の描画角度の算出だ。しかし、
これはちょっと面倒かもしれない。というのも、これはおそらく math/sin なんかを使う
ことになると思うのだけれど、あれは sin 値とかを返すんだな。それを角度に変えるに
はどうすればいいんだろう？　そのへんの探索からやる必要がありそうだ。

** 2015/04/24

　さて、たしかに math/sin なんかを使えば、２点を指定して三角関数を使うことができ
るし、オフセットの角度をさらに指定することもできる。だから、arc に必要なことはほ
とんどできる‥‥‥が、決定的にマズいことに、arc は「角度」でパラメータを要求する。
これを算出する方法がわからないのだ。

　おそらくなのだけれど、sin/cos 値から角度を逆算することはできないような気がする。
いや、念のために調べてみようか。

　‥‥‥どうやら、asin や acos に三角関数値を渡せば radian が帰ってくるらしいぞ。こ
れを RADIAN-UNIT で割ってやれば、角度が出るんではなかろうか。だがしかし。sin(60) 
と sin(120) は同じ値になるのだ。それを asin にかけたらどうなる？　おそらく、
math/sin のように math/asin を作れば良いというわけでもなさそうだ。

　解法はおそらく、sin 値と cos 値の関係から結果を類推することだ。そこでまずは以
下のようなテスト関数を作成した。

#+BEGIN_SRC lisp
 (let ((RADIAN-UNIT (/ pi 180)))
   (defun test (degree)
     (let* ((radian (* RADIAN-UNIT degree))
            (sin    (cl:sin radian))
            (cos    (cl:cos radian)))
       (let ((asin (/ (cl:asin sin) RADIAN-UNIT))
             (acos (/ (cl:acos cos) RADIAN-UNIT)))
         (format t "~A	~A	~A	~A	~A~%" degree
                 (coerce sin 'single-float) (coerce asin 'single-float)
                 (coerce cos 'single-float) (coerce acos 'single-float))))))

#+END_SRC

　0 -> 360 で 30 刻みに実行した結果はざっくり以下のような感じ。

	【degree】	【sin】			【asin】	【cos】		【acos】
	0			0.0				0.0			1.0			0.0
	30			0.5				30.0		0.8660254	30.0
	60			0.8660254		60.0		0.5			60.0
	90			1.0				90.0		0.0			90.0
	120			0.8660254		60.0		-0.5		120.0
	150			0.5				30.0		-0.8660254	150.0
	180			0.0				0.0			-1.0		180.0
	210			-0.5			-30.0		-0.8660254	150.0
	240			-0.8660254		-60.0		-0.5		120.0
	270			-1.0			-90.0		0.0			90.0
	300			-0.8660254		-60.0		0.5			60.0
	330			-0.5			-30.0		0.8660254	30.0
	359			-0.017452406	-1.0		0.9998477	1.0


　見えてきた。sin 値が非負の場合、acos がそのまま答えになる。負の場合は acos を 
360 から引いたのが答えだ。これにより、テスト関数を以下のように変更してみた。

#+BEGIN_SRC lisp
 (let ((RADIAN-UNIT (/ pi 180)))
   (defun test (degree)
     (let ((sin (svg:math/sin degree))
           (cos (svg:math/cos degree)))
       (let* ((acos (/ (cl:acos cos) RADIAN-UNIT)))
         (format t "	~A	~A	~A	~A~%" degree
                 (coerce sin 'single-float) (coerce cos 'single-float)
                 (coerce (if (<= 0 sin)
                             acos
                             (- 360 acos)) 'single-float))))))

#+END_SRC

　結果は以下の通り。大丈夫みたいだ。

	【degree】	【sin】			【cos】		【result】
	0			0.0				1.0			0.0
	30			0.5				0.8660254	30.0
	60			0.8660254		0.5			60.0
	90			1.0				0.0			90.0
	120			0.8660254		-0.5		120.0
	150			0.5				-0.8660254	150.0
	180			0.0				-1.0		180.0
	210			-0.5			-0.8660254	210.0
	240			-0.8660254		-0.5		240.0
	270			-1.0			0.0			270.0
	300			-0.8660254		0.5			300.0
	330			-0.5			0.8660254	330.0
	359			-0.017452406	0.9998477	359.0


　‥‥‥というわけで、ソケットクラスの実装を変更してみた。ループで出してみよう、それ。


[[./cgEI306bxmh.20150424.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150424.01
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-interface-request)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 400 :height 400)
		(grid)
		(uml-class :test 200 200 :id :test)
		(do ((deg 0 (+ deg 10)))
			((<= 360 deg) nil)
		  ;(warn "deg = ~A" deg)
		  (uml-interface-socket (+ 200 (* 150 (math/sin deg)))
                                (+ 200 (* 150 (math/cos deg))) :test :line-style :CC))))
;;END_SVG
#+END_SRC


　‥‥‥うん、いい感じ。と思ったが、ちょっと問題がある。上記のテスト図は 10 度で刻
んで描画しているのだが、これを 15度刻みにするとエラーが発生するのだ。いったい何
故だろう。おそらく、math 系関数に問題がありそうな予感。

　少しコードを調べてみて、〔単独のタスク(TASK-0079：math系関数の再テスト)〕とし
て扱うべき問題と判断。終わったら戻ってこよう。

** 2015/04/27

　〔math系関数の再テスト(TASK-0079：math系関数の再テスト)〕、ざっくりやった感じ
では問題が見つからなかった。もういちど、math系関数以外の部分の調査に戻るとしよう
か。

　というわけで、以下のコードを実行してみた。

#+BEGIN_SRC lisp
 (let ((*default-fill*   :white)
       (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
       (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 400 :height 400)
               (grid)
               (uml-class :test 200 200 :id :test)
               (let ((deg 345))
                 (uml-interface-socket (+ 200 (* 150 (math/sin deg)))
                                       (+ 200 (* 150 (math/cos deg))) :test :line-style :CC))))

#+END_SRC


　結果は以下のエラー。uml-interface-socket::reverse-degree でオチてるって出てる
わ。最初からこれ調べれば良かった。


 The value #C(0.0d0 1.207418274506087d-6) is not of type REAL.
    [Condition of type TYPE-ERROR]
 
 Restarts:
  0: [ABORT] Exit debugger, returning to top level.
 
 Backtrace:
   0: ((LABELS REVERSE-DEGREE :IN #:CLASS-UML-INTERFACE-SOCKET1995) 1.1379786002407855d-15 1.0000000000000002d0)
   1: ((LABELS DRAW :IN #:CLASS-UML-INTERFACE-SOCKET1995) #<CLOSURE (LABELS #:OBJECT1200 :IN #:INTERFACE-SVG-WRITER1206) {100883A4BB}>)


　で、uml-interface-socket::reverse-degree の内容と上記のパラメータ値から以下の
ようなコードで実験。

#+BEGIN_SRC lisp
 (let ((sin 1.1379786002407855d-15)
       (cos 1.0000000000000002d0))
   (let* ((RADIAN-UNIT (/ pi 180))
          (acos        (/ (cl:acos cos) RADIAN-UNIT)))
     (round (if (<= 0 sin)
                acos
                (- 360 acos)))))

#+END_SRC


　たしかに同じようなエラーが出る。結局、cos の値が１を超えていて、それを cl:acos 
に渡しているのがダメなようだ。というわけで、以下のようにコードを修正。when ブロッ
クで絶対値をみて、１を超えているようであれば round する。これでエラーは出なくなっ
た。

#+BEGIN_SRC lisp
 (let ((sin 1.1379786002407855d-15)
       (cos 1.0000000000000002d0))
   (when (< 1 (abs cos))
     (setf cos (round cos)))
   (let* ((RADIAN-UNIT (/ pi 180))
          (acos        (/ (cl:acos cos) RADIAN-UNIT)))
     (round (if (<= 0 sin)
                acos
                (- 360 acos)))))

#+END_SRC


　これでやるべきことは見えたわけだ。ちょっと試行錯誤したが、
uml-interface-socket::draw に上記の when ブロックに相当するものを追加、結果とし
て、元々問題だった 15刻みができるようになった。以下のように。


[[./cgEI306bxmh.20150427.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150427.01
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-interface-request)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 400 :height 400)
		(grid)
		(uml-class :test 200 200 :id :test)
		(do ((deg 0 (+ deg 15)))
			((<= 360 deg) nil)
		  ;(warn "deg = ~A" deg)
		  (uml-interface-socket (+ 200 (* 150 (math/sin deg)))
								(+ 200 (* 150 (math/cos deg))) :test :line-style :CC))))
;;END_SVG
#+END_SRC


　どうやらこれで socket クラスは完成か。次は request だな。

　‥‥‥あー、ちょいまち。以下のページにある SVG 図面でエラーが発生するようになって
しまった。どうやらこのタスクでの修正内容に問題があるっぽい。要調査。

	* 〔TASK-0040：UML多重度のためのクラス作成〕
	* 〔TASK-0041：UMLロールのためのクラス作成〕
	* 〔TASK-0071：uml-interface-requestの作成〕
	* 〔class css〕
	* 〔class raw-svg〕
	* 〔class svg-buffer-writer〕
	* 〔class svg-writer〕
	* 〔class text〕
	* 〔クラス情報〕


　とりあえず問題を起こしていそうな部分はわかった。以下の、矩形の CC 接続点を算出
コードでゼロ除算が発生しているようなのだ。

#+BEGIN_SRC lisp
 (defun get-rectangle-cc-point (cx cy width height px py)
   (let* ((w/2   (/ width  2))
          (h/2   (/ height 2))
          (len1  (math/len cx cy (+ cx w/2) (+ cy h/2)))    ;; length between center to corner.
          (len2  (math/len cx cy px py))
          (c-sin (/ h/2 len1))
          (p-sin (/ (- py cy) len2))
          (p-cos (/ (- px cx) len2)))
     (cond
       ((< 0 c-sin p-sin)     (ol:new point (+ cx (* (/ p-cos p-sin) h/2)) (+ cy h/2)))       ;; bottom line
       ((< p-sin (- c-sin) 0) (ol:new point (- cx (* (/ p-cos p-sin) h/2)) (- cy h/2)))       ;;  upper line
       ((< cx px)             (ol:new point (+ cx w/2) (+ cy (* (/ p-sin p-cos) w/2))))       ;;  right line
       (t                     (ol:new point (- cx w/2) (- cy (* (/ p-sin p-cos) w/2)))))))    ;;   left line

#+END_SRC


　どうやって辿りついたのかというと、〔TASK-0040：UML多重度のためのクラス作成〕で
エラーを起こしているヤツから余計なモノを削ぎ落としていった結果、以下のコードが 
(get-rectangle-cc-point 320 260 20 20 320.0 260) を呼び出して、その内部でゼロ除
算を起こしていたのだ。

#+BEGIN_SRC lisp
 (create-svg (:width 400 :height 400)
      (grid)
      (let ((*default-fill*   :white)
            (*default-stroke* (stroke :color :black :width 1))
            (*default-connector-style* :CC)
            (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
        (rectangle 200 200 360 360 :id :r0
                   :contents
                   ((rectangle 300 120 20 20 :id :r3)
                    (rectangle 300 240 20 20 :id :r4)
                    (uml-association :r3 :r4 :arrows 2 :mult1 '(3 :*) :mult2 '(4 :*))))))

#+END_SRC


　しかし、その、なんというか、(get-rectangle-cc-point 320 260 20 20 320.0 260) と
いう呼び出しはどう考えてもおかしい。先の get-rectangle-cc-point の定義を見ればわ
かる通り、これは (cx cy) を中心とする width / height の矩形から (px py) に線を引
いた場合の接続点を求めるモノだ。でも、(cx cy) と (px py) が同じ点じゃないか。つ
まり、この関数自体に問題があるわけじゃないってことだ。

　‥‥‥結局、resolve-connector-points-for-CC に問題があることが発覚。これを修正し
たところ、全て正常に動作するようになった。ふぅ。

** 2015/04/28

　次は request だな。以前整理した後、思いついたこともあるので、追加事項を整理し
よう。

	* arrow パラメータが t でも、十分な流さが線分にない場合は描画しない。


　まぁ、これは仕方がないだろう。では、ちょっとずつ実装いってみようか。

　‥‥‥少し考えた末、やっぱりマクロは分割することに。uml-interface-request と 
uml-interface-socket だ。そしてストロークをキャッシュしていないという問題も見つ
けた。先に socket をちゃんと直してしまおうか。

** 2015/05/01

　さて、このタスクは長いな‥‥‥とりあえず、socket のストロークキャッシュ問題は解決。
だが、テストで別の問題が発覚。クラス図の要素は実線だったり点線だったりが決まって
いるため、*default-stroke* を使用する場合でもそこは修正しなければならない。これ
がクラス図なんかでできていないらしいのだ。これは全体的に確認しなければならない事
項だろう。〔新しいタスクを作成して取り組む(TASK-0080：UML要素における
default-stroke使用時の挙動確認)〕ことにする。

** 2015/05/07

　〔寄り道タスク(TASK-0080：UML要素におけるdefault-stroke使用時の挙動確認)〕も
一段落したので、帰ってきた。さて、何をするんだっけ。

　そうだ、いよいよ requrst に着手するんだった。では、現状確認からいってみよう。

** 2015/05/08

　再びこれまでの記録を読み返してから、request の実装にとりかかる。相変わらず 
connector 派生にするかどうかで悩んでいるが‥‥‥

** 2015/05/11

　悩んだまま週末を過ぎてしまった。現時点で考えているのは、「connector 派生でもそ
うでなくても、外部からみてconnectorに見えればそれでいいじゃないか」ということ。
まぁそれはその通りで、だからといって connector 派生にするべきか否かの結論が出る
わけじゃないんだけどな。

　とりあえず、connector 派生でいこうか。connector は draw をオーバーライドしてお
らず、line の実装を使用している。interface-request は set-points を使って描画点
を上書きしなければならないが、それは pre-draw でやろう。そして arc や追加の矢印
の描画は post-draw でやる‥‥‥と。方針はそんな感じか。では実装開始。

　作り始めてみて、やっぱりキモになるのは private メソッドである fix-points だと
痛感。これは基底クラスが作成した points 情報を「切り分ける」作業をする。ポイント
は以下の通りだ。

	* arrow パラメータが nil の場合、破線矢印は必要ない。
	* 上記以外の場合でも、最後の線分の流さが規程以下であれば破線矢印は描画しない。
	* 破線矢印を描画する場合、基準となるのは最後の線分の中央点とするが、規程長を
	  超える場合は規程長の位置とする。


　‥‥‥とりあえず、描画はできるレベルまで実装。まだいくつかバグっぽい部分があるし、
キャッシュしていない情報もある。

　よし、コードレベルでは修正完了。あとは動きをみていこうか。まずは基本的なのから。


[[./cgEI306bxmh.20150511.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150511.01
;(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-interface-request)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 300 :height 200)
		(grid)
		(uml-class     :foo1 200  30 :id :foo1)
		(uml-class     :foo2 200 170 :id :foo2)
		(uml-interface (label :bar1 :above)  80  80 :id :bar1)
		(uml-interface (label :bar2 :below)  80 120 :id :bar2)
		(uml-interface-request :foo1 :bar1 :arrow t)
		(uml-interface-request :foo2 :bar2 :arrow nil)))

;;END_SVG
#+END_SRC


　次、:arrow t に対して少しずつ近付けていった場合。うん、大丈夫そうだ。


[[./cgEI306bxmh.20150511.02.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150511.02
;(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-interface-request)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 300 :height 450)
		(grid)
		(uml-class :class1  75  50 :id :class1) (uml-interface :foo1 250  50 :id :foo1) (uml-interface-request :class1 :foo1 :arrow t)
		(uml-class :class2  90 100 :id :class2) (uml-interface :foo2 250 100 :id :foo2) (uml-interface-request :class2 :foo2 :arrow t)
		(uml-class :class3 105 150 :id :class3) (uml-interface :foo3 250 150 :id :foo3) (uml-interface-request :class3 :foo3 :arrow t)
		(uml-class :class4 120 200 :id :class4) (uml-interface :foo4 250 200 :id :foo4) (uml-interface-request :class4 :foo4 :arrow t)
		(uml-class :class5 135 250 :id :class5) (uml-interface :foo5 250 250 :id :foo5) (uml-interface-request :class5 :foo5 :arrow t)
		(uml-class :class6 150 300 :id :class6) (uml-interface :foo6 250 300 :id :foo6) (uml-interface-request :class6 :foo6 :arrow t)
		(uml-class :class7 165 350 :id :class7) (uml-interface :foo7 250 350 :id :foo7) (uml-interface-request :class7 :foo7 :arrow t)
		(uml-class :class8 180 400 :id :class8) (uml-interface :foo8 250 400 :id :foo8) (uml-interface-request :class8 :foo8 :arrow t)))

;;END_SVG
#+END_SRC

** 2015/05/12

　動作確認の続き。:CC で色々な角度に対してやってみよう‥‥‥気持ち悪いな。でも大丈
夫みたい。


[[./cgEI306bxmh.20150512.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150512.01
;(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-interface-request)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 500 :height 500)
		(grid)
		(uml-class :class  250 250 :id :class)
		(do ((len 100 (+ len  5))
			 (deg   0 (+ deg 15)))
			((<= 360 deg) nil)
		  (let ((kwd (intern (format nil "INTERFACE~A" deg) :keyword)))
			(uml-interface "" (+ 250 (* len (svg::math/cos deg)))
							  (+ 250 (* len (svg::math/sin deg))) :id kwd)
			(uml-interface-request :class kwd :arrow t)))))

;;END_SVG
#+END_SRC




　じゃあ次。:CC 以外で折れ曲りの場合だ。楽しくなってきた。


[[./cgEI306bxmh.20150512.02.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150512.02
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-interface-request)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 500 :height 500)
		(grid)
		(uml-class :class  250 250 :id :class)
		(uml-interface (label :foo01 :left)  230  50 :id :foo01) (uml-interface-request :class :foo01 :arrow t :line-style :T3R)
		(uml-interface (label :foo02 :left)  180 100 :id :foo02) (uml-interface-request :class :foo02 :arrow t :line-style :T2R)
		(uml-interface (label :foo03 :left)  130 150 :id :foo03) (uml-interface-request :class :foo03 :arrow t :line-style :T1R)
		(uml-interface (label :foo04 :below)  50 270 :id :foo04) (uml-interface-request :class :foo04 :arrow t :line-style :L1T)
		(uml-interface (label :foo05 :below) 100 320 :id :foo05) (uml-interface-request :class :foo05 :arrow t :line-style :L2T)
		(uml-interface (label :foo06 :below) 150 370 :id :foo06) (uml-interface-request :class :foo06 :arrow t :line-style :L3T)
		(uml-interface (label :foo07 :right) 270 450 :id :foo07) (uml-interface-request :class :foo07 :arrow t :line-style :B1L)
		(uml-interface (label :foo08 :right) 320 400 :id :foo08) (uml-interface-request :class :foo08 :arrow t :line-style :B2L)
		(uml-interface (label :foo09 :right) 370 350 :id :foo09) (uml-interface-request :class :foo09 :arrow t :line-style :B3L)
		(uml-interface (label :foo10 :above) 450 230 :id :foo10) (uml-interface-request :class :foo10 :arrow t :line-style :R3B)
		(uml-interface (label :foo11 :above) 400 180 :id :foo11) (uml-interface-request :class :foo11 :arrow t :line-style :R2B)
		(uml-interface (label :foo12 :above) 350 130 :id :foo12) (uml-interface-request :class :foo12 :arrow t :line-style :R1B)))

;;END_SVG
#+END_SRC



　‥‥‥よし、最後に stroke がちゃんと処理されているかどうかのチェックだな。面倒な
ので同じ図でいっちゃおう。


[[./cgEI306bxmh.20150512.03.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150512.03
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-interface-request)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :blue :width 3 :dasharray '(2 2))))
   (create-svg (:width 500 :height 500)
		(grid)
		(uml-class :class  250 250 :id :class)
		(uml-interface (label :foo01 :left)  230  50 :id :foo01) (uml-interface-request :class :foo01 :arrow t :line-style :T3R)
		(uml-interface (label :foo02 :left)  180 100 :id :foo02) (uml-interface-request :class :foo02 :arrow t :line-style :T2R)
		(uml-interface (label :foo03 :left)  130 150 :id :foo03) (uml-interface-request :class :foo03 :arrow t :line-style :T1R)
		(uml-interface (label :foo04 :below)  50 270 :id :foo04) (uml-interface-request :class :foo04 :arrow t :line-style :L1T)
		(uml-interface (label :foo05 :below) 100 320 :id :foo05) (uml-interface-request :class :foo05 :arrow t :line-style :L2T)
		(uml-interface (label :foo06 :below) 150 370 :id :foo06) (uml-interface-request :class :foo06 :arrow t :line-style :L3T)
		(uml-interface (label :foo07 :right) 270 450 :id :foo07) (uml-interface-request :class :foo07 :arrow t :line-style :B1L)
		(uml-interface (label :foo08 :right) 320 400 :id :foo08) (uml-interface-request :class :foo08 :arrow t :line-style :B2L)
		(uml-interface (label :foo09 :right) 370 350 :id :foo09) (uml-interface-request :class :foo09 :arrow t :line-style :B3L)
		(uml-interface (label :foo10 :above) 450 230 :id :foo10) (uml-interface-request :class :foo10 :arrow t :line-style :R3B)
		(uml-interface (label :foo11 :above) 400 180 :id :foo11) (uml-interface-request :class :foo11 :arrow t :line-style :R2B)
		(uml-interface (label :foo12 :above) 350 130 :id :foo12) (uml-interface-request :class :foo12 :arrow t :line-style :R1B)))

;;END_SVG
#+END_SRC



　よっしゃ。クローズ。

　‥‥‥ちょいまち、まだやることがあった。コンテナの要素だった場合の描画がズレたり
しないかを試す必要があるのだ。これいってみよう。


[[./cgEI306bxmh.20150512.04.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150512.04
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-package)
 (load-stencil :uml-class)
 (load-stencil :uml-interface-request)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 600 :height 600)
		(grid)
		(uml-package :package 300 300 :width 500 :height 500
					 :contents
					 ((uml-class :class  250 250 :id :class)
					  (uml-interface (label :foo01 :left)  230  50 :id :foo01) (uml-interface-request :class :foo01 :arrow t :line-style :T3R)
					  (uml-interface (label :foo02 :left)  180 100 :id :foo02) (uml-interface-request :class :foo02 :arrow t :line-style :T2R)
					  (uml-interface (label :foo03 :left)  130 150 :id :foo03) (uml-interface-request :class :foo03 :arrow t :line-style :T1R)
					  (uml-interface (label :foo04 :below)  50 270 :id :foo04) (uml-interface-request :class :foo04 :arrow t :line-style :L1T)
					  (uml-interface (label :foo05 :below) 100 320 :id :foo05) (uml-interface-request :class :foo05 :arrow t :line-style :L2T)
					  (uml-interface (label :foo06 :below) 150 370 :id :foo06) (uml-interface-request :class :foo06 :arrow t :line-style :L3T)
					  (uml-interface (label :foo07 :right) 270 450 :id :foo07) (uml-interface-request :class :foo07 :arrow t :line-style :B1L)
					  (uml-interface (label :foo08 :right) 320 400 :id :foo08) (uml-interface-request :class :foo08 :arrow t :line-style :B2L)
					  (uml-interface (label :foo09 :right) 370 350 :id :foo09) (uml-interface-request :class :foo09 :arrow t :line-style :B3L)
					  (uml-interface (label :foo10 :above) 450 230 :id :foo10) (uml-interface-request :class :foo10 :arrow t :line-style :R3B)
					  (uml-interface (label :foo11 :above) 400 180 :id :foo11) (uml-interface-request :class :foo11 :arrow t :line-style :R2B)
					  (uml-interface (label :foo12 :above) 350 130 :id :foo12) (uml-interface-request :class :foo12 :arrow t :line-style :R1B)))))

;;END_SVG
#+END_SRC


　ズレズレだよ、ダメじゃん。直さなきゃ‥‥‥直した（ので上の図も直っている）。

　その意味では、socket も確認しなきゃダメだよね‥‥‥うん、清々しいまでにズレてる。



[[./cgEI306bxmh.20150512.05.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150512.05
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-package)
 (load-stencil :uml-interface-request)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 600 :height 600)
		(grid)
		(uml-package :foo 300 300 :width 500 :height 500
					 :contents
					 ((uml-class :class  250 250 :id :test)
					  (do ((deg 0 (+ deg 15)))
						  ((<= 360 deg) nil)
						;(warn "deg = ~A" deg)
						(uml-interface-socket (+ 250 (* 200 (math/sin deg)))
											  (+ 250 (* 200 (math/cos deg))) :test :line-style :CC))))))
;;END_SVG
#+END_SRC


　思いつくままにイジってみたが、上手くいかない‥‥‥ちょっと腰を据えてかかる必要が
ありそうだ。

　‥‥‥よっしゃ、直った。クローズ。



&pagetag( "ステンシル作成", "タグマップ#ステンシル作成" )
&pagetag( "UML", "タグマップ#UML" )
&pagetag( "uml-interface-request", "タグマップ#uml-interface-request" )

#<end update:2020/02/28 13:27:55 access:2020/03/03 09:37:14>
#<begin task ID:crW8tVg2EpC>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/03/18
PRIORITY:3
STATUS:done
TITLE:uml-packageの作成
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:crW8tVg2EpC.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　uml-package のステンシルを作成する。

* sample

[[./crW8tVg2EpC.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :uml-package)
 (load-stencil :uml-dependency)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-package :cl-apps 100 100 :id :apps :width 110 :keyword :application)
       (uml-package :cl-svg  300 100 :id :svg  :width  80)
	   (uml-dependency :apps :svg)))
;;END_SVG
#+END_SRC

* log
** 2015/03/02

　事後起票。

** 2015/03/06

　ステレオタイプも付けられるようになっているし、あとは「パッケージの内部にクラス
とかを描画できるようにするか」だな。この問題については、「タブ部分に名前を描画す
る」のはほぼあきらめている。だから、やるとしても「タブのすぐ下のあたりに描画」と
いうことになるだろうな。

　また、「内部に描画」といっても、位置合わせはセルフサービスでお願いします、と言
わざるをえないだろう。そんな方針で検討してみようか。

** 2015/03/10

　急に面倒臭いことを思い立つ。uml-package マクロが、「その内部に描画すべきモノを
&rest body パラメータに書くことができる」とか、どうだろう？

　内部的には、「canvasの新しい束縛を作成する」という新しいトピックが出てくる。つ
いに canvas の使い道が登場するのだ。しかし、これはそれほど簡単な話ではない。

　まず、id[property] 形式での参照がどうなるのか、という話がある。あと、現在のパ
ラメータ群はマクロの lambda リスト上括弧で括ってやらなければならない。しかし、パッ
ケージを大きく描画して中身にクラスなどを書き込みたい「わけではない」時にもそうし
なければならないのだ。やりたいだろうか？　やりたくないだろう。もう少し考えてみよ
うか。

　ところで、CL-SVG では名前にキーワードシンボルを使用した場合、英文字は強制的に
小文字になるはずだが、uml-package はそうならないようだ。これは直す必要があるな。

　‥‥‥直した。

** 2015/03/11

　&rest パラメータだと面倒なので、キーワードパラメータ contents とするのはどうだ
ろう。以下のようなイメージになるか。

#+BEGIN_SRC lisp
 (load-stencil :grid)
 (load-stencil :uml-package)
 (load-stencil :uml-dependency)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-package :package1 100 100 :id :pkg1 :width 110)
       (uml-package :package2 300 100 :id :pkg2 :width  80
                    :contents
                    ((uml-class :foo 50 50 :id :foo)))
       (uml-dependency :pkg1 :foo)))

#+END_SRC

　ここでミソになるのは、foo という ID をつけられたクラスも、その外側と同じディク
ショナリに入るということだ。そうでないと、一番下の uml-dependency が pkg1 と foo 
を結び付けることができなくなってしまう。

　そういうことだ。ネストした環境を考えても、ディクショナリはグローバルな存在なの
だ。しかし、今現在 canvas はディクショナリを内包している。ネストした環境で別のキャ
ンバスを使用するなら、このあたりも考慮しなくてはならない。

　で、問題の canvas だ。何が問題かというと、これは check の時と draw の時の両方
で使用するのだ。そして、draw の時点ではもうソートされてしまっているから、check
の際と同じモノを使用するというのはなかなか難しい。いっそ、ダイナミック変数にして
しまおうか？

　ちょっとこのタスクでやるべきことから逸脱してるな。〔別タスクを作った(TASK-0039：
ネストとカンヴァスとディクショナリ再考)〕ので、そっちでやろう。

** 2015/03/18

　〔TASK-0039：ネストとカンヴァスとディクショナリ再考〕が、uml-package に関して
は完了した。ということは、どうやら現時点で想定している分に関しては完了だろうか。




&pagetag( "ステンシル作成", "タグマップ#ステンシル作成" )
&pagetag( "UML／パッケージ図", "タグマップ#UML／パッケージ図" )

#<end update:2020/02/21 09:43:33 access:2020/02/26 17:32:36>
#<begin task ID:dw2vob7TtnI>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/04/07
PRIORITY:3
STATUS:done
TITLE:ネストとカンヴァスとディクショナリ再考
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:dw2vob7TtnI.20150312.01.svg,dw2vob7TtnI.20150312.02.svg,dw2vob7TtnI.20150312.03.svg,dw2vob7TtnI.20150312.04.svg,dw2vob7TtnI.20150312.05.svg,dw2vob7TtnI.20150312.06.svg,dw2vob7TtnI.20150312.07.svg,dw2vob7TtnI.20150312.08.svg,dw2vob7TtnI.20150312.09.svg,dw2vob7TtnI.20150312.10.svg,dw2vob7TtnI.20150313.01.svg,dw2vob7TtnI.20150316.01.svg,dw2vob7TtnI.20150316.02.svg,dw2vob7TtnI.20150316.03.svg,dw2vob7TtnI.20150316.04.svg,dw2vob7TtnI.20150316.05.svg,dw2vob7TtnI.20150317.01.svg,dw2vob7TtnI.20150317.02.svg,dw2vob7TtnI.20150317.03.svg,dw2vob7TtnI.20150317.04.svg,dw2vob7TtnI.20150317.05.svg,dw2vob7TtnI.20150317.06.svg,dw2vob7TtnI.20150317.07.svg,dw2vob7TtnI.20150407.01.svg,dw2vob7TtnI.20150407.02.svg,dw2vob7TtnI.20150407.03.svg,dw2vob7TtnI.20150407.04.svg,dw2vob7TtnI.20150407.05.svg,dw2vob7TtnI.20150407.06.svg,dw2vob7TtnI.20150407.07.svg,dw2vob7TtnI.20150407.08.svg,dw2vob7TtnI.20150407.09.svg,dw2vob7TtnI.20150407.10.svg,dw2vob7TtnI.20150407.11.svg,dw2vob7TtnI.20150407.12.svg,dw2vob7TtnI.20150407.13.svg,dw2vob7TtnI.20150407.14.svg,dw2vob7TtnI.20150407.15.svg,dw2vob7TtnI.20150407.16.svg,dw2vob7TtnI.20150407.17.svg,dw2vob7TtnI.20150407.18.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　{{crW8tVg2EpC:uml-packageの作成}}からの派生。以下のようなことがやりたい。

#+BEGIN_SRC lisp
 (load-stencil :grid)
 (load-stencil :uml-package)
 (load-stencil :uml-dependency)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-package :package1 100 100 :id :pkg1 :width 110)
       (uml-package :package2 300 100 :id :pkg2 :width  80
                    :contents
                    ((uml-class :foo 50 50 :id :foo)))
       (uml-dependency :pkg1 :foo)))

#+END_SRC

　ポイントは以下の通り。

	* パッケージやステートチャート図の状態などにおいて、内部に何かを記述できること。
	* 内部の要素から見える canvas は、その上位の要素の矩形に等しいこと。
	* その内部の要素と外部の要素は同じディクショナリで参照できること。


* 作業進捗

	【クラス】		【コンテナ】	【位置調整】	【備考】
	arc					　			□		path派生だった。
	circle				■			■		　
	connector			　			■		　
	css					　			　		座標がないため無関係。
	ellipse				■			■		　
	image				■			■		画像を背景として使うことができるのでコンテナに。
	line				　			■		派生クラスからは実座標で指定されるため、位置調整は自クラスのインスタンスだった場合のみ。
	paragraph			　			■		　
	path				　			□		超めんどいかも。
	polygon				　			■		lineと同じか。コンテナ化は断念。
	raw-svg				　			　		座標がないため無関係。
	rectangle			■			■		　
	text				　			■		　
	text				　			■		　
	grid				　			　		これは対象外だろう。
	textbox				　			　		rectangle 派生で修正の必要がないタイプだった。
	uml-actor			　			■		　
	uml-usecase			　			■		svg:group 派生に変更。
	uml-note			　			■		　
	uml-class			　			■		　
	uml-interface		　			■		　
	uml-package			■			■		　
	uml-dependency		　			■		　
	uml-implementation	　			■		　
	uml-generalization		　			■		　
	uml-association		　			■		　
	uml-aggregation		　			■		　
	uml-composition		　			■		　

* log
** 2015/03/11

　起票。そして着手。

　{{crW8tVg2EpC:元タスク}}でも書いたことだけれど、要素はソートされてから draw さ
れるため、draw の時点でそれぞれの要素に正しい canvas を与えるのは難しい。現在は
canvas はたったひとつなので、別に難しくない、というだけの話なのだ。

　で、これが「記述されている（ネストも込みの）構造」通りの canvas を使用する、と
いう話になった場合、どういう感じになるだろうか。おそらく、draw のパラメータとし
て渡すのは無理だろう。となると、「コンストラクタまたは check で渡したモノを保持
しておけ」ということになるだろうか。

　ところで、canvas って、どうして draw で必要なのだろう？　というか、現在 canvas 
は全く使用されていないので、必要も何もナイ。canvas は現在「サイズ」を持っている
が、今後は「起点」と「サイズ」を持つことになる。あるいは、top / left / bottom / 
right の方がいいかもしれない。check で「はみだし判定」をするだろうから。

　そして、ディクショナリは別出しになるだろう。問題は、canvas 同様これも draw で
必要になるのだろうか、ということだ。基本的には check で全部終わらせておけよ、と
いう話だよな。

　ここまでをまとめよう。

	* canvas は現在 width および height を保持しているが、top と left も持たせる。
	  また、width および height をやめて right と bottom にするかもしれない。
	* canvas は check で渡すが draw では渡さない。必要ならば要素側で保持しなけれ
	  ばならない。これは、要素のネスト状態に応じて要素毎に異なる canvas が与えら
	  れることになるという理由によるもの。
	* 上記と同じ理由により、ディクショナリは canvas からは分離する。そして draw
	  では渡さない方針。これが可能かどうか、利用状況を確認する。


　ここまでやれば、要素のネストは可能ではあるだろう。ただ、これをやると、全ての要
素の描画においてその座標値に canvas.left / canvas.top を足し算してやらなければな
らない。これは影響範囲がデカいよな。

　というわけで、さっくり調べてみた。関係ありそうなのは以下。事実上、connector 以
外では使ってないじゃんという結論だな。

 CL-SVG.lisp:280:(defmacro with-property (canvas &rest body)
 CL-SVG.lisp:281:  (let ((g-dict (gensym "DICT")))
 CL-SVG.lisp:297:				 `(,sym (class:invoke (gethash ,id ,g-dict) ,prop)))))
 CL-SVG.lisp:301:		`(let ((,g-dict (class:member ,canvas :dictionary)))
 connector.lisp:97:		(let* ((dict (class:member canvas :dictionary))
 connector.lisp:98:			   (from-entity (gethash m-from-id dict))
 connector.lisp:99:			   (dest-entity (gethash m-dest-id dict)))
 create-svg.lisp:47:		(g-canvas    (gensym "CAMPUS"))
 create-svg.lisp:49:		(g-dict      (gensym "DICT")))
 create-svg.lisp:54:		   (,g-canvas    (ol:new canvas-data ,width ,height (make-hash-table))))
 create-svg.lisp:61:					(error "ERROR : Can't register ~A to dictionary : NOT entity." ,g-entity))
 create-svg.lisp:66:					  (let ((,g-dict (class:member ,g-canvas :dictionary)))
 create-svg.lisp:67:						(when (gethash ,g-id ,g-dict)
 create-svg.lisp:68:						  (error "ID '~A' has already exist in dictionary." ,g-id))
 create-svg.lisp:69:						(setf (gethash ,g-id ,g-dict) ,g-entity))))
 create-svg.lisp:73:		 (with-property ,g-canvas
 create-svg.lisp:92:								"width='"  (class:member ,g-canvas :width)  "' "
 create-svg.lisp:93:								"height='" (class:member ,g-canvas :height) "'>")



　‥‥‥かなり作業をした。とりあえず、まだまだだが実行時エラーにはならない状態。少
なくとも、以下の作業が残っている。

	1.uml-note において、canvas の dicationary を draw-group で参照している。こ
	  れは check に移動できる。id のリストであるところの m-targets を 
	  dicationary をひいて entity のリストに置き換えてしまえば良い。ちなみに 
	  connector でも canvas の dicationary を参照しているが、これは check におい
	  てである。
	2.canvas から dictionary を引き離す。ただし、これによって check のパラメータ
	  として dictionary を追加しなければならない。
	3.全ての entity 派生クラスの描画コードにおいて、canvas が保有する位置情報を
	  考慮する。
	4.entity 派生でないクラスの描画コードでは、draw に相当するメソッドのパラメー
	  タとして必ず canvas の位置情報を考慮する。
	5.dictionary は、entity 派生クラスたちからは「読み取り専用」であるべきか？　
	  つまり、クラス化してハッシュテーブルを隠すべきか？
	6.ネストした要素を実現し、その中では局所的な canvas を使用する。


　‥‥‥１は完了。2 も完了したっぽい。いよいよ 3 だが、これを実装するためのヘルパー
メンバ関数を canvas-data に追加してあげたいな。

** 2015/03/12

　ちょっと気になることがある。

	* canvas を新しく作成する時にはベースとなる shape を指定しなければならないが、
	  その shape の top / bottom / left / right を鵜呑みにして良いのだろうか？　た
	  とえば、uml-package では左上のタブが含まれてしまう。
	* 上記においては canvas-data のコンストラクタに shape を指定する感じになるが、
	  その shape 自体がすでにより上位の shape にネストしていたら、コンストラクタ
	  パラメータとして与えられた shape の top / bottom / left / right として取得
	  した値は正しいだろうか？


　少しずつ潰していかないと。最初のポイントについては、たとえば uml-package クラ
スだったら、同名のマクロでネストを制御することになる。それならば、専用のメソッド
を用意してやれば良いではないか。なんなら、get-subcanvas として canvas-data の作
成までやらせても良いだろう。

　試しに、rectangle クラスで対応し、contents パラメータを追加してみた。うん、良好なんでないの。


[[./dw2vob7TtnI.20150312.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150312.01
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 100 100
				   :contents
				   ((rectangle 30 30 20 20)
					(rectangle 70 70 20 20)))))
;;END_SVG
#+END_SRC

　ではもういっちょう。カラフルに多重ネスト。


[[./dw2vob7TtnI.20150312.02.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150312.02
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 100 100 :fill :red :contents
	   		((rectangle 50 50 80 80 :fill :yellow :contents
				((rectangle 40 40 60 60 :fill :green :contents
					((rectangle 30 30 40 40 :fill :blue :contents
						((rectangle 20 20 20 20)))))))))))
;;END_SVG
#+END_SRC


　ではこの方針で行こう。ポイントは以下の通り。

	* コンテナになれる要素のクラスは、同名のマクロに contents キーワードパラメー
	  タを追加する。マクロがガッツリ直るが、これは rectangle を参照すること。
	* 上記、改造されるマクロの中からその要素クラスオブジェクトに対して 
	  get-subcanvas というメソッドがコールされることになった。これを追加する。
	* コンテナの要素になりうる（つまり全ての）要素のクラスは、check メソッドにお
	  いて canvas パラメータとして渡される canvas-data クラスオブジェクトの内容
	  を参照して、座標位置を適切に変更しなくてはならない。これも rectangle を参
	  考にすること。


　以下、作業しつつテスト。


[[./dw2vob7TtnI.20150312.03.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150312.03
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 100 100
				   :contents
				   ((text 50 50 "this is text." :align :center)))))
;;END_SVG
#+END_SRC


[[./dw2vob7TtnI.20150312.04.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150312.04
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 100 100
				   :contents
				   ((paragraph 50 50 "this
is
paragraph." :align :center :valign :center)))))
;;END_SVG
#+END_SRC


[[./dw2vob7TtnI.20150312.05.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150312.05
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (circle 100 100 80
				   :contents
				   ((circle  60  60 30)
					(circle 100 100 40)))))
;;END_SVG
#+END_SRC



[[./dw2vob7TtnI.20150312.06.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150312.06
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (ellipse 100 100 80 60
				   :contents
				   ((ellipse 40 40 20 30)
					(ellipse 100 80 40 20)))))
;;END_SVG
#+END_SRC


[[./dw2vob7TtnI.20150312.07.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150312.07
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 100 100
				   :contents
				   ((line '(50 30 30 70 70 70 50 30))))))
;;END_SVG
#+END_SRC


[[./dw2vob7TtnI.20150312.08.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150312.08
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 80 80 :id :r0
				   :contents
				   ((rectangle 30 30 20 20 :id :r1)
					(rectangle 60 60 20 20 :id :r2)
					(connector :r0 :r1 :line-style :TT)
					(connector :r1 :r2 :line-style :RR)))))
;;END_SVG
#+END_SRC


[[./dw2vob7TtnI.20150312.09.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150312.09
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 100 100
				   :contents
				   ((polygon '(50 30 30 70 70 70) :fill :gray)))))
;;END_SVG
#+END_SRC


　line と connector で気付いたことがある。connector は基底クラスである line に対
して、「実座標」で points を設定する。だから line が check で canvas に対して無
条件に位置調整をすると、それが実際には connector のインスタンスだった場合、返っ
てマズいことになるのだ。だから、line としては class:type-id の結果が svg:line だっ
た場合のみ位置調整をしなければならない。これは位置調整をする他のクラスでも言える
ことだ。

　しかし、位置調整をするべきか否か、本当にそれで切り分けて良いのだろうか？　派生
クラス側が、単純にパラメータとして渡された座標を設定するだけかもしれないではない
か。そう考えると、class:type-id の結果を見て判断してはならないことになる‥‥‥面倒
だな。

　結局、line などのクラスでは「とにかく位置調整はする」という仕様に決定した。派
生クラス側で位置情報を修正する場合には、基底クラスの check を呼び出した後で実座
標でその上書きをしなければならない、ということに。


　‥‥‥というわけで、lib を度外視すれば残すところ path と arc のみ。これが超めんど
いんだけどな。ここで足踏みしたくないので、作業進捗の欄には lib の要素も追加した。
以下は手始めの textbox。


[[./dw2vob7TtnI.20150312.10.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150312.10
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 100 100
				   :contents
				   ((textbox 50 50 "foo
bar
quux" :align :center :margin 5)))))
;;END_SVG
#+END_SRC


　で、次なる問題は uml-actor をやって気付いたこと。uml-actor はラベルを持ってい
るが、こいつの位置がうまく調整できなかったのだ。label-info を直してしまおうかと
思ったが、速断は禁物。腰をすえて考えてみよう。

　そもそも、uml-actor は位置調整のための変更を加えることなく、ひとまずは正しい位
置に描画された。それは、内部に register-entity のニセモノを macrolet していて、
uml-actor 自身が保持する canvas を使って必要な描画をしているからだ。だから、正し
く描画できた。しかし、label-info はそれとは別に描画されているから、何かの対応が
必要なわけだ‥‥‥

　と、ここまで書いて気付いた。uml-actor は svg:group 派生だ。そして、group 派生
クラスの x / y 座標は group が持っている。必要なのはそこだ。やれやれ。

　だがしかし。基底クラスである group 側で x と y を位置調整したとしたら、そのベー
スになった canvas を使って uml-actor の draw-group で配下の要素を描画させてはな
らないことになる。どうするのが良いだろうか。順番に考えよう。

　なんにせよ、group が canvas を使った位置調整をしなければならないのは間違いない。
そうしなければ、property-top などのメンバ関数が全て間違った値を返すからだ。これ
が原則だ。まずはソコを直そう‥‥‥直した。これだけで、uml-actor のラベルは正しい位
置に描画される。しかし、これまで正しい位置にいた人型が、今度はズレてしまうのだ。
ここでやるべきことは、group が持っている canvas をそのまま使ってはならない。そう
いうことだ。

　ではどうするべきか。問題は、group が保持しているのは自身の描画領域でしかないと
いうこと。そして、draw-group 内で描画をするのであれば、それを理解した上でやらな
ければならないということだ。

** 2015/03/13

　試行錯誤の末、以下の対処でカタをつけた。

	* group に get-subcanvas メソッドを追加。こいつは自身の矩形を示す 
	  canvas-data オブジェクトを返す。
	* ついでながら group に draw-debug-frame メソッドも追加。こいつは 
	  get-subcanvas を使用してデバッグ用の矩形を描画する。
	* uml-actor では、get-subcanvas を使用し、描画を行なう。


　その結果が以下の通り。ふぅ、ようやくうまくいった。


[[./dw2vob7TtnI.20150313.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150313.01
 (load-stencil :grid)
 (load-stencil :uml-actor)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 100 100
				  :contents
				  ((uml-actor :actor 50 50)))))
;;END_SVG
#+END_SRC

** 2015/03/16

　さて、group 派生のクラスは色々めんどいぞ、ということが先週わかったわけで、記憶
がホットなうちに他のもなんとかしてしまおうと思っている。具体的には、何があるかな。
grep してみよう。

	* uml-actor
	* uml-class
	* uml-note
	* uml-package


　では、次は note 行ってみようか。



[[./dw2vob7TtnI.20150316.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150316.01
 (load-stencil :grid)
 (load-stencil :uml-note)
 (create-svg (:width 400 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 200 200 300 300
				   :contents
				   ((rectangle 250  50 50 50 :id :r1)
				    (rectangle  50  50 50 50 :id :r2)
					(uml-note  150 200 "this is test text.
multi line." :keyword :comment :targets '(:r1 :r2))))))
;;END_SVG
#+END_SRC


　‥‥‥試行錯誤の末、note 完了。次は usecase だな。


[[./dw2vob7TtnI.20150316.02.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150316.02
 (load-stencil :grid)
 (load-stencil :uml-usecase)
 (create-svg (:width 300 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 150 150 200 200
				   :contents
				   ((uml-usecase 100 100 150 80 "this is test usecase.
multi line.")))))
;;END_SVG
#+END_SRC


　uml-usecase は ellipse 派生だったが、group 派生に書き換えた。次は uml-class。



[[./dw2vob7TtnI.20150316.03.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150316.03
 (load-stencil :grid)
 (load-stencil :uml-class)
 (create-svg (:width 400 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (rectangle 200 200 300 300
				   :contents
				   ((uml-class :test-class 150 150 :keyword :test :active t
                               :template "T1,T2"
                               :attributes
                               ((:private :m-data1 :type :int)
                                (:private :m-data2 :type :string))
                               :operations
                               ((:public :method1)
                                (:public :method2 :params (:arg) :type :int))
                               :responsibilities
                               "-resp.1
-resp.2")))))
;;END_SVG
#+END_SRC


　一応できたっぽい。次は uml-interface か。


[[./dw2vob7TtnI.20150316.04.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150316.04
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-interface)
 (create-svg (:width 300 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (rectangle 150 150 200 200
				   :contents
				   ((uml-interface (label :test-interface :above) 100 100)))))
;;END_SVG
#+END_SRC

　‥‥‥修正なしで大丈夫っぽいな。circle派生のままで良いか。次はいよいよ 
uml-package だ。まずはネストの子になるパターンから。



[[./dw2vob7TtnI.20150316.05.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150316.05
 (load-stencil :grid)
 (load-stencil :uml-package)
 (create-svg (:width 300 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill*     :white)
           (*default-stroke*   (stroke :color :black :width 1))
           (*uml-keyword-font* (font :family "Courier New" :size  8 :width-spice 0.85))
           (*default-font*     (font :family "Courier New" :size 11 :width-spice 0.85)))
       (rectangle 150 150 200 200
				   :contents
				   ((uml-package :cl-svg 100 100 :keyword :lisp)))))
;;END_SVG
#+END_SRC

　‥‥‥とりあえずできるようにはなったが、コードがイマイチ汚い‥‥‥なんとかしたいな。
とはいえ、このあとネストの親になるパターンもあるので、それをやってからリファクタ
リングするとしようか。

** 2015/03/17



[[./dw2vob7TtnI.20150317.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150317.01
 (load-stencil :grid)
 (load-stencil :uml-package)
 (create-svg (:width 300 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
;           (*uml-package-tab-width* 60)
;           (*uml-package-tab-height* 20)
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (uml-package :cl-svg 150 150 :width 200 :height 200 :keyword :test
				   :contents
				   ((rectangle 160  50 30 30)
                    (rectangle  80 140 30 30)))))
;;END_SVG
#+END_SRC


　‥‥‥できた。多分できた。残すは、uml についてはコネクタ系ばかり。あとは憂鬱な 
path が残っている。では、uml-dependency いってみよう。


[[./dw2vob7TtnI.20150317.02.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150317.02
 (load-stencil :grid)
 (load-stencil :uml-dependency)
 (create-svg (:width 300 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (rectangle 150 150 160 160 :id :r0
				  :contents
				  ((rectangle 120  50 30 30 :id :r1)
				   (rectangle  40 120 30 30 :id :r2)
				   (uml-dependency :r1 :r2 :line-style :BR :keyword :use)
				   (uml-dependency :r1 :r0 :line-style :RR)
				   (uml-dependency :r2 :r0 :line-style :BB)))))
;;END_SVG
#+END_SRC


　‥‥‥大丈夫っぽいな。



[[./dw2vob7TtnI.20150317.03.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150317.03
 (load-stencil :grid)
 (load-stencil :uml-implementation)
 (create-svg (:width 300 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (rectangle 150 150 160 160 :id :r0
				  :contents
				  ((rectangle 120  50 30 30 :id :r1)
				   (rectangle  40 120 30 30 :id :r2)
				   (uml-implementation :r1 :r2 :line-style :CC :keyword :use)
				   (uml-implementation :r1 :r0 :line-style :TT)
				   (uml-implementation :r2 :r0 :line-style :LL)))))
;;END_SVG
#+END_SRC


　これも大丈夫か。考えてみれば、基底クラスである connector で大丈夫ならば問題な
いはずなんだな。



[[./dw2vob7TtnI.20150317.04.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150317.04
 (load-stencil :grid)
 (load-stencil :uml-generalization)
 (create-svg (:width 300 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (rectangle 150 150 160 160 :id :r0
				  :contents
				  ((rectangle 120  50 30 30 :id :r1)
				   (rectangle  40 120 30 30 :id :r2)
				   (uml-generalization :r1 :r2 :line-style :CC :keyword :use)
				   (uml-generalization :r1 :r0 :line-style :TT)
				   (uml-generalization :r2 :r0 :line-style :LL)))))
;;END_SVG
#+END_SRC


　generalization もとりあえず大丈夫。次は association。だが aggregation と 
composition も一気にいってみよう。


[[./dw2vob7TtnI.20150317.05.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150317.05
 (load-stencil :grid)
 (load-stencil :uml-association)
 (create-svg (:width 300 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (rectangle 150 150 160 160 :id :r0
				  :contents
				  ((rectangle 120  50 30 30 :id :r1)
				   (rectangle  40 120 30 30 :id :r2)
				   (uml-association :r1 :r2 :arrows 2 :line-style :CC :keyword :use)
				   (uml-association :r1 :r0 :arrows 1 :line-style :TT)
				   (uml-association :r2 :r0 :arrows 0 :line-style :LL)))))
;;END_SVG
#+END_SRC


[[./dw2vob7TtnI.20150317.06.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150317.06
 (load-stencil :grid)
 (load-stencil :uml-aggregation)
 (create-svg (:width 300 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (rectangle 150 150 160 160 :id :r0
				  :contents
				  ((rectangle 120  50 30 30 :id :r1)
				   (rectangle  40 120 30 30 :id :r2)
				   (uml-aggregation :r1 :r2 :arrow   t :line-style :CC :keyword :use)
				   (uml-aggregation :r1 :r0 :arrow nil :line-style :TT)
				   (uml-aggregation :r2 :r0 :arrow   t :line-style :LL)))))
;;END_SVG
#+END_SRC


[[./dw2vob7TtnI.20150317.07.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150317.07
 (load-stencil :grid)
 (load-stencil :uml-composition)
 (create-svg (:width 300 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (rectangle 150 150 160 160 :id :r0
				  :contents
				  ((rectangle 120  50 30 30 :id :r1)
				   (rectangle  40 120 30 30 :id :r2)
				   (uml-composition :r1 :r2 :arrow   t :line-style :CC :keyword :use)
				   (uml-composition :r1 :r0 :arrow nil :line-style :TT)
				   (uml-composition :r2 :r0 :arrow   t :line-style :LL)))))
;;END_SVG
#+END_SRC



　‥‥‥よし、これでひとまず。残りは path と arc だな。どうしようかコレ。

** 2015/04/02

　さて、このタスクに復帰‥‥‥。で、path と arc なんだな。ちょっと整理がてら確認を
してみよう。

　まず、path の書式は以下のようなモノだった。

#+BEGIN_SRC lisp
 (path d &key class fill stroke layer id)

#+END_SRC

　そして、d パラメータの指定は、例えば以下のようになる。


#+BEGIN_SRC lisp
 (path `(,(move-to 200 200)
         ,(3d-curve-to 275 150 575 100 500 200))
       :stroke (stroke :color :red :width 3 :dasharray '(2 2))))

#+END_SRC


　このバッククォートはどう展開されるだろうか。こう展開される。

#+BEGIN_SRC lisp
 ((:MOVE-TO 200 200) (:C-CURVE-TO 275 150 575 100 500 200))

#+END_SRC


　つまり、キーワード指定とネストしたリストが使えるということだ。path::check はこ
の d パラメータについて以下のようなことをする。

	* リスト flatten する。
	* flatten されたリストの要素それぞれに対して、keyword / string / number のい
	  ずれかであることを確認する。キーワードの場合、以下のいずれかであることを確
	  認する。
		・:absolute
		・:relative
		・:move-to
		・:close-path
		・:line-to
		・:h-line-to
		・:v-line-to
		・:arc-to
		・:t-curve-to
		・:q-curve-to
		・:s-curve-to
		・:c-curve-to


　‥‥‥以上。sub-canvas に対応する場合、相対か絶対かで扱いが違うんだよな。それが面
倒ゴトの根本なわけだ。そしてさらに面倒臭いことに、上記のようなキーワードでな
く、:move-to ならば "M" や "m" といった文字列指定も可能だったりする。嗚呼もう。

　ちなみに、path オブジェクトは上記の flatten されてチェックされたリスト状態で d 
パラメータを保持し、draw において format-d-data というメンバ関数をコールして文字
列データを作成、出力している。手を入れるとすれば、このへんだろう。

　要注意なのは d メンバを書き換える set-d メンバ関数だ。何処で使ってるかって？　
arc::check だ。これは基底クラスである path の check をコールする前に呼ばれている。
だから一応今回は問題ないが、将来的には注意が必要だな。

　注意喚起はさておき、やるとすれば以下のような対処になるだろう。

	* path::format-d-data は path::check の最後でコールし、m-d メンバを結果の文
	  字列で置き換える。
	* path::draw では上記で文字列化した m-d を出力するだけ。
	* その上で、path::format-d-data が「もっと賢く」振る舞うようにする。具体的には、
		・現在はパラメータの順番はユーザー任せになっているが、それをちゃんとチェッ
		  クする。例えば、move-to の後ろには数値が２つなければならない、とか。
		・上記を前提として、mode が absolute だった場合には座標にcanvasの位置情
		  報を反映させる。


　‥‥‥まぁ、こんな感じなのだけれど、それでは何がどうなれば良いのか、整理してみよ
う。以下のようになった。

	【keyword】	【command】	【params】			【備考】
	:move-to		m/M		(x y)+				複数の座標ペア指定可能。２ペア目以降は line-to と看倣される。
	:close-path		z/Z		nil					パラメータなし
	:line-to		l/L		(x y)+				複数の座標ペア指定可能。
	:h-line-to		h/H		(x)+				複数の x を与えて良い（意味をなさないが）。
	:v-line-to		v/V		(y)+				複数の y を与えて良い（意味をなさないが）。
	:arc-to			a/A		(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+	absolute の場合、多分 x と y のみ移動。
	:t-curve-to		t/T		(x y)+				absolute の場合、多分全部移動。
	:q-curve-to		q/Q		(x1 y1 x y)+		absolute の場合、多分全部移動。
	:s-curve-to		s/S		(x2 y2 x y)+		absolute の場合、多分全部移動。
	:c-curve-to		c/C		(x1 y1 x2 y2 x y)+	absolute の場合、多分全部移動。



　で、このうち、absolute モードだった場合にどこを調整すれば良いのか‥‥‥これは仕様
にあたるしかないな。それも上に書き込んでみた。本当にこれでいいんかいな。あと、ど
の命令もパラメータ数値の組みを複数指定できるんだねぇ。これは知らなかった。マズいな。

　まぁいいや、上記に従って、パラメータの数をチェックしつつ absolute モードであれ
ば位置調整をする、という処理が必要なのだが、ここで問題だ。現在の path は、すでに
文字列になってしまっている d パラメータ ── "M 200 200 l 100 0 0 100" みたいな感
じ ── を与えることが許可されてしまっている。これはすこぶるマズい。位置調整ができ
ないからだ。これはどうするべきだろうか。以下の選択肢がある。

	1.拒絶‥‥‥‥もう文字列でいきなり指定、というのは受け入れない。リストのみ！
	2.無責任‥‥‥文字列でいきなり指定、は受け入れるが、位置調整を保証しない。それが嫌なら全部相対指定にしな！
	3.理想‥‥‥‥文字列を１回キーワードと数値のリストに分解し、位置調整をやる。超頑張る！


　個人的には‥‥‥3 はナイ、ナイな。そして、2 は忘れた頃に（多分自分が）びっくりす
ることになる。それは避けたいので、じゃぁ１か、ということになる。


　閑話休題。ちょっと気になったのは、lib で path を使っているヤツがいないか、とい
うことだ。uml-note とか使ってそうだ。確認しよう。

　‥‥‥大丈夫だった。uml-note が使ってたのは polygon だった。

** 2015/04/03

　さて、そんなわけで「いきなりの文字列指定は受け入れない」という方針に決定しよう
と思う。それでは作業開始。

　‥‥‥おっと、もうひとつ。「d パラメータはリストのみだよ」となったわけだけれど、
そのリスト要素はキーワードと数値のみだろうか？　ここで "L" とかの文字列を許す
か？‥‥‥許さなくていいよね。

　というわけで、まずは d パラメータに文字列を許さないという修正から。試しに動作
させてみると、arc が動かない。調べてみると、arc 内部から set-d する際に渡すリス
トの中に "1" とか "0" の文字列があった。慌てて数値にするが何か引っ掛かる。文字列
にしておかなきゃならない理由があっただろうか？

　動作させてみると、今度はエラーにはならないが arc が描画されない。ここに至って
ようやく思い出す。"1" とか "0" の文字列が使われていた理由は、1.0 とか 0.0 とか出
力されるとマズいからだった。svg-writer を変更しなきゃ‥‥‥と思って見てみるが、そこ
では正しく実装されていた。よくよく見れば、path::format-d-data に問題があったのだっ
た。とりあえず修正。これで既存の（この）ドキュメントやテストは再び動作するように
なっている。

　では次、まずは path::format-d-data の呼び出しを path::check に移動させてみよう
か。

　‥‥‥いや、方針変更。今現在 format-d-data でやっていることを２つに分割しよう。

	* check-and-fix-d-data では、チェックと位置調整、キーワードから命令文字列へ
	  の変換を行なう。ただし、リストのまま。これは path::check からコールされる。
	* format-d-data では、上記でチェック、調整、変換が行なれたリストを文字列に変
	  換する。これは path::draw からコールされる。



　‥‥‥気分転換のために move-to などの定義を変更していたのだけれど、ここで問題発生。
T と Q の命令に展開されるのは 2d-curve-to なのだけれど、これに複数のパラメータセッ
トを渡せるようにすると、ちょっと具合が悪いのだ。オーバーロードの元々の定義は以下
のようなモノだった。

#+BEGIN_SRC lisp
 (ol:declare-overload 2d-curve-to (2 4))

#+END_SRC

　これを以下２種類のどちらにしても、うまくいかないのだ。わかるよね。

#+BEGIN_SRC lisp
 (ol:declare-overload 2d-curve-to (2+ 4+))
 (ol:declare-overload 2d-curve-to (4+ 2+))

#+END_SRC

　さぁ、どうしたものだろうか。個人的には、正直 &rest パラメータはいらないかな、
と思っているが、やっぱりあった方がいいのだろうか。

　ここに至って考え直すことにする。move-to などの関数は、line-to を除いて可変引数
をとるのをやめることにする。ただし、check-and-fix-d-data で行なうチェックは、ちゃ
んとやらなければならない。まぁそれが問題なのだけれどな。

** 2015/04/06

　週末を跨いで作業に復帰。何をやるんだっけ。そうだ、以下の関数群を実装するんだった。

	* __chk-&-fix-absolute
	* __chk-&-fix-relative
	* __chk-&-fix-move-to
	* __chk-&-fix-close-path
	* __chk-&-fix-line-to
	* __chk-&-fix-h-line-to
	* __chk-&-fix-v-line-to
	* __chk-&-fix-arc-to
	* __chk-&-fix-t-curve-to
	* __chk-&-fix-q-curve-to
	* __chk-&-fix-s-curve-to
	* __chk-&-fix-c-curve-to


　‥‥‥一応できた、が、冗長なので、macrolet か labels でコンパクトにしたいな。

** 2015/04/07

　やってみた。さて、どうだろう‥‥‥うん、できたみたい。

　と、大事なことを忘れていた。そもそも、__chk-&-fix-foobar ではチェックと同時に
:absolute モードであれば位置調整もしなければならないのだった。それを忘れてマクロ
にまとめ過ぎてしまった。さて、どうリカバろうか。

　‥‥‥どうにかできた。あとは動作確認か。これも超絶面倒だなおい。まずは move-to と 
line-to から。以下の図において、コンテナになっている矩形を移動すると、コンテンツ
になっている三角形も一緒に移動する。成功だ。ついでに h-line-to と v-line-to も入
れておいた。



[[./dw2vob7TtnI.20150407.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150407.01
 (load-stencil :grid)
 (create-svg (:width 300 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 200 200
				  :contents
				  ((path `(:absolute
						   ,(move-to  50  50)
						   ,(line-to 100 150)
						   ,(line-to 150  50)
						   ,(close-path)) :fill :gray)
				   (path `(:absolute
						   ,(move-to  25  25)
						   ,(h-line-to 175)
						   ,(v-line-to 175)) :fill :none)))))
;;END_SVG
#+END_SRC


[[./dw2vob7TtnI.20150407.02.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150407.02
 (load-stencil :grid)
 (create-svg (:width 300 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 150 150 200 200
				  :contents
				  ((path `(:absolute
						   ,(move-to  50  50)
						   ,(line-to 100 150)
						   ,(line-to 150  50)
						   ,(close-path)) :fill :gray)
				   (path `(:absolute
						   ,(move-to  25  25)
						   ,(h-line-to 175)
						   ,(v-line-to 175)) :fill :none)))))
;;END_SVG
#+END_SRC


　以下は同じモノの relative 版。


[[./dw2vob7TtnI.20150407.03.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150407.03
 (load-stencil :grid)
 (create-svg (:width 300 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 200 200
				  :contents
				  ((path `(:absolute
						   ,(move-to  50   50)
						   :relative
						   ,(line-to  50  100)
						   ,(line-to  50 -100)
						   ,(close-path)) :fill :gray)
				   (path `(:absolute
						   ,(move-to  25  25)
						   :relative
						   ,(h-line-to 150)
						   ,(v-line-to 150)) :fill :none)))))
;;END_SVG
#+END_SRC


[[./dw2vob7TtnI.20150407.04.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150407.04
 (load-stencil :grid)
 (create-svg (:width 300 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 150 150 200 200
				  :contents
				  ((path `(:absolute
						   ,(move-to  50   50)
						   :relative
						   ,(line-to  50  100)
						   ,(line-to  50 -100)
						   ,(close-path)) :fill :gray)
				   (path `(:absolute
						   ,(move-to  25  25)
						   :relative
						   ,(h-line-to 150)
						   ,(v-line-to 150)) :fill :none)))))
;;END_SVG
#+END_SRC



　ここで問題発覚。:relative 状態で :move-to がパスの最初に現われた場合のみ、絶対
座標指定とみなされるらしい。困ったな。コンテナに含まれるような path では対応でき
ないじゃないか‥‥‥これは{{epddlMhR9lD:別途考える}}ことにしよう。では、次に 
3d-curve-to 。


[[./dw2vob7TtnI.20150407.05.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150407.05
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 50 50 100 100
				  :contents
				  ((path `(:absolute
						   ,(move-to 20 50)
						   ,(3d-curve-to 30 30 40 30 50 50)
						   ,(3d-curve-to 70 70 80 50)) :fill :none)))))
;;END_SVG
#+END_SRC


[[./dw2vob7TtnI.20150407.06.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150407.06
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 100 100
				  :contents
				  ((path `(:absolute
						   ,(move-to 20 50)
						   ,(3d-curve-to 30 30 40 30 50 50)
						   ,(3d-curve-to 70 70 80 50)) :fill :none)))))
;;END_SVG
#+END_SRC


　同じモノの relative 版。うまくいっているようだ。



[[./dw2vob7TtnI.20150407.07.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150407.07
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 50 50 100 100
				  :contents
				  ((path `(:absolute
						   ,(move-to 20 50)
						   :relative
						   ,(3d-curve-to 10 -20 20 -20 30 0)
						   ,(3d-curve-to 20 20 30 0)) :fill :none)))))
;;END_SVG
#+END_SRC


[[./dw2vob7TtnI.20150407.08.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150407.08
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 100 100
				  :contents
				  ((path `(:absolute
						   ,(move-to 20 50)
						   :relative
						   ,(3d-curve-to 10 -20 20 -20 30 0)
						   ,(3d-curve-to 20 20 30 0)) :fill :none)))))
;;END_SVG
#+END_SRC



　よし、では次に 2d-curve-to いこうか。


[[./dw2vob7TtnI.20150407.09.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150407.09
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 50 50 100 100
				  :contents
				  ((path `(:absolute
						   ,(move-to 20 50)
						   ,(2d-curve-to 35 20 50 50)
						   ,(2d-curve-to 80 50)) :fill :none)))))
;;END_SVG
#+END_SRC


[[./dw2vob7TtnI.20150407.10.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150407.10
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 100 100
				  :contents
				  ((path `(:absolute
						   ,(move-to 20 50)
						   ,(2d-curve-to 35 20 50 50)
						   ,(2d-curve-to 80 50)) :fill :none)))))
;;END_SVG
#+END_SRC



　よさげ。同じモノの relative 版。大丈夫みたい。


[[./dw2vob7TtnI.20150407.11.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150407.11
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 50 50 100 100
				  :contents
				  ((path `(:absolute
						   ,(move-to 20 50)
						   :relative
						   ,(2d-curve-to 15 -30 30 0)
						   ,(2d-curve-to 30 0)) :fill :none)))))
;;END_SVG
#+END_SRC


[[./dw2vob7TtnI.20150407.12.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150407.12
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 100 100
				  :contents
				  ((path `(:absolute
						   ,(move-to 20 50)
						   :relative
						   ,(2d-curve-to 15 -30 30 0)
						   ,(2d-curve-to 30 0)) :fill :none)))))
;;END_SVG
#+END_SRC



　じゃぁ、arc-to だな。


[[./dw2vob7TtnI.20150407.13.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150407.13
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 50 50 100 100
				  :contents
				  ((path `(:absolute
						   ,(move-to 50 20)
						   ,(arc-to  30 30 1 1 0 80 50)
						   ,(line-to 50 50)
						   ,(close-path)) :fill :gray)))))
;;END_SVG
#+END_SRC


[[./dw2vob7TtnI.20150407.14.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150407.14
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 100 100
				  :contents
				  ((path `(:absolute
						   ,(move-to 50 20)
						   ,(arc-to  30 30 1 1 0 80 50)
						   ,(line-to 50 50)
						   ,(close-path)) :fill :gray)))))
;;END_SVG
#+END_SRC



　よっしゃ。同じモノの relative 版。


[[./dw2vob7TtnI.20150407.15.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150407.15
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 50 50 100 100
				  :contents
				  ((path `(:absolute
						   ,(move-to 50 20)
						   :relative
						   ,(arc-to  30 30 1 1 0 30 30)
						   ,(line-to -30 0)
						   ,(close-path)) :fill :gray)))))
;;END_SVG
#+END_SRC


[[./dw2vob7TtnI.20150407.16.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150407.16
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 100 100
				  :contents
				  ((path `(:absolute
						   ,(move-to 50 20)
						   :relative
						   ,(arc-to  30 30 1 1 0 30 30)
						   ,(line-to -30 0)
						   ,(close-path)) :fill :gray)))))
;;END_SVG
#+END_SRC



　‥‥‥イケたじゃん。あとは path 派生の arc クラスについて確認すればこのタスクもめ
でたく終了か。



[[./dw2vob7TtnI.20150407.17.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150407.17
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 50 50 100 100
				  :contents
				  ((arc 50 50 40 0 270)))))
;;END_SVG
#+END_SRC


[[./dw2vob7TtnI.20150407.18.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150407.18
 (load-stencil :grid)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 100 100
				  :contents
				  ((arc 50 50 40 0 270)))))
;;END_SVG
#+END_SRC


　‥‥‥いいっぽいな。クローズ。長かったぜ。



&pagetag( "仕様変更", "タグマップ#仕様変更" )

#<end update:2020/03/02 09:27:59 access:2020/03/02 09:28:31>
#<begin task ID:dQ0JEpwvWaP>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/03/30
PRIORITY:3
STATUS:done
TITLE:connectorをもっと賢くする：TBパターン
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:dQ0JEpwvWaP.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　〔TASK-0042：connectorをもっと賢くする〕から派生したタスク。:TB のパターンでの
挙動を整理し、実装する。


* 現状

[[./dQ0JEpwvWaP.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 600 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-textbox-align* :center)
		   (*default-connector-style* :TB))
	   (macrolet ((box (x y w h id)
					`(rectangle ,x ,y ,w ,h :id ,id
								:contents
								((text (/ ,w 2) (/ ,h 2)
									   ,(string-downcase (symbol-name id))
									   :align :center)))))
		 ;;-------------------------------------------
		 (let ((y1  50)
               (y2 150))
		   (box  50 y1 40 40 :d01) (box  50 y2 40 40 :f01) (connector :f01 :d01 :end2 :arrow)
		   (box 130 y1 40 40 :d02) (box 100 y2 40 40 :f02) (connector :f02 :d02 :end2 :arrow)
		   (box 180 y1 40 40 :d03) (box 210 y2 40 40 :f03) (connector :f03 :d03 :end2 :arrow))
		 (let ((y1  70)
               (y2 130))
		   (box 320 y1 40 40 :d04) (box 270 y2 40 40 :f04) (connector :f04 :d04 :end2 :arrow)
		   (box 380 y1 40 40 :d05) (box 430 y2 40 40 :f05) (connector :f05 :d05 :end2 :arrow))
		 (let ((y1 300)
               (y2 250))
		   (box 100 y1 40 40 :d06) (box  40 y2 40 40 :f06) (connector :f06 :d06 :end2 :arrow)
		   (box 170 y1 40 40 :d07) (box 230 y2 40 40 :f07) (connector :f07 :d07 :end2 :arrow))
		 (let ((y1 330)
               (y2 270))
		   (box 360 y1 40 40 :d08) (box 340 y2 40 40 :f08) (connector :f08 :d08 :end2 :arrow :line-style :T1B1)
		   (box 420 y1 40 40 :d09) (box 420 y2 40 40 :f09) (connector :f09 :d09 :end2 :arrow :line-style :T2B2)
		   (box 510 y1 40 40 :d10) (box 530 y2 40 40 :f10) (connector :f10 :d10 :end2 :arrow :line-style :T3B3)
		 (box 500 70 40 40 :d11) (box 530 90 40 40 :f11) (connector :f11 :d11 :end2 :arrow)))))

;;END_SVG
#+END_SRC

* log
** 2015/03/25

　起票。

** 2015/03/30

　着手

　‥‥‥一応できたかな。とりあえずクローズ。




&pagetag( "改善", "タグマップ#改善" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/21 12:12:22>
#<begin task ID:dSC6sTazDyV>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/03/25
PRIORITY:3
STATUS:done
TITLE:with-propertyの整理
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　(class-invoke entity :property-center) とか書くのが鬱陶しい。with-property と
いうマクロがあるが、これはディクショナリがなくてはならない。そこでディクショナリ
の要らないバージョンを作成し、これを with-property とする。既存のは 
with-dictionary に改名する。


* log
** 2015/03/25

　起票。そして着手。新しい with-property は以下のようになった。

#+BEGIN_SRC lisp
 (defmacro with-property (&rest body)
   (labels ((property-ref-symbolp (x)
              (when (and (symbolp x) (not (keywordp x)))
                (let* ((name (symbol-name x))
                       (pos1 (position #\[ name))
                       (pos2 (position #\] name)))
                  (when (and pos1 pos2)
                    (and (< 0 pos1)
                         (< pos1 (1- pos2))
                         (= pos2 (1- (length name))))))))
            (make-symbol-macrolet (sym)
              (let* ((name   (symbol-name sym))
                     (pos1   (position #\[ name))
                     (pos2   (position #\] name))
                     (entity (svg::onlisp/symb (subseq name 0 pos1)))
                     (prop   (svg::onlisp/keysymb "PROPERTY-" (subseq name (1+ pos1) pos2))))
                `(,sym (class:invoke ,entity ,prop)))))
     (let ((syms (remove-duplicates
                  (remove-if-not #'property-ref-symbolp
                                 (svg::onlisp/flatten body)))))
       `(symbol-macrolet ,(mapcar #'make-symbol-macrolet syms)
          ,@body))))

#+END_SRC


　そして以下が with-dictionary に改名した既存のバージョン。


#+BEGIN_SRC lisp
 (defmacro with-dictionary (dict &rest body)
   (check-type dict symbol)
   (labels ((property-ref-symbolp (x)
              (when (and (symbolp x) (not (keywordp x)))
                (let* ((name (symbol-name x))
                       (pos1 (position #\[ name))
                       (pos2 (position #\] name)))
                  (when (and pos1 pos2)
                    (and (< 0 pos1)
                         (< pos1 (1- pos2))
                         (= pos2 (1- (length name))))))))
            (make-symbol-macrolet (sym)
              (let* ((name (symbol-name sym))
                     (pos1 (position #\[ name))
                     (pos2 (position #\] name))
                     (id   (svg::onlisp/keysymb (subseq name 0 pos1)))
                     (prop (svg::onlisp/keysymb "PROPERTY-" (subseq name (1+ pos1) pos2))))
                `(,sym (class:invoke (gethash ,id ,dict) ,prop)))))
     (let ((syms (remove-duplicates
                  (remove-if-not #'property-ref-symbolp
                                 (svg::onlisp/flatten body)))))
       `(symbol-macrolet ,(mapcar #'make-symbol-macrolet syms)
          ,@body))))

#+END_SRC


　with-dictionary を使っているのは１ケ所だけ。そして、新しい with-property の使
い所も思いの他少なかった。まぁ、〔TASK-0042(TASK-0042：connectorをもっと賢くする)〕
でかなり必要になったから使っているものなので、connector.lisp ではかなりがっつり
使ってわけで。

　‥‥‥そんな感じで、クローズ。




&pagetag( "改善", "タグマップ#改善" )

#<end update:2020/02/20 16:14:59>
#<begin task ID:epddlMhR9lD>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:red
DATE:2015/04/07
PRIORITY:3
STATUS:wait
TITLE:pathにおいて相対move-toが先頭にある場合の仕様問題
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!edit


　仕様によれば、path のデータの先頭に相対 move-to が来た場合、最初の座標指定のみ
が絶対座標として扱われるらしい。CL-SVG では大体の場合現状でもこの仕様に即して動
作するはずだが、path が別のコンテナの内部に記述されている場合は正しく描画されな
いことになる。この問題について検討・対処をする。


* log
** 2015/04/07

　起票。


&pagetag( "バグ", "タグマップ#バグ" )
&pagetag( "path", "タグマップ#path" )

#<end update:2020/02/20 16:17:34 access:2020/02/26 17:33:59>
#<begin task ID:eFOeoIHnmFb>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/03/27
PRIORITY:3
STATUS:done
TITLE:connectorをもっと賢くする：LLパターン
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:eFOeoIHnmFb.20150327.svg,eFOeoIHnmFb.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　〔TASK-0042：connectorをもっと賢くする〕から派生したタスク。:LL のパターンでの
挙動を整理し、実装する。


* 現状

[[./eFOeoIHnmFb.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 600 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-textbox-align* :center)
		   (*default-connector-style* :LL))
	   (macrolet ((box (x y w h id)
					`(rectangle ,x ,y ,w ,h :id ,id
								:contents
								((text (/ ,w 2) (/ ,h 2)
									   ,(string-downcase (symbol-name id))
									   :align :center)))))
		 ;;-------------------------------------------
		 (let ((x 100))
		   (box x   50 40 40 :f01) (box x  100 40 40 :d01) (connector :f01 :d01 :end2 :arrow)
		   (box x  150 40 40 :d02) (box x  200 40 40 :f02) (connector :f02 :d02 :end2 :arrow))
		 ;;-------------------------------------------
		 (box 100 300 80 80 :f03) (box 130 330 40 40 :d03) (connector :f03 :d03 :end2 :arrow)
		 ;;-------------------------------------------
		 (let ((x1 250) (x2 330))
		   (box x1  50 40 40 :f05) (box x2  80 40 40 :d05) (connector :f05 :d05 :end2 :arrow)
		   (box x1 140 40 40 :f06) (box x2 150 40 40 :d06) (connector :f06 :d06 :end2 :arrow)
		   (box x1 260 40 40 :f07) (box x2 250 40 40 :d07) (connector :f07 :d07 :end2 :arrow)
		   (box x1 350 40 40 :f08) (box x2 320 40 40 :d08) (connector :f08 :d08 :end2 :arrow))
		 ;;-------------------------------------------
		 (let ((x1 470) (x2 550))
		   (box x1  50 40 40 :d09) (box x2  80 40 40 :f09) (connector :f09 :d09 :end2 :arrow)
		   (box x1 140 40 40 :d10) (box x2 150 40 40 :f10) (connector :f10 :d10 :end2 :arrow)
		   (box x1 260 40 40 :d11) (box x2 250 40 40 :f11) (connector :f11 :d11 :end2 :arrow)
		   (box x1 350 40 40 :d12) (box x2 320 40 40 :f12) (connector :f12 :d12 :end2 :arrow)))))

;;END_SVG
#+END_SRC

* log
** 2015/03/25

　起票。

** 2015/03/27

　〔BBパターン(TASK-0046：connectorをもっと賢くする：BBパターン)〕が終わったので
着手。基本的にはやることは BBパターンと同じか。頭の中で90度回転させられるかな。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150327
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 600 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-textbox-align* :center)
		   (*default-connector-style* :LL))
	   (macrolet ((box (x y w h id)
					`(rectangle ,x ,y ,w ,h :id ,id
								:contents
								((text (/ ,w 2) (/ ,h 2)
									   ,(string-downcase (symbol-name id))
									   :align :center)))))
		 ;;-------------------------------------------
		 (let ((x1 250) (x2 330))
		   (box x1  50 40 40 :f05) (box x2  65 40 40 :d05) (connector :f05 :d05 :end2 :arrow :line-style :LL3)
		   (box x1 140 40 40 :f06) (box x2 165 40 40 :d06) (connector :f06 :d06 :end2 :arrow :line-style :LL1)
		   (box x1 260 40 40 :f07) (box x2 235 40 40 :d07) (connector :f07 :d07 :end2 :arrow :line-style :LL3)
		   (box x1 350 40 40 :f08) (box x2 335 40 40 :d08) (connector :f08 :d08 :end2 :arrow :line-style :LL1))
		 ;;-------------------------------------------
		 (let ((x1 470) (x2 550))
		   (box x1  50 40 40 :d09) (box x2  65 40 40 :f09) (connector :f09 :d09 :end2 :arrow :line-style :L3L)
		   (box x1 145 40 40 :d10) (box x2 170 40 40 :f10) (connector :f10 :d10 :end2 :arrow :line-style :L1L)
		   (box x1 255 40 40 :d11) (box x2 230 40 40 :f11) (connector :f11 :d11 :end2 :arrow :line-style :L3L)
		   (box x1 350 40 40 :d12) (box x2 335 40 40 :f12) (connector :f12 :d12 :end2 :arrow :line-style :L1L)))))

;;END_SVG
#+END_SRC

[[./eFOeoIHnmFb.20150327.svg]]

　‥‥‥イケた。クローズ。



&pagetag( "改善", "タグマップ#改善" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/21 12:22:08>
#<begin task ID:eGxPmN7aPNW>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/03/28
PRIORITY:3
STATUS:done
TITLE:connectorをもっと賢くする：RRパターン
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:eGxPmN7aPNW.20150328.svg,eGxPmN7aPNW.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　〔TASK-0042：connectorをもっと賢くする〕から派生したタスク。:RR のパターンでの
挙動を整理し、実装する。


* 現状

[[./eGxPmN7aPNW.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 600 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-textbox-align* :center)
		   (*default-connector-style* :RR))
	   (macrolet ((box (x y w h id)
					`(rectangle ,x ,y ,w ,h :id ,id
								:contents
								((text (/ ,w 2) (/ ,h 2)
									   ,(string-downcase (symbol-name id))
									   :align :center)))))
		 ;;-------------------------------------------
		 (let ((x 50))
		   (box x   50 40 40 :f01) (box x  100 40 40 :d01) (connector :f01 :d01 :end2 :arrow)
		   (box x  150 40 40 :d02) (box x  200 40 40 :f02) (connector :f02 :d02 :end2 :arrow))
		 ;;-------------------------------------------
		 (box 70 300 80 80 :f03) (box 100 330 40 40 :d03) (connector :f03 :d03 :end2 :arrow)
		 ;;-------------------------------------------
		 (let ((x1 220) (x2 300))
		   (box x1  50 40 40 :f05) (box x2  80 40 40 :d05) (connector :f05 :d05 :end2 :arrow)
		   (box x1 160 40 40 :f06) (box x2 170 40 40 :d06) (connector :f06 :d06 :end2 :arrow)
		   (box x1 240 40 40 :f07) (box x2 230 40 40 :d07) (connector :f07 :d07 :end2 :arrow)
		   (box x1 350 40 40 :f08) (box x2 320 40 40 :d08) (connector :f08 :d08 :end2 :arrow))
		 ;;-------------------------------------------
		 (let ((x1 440) (x2 520))
		   (box x1  50 40 40 :d09) (box x2  80 40 40 :f09) (connector :f09 :d09 :end2 :arrow)
		   (box x1 160 40 40 :d10) (box x2 170 40 40 :f10) (connector :f10 :d10 :end2 :arrow)
		   (box x1 240 40 40 :d11) (box x2 230 40 40 :f11) (connector :f11 :d11 :end2 :arrow)
		   (box x1 350 40 40 :d12) (box x2 320 40 40 :f12) (connector :f12 :d12 :end2 :arrow)))))

;;END_SVG
#+END_SRC

* log
** 2015/03/25

　起票。

** 2015/03/28

　〔LLパターン(TASK-0048：connectorをもっと賢くする：LLパターン)〕が終わったので
着手。基本的にはやることは LLパターンと同じ。

　‥‥‥できた。いつもの通り、極どいパターンを確かめておこう。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150328
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 600 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-textbox-align* :center)
		   (*default-connector-style* :RR))
	   (macrolet ((box (x y w h id)
					`(rectangle ,x ,y ,w ,h :id ,id
								:contents
								((text (/ ,w 2) (/ ,h 2)
									   ,(string-downcase (symbol-name id))
									   :align :center)))))
		 ;;-------------------------------------------
		 (let ((x1 220) (x2 300))
		   (box x1  50 40 40 :f05) (box x2  65 40 40 :d05) (connector :f05 :d05 :end2 :arrow :line-style :R1R)
		   (box x1 140 40 40 :f06) (box x2 165 40 40 :d06) (connector :f06 :d06 :end2 :arrow :line-style :R3R)
		   (box x1 260 40 40 :f07) (box x2 235 40 40 :d07) (connector :f07 :d07 :end2 :arrow :line-style :R1R)
		   (box x1 350 40 40 :f08) (box x2 335 40 40 :d08) (connector :f08 :d08 :end2 :arrow :line-style :R3R))
		 ;;-------------------------------------------
		 (let ((x1 440) (x2 520))
		   (box x1  50 40 40 :d09) (box x2  65 40 40 :f09) (connector :f09 :d09 :end2 :arrow :line-style :RR1)
		   (box x1 145 40 40 :d10) (box x2 170 40 40 :f10) (connector :f10 :d10 :end2 :arrow :line-style :RR3)
		   (box x1 255 40 40 :d11) (box x2 230 40 40 :f11) (connector :f11 :d11 :end2 :arrow :line-style :RR1)
		   (box x1 350 40 40 :d12) (box x2 335 40 40 :f12) (connector :f12 :d12 :end2 :arrow :line-style :RR3)))))

;;END_SVG
#+END_SRC

[[./eGxPmN7aPNW.20150328.svg]]

　‥‥‥問題なし。クローズ。



&pagetag( "改善", "タグマップ#改善" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/21 12:20:48>
#<begin task ID:feTLQEvJgQZ>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:red
DATE:2015/04/27
PRIORITY:3
STATUS:done
TITLE:math系関数の再テスト
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　math 系関数が一部おかしいらしい。全面的に再テストを行なう。


* log
** 2015/04/26

　起票。そして着手。

　では、順番にやっていこう。まずは角度だけを与えるやつ‥‥‥これは問題ないな。

#+BEGIN_SRC lisp
 (defun math/sincos-test1 ()
   (do ((deg 0 (1+ deg)))
       ((<= 360 deg) nil)
     (let ((sin (coerce (math/sin deg) 'single-float))
           (cos (coerce (math/cos deg) 'single-float)))
       (format t "(math/sin ~A)	~A	(math/cos ~A)	~A~%" deg sin deg cos))))

#+END_SRC



　次は、point を２つ与えるタイプ。これは角度をループで回して point を作成し、結
果を元々の角度の sin / cos と比較して差分の絶対値が threshold を超えないことを検
証した‥‥‥うん、問題ないみたい。

#+BEGIN_SRC lisp
 (defun math/sincos-test2 ()
   (let* ((len 10)
          (base-x 5)
          (base-y 7)
          (threshold 0.000001)
          (pt1 (ol:new point base-x base-y))
          (pt2 (ol:new point 0 0)))
     (do ((deg 0 (1+ deg)))
         ((<= 360 deg) nil)
       (let ((sin (math/sin deg))
             (cos (math/cos deg)))
         (setf (class:member pt2 :x) (+ base-x (* len cos)))
         (setf (class:member pt2 :y) (+ base-y (* len sin)))
         (let ((sin2 (math/sin pt1 pt2))
               (cos2 (math/cos pt1 pt2)))
           (when (< threshold (abs (- sin sin2)))
             (format t "ERROR : sin1(~A)=~A, sin2(~A)=~A~%" deg sin deg sin2))
           (when (< threshold (abs (- cos cos2)))
             (format t "ERROR : cos1(~A)=~A, cos2(~A)=~A~%" deg cos deg cos2)))))))

#+END_SRC



　角度のオフセットを与えるタイプはいったんとばして、point ではなく２つの x / y
を与えるタイプ。基本的な考え方は上のやつと同じだ‥‥‥うん、これも問題なし。

#+BEGIN_SRC lisp
 (defun math/sincos-test3 ()
   (let* ((len       10)
          (x1        5)
          (y1        7)
          (x2        5)
          (y2        7)
          (threshold 0.000001))
     (do ((deg 0 (1+ deg)))
         ((<= 360 deg) nil)
       (let ((sin (math/sin deg))
             (cos (math/cos deg)))
         (setf x2 (+ x1 (* len cos)))
         (setf y2 (+ y1 (* len sin)))
         (let ((sin2 (math/sin x1 y1 x2 y2))
               (cos2 (math/cos x1 y1 x2 y2)))
           (when (< threshold (abs (- sin sin2)))
             (format t "ERROR : sin1(~A)=~A, sin2(~A)=~A~%" deg sin deg sin2))
           (when (< threshold (abs (- cos cos2)))
             (format t "ERROR : cos1(~A)=~A, cos2(~A)=~A~%" deg cos deg cos2)))))))

#+END_SRC


　では、いよいよ本丸。角度のオフセットを与えるタイプだ。角度を回して座標を作成し、
さらに角度を回して‥‥‥と。あれ、エラーにならないな。

#+BEGIN_SRC lisp
 (defun math/sincos-test4 ()
   (let* ((len       10)
          (x1        5)
          (y1        7)
          (x2        5)
          (y2        7)
          (threshold 0.000001))
     (do ((deg 0 (1+ deg)))
         ((<= 360 deg) nil)
       (setf x2 (+ x1 (* len (math/cos deg))))
       (setf y2 (+ y1 (* len (math/sin deg))))
       (do ((deg2 0 (1+ deg2)))
           ((<= 360 deg2) nil)
         (let ((tmp  (+ deg deg2)))
           (when (<= 360 tmp)
             (decf tmp 360))
           (let ((sin2 (math/sin x1 y1 x2 y2 deg2))
                 (sin3 (math/sin tmp)))
             (when (< threshold (abs (- sin2 sin3)))
               (format t "ERROR : deg=~A, deg2=~A, sin2=~A, sin3(~A)=~A~%" deg deg2 sin2 tmp sin3)))
           (let ((cos2 (math/cos x1 y1 x2 y2 deg2))
                 (cos3 (math/cos tmp)))
             (when (< threshold (abs (- cos2 cos3)))
               (format t "ERROR : deg=~A, deg2=~A, cos2=~A, cos3(~A)=~A~%" deg deg2 cos2 tmp cos3))))))))

#+END_SRC


　じゃぁ次か。上記テストの point 版‥‥‥あれ、これもエラーにならない。

#+BEGIN_SRC lisp
 (defun math/sincos-test5 ()
   (let* ((len       10)
          (base-x    5)
          (base-y    7)
          (threshold 0.000001)
          (pt1 (ol:new point base-x base-y))
          (pt2 (ol:new point 0 0)))
     (do ((deg 0 (1+ deg)))
         ((<= 360 deg) nil)
       (setf (class:member pt2 :x) (+ base-x (* len (math/cos deg))))
       (setf (class:member pt2 :y) (+ base-y (* len (math/sin deg))))
       (do ((deg2 0 (1+ deg2)))
           ((<= 360 deg2) nil)
         (let ((tmp  (+ deg deg2)))
           (when (<= 360 tmp)
             (decf tmp 360))
           (let ((sin2 (math/sin pt1 pt2 deg2))
                 (sin3 (math/sin tmp)))
             (when (< threshold (abs (- sin2 sin3)))
               (format t "ERROR : deg=~A, deg2=~A, sin2=~A, sin3(~A)=~A~%" deg deg2 sin2 tmp sin3)))
           (let ((cos2 (math/cos pt1 pt2 deg2))
                 (cos3 (math/cos tmp)))
             (when (< threshold (abs (- cos2 cos3)))
               (format t "ERROR : deg=~A, deg2=~A, cos2=~A, cos3(~A)=~A~%" deg deg2 cos2 tmp cos3))))))))

#+END_SRC


　‥‥‥どうやら見立てが間違っていたようだ。いったん保留にして、〔元のタスク
(TASK-0071：uml-interface-requestの作成)〕で別の路線で調査、解決すればこちらもク
ローズという方向で行こう。

** 2015/04/27

　結局、〔元タスク(TASK-0071：uml-interface-requestの作成)〕でバグを発見、対処し
た。クローズ。



&pagetag( "バグ", "タグマップ#バグ" )
&pagetag( "math", "タグマップ#math" )

#<end update:2020/02/20 16:20:11>
#<begin task ID:flrZtAh7JWC>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/04/07
PRIORITY:3
STATUS:done
TITLE:uml-generalizationの作成
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:flrZtAh7JWC.20150407.svg,flrZtAh7JWC.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　uml-generalization のステンシルを作成する。


* sample

[[./flrZtAh7JWC.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :textbox)
 (load-stencil :uml-generalization)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (textbox 100 100 "classA" :align :center :id :clsA)
       (textbox 300 100 "classB" :align :center :id :clsB)
       (uml-generalization :clsA :clsB)))

;;END_SVG
#+END_SRC

* log
** 2015/03/02

　事後起票。

** 2015/04/07

　１ヶ月以上放置したこのタスクに戻ってきた。さて、何が終わってないんだっけ？　ま
ずはその確認から‥‥‥。

　正直なところ、何が終わっていないのかわからない。ちょっと、ステレオタイプでも追
加してみよう。ついでに接続方法も変えてみちゃう。


#+BEGIN_SRC lisp
;;BEGIN_SVG 20150407
 (load-stencil :grid)
 (load-stencil :textbox)
 (load-stencil :uml-generalization)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (textbox 150 100 "classA" :align :center :id :clsA)
       (textbox 250 100 "classB" :align :center :id :clsB)
       (uml-generalization :clsA :clsB :line-style :LR :keyword :private)))

;;END_SVG
#+END_SRC

[[./flrZtAh7JWC.20150407.svg]]


　‥‥‥問題ないみたいだ。となると、あとはなんだろう？　プロパティとかだろうか？　
だが、それはまだ話として出てきてもいないことなので、やるとすれば新規タスク。であ
ればクローズとして良いだろう。




&pagetag( "ステンシル作成", "タグマップ#ステンシル作成" )
&pagetag( "UML", "タグマップ#UML" )
&pagetag( "uml-generalization", "タグマップ#uml-generalization" )

#<end update:2020/02/21 12:34:37 access:2020/03/03 09:34:33>
#<begin task ID:fDMAFDrh9hl>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/05/07
PRIORITY:3
STATUS:wait
TITLE:fill-infoの追加
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　現在、fill 指定はキーワードか文字列だが、それ以外の指定を可能にしたい。そのた
め、fill-info クラスを作成し、サポートする。詳細は今後の調査。


* log
** 2015/05/07

　起票。



&pagetag( "機能追加", "タグマップ#機能追加" )
&pagetag( "fill-info", "タグマップ#fill-info" )

#<end update:2020/02/20 16:20:33>
#<begin task ID:fOykDw083N0>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/02/17
PRIORITY:3
STATUS:done
TITLE:uml-noteにstereotypeパラメータを追加する
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　やらなきゃね。


* log
** 2015/02/15

　起票。

** 2015/02/17

　着手。基本的には uml-package と同じようにやる。

　‥‥‥と思ったが、予想外に面倒臭い‥‥‥頑張れ自分。

　一応できた。クローズでいいや。




&pagetag( "機能追加", "タグマップ#機能追加" )
&pagetag( "uml-note", "タグマップ#uml-note" )

#<end update:2020/02/20 16:06:49 access:2020/02/20 16:06:53>
#<begin task ID:fQSbv6osQPt>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:red
DATE:2015/05/07
PRIORITY:3
STATUS:done
TITLE:UML要素におけるdefault-stroke使用時の挙動確認
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:fQSbv6osQPt.20150501.01.svg,fQSbv6osQPt.20150501.02.svg,fQSbv6osQPt.20150501.03.svg,fQSbv6osQPt.20150501.04.svg,fQSbv6osQPt.20150507.01.svg,fQSbv6osQPt.20150507.02.svg,fQSbv6osQPt.20150507.03.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　UML図形では、たとえば依存関係ならば点線を使用し、クラス図形であれば実線を‥‥‥と
いうように、点線／実線の使用にはルールがある。そのため、指定なしで 
*default-stroke* を使用する場合でも、:dasharray パラメータだけは変更しなければな
らない。これができていない UML 図形要素があるため、全体の確認を行なう。


* log
** 2015/05/01

　起票。そして着手。

　さて、基本的な方針は以下の通り。

	* *default-stroke* を使う場合のみ、:dasharray パラメータを書き換えたモノを使
	  用する。
	* *uml-actor-stroke* など、専用のスペシャル変数が適用される場合、「わかって
	  やっている」とみなされるため、:dasharray パラメータの書き換えはしない。
	* ついでに、インスタンス単位での fill や stroke の指定はさせない。UML は基本
	  的にそういうものではないという前提から。


　‥‥‥というわけで、上記の方針にあわせてまずは actor から変更してみた。

[[./fQSbv6osQPt.20150501.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150501.01
;(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-actor)
 (let ((*default-fill*   :white)
	   (*default-stroke* (stroke :dasharray '(3 3) :color :blue :width 2)))
   (create-svg (:width 300 :height 200)
		(grid)
		(uml-actor :you1  100 100)
		(let ((*uml-actor-fill*   :gray)
			  (*uml-actor-stroke* (stroke :dasharray '(1 1) :color :red :width 1)))
		  (uml-actor :you2 200 100))))
;;END_SVG
#+END_SRC


　次は簡単そうなところで interface。

[[./fQSbv6osQPt.20150501.02.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150501.02
;(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-interface)
 (let ((*default-fill*   :skyblue)
	   (*default-stroke* (stroke :dasharray '(3 3) :color :blue :width 2)))
   (create-svg (:width 300 :height 200)
		(grid)
		(uml-interface :interface1 100 100)
		(let ((*uml-interface-fill*   "#CCCCCC")
			  (*uml-interface-stroke* (stroke :dasharray '(2 2) :color :black :width 1)))
		  (uml-interface :interface2 200 100))))
;;END_SVG
#+END_SRC


　‥‥‥次はなんだ、uml-note 行こうか。面倒になってきた。

[[./fQSbv6osQPt.20150501.03.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150501.03
;(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-note)
 (let ((*default-fill*   :skyblue)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
	   (*default-stroke* (stroke :dasharray '(3 3) :color :blue :width 1)))
   (create-svg (:width 300 :height 200)
		(grid)
		(rectangle 100 150 50 50 :id :rect)
		(uml-note 200 75 "This is test." :keyword :comment :targets :rect)))
;;END_SVG
#+END_SRC



　uml-state は最近の実装なので中途半端だがほぼできている。パラメータに stroke と
かとらないのだ。だが、dasharray を上書きしていないな。

[[./fQSbv6osQPt.20150501.04.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150501.04
;(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-state)
 (let ((*default-fill*   :skyblue)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
	   (*default-stroke* (stroke :dasharray '(3 3) :color :blue :width 1)))
   (create-svg (:width 300 :height 200)
		(grid)
		(uml-state :foo 100 100)
		(let ((*uml-state-fill*   "#FFAAAA")
			  (*uml-state-stroke* (stroke :dasharray '(1 1) :color :red :width 1)))
		  (uml-state :bar 200 100))))
		  
;;END_SVG
#+END_SRC


　次は、uml-usecase かな。今日はここまで。

** 2015/05/07

　連休は他ゴトをやっていたため、ここにはひさしぶりに戻ってきた。で、なんだ。
uml-usecase か。


[[./fQSbv6osQPt.20150507.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150507.01
;(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-usecase)
 (let ((*default-fill*   :skyblue)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
	   (*default-stroke* (stroke :dasharray '(3 3) :color :blue :width 1)))
   (create-svg (:width 300 :height 200)
		(grid)
		(uml-usecase 100 100 80 50 "test1")
		(let ((*uml-usecase-fill*   "#FFAAAA")
			  (*uml-usecase-stroke* (stroke :dasharray '(1 1) :color :red :width 1)))
		  (uml-usecase 200 100 80 50 "test2"))))
		  
;;END_SVG
#+END_SRC




　次は、uml-package かな。段々面倒なやつになっていく。


[[./fQSbv6osQPt.20150507.02.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150507.02
;(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-package)
 (let ((*default-fill*   :skyblue)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
	   (*default-stroke* (stroke :dasharray '(3 3) :color :blue :width 1)))
   (create-svg (:width 300 :height 200)
		(grid)
		(uml-package :test1 80 100)
		(let ((*uml-package-fill*   "#FFAAAA")
			  (*uml-package-stroke* (stroke :dasharray '(1 1) :color :red :width 1)))
		  (uml-package :test2 220 100))))
		  
;;END_SVG
#+END_SRC


　次は‥‥‥ uml-class か。コネクタ系でないものでは最後かな？


[[./fQSbv6osQPt.20150507.03.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150507.03
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (let ((*default-fill*   :skyblue)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
	   (*default-stroke* (stroke :dasharray '(3 3) :color :blue :width 1)))
   (create-svg (:width 300 :height 200)
		(grid)
		(uml-class :test1 80 100 :attributes (:m-data) :operations (:execute)
				   :template "T" :responsibilities "--test class")
		(let ((*uml-class-fill*   "#FFAAAA")
			  (*uml-class-stroke* (stroke :dasharray '(1 1) :color :red :width 1)))
		  (uml-class :test2 220 100 :attributes (:m-data) :operations (:execute)
					 :template "T" :responsibilities "--test class"))))
		  
;;END_SVG
#+END_SRC


　では、続いてコネクタ系。以下のモノがある。

	* uml-dependency
	* uml-association
	* uml-composition
	* uml-aggregation
	* uml-generalization
	* uml-implementation
	* uml-interface-request


　これらについては、専用の stroke や fill のスペシャル変数は持たせず、
*default-stroke* や *default-fill* を修正したモノを使用する‥‥‥つもりだけれど、そ
れでいいのかな。とりあえずの方針はそういうことにして、確認作業を進めよう。

　‥‥‥確認完了。uml-interface-request を除き、全てのクラスは connector 派生で、コ
ンストラクタから基底 connector に対して *default-stroke* を書き換えた stroke を
作成していた。これは問題ないようだ。

　で、uml-interface-request だが、これは〔別のタスク(TASK-0071：
uml-interface-requestの作成)〕で取り組んでいる最中なので、まぁお咎めなしというこ
とにしておこう。少なくとも、現在できている部分までに関して言えばちゃんと実装でき
ているし。

　‥‥‥よし、ひとまずクローズとしよう。



&pagetag( "バグ", "タグマップ#バグ" )
&pagetag( "UML", "タグマップ#UML" )

#<end update:2020/02/26 16:25:24>
#<begin task ID:gfDBGxxfNqg>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/03/05
PRIORITY:3
STATUS:done
TITLE:uml-usecaseの作成
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:gfDBGxxfNqg.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　uml-usecase のステンシルを作成する。


* sample

[[./gfDBGxxfNqg.sample.svg]]

** source
#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :uml-actor)
 (load-stencil :uml-usecase)
 (load-stencil :uml-generalization)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-usecase 200  50 120 60 "base usecase"    :id :usecase1)
       (uml-usecase 300 130 120 60 "derived usecase" :id :usecase2)
       (uml-generalization :usecase2 :usecase1)
       (uml-actor :actor 75 130 :id :actor)
       (connector :actor :usecase2)))
;;END_SVG
#+END_SRC

* log
** 2015/03/02

　事後起票。

** 2015/03/05

　過去に作成した svguml のリファレンスを参照してみたが、CL-SVG でも同等のパラメー
タ指定は網羅しているようだ（eventは除くけど）。というわけで、ひとまずはクローズ
とする。



&pagetag( "ステンシル作成", "タグマップ#ステンシル作成" )
&pagetag( "UML／ユースケース図", "タグマップ#UML／ユースケース図" )

#<end update:2020/02/21 09:34:06>
#<begin task ID:gndIttmrxyL>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/02/12
PRIORITY:3
STATUS:done
TITLE:strokeのnil指定を許容する
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　現在、stroke 指定を伴う全ての entity 派生クラスでは、stroke 指定を省略した場合、
内部的に (stroke) でデフォルトのストロークを作成する。しかし、以下の３つの「デフォ
ルト値」のいずれかが nil でない場合、必ずなんらかの stroke 情報が出力されてしまう。

	* svg:*default-stroke-color*
	* svg:*default-stroke-dasharray*
	* svg:*default-stroke-width*


　この問題には、別の側面もある。stroke パラメータに何も指定しなかった場合には出
力としても何も出てほしくないがために、上記３つのスペシャル変数には nil が指定さ
れているのだ。それがために、デフォルトの color や width を指定したい場合は束縛を
作る必要がある。しかしそうしたが最後、storoke パラメータ省略でもそれが出力される。

　この問題を解決するために、stroke パラメータに nil が指定された場合、それを最後
まで nil として扱う、という仕様に変更する。


* log
** 2015/02/10

　起票。

　そして着手‥‥‥とは書いたものの、面倒臭いなこれ。とりあえず circle クラスで作業。
これがモデルになるかな。

** 2015/02/11

　さらに、*default-stroke* というスペシャル変数を用意。デフォルトでは nil ね。
stroke パラメータが省略された場合、これが使用される。

　そして、ライブラリの textbox を除いて作業完了。textbox は全面刷新する想定なの
で、後回し。

** 2015/02/12

　〔別タスク(TASK-0010：shape派生クラスのコンポジション化サポート)〕にて、
textbox を含む shape クラスの「コンポジション化サポート」を検討することになった
ため、textbox もその結果を受けて修正することに。従って、このタスクはクローズ。

　あ、ちなみに他の *-info クラスの nil 許容も実現した。


&pagetag( "改善", "タグマップ#改善" )
&pagetag( "stroke", "タグマップ#stroke" )

#<end update:2020/02/20 16:05:16>
#<begin task ID:gq9bS3rn2KT>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2020/03/26
PRIORITY:3
STATUS:doing
TITLE:css の刷新 ⇒ stylesheet の新設
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!edit

　以下のように記述できるようにしたい。

#+BEGIN_SRC lisp
(css
  (style :rect.inner :fill '(:color :red :opacity 0.2)
					 :stroke '(:color :black :width 1))
  (style :.foo :font (make-font :family "foobar")))
#+END_SRC


* log
** 2020/03/24

　起票。検討からやらなきゃだな。

** 2020/03/25

　emacs 上で fist データに埋め込む場合は css は使えないのでモチベーションが保て
るか自信がないが、なんとか頑張ってみよう。そして、既存の css マクロをいきなり変
えるのも面倒なので、stylesheet マクロというのを別で作る感じかな。ということは以
下のようになるか。

#+BEGIN_SRC lisp
(stylesheet
  (style :rect.inner :fill '(:color :red :opacity 0.2)
					 :stroke '(:color :black :width 1))
  (style :.foo :font (make-font :family "foobar")))
#+END_SRC

** 2020/03/26

　かなりできてきた。完成ではないかもしれないが、色々と都合があるのでいったんコミッ
ト。
#<end update:2020/03/26 07:57:25>
#<begin task ID:gqTg0mi7qli>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/03/05
PRIORITY:3
STATUS:done
TITLE:uml-interfaceの作成
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:gqTg0mi7qli.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　uml-interface のステンシルを作成する。


* sample

[[./gqTg0mi7qli.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :uml-package)
 (load-stencil :uml-interface)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-package :package 100 100 :id :package)
       (uml-interface :interface 300 100 :id :interface)
       (connector :package :interface)))
;;END_SVG
#+END_SRC

* log
** 2015/03/02

　事後起票。

** 2015/03/05

　過去に作成した svguml のリファレンスを参照してみたが、CL-SVG でも同等のパラメー
タ指定は網羅しているようだ（eventは除くけど）。というわけで、ひとまずはクローズ
とする。



&pagetag( "ステンシル作成", "タグマップ#ステンシル作成" )
&pagetag( "UML", "タグマップ#UML" )
&pagetag( "uml-interface", "タグマップ#uml-interface" )

#<end update:2020/02/21 09:35:21>
#<begin task ID:gLAvb7ZS89R>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
DATE:2015/02/26
PRIORITY:3
STATUS:done
TITLE:CL-APPS対応
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　CL-APPS から起動するための main 関数を作成し、パラメータ解析などの諸々を実装す
る。


* log
** 2015/02/25

　起票。そして着手。

　CL-APPS が起動してくる main 関数は、パラメータを格納したリストを渡してくる。だ
から、とりあえず main 関数としては以下の感じになる。

#+BEGIN_SRC lisp
 (in-package :cl-svg)
 
 (defun main (args) ...)

#+END_SRC


　問題は、パラメータの扱いだな。そして、ファイルのエンコーディングの扱いなどを考
える限り、create-svgfile はなくなるかもしれない。いや、それはないかな？

　なんにせよ、diagram ファイルを直接 load するような真似ができないのはたしかだ。
エンコーディングを指定しなければならず、結局は文字列バッファに読み込んで 
read-from-string しなければならないのは間違いない。

	* ファイル全体を文字列として読み込む。
	* read-from-string してリストに変換。
	* eval で評価。


　では、eval で評価したとして、CL-PREFAB 連携のように文字列で受け取ってファイル
に出力するか？　それとも、create-svgfile をファイル内部に書かせるか？　どちらか
にしたとして、選ばなかった方を diagram ファイルでやられたらどうすればいいだろう？

　これは簡単に答えの出ない問題だと思う。ただひとつ言えるのは、create-svgfile を
ファイル内部に書かせる方式を取った場合、diagram ファイル１つに対して複数の svg 
ファイルができるかもしれないということだ。そして、ファイルの中身を覗かなければそ
の対応を知ることはできない。そうしたいだろうか。したくないだろう。

　この問題を考えるには、もうひとつの別の問題も考える必要がある。それは、CL-APPS 
の起動１回で１つの diagram ファイルを処理させるのか、それともディレクトリを指定
して全部作らせるのか、ということ。

　こちらの問題については、それほど悩むことはない。というのも、CL-PREFAB はまとめ
て処理する必要があるからこそそうしているわけで、CL-SVG はそうは思えない。であれ
ば make か何かに面倒な処理は任せてしまえば良いのだ。そしてそこから、最初の問題の
答えも出てくるわけだ。

　つまり、diagram ファイルに書くのは create-svg マクロであり、入力パラメータで指
定された名前のファイルにそれを書き出すのは cl-apps-main 関数側。そして１回の 
CL-APPS 起動では１つのファイルしか処理しない。これで cl-apps-main の実装がしなけ
ればならないことはかなり少なくなるだろう。

　とはいえ、だ。結構な数の stencil をロードしなければならない CL-SVG には酷なの
ではなかろうか？　それに対しては、「ある程度まとまったら CL-SVG 本体に組み込む」
という対応もありかと思う。

** 2015/02/26

　‥‥‥とりあえず、動作するところまできた。結局 create-svgfile は廃止となり、
CL-APPS からコールされるエントリ関数でも create-svg がコールされることになった。
そして、それ以外も概ね昨日書いた筋にそって実現した。

　ついでながら、出力冒頭の xml タグに記述する encoding タグも一応解決。
create-svg マクロに encoding というキーワードパラメータを渡せるようにしている。
これのデフォルトパラメータは *default-output-encoding* であり、初期状態では 
:utf8 に設定されている。create-svg マクロに明示的に設定しても良いし、デフォルト
のスペシャル変数の値を変えてもよい。ただ、create-svg は出力ファイルを作成するわ
けではないし、エンコーディング変換をするわけでもないから、これは単純に xml タグ
の encoding 属性値を設定するためだけのものだ。

　で、実際にこれをどうやって設定するかと言えば、CL-APPS のパラメータで与える出力
エンコーディングでだ。cl-apps-main 関数は、入力ファイルから読み取った内容を read 
して eval するコードを、*default-output-encoding* を与えられた出力エンコーディン
グで束縛する let で括っている。これが答えだ。

　では、CL-PREFAB 連携ではどうか。実はこれ、まだどうにもなっていない。だから 
CL-PREFAB 連携では *default-output-encoding* のデフォルト設定値である :utf8 で動
作する。これをなんとかしないと。でもそれはこのタスクでやることではないっぽいなぁ。
〔あっち(TASK-0019：CL-PREFAB連携の模索)〕にとばすとしよう。ひとまずクローズ。



&pagetag( "機能追加", "タグマップ#機能追加" )
&pagetag( "CL-APPS", "タグマップ#CL-APPS" )

#<end update:2020/02/20 16:08:23>
#<begin task ID:gYyyed0UlLM>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/03/18
PRIORITY:3
STATUS:done
TITLE:uml-dependencyの作成
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:gYyyed0UlLM.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　uml-dependency のステンシルを作成する。


* sample

[[./gYyyed0UlLM.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :uml-package)
 (load-stencil :uml-dependency)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-package "CL-APPS" 100 100 :width 80 :id :apps)
       (uml-package "CL-SVG"  300 100 :width 80 :id :svg)
       (uml-dependency :apps :svg :keyword :invoke)))
;;END_SVG
#+END_SRC

* log
** 2015/03/02

　事後起票。

** 2015/03/18

　何も書かないまま、やることが見つからなくなってしまった。反省しつつクローズ。




&pagetag( "ステンシル作成", "タグマップ#ステンシル作成" )
&pagetag( "UML", "タグマップ#UML" )
&pagetag( "uml-dependency", "タグマップ#uml-dependency" )

#<end update:2020/02/21 09:29:46 access:2020/03/03 09:24:43>
#<begin task ID:gYO7DjnOQXy>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
DATE:2015/03/02
PRIORITY:3
STATUS:doing
TITLE:CL-PREFAB連携の模索
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:gYO7DjnOQXy.20150220.svg,gYO7DjnOQXy.20150227.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!edit


　以下の要件で CL-PREFAB との連携をしたい。

	1.指定した svg ファイルを表示させる。
	2.CL-SVG の入力データを CL-PREFAB のデータファイル内に埋め込み、CL-SVG を起動する。
	3.HTML ファイル内部に SVG を埋め込む。


　‥‥‥など。


* log
** 2015/02/18

　起票。

　そして着手。試しに、raw_html を使って埋め込みをやってみる。

<raw_html>
<?xml version='1.0' encoding='utf-8'?>
<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' baseProfile='full' xml:space='default' width='800' height='300'>
	
	<!-- layer background -->
	<g id='background' display='inline'>
		<!-- grid -->
		<pattern id='__grid' width='10' height='10' patternUnits='userSpaceOnUse' >
			<rect x='0' y='0' width='10' height='10' fill='white' />
			<polyline fill='none' stroke='blue' stroke-width='0.2' points='10,0 0,0 0,10' />
		</pattern>
		<rect x='0' y='0' width='100%' height='100%' fill='url(#__grid)' stroke='blue' stroke-width='0.2' />
	</g>
	<!-- svg : uml-package -->
	<g id='svg'>
		<rect x='350' y='75' width='100' height='65' fill='white' stroke='black' stroke-width='1.0' />
		<rect x='350' y='60' width='40' height='15' fill='white' stroke='black' stroke-width='1.0' />
		<text x='400' y='113' text-anchor='middle' >CL-SVG</text>
	</g>
	<!-- svg-user : uml-package -->
	<g id='svg-user'>
		<rect x='85' y='75' width='130' height='65' fill='white' stroke='black' stroke-width='1.0' />
		<rect x='85' y='60' width='40' height='15' fill='white' stroke='black' stroke-width='1.0' />
		<text x='150' y='113' text-anchor='middle' >CL-SVG-USER</text>
	</g>
	<!-- class : uml-package -->
	<g id='class'>
		<rect x='550' y='175' width='100' height='65' fill='white' stroke='black' stroke-width='1.0' />
		<rect x='550' y='160' width='40' height='15' fill='white' stroke='black' stroke-width='1.0' />
		<text x='600' y='195' text-anchor='middle' font-size='9pt' fill='black' >&lt;&lt;external&gt;&gt;</text>
		<text x='600' y='213' text-anchor='middle' >CL-CLASS</text>
	</g>
	<!-- connector from svg-user to svg -->
	<polyline fill='none' stroke='black' stroke-width='1.0' stroke-dasharray='3 3 ' points='215.0,100.0 350.0,100.0' />
	<polyline fill='none' stroke='black' stroke-width='1.0' points='337.0096,107.5 350,100.0 337.0096,92.5' />
	<!-- connector from svg to class -->
	<polyline fill='none' stroke='black' stroke-width='1.0' stroke-dasharray='3 3 ' points='450.0,128.63564 550.0,171.36435' />
	<polyline fill='none' stroke='black' stroke-width='1.0' points='535.1075,173.15695 550,171.36435 541.00134,159.36337' />

</svg>
</raw_html>


　‥‥‥できるじゃん。ということは、方針としては「データも出力も埋め込む」というこ
とになるかな。もちろん、CL-SVG 単体として考えた場合はファイルに出力できなければ
ならないが、CL-PREFAB 連携を考える限り、全て埋め込みで行こう。

　さて、埋め込みを考えるということは、入力も出力も文字列で、という話だ。現在は入
力も出力もファイル名になっている‥‥‥というのも正確ではないかもしれないが、まぁファ
イルだ。これらを両立する方式を考えろ、ということだな。

　さて、現在テストのデータは以下のような感じになっている。

#+BEGIN_SRC lisp
 (in-package :svg-user)
 
 (load-stencil :grid)
 
 (create-svgfile (:file-name *test-outfile* :width 800 :height 600)
     (layer :background)
     (layer :lines)
     (grid :layer :background)
     ;;  :
     ;;  :
     ;;  :
     (rectangle :x 200 :y 250 :width w :height h))

#+END_SRC



　いきなり気になるのは in-package だ。ファイルをロードした場合、in-package の効
力はファイルのロード終了をもって消えるはず。しかし、文字列を read して eval した
場合、カレントパッケージは戻らないのではないだろうか。この問題は、以下のようなコー
ドを評価することで解消できると思う。

#+BEGIN_SRC lisp
 (let ((pkg *package*))
   (in-package :svg-user)
   ;; code here...
   (setf *package* pkg))

#+END_SRC


　上記のようなコードで括ってやるのは CL-PREFAB 向けに作ってやるアドインの仕事だ
ろう。さらに言えば、code here の部分が文字列を返し、その結果が上記の式全体の結果
として帰る感じだ。そういう仕組みになっていれば、ひとまず CL-PREFAB データの内部
に記述する CL-SVG データでは in-package を記述する必要はないし、コードを強制的に 
svg-user パッケージで評価させることができる。そして文字列として読み込んだデータ
を read するのは read-from-string だ。だから以下のような感じになるだろうか。

#+BEGIN_SRC lisp
 (let ((buf "(YOUR CODE)"))
   (read-from-string (concatenate 'string "(let ((pkg *package*))
    (in-package :svg-user)
    (let ((svg (progn " buf ")))
      (setf *package* pkg)
      buf))")))

#+END_SRC


　‥‥‥もうちょっとすっきりさせたいな。

** 2015/02/19

　昨日の最後のコードは、以下のようにもできるだろう。こっちの方がいい気がする。

#+BEGIN_SRC lisp
 (let ((code "(YOUR CODE)")
       (g-pkg (gensym "PKG"))
       (g-svg (gensym "SVG")))
   `(let ((,g-pkg *package*))
      (in-package :svg-user)
      (let ((,g-svg (progn ,(read-from-string code))))
        (setf *package* ,g-pkg)
        ,g-svg)))

#+END_SRC


　それはさておき、file-writer をなんとかしなければならん。これまでのやり方ならファ
イルに書きたいし、CL-PREFAB 連携であれば文字列バッファに書きたいと思う‥‥‥いや、
全部文字列バッファに書き込んで、必要なら最後にエンコーディング指定してファイルに
書き込めばいいのか。

　いずれにせよ、make-string-output-stream というのがあるようだ。いわゆる文字列ス
トリームを作成してくれて、get-output-stream-string で内容を取得できるらしい。

#+BEGIN_SRC lisp
 >> (let ((s (make-string-output-stream)))
      (format s "testing...~A." 1234)
      (get-output-stream-string s))
 "testing...1234"

#+END_SRC


　これを使って新しい writer を作れば、既存の枠組みには大きな影響を与えずになんと
かできるんではなかろうか。というわけで、buffer-writer というクラスを書いてみた。
以下のような感じ。

#+BEGIN_SRC lisp
 * (let ((writer (class:cast-to (file-writer) (new svg:buffer-writer))))
     (class:invoke writer :write 10 :- 20 :- 30)
     (class:invoke writer :close))
 "10-20-30
 "

#+END_SRC

　get-output-stream-string のコールは close メソッドでやっている。これが良いデザ
インかどうかはマダわからない。




　次に、マクロ create-svgfile をコピーして create-svg を作成。これは 
buffer-writer を使用して svg 出力を文字列で返すもの。さらに、create-svgfile を丸
ゴト書き換え、内部的に create-svg をコールして生成した SVG 文字列をファイルに保
存するだけにした。結果、file-writer インターフェースを実装する 
native-file-writer や custom-file-writer は廃止。buffer-writer が独り立ちするこ
とになるが、単独クラスではメソッド write の名前が使えない。そのため、file-writer 
インターフェースは svg-writer に改名しただけで残し、buffer-writer は 
svg-buffer-writer という名前にした。わかりにくいが、仕方ないだろう。


　さらにがちゃがちゃイジった結果、なんとなく見えてきた。まず、変数 code が以下の
ような「文字列」だったとする。一番外側の progn を CL-PREFAB のデータ内に書くこと
はないと思うので、これはアドインで付加してやる必要があるだろう。

#+BEGIN_SRC lisp
 (progn
   (load-stencil :test-util)
   (load-stencil :grid)
   (create-svg (:width 800 :height 600)
         (grid)
         (test-header "path-01 : test of path." 800 600)
         (path :d `(,(move-to 200 200)
                     ,(3d-curve-to 275 150 575 100 500 200))
               :stroke (stroke :color :red :width 3 :dasharray '(2 2)))))

#+END_SRC


　この条件下であれば、以下のコードだけでとりあえず SVG 出力を文字列データとして
得ることができる。これに、エラー処理を追加すれば良いだろう。

#+BEGIN_SRC lisp
 (let ((*package* (find-package :svg-user)))
   (eval (read-from-string code)))

#+END_SRC



　で、ここからの作業なのだけれど、本格的にアドインを作成するとなると、CL-PREFAB 
と CL-SVG の両方をロードしたイメージが必要になる。また、見落していた問題として、
ステンシルのインクルードパスをどうやって設定するんだという話もある。さて、どうし
たものか。

** 2015/02/20

　とりあえず、CL-PREFAB と CL-SVG をロードした REPL で作業を続けることにする。で、
アドイン svg は現状こんな感じ。

#+BEGIN_SRC lisp
 (defun svg (params txt-writer accessor cntxt log)
     (declare (ignore accessor))
     (let ((terminator nil)
           (eof-itr    nil))
       ;;analyze parameter string.
       (let* ((lst (ppcre-x:capture-list "^\"([^\"]+)\"$" params 1)))
         (when (null lst)
           (class:invoke log :error "invalid parameters '" params "' for &svg.")
           (return-from svg nil))
         (setf terminator (first lst)))
 
       (class:with-members (itr1 itr2) cntxt
             (setf eof-itr (stl:find itr1 itr2 terminator #'string=))
             (when (stl:opr== eof-itr itr2)
               (class:invoke log :error "terminator '" terminator "' of &svg is not found.")
               (return-from svg nil)))
 
       (let ((stream   (make-string-output-stream))
             (itr      (class:member cntxt :itr1))
             (line-num (class:member cntxt :line-num)))
         (write-line "(progn" stream)
         (next-line)
         (do ()
             ((stl:opr== itr eof-itr))
           (write-line (stl:opr* itr) stream)
           (next-line))
         (write-line ")" stream)
         (next-line)
         (setf (class:member cntxt :line-num) line-num)
         (class:with-members (prop-mgr prgm-mgr) cntxt
             (let ((code (get-output-stream-string stream))
                   (*package* (find-package :svg-user)))
               ;;ToDo : need error check...
               (pragma-write (eval (read-from-string code))))))))

#+END_SRC


　で、以下のような指定をこのページのデータ内部に書いてみる。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150220
 (load-stencil :grid)
 (load-stencil :uml-actor)
 (load-stencil :uml-note)
 (create-svg (:width 400 :height 200)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-actor "CL-SVG" 100 120 :id :actor)
       (uml-note 300 50 "Hello CL-PREFAB!" :targets :actor)))

;;END_SVG
#+END_SRC


　これを動かした結果が以下の通り。やったぜ。

[[./gYO7DjnOQXy.20150220.svg]]



　さて、上記の埋め込み CL-SVG データを記述している際にも、自分は uml-actor の 
width パラメータを指定し忘れてビルド処理をコケさせていた。やっぱりエラー処理は必
須だ。ひとまずのところ、「何にせよエラーがおきたらそれとわかる出力をする」ように
しないと。

　それも完了。ログにエラーを出して、さらに出力 HTML 上にも赤文字でエラー報告をす
ることにした。以下のように。これで、ひとまず連携そのものはできたことになる。

<raw_html>
<p><font color='red'>ERROR : Invalid CL-SVG data.</font></p>
</raw_html>

** 2015/02/21

　では、次の問題を考えよう。ステンシルのインクルードパス問題だ。無論、埋め込みデー
タで毎度記述するような面倒はしたくない。できることなら CL-PREFAB の起動パラメー
タで一発指定して終わりにしたいが、&svg はユーザ定義アドインなのだ。そうするわけ
にはいかない。

　おそらく、ステンシルのインクルードパスは実際問題としては一箇所になるだろうが、
仕様上は複数指定できる。だから「環境変数に指定しとく」というのもウマくない。

　これならイケるかな‥‥‥と思える方法のひとつは、define シンボルを使用することだ。
起動オプションで -D:SVG_STENCIL_PATH=D:/CVSSandbox/CL-SVG/lib/ などと指定し、
svg アドインが評価するコードを実質的に以下のようにしてしまうことだ。


#+BEGIN_SRC lisp
 (let ((svg:*include-paths* '("D:/CVSSandbox/CL-SVG/lib/")))
   (load-stencil :grid)
   (load-stencil :uml-actor)
   (load-stencil :uml-note)
   (create-svg (:width 400 :height 200)
         (grid)
         (let ((*default-fill* :white)
               (*default-stroke* (stroke :color :black :width 1)))
           (uml-actor "CL-SVG" 100 120 :id :actor)
           (uml-note 300 50 "Hello CL-PREFAB!" :targets :actor))))

#+END_SRC

　しかしまぁ、それもなんかアレだ。やっぱり複数のパスを指定するのは煩雑だ。そもそ
も、アドインの実行というのは一期一会が原則で、事前の初期化処理とかデータの持ち回
りとか、そういうことは想定されていない。そう考えると、&svg のパラメータとしてイ
ンクルードパスを与える？　まさかねぇ。

　次に考えるのは、ヘッダファイル方式だ。&svg アドインの（あるいはその利用の）ルー
ルとして、必ずヘッダファイルをインクルードせよとしておく。で、そのヘッダファイル
は冗長インクルードガードでもって１回しかロードされないようにしておき、そこでイン
クルードパスを設定する‥‥‥

　いや、ダメだ。冗長インクルードガードもページ単位だから、ビルド全体で１回しか実
行されないということにはならない。もうちょっと検討する必要がありそうだ。

　ちょっと目先を変えて、このまま stencil ファイルが量産されたらどうなるか考えて
みよう。uml とか、graph とかディレクトリをわけたくなるかもしれない。そうしたら、
やっぱりインクルードパスは複数指定したくなるんじゃないか？

　参考になりそうなのは、asdf の *central-registry* だな。環境変数でなく、環境設
定ファイルをロードするという考え方だ。(sb-ext:posix-getenv "HOME") してホームディ
レクトリを取得し、配下にある .clsvgrc ファイルを読む‥‥‥とか。

　今日のところは結論が出そうにないかな。

** 2015/02/23

　悩んだ末、「初期化ファイル方式」でいくことにした。.clappsrc だ。環境によるが、
以下のコードでファイルのフルパスは取得できる。

#+BEGIN_SRC lisp
 (merge-pathnames ".clappsrc"
                  (sb-ext:posix-getenv "HOME"))

#+END_SRC


　このファイルの中に CL-SVG の初期化コードを入れておけば良い。ひとまずこれでいっ
てみようか。

　‥‥‥やってみた。アプリケーションとしての CL-PREFAB や CL-SVG をひとまとめにする 
CL-APPS という exe を作成し、最初のパラメータで処理を振り分ける。&svg に遭遇した 
CL-PREFAB は、CL-SVG の機能を直接コールする。ひとまずこれで大丈夫だろう。

** 2015/02/26

　〔TASK-0021：CL-APPS対応〕で、xml タグの encoding 属性を適切に設定しなければな
らん、という話になった。CL-APPS 側ではできたが、CL-PREFAB 連携はまだノーアイデア。
なんとかしないと。

　‥‥‥冷静に考えてみると、CL-PREFAB なんだから以下のようにすればいいんではないか
と思う。無論、%dlr()SVG_ENC には :utf8 などの文字列が入っている。


#+BEGIN_SRC lisp
 %amp()svg( "END" )
 (create-svg (:width 400 :height 200 :encoding %dlr()SVG_ENC)
     :
     :
 END

#+END_SRC

** 2015/02/27

　昨日のをやってみよう。シンボル SVG_ENC を :ascii で define しておく。

#define SVG_ENC :ascii

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150227
 (load-stencil :grid)
 (load-stencil :uml-actor)
 (load-stencil :uml-note)
 (create-svg (:width 400 :height 200 :encoding :ascii)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-actor "CL-SVG" 100 120 :id :actor)
       (uml-note 300 50 "encoding is ascii." :targets :actor)))
;;END_SVG
#+END_SRC

[[./gYO7DjnOQXy.20150227.svg]]

　‥‥‥大丈夫なようだ。方法としてはこれで実現できているはずなのだけれど、問題はちょっ
と面倒なことと、そもそも CL-PREFAB の出力エンコーディング自体が utf-8 なら、SVG 
のエンコーディングとしては何も出さなくて良いのではないか、ということだ。

　何にせよ、現在 svg:*default-output-encoding* は :utf8 なので、放っておけば
encoding='UTF-8' と出力される。CL-SVG 単体で見ればそれはいいかもしれないが、
CL-PREFAB 連携を考えた場合、あまり良くはない。デフォルトを nil にすべきだろうか。

** 2015/03/02

　ひとつ思いついたことがある。&svg アドインの中でなんとかできないだろうか？　と
いうのも、CL-PREFAB は出力エンコーディングを指定するはずなのだから。それを調べて、
適切なキーワードシンボルを svg:*default-output-encoding* に束縛できるはずだ。よ
し、調べてみよう。

　document-creator-context が保有する parameters 構造体、これの output-encoding 
メンバが出力エンコーディングを保持している。これを取得すれば問題なく使用できるよ
うだ‥‥‥が、残念ながらこいつは :default の指定を許可している。これがそのまま &svg 
に伝播してくるのはマズい。どうしたものか。




&pagetag( "機能追加", "タグマップ#機能追加" )
&pagetag( "CL-PREFAB連携", "タグマップ#CL-PREFAB連携" )

#<end update:2020/02/21 12:33:07>
#<begin task ID:gZR5e7SFM3q>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/03/27
PRIORITY:3
STATUS:done
TITLE:connectorをもっと賢くする：BBパターン
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:gZR5e7SFM3q.20150326.svg,gZR5e7SFM3q.20150327.01.svg,gZR5e7SFM3q.20150327.02.svg,gZR5e7SFM3q.20150327.03.svg,gZR5e7SFM3q.20150327.04.svg,gZR5e7SFM3q.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　〔TASK-0042：connectorをもっと賢くする〕から派生したタスク。:BB のパターンでの
挙動を整理し、実装する。


* 現状

[[./gZR5e7SFM3q.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 600 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-textbox-align* :center)
		   (*default-connector-style* :BB))
	   ;;-------------------------------------------
	   (textbox  50  50 "f01" :id :f01) (textbox 100  50 "d01" :id :d01) (connector :f01 :d01 :end2 :arrow)
	   (textbox  50 150 "d02" :id :d02) (textbox 100 150 "f02" :id :f02) (connector :f02 :d02 :end2 :arrow)
	   ;;-------------------------------------------
	   (rectangle 70 300 80 80 :id :f03 :contents ((text 10 20 "f03")))
       (textbox  100 260 "d03" :id :d03)   
       (connector :f03 :d03 :end2 :arrow)
	   ;;-------------------------------------------
	   (let ((y1  50)
	   		 (y2 120))
		 (textbox 180 y1 "f05" :id :f05) (textbox 210 y2 "d05" :id :d05) (connector :f05 :d05 :end2 :arrow)
		 (textbox 300 y1 "f06" :id :f06) (textbox 310 y2 "d06" :id :d06) (connector :f06 :d06 :end2 :arrow)
		 (textbox 410 y1 "f07" :id :f07) (textbox 400 y2 "d07" :id :d07) (connector :f07 :d07 :end2 :arrow)
		 (textbox 530 y1 "f08" :id :f08) (textbox 500 y2 "d08" :id :d08) (connector :f08 :d08 :end2 :arrow))
	   ;;-------------------------------------------
	   (let ((y1 250)
	   		 (y2 320))
		 (textbox 180 y1 "d09" :id :d09) (textbox 210 y2 "f09" :id :f09) (connector :f09 :d09 :end2 :arrow)
		 (textbox 300 y1 "d10" :id :d10) (textbox 310 y2 "f10" :id :f10) (connector :f10 :d10 :end2 :arrow)
		 (textbox 410 y1 "d11" :id :d11) (textbox 400 y2 "f11" :id :f11) (connector :f11 :d11 :end2 :arrow)
		 (textbox 530 y1 "d12" :id :d12) (textbox 500 y2 "f12" :id :f12) (connector :f12 :d12 :end2 :arrow))))

;;END_SVG
#+END_SRC

* log
** 2015/03/25

　起票。そして着手。

　冷静に考えてみると、「迂回」をしなければならないのは以下の両方が成立する場合だ
けな気がする。

	1.dest[center] が、from の水平方向の領域に重なっている。
	2.dest[bottom] が from[top] よりも上にあるか、または dest[top] が 
	  from[bottom] よりも下にある。


　1 が成立する場合でも、2 が成立していなければ「２つの矩形は重なっている」ことに
なる。この場合、そもそも迂回をしない、という方針でどうだろうか。それでいいような
気がする。

　‥‥‥結構いい感じになってきた。と思ってこのページの冒頭に「現状」欄を作成。しか
し、何か嫌な予感がしてテキストボックスの横幅を長くしてみたところ、見事に線と矩形
が重なってしまった。ダメだ。まだダメだ。

** 2015/03/26

　昨日、どこで間違ってしまったのか考えてみる。まずいきなり１番だ。

	1.dest[center] が、from の水平方向の領域に重なっている。


　これが、このページの「現状」欄でいうところの 5 - 8 番と、9 - 12 番でそもそも異
なる。そもそも「from の水平方向の領域に重なっている」のをチェックすべきなのは
dest[center] ではなく、実際に接続する端点だ。この辺をちゃんと見直して、実装を修
正しよう。

　‥‥‥やってみた。そして、現状欄と微妙に異なる例を作っておこう。わかりやすさのた
め、ボックスの名前も揃えておく。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150326
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 500 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-textbox-align* :center))
	   ;;-------------------------------------------
	   (let ((y1  50)
	   		 (y2 120))
		 (textbox  80 y1 "f05" :id :f05) (textbox 110 y2 "d05" :id :d05) (connector :f05 :d05 :end2 :arrow :line-style :B3B)
		 (textbox 190 y1 "f06" :id :f06) (textbox 210 y2 "d06" :id :d06) (connector :f06 :d06 :end2 :arrow :line-style :B1B)
		 (textbox 320 y1 "f07" :id :f07) (textbox 300 y2 "d07" :id :d07) (connector :f07 :d07 :end2 :arrow :line-style :B3B)
		 (textbox 430 y1 "f08" :id :f08) (textbox 400 y2 "d08" :id :d08) (connector :f08 :d08 :end2 :arrow :line-style :B1B))
	   ;;-------------------------------------------
	   (let ((y1 250)
	   		 (y2 320))
		 (textbox  80 y1 "d09" :id :d09) (textbox 110 y2 "f09" :id :f09) (connector :f09 :d09 :end2 :arrow :line-style :BB3)
		 (textbox 190 y1 "d10" :id :d10) (textbox 210 y2 "f10" :id :f10) (connector :f10 :d10 :end2 :arrow :line-style :BB1)
		 (textbox 320 y1 "d11" :id :d11) (textbox 300 y2 "f11" :id :f11) (connector :f11 :d11 :end2 :arrow :line-style :BB3)
		 (textbox 430 y1 "d12" :id :d12) (textbox 400 y2 "f12" :id :f12) (connector :f12 :d12 :end2 :arrow :line-style :BB1))))

;;END_SVG
#+END_SRC

[[./gZR5e7SFM3q.20150326.svg]]

　‥‥‥問題ないと思う。クローズしよう。

** 2015/03/27

　いや待てよ。現在の実装では、幅の広い矩形同士で、特定の条件だと「遠回り」してし
まわないだろうか？　ちょっと試してみる必要がありそうだな。以下の例はどうだろう
（後日注：最初に書いた時点では右側を迂回していた）。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150327.01
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1)))
	   ;;-------------------------------------------
	   (rectangle  90  75 100 20 :id :from)
	   (rectangle 110 125 100 20 :id :dest)
	   (connector :from :dest :end2 :arrow :line-style :B3B1)))

;;END_SVG
#+END_SRC

[[./gZR5e7SFM3q.20150327.01.svg]]

　どうだろう、遠回りではないだろうか？　こうなることもありうるのだな。で、これを
どうにかすることって可能なのだろうか？

　少なくとも上記の例では、connector の始点の位置と接続先矩形の中心点の水平方向の
位置関係だけで「どちらに迂回するか」を決定している。だから、上記の例がほんのちょっ
と変わって以下のようになると左側を迂回するようになるのだ。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150327.02
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1)))
	   ;;-------------------------------------------
	   (rectangle  80  75 100 20 :id :from)
	   (rectangle 110 125 100 20 :id :dest)
	   (connector :from :dest :end2 :arrow :line-style :B3B1)))

;;END_SVG
#+END_SRC

[[./gZR5e7SFM3q.20150327.02.svg]]

　実現可能性を度外視してしまえば、「コネクタの総延長がより短い方が正解」だ。しか
し、それを測るの‥‥‥？　ていう話だよね。いや、案外それが答えかもしれない。２つの
例を並べてみよう（後日注：最初に書いた時点では左側の例が右側を迂回していた）。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150327.03
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1)))
	   ;;-------------------------------------------
	   (rectangle  90  75 100 20 :id :from)
	   (rectangle 110 125 100 20 :id :dest)
	   (connector :from :dest :end2 :arrow :line-style :B3B1)))

;;END_SVG
#+END_SRC

[[./gZR5e7SFM3q.20150327.03.svg]]


#+BEGIN_SRC lisp
;;BEGIN_SVG 20150327.04
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 200 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1)))
	   ;;-------------------------------------------
	   (rectangle  80  75 100 20 :id :from)
	   (rectangle 110 125 100 20 :id :dest)
	   (connector :from :dest :end2 :arrow :line-style :B3B1)))

;;END_SVG
#+END_SRC

[[./gZR5e7SFM3q.20150327.04.svg]]

　ポイントは、コネクタを構成する線分のうち、縦方向の３本は同じなので比較する必要
がないということだ。なので、横方向の２本だけで済む。ここで、

	* 右迂回（左の例）：len1 = (rx - x1) + (rx - x2) = 2rx - x1 - x2
	* 左迂回（右の例）：len2 = (x1 - lx) + (x2 - lx) = x1 + x2 - 2lx

　とすると、おやまあ。

 len1 < len2
 (2rx - x1 - x2) < (x1 + x2 - 2lx)
 2rx - 2x1 - 2x2 + 2lx < 0
 rx - x1 - x2 + lx < 0
 rx + lx < x1 + x2
 x1 + x2 > rx + lx


　‥‥‥というわけだ。正直最後の式だけで済ませてしまうと、何をやっているのかわから
ないかもしれない。とはいえ、動作は良好なようだ。クローズ。



&pagetag( "改善", "タグマップ#改善" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/21 12:25:51>
#<begin task ID:hizda6MmEJ2>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
DATE:2020/02/21
PRIORITY:3
STATUS:done
TITLE:fist への開発管理情報の移行
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view

* 残作業 [44/44]

  - [X] class arc
  - [X] class canvas-data
  - [X] class circle
  - [X] class connector
  - [X] class css
  - [X] class dictionary
  - [X] class ellipse
  - [X] class endmark-info
  - [X] class entity
  - [X] class font-info
  - [X] class group
  - [X] class image
  - [X] class label-info
  - [X] class layer-manager
  - [X] class line
  - [X] class link-info
  - [X] class paragraph
  - [X] class path
  - [X] class point
  - [X] class polygon
  - [X] class raw-svg
  - [X] class rectangle
  - [X] class shape
  - [X] class stroke-info
  - [X] class svg-buffer-writer
  - [X] class svg-writer
  - [X] class text
  - [X] class uml-actor
  - [X] class uml-aggregation
  - [X] class uml-association
  - [X] class uml-class
  - [X] class uml-composition
  - [X] class uml-dependency
  - [X] class uml-generalization
  - [X] class uml-implementation
  - [X] class uml-interface
  - [X] class uml-note
  - [X] class uml-package
  - [X] class uml-state-begin
  - [X] class uml-state-end
  - [X] class uml-state-history
  - [X] class uml-state
  - [X] class uml-state-tran
  - [X] class uml-usecase

* log
** 2020/02/20

　起票。

　タスクはデータだけ移行したが、中身はまだちゃんとしてない。あと、「設計情報」と
いう部分がまだ移行していない。

** 2020/02/21

　[[残作業]] というコーナーを作成。

　‥‥‥一気にやっつけた。クローズ。

#<end update:2020/02/21 11:55:50>
#<begin task ID:hnqwiNWDyF8>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:red
DATE:2015/04/17
PRIORITY:3
STATUS:done
TITLE:strokeのbase指定でnil上書きできない
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:hnqwiNWDyF8.20150417.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　たとえば、*default-stroke* の dasharray が非 nil だった場合、以下の方法ではそ
こから実線のストロークを作成できない。

#+BEGIN_SRC lisp
 (stroke :dasharray nil :base *default-stroke*)

#+END_SRC


* log
** 2015/04/17

　起票。そして着手。そしてできたっぽいのでテスト。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150417
 (load-stencil :grid)
 (let ((*default-fill*   :white)
	   (*default-stroke* (stroke :dasharray '(3 3) :color :black :width 3)))
   (create-svg (:width 300 :height 100)
		(grid)
		(rectangle 100 50 50 50)
		(let ((stroke (stroke :dasharray nil :color :red :base *default-stroke*)))
		  (rectangle 200 50 50 50 :stroke stroke))))
;;END_SVG
#+END_SRC

[[./hnqwiNWDyF8.20150417.svg]]


　‥‥‥クローズ。だが、キーワードパラメータ base でもって同じようなことをしている
クラスに対する水平展開が必要だな。font-info が該当する。それは別タスクでやろう。

	* 〔TASK-0069：fontのbase指定でnil上書きできない〕



&pagetag( "バグ", "タグマップ#バグ" )
&pagetag( "stroke", "タグマップ#stroke" )

#<end update:2020/02/21 12:07:42>
#<begin task ID:hN9YHKIsE3A>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:red
DATE:2015/04/20
PRIORITY:3
STATUS:done
TITLE:arcが正しくない描画をする場合がある
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:hN9YHKIsE3A.20150420.01.png,hN9YHKIsE3A.20150420.02.png,hN9YHKIsE3A.20150420.03.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
n# BACKUP:1
# -------------------------- DO NOT MODIFY THIS LINE ---------------------------
#!view


　なんか変な場合がある。


* log
** 2015/04/20

　起票。そして着手。

　えぇと、この問題に気付いた時のことを思い出そう。たしか、インターフェース要求の
図のベースになるのを書いていたんだ。同じようなモノを書いてみようか（最初の状況が
どうだったかわかるように、以下は画像にしてある）。

[[./hN9YHKIsE3A.20150420.01.png]]



　問題はコレだ。最後のヤツだけが正しくないんだよなぁ。arc は SVG の path 要素で
書いていて、使っているのは arc-to だ。こいつは２つの点を指定して円弧を書くが、指
定を誤るとこういうことになる。たしか、sweep-flag と large-arc-flag ってヤツだ。
arc クラスの作成では、良くわからなくてこれを中途半端に計算したのだが、それがイケ
なかったようだ。

　問題は理解できたが、どうやって直していいのやらはイマイチわからない。では、仕様
（の日本語訳）を見てみよう。

#+BEGIN_EXAMPLE
　現在の点から点 (x, y) へ楕円形の弧を描く。 楕円の大きさと方向は２つの半径 rx, 
ry と、現在の座標系において楕円が全体としてどれだけ回転されるかを指示する 
x-axis-rotation で定められる。 楕円の中心 (cx, cy) は他のパラメタによる制約を満
足せしめるように自動的に算出される。large-arc-flag と sweep-flag はこの計算に寄
与し、弧の描かれ方の決定を補助する。 
#+END_EXAMPLE


　うん、これは知ってる。もうちょっと先かな。

#+BEGIN_EXAMPLE

　‥‥‥特殊な場合を除けば、これらの制約を満たす４つの弧が存在する（２つの楕円が存
在してそのそれぞれに対し２つの弧が存在する）。large-arc-flag と sweep-flag はこ
の４つうちのどれを描かせるかを次のようにして指示する：

	* ４候補の弧のうち２つは 180 度以上の弧（「長弧」）であり、２つは 180 度以下の弧（「短弧」）である。 もし large-arc-flag が '1' ならば、２つの長弧から選ばれ、そうでなく、 large-arc-flag が '0' ならば、２つの短弧から選ばれる。 
	* もし sweep-flag が '1' ならば、弧は角度が正の向きに描かれ（すなわち、楕円の方程式 (x = cx + rx * cos(ϑ), y = cy + ry * sin(ϑ)) において ϑ が現在の点に対応する角度から (x, y) に達するまで増加する）、sweep-flag が '0' ならば、弧は角度が負の向きに描かれる（すなわち ϑ が現在の点に対応する角度から (x, y) に達するまで減少する） 


　下に large-arc-flag と sweep-flag の４種類の組み合わせによる４種の異なった弧を示す。 それぞれ次のパスデータ命令が用いられる： 

 <path d="M 125,75 a100,50 0 ?,? 100,50"
       style="fill:none; stroke:red; stroke-width:6"/>


　ここで、"?,?" は可能な４通りの場合を生成するために "0,0" "0,1" "1,0" "1,1" のいずれかに置き換えられるものとする。 

#+END_EXAMPLE

[[./hN9YHKIsE3A.20150420.02.png]]


　‥‥‥ということのようだ。現在の arc クラスの仕様から言って、sweep-flag は 1 固定
でやはりいいようだ。large-arc-flag については、その「距離」を測ってやれば制
御できるような気がする‥‥‥というわけでやってみた。どうだ。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150420.03
(in-package :cl-svg-user)
 (load-stencil :grid)
 (let ((*default-fill*   :none)
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 375 :height 200)
		(grid)
		(let ((*default-stroke* (stroke :dasharray '(1 1) :base *default-stroke*)))
		  (line '(  0 100 375 100))
		  (line '( 75   0  75 200))
		  (line '(150   0 150 200))
		  (line '(225   0 225 200))
		  (line '(300   0 300 200))
		  (circle  75 100 30)
		  (circle 150 100 30)
		  (circle 225 100 30)
		  (circle 300 100 30))
		(let ((*default-stroke* (stroke :dasharray nil :color :red :width 3)))
		  (arc  75 100 30 30 120) (text  75 150 "30 - 120" :align :center)
		  (arc 150 100 30 120 30) (text 150 150 "120 - 30" :align :center)
		  (arc 225 100 30 70 290) (text 225 150 "70 - 290" :align :center)
		  (arc 300 100 30 290 70) (text 300 150 "290 - 70" :align :center))))
;;END_SVG
#+END_SRC

[[./hN9YHKIsE3A.20150420.03.svg]]

　どうやら大丈夫なようだ。クローズ。




&pagetag( "バグ", "タグマップ#バグ" )
&pagetag( "arc", "タグマップ#arc" )

#<end update:2020/02/21 12:06:31>
#<begin task ID:i116pu14Jga>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/04/02
PRIORITY:3
STATUS:done
TITLE:connectorをもっと賢くする：LTパターン
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:i116pu14Jga.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　〔TASK-0042：connectorをもっと賢くする〕から派生したタスク。:LT のパターンでの
挙動を整理し、実装する。


* 現状

[[./i116pu14Jga.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 600 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-textbox-align* :center)
		   (*default-connector-style* :LT))
	   (macrolet ((box (x y w h id)
					`(rectangle ,x ,y ,w ,h :id ,id
								:contents
								((text (/ ,w 2) (/ ,h 2)
									   ,(string-downcase (symbol-name id))
									   :align :center)))))
		 ;;-------------------------------------------
		 (let ((y1 100)
			   (y2  30))
		   (box  30 y1 40 40 :d01) (box 110 y2 40 40 :f01) (connector :f01 :d01 :end2 :arrow)
		   (box 200 y1 40 40 :d02) (box 240 y2 40 40 :f02) (connector :f02 :d02 :end2 :arrow)
		   (box 400 y1 40 40 :d03) (box 380 y2 40 40 :f03) (connector :f03 :d03 :end2 :arrow)
		   (box 550 y1 40 40 :d04) (box 500 y2 40 40 :f04) (connector :f04 :d04 :end2 :arrow))
		 (let ((y1 220)
			   (y2 150))
		   (box  30 y1 40 40 :d05) (box 110 y2 40 40 :f05) (connector :f05 :d05 :end2 :arrow)
		   (box 200 y1 40 40 :d06) (box 240 y2 40 40 :f06) (connector :f06 :d06 :end2 :arrow)
		   (box 400 y1 40 40 :d07) (box 380 y2 40 40 :f07) (connector :f07 :d07 :end2 :arrow)
		   (box 550 y1 40 40 :d08) (box 500 y2 40 40 :f08) (connector :f08 :d08 :end2 :arrow))
		 (let ((y1 300)
			   (y2 370))
		   (box  30 y1 40 40 :d09) (box 110 y2 40 40 :f09) (connector :f09 :d09 :end2 :arrow)
		   (box 200 y1 40 40 :d10) (box 240 y2 40 40 :f10) (connector :f10 :d10 :end2 :arrow)
		   (box 400 y1 40 40 :d11) (box 380 y2 40 40 :f11) (connector :f11 :d11 :end2 :arrow)
		   (box 550 y1 40 40 :d12) (box 500 y2 40 40 :f12) (connector :f12 :d12 :end2 :arrow))
)))

;;END_SVG
#+END_SRC

* log
** 2015/03/25

　起票。

** 2015/04/02

　着手。

　‥‥‥できたかな、クローズ。





&pagetag( "改善", "タグマップ#改善" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/21 12:16:29>
#<begin task ID:inKYyRYNxUM>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/03/24
PRIORITY:3
STATUS:done
TITLE:UML多重度のためのクラス作成
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:inKYyRYNxUM.sample1.svg,inKYyRYNxUM.sample2.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　UML の association 族のためのサポートクラス。多重度を指定するためのクラスとサ
ポートマクロ。

[[./inKYyRYNxUM.sample1.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG sample1
 (load-stencil :grid)
 (load-stencil :uml-association)
 (create-svg (:width 400 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (rectangle 200 200 230 230 :id :r0
				  :contents
				  ((rectangle 180  50 30 30 :id :r1)
				   (rectangle  50 180 30 30 :id :r2)
				   (uml-association :r1 :r0 :arrows 2 :line-style :TT :mult1 '(1) :mult2 '(2 :*))
				   (uml-association :r1 :r0 :arrows 2 :line-style :RR :mult1 '(3) :mult2 '(4 :*))
				   (uml-association :r2 :r0 :arrows 2 :line-style :LL :mult1 (multiplicity 5) :mult2 (multiplicity 6 :*))
				   (uml-association :r2 :r0 :arrows 2 :line-style :BB :mult1 7 :mult2 '(8 :*))))))
;;END_SVG
#+END_SRC


[[./inKYyRYNxUM.sample2.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG sample2
 (load-stencil :grid)
 (load-stencil :uml-association)
 (create-svg (:width 400 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-connector-style* :CC)
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (rectangle 200 200 360 360 :id :r0
				  :contents
				  ((rectangle 120  60 20 20 :id :r1)
				   (rectangle 240  60 20 20 :id :r2)
				   (rectangle 300 120 20 20 :id :r3)
				   (rectangle 300 240 20 20 :id :r4)
				   (rectangle 240 300 20 20 :id :r5)
				   (rectangle 120 300 20 20 :id :r6)
				   (rectangle  60 240 20 20 :id :r7)
				   (rectangle  60 120 20 20 :id :r8)
				   (uml-association :r1 :r2 :arrows 2 :mult1 '(1 :*) :mult2 '(2 :*))
				   (uml-association :r2 :r3 :arrows 2 :mult1 '(2 :*) :mult2 '(3 :*))
				   (uml-association :r3 :r4 :arrows 2 :mult1 '(3 :*) :mult2 '(4 :*))
				   (uml-association :r4 :r5 :arrows 2 :mult1 '(4 :*) :mult2 '(5 :*))
				   (uml-association :r5 :r6 :arrows 2 :mult1 '(5 :*) :mult2 '(6 :*))
				   (uml-association :r6 :r7 :arrows 2 :mult1 '(6 :*) :mult2 '(7 :*))
				   (uml-association :r7 :r8 :arrows 2 :mult1 '(7 :*) :mult2 '(8 :*))
				   (uml-association :r8 :r1 :arrows 2 :mult1 '(8 :*) :mult2 '(1 :*))))))

;;END_SVG
#+END_SRC


* log
** 2015/03/18

　起票。そして検討開始。

　‥‥‥おおむね動作するところまできた。

** 2015/03/19

　:line-style :CC の場合でも、垂直あるいは水平であるような場合には三角関数を使用
しない実装に変更した。これで悩ましいのは「本当にナナメっている」場合のみとなった。
さて、それをどうするか、だな。

　ロールの実装とほとんど同じ作業なので、しばらくの間〔TASK-0041：UMLロールのため
のクラス作成〕側だけに記述する。個別の作業になったら戻ってこよう。

** 2015/03/24

　〔TASK-0041：UMLロールのためのクラス作成〕が完了したので戻ってきた。基本的には、
ロールのモノと同じコードを書くことになる。

　‥‥‥できた。最後に、定数にしていた「端点における角度と距離」をダイナミック変数に
して変更可能とし、クローズ。よほど気にいらない部分に気付くようなことがあったら戻っ
てくることにする。




&pagetag( "機能追加", "タグマップ#機能追加" )
&pagetag( "UML", "タグマップ#UML" )

#<end update:2020/02/21 12:27:44>
#<begin task ID:inXMgfPKHja>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/04/01
PRIORITY:3
STATUS:done
TITLE:connectorをもっと賢くする：BRパターン
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:inXMgfPKHja.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　〔TASK-0042：connectorをもっと賢くする〕から派生したタスク。:BR のパターンでの
挙動を整理し、実装する。


* 現状

[[./inXMgfPKHja.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 600 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-textbox-align* :center)
		   (*default-connector-style* :BR))
	   (macrolet ((box (x y w h id)
					`(rectangle ,x ,y ,w ,h :id ,id
								:contents
								((text (/ ,w 2) (/ ,h 2)
									   ,(string-downcase (symbol-name id))
									   :align :center)))))
		 ;;-------------------------------------------
		 (let ((y1  30)
			   (y2 100))
		   (box 110 y1 40 40 :f01) (box  30 y2 40 40 :d01) (connector :f01 :d01 :end2 :arrow)
		   (box 240 y1 40 40 :f02) (box 200 y2 40 40 :d02) (connector :f02 :d02 :end2 :arrow)
		   (box 380 y1 40 40 :f03) (box 400 y2 40 40 :d03) (connector :f03 :d03 :end2 :arrow)
		   (box 500 y1 40 40 :f04) (box 550 y2 40 40 :d04) (connector :f04 :d04 :end2 :arrow))
		 (let ((y1 150)
			   (y2 220))
		   (box 110 y1 40 40 :f05) (box  30 y2 40 40 :d05) (connector :f05 :d05 :end2 :arrow)
		   (box 240 y1 40 40 :f06) (box 200 y2 40 40 :d06) (connector :f06 :d06 :end2 :arrow)
		   (box 380 y1 40 40 :f07) (box 400 y2 40 40 :d07) (connector :f07 :d07 :end2 :arrow)
		   (box 500 y1 40 40 :f08) (box 550 y2 40 40 :d08) (connector :f08 :d08 :end2 :arrow))
		 (let ((y1 350)
			   (y2 280))
		   (box 110 y1 40 40 :f09) (box  30 y2 40 40 :d09) (connector :f09 :d09 :end2 :arrow)
		   (box 240 y1 40 40 :f10) (box 200 y2 40 40 :d10) (connector :f10 :d10 :end2 :arrow)
		   (box 380 y1 40 40 :f11) (box 400 y2 40 40 :d11) (connector :f11 :d11 :end2 :arrow)
		   (box 500 y1 40 40 :f12) (box 550 y2 40 40 :d12) (connector :f12 :d12 :end2 :arrow))
)))

;;END_SVG
#+END_SRC

* log
** 2015/03/25

　起票。

** 2015/04/01

　着手。

　‥‥‥とりあえず、実装はできたみたい。まぁ、クローズとするか。





&pagetag( "改善", "タグマップ#改善" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/21 12:17:11 access:2020/02/26 16:07:41>
#<begin task ID:itJNaq7qdbB>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/05/12
PRIORITY:3
STATUS:done
TITLE:connectorをlineに接続可能にする
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:itJNaq7qdbB.20150424.svg,itJNaq7qdbB.20150512.01.svg,itJNaq7qdbB.20150512.02.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　たとえば uml-note みたいなモノから、関連などのコネクタに線を引いたりしたい。そ
のため、コネクタが line に接続できなければならない。

　ただ、これまでのコネクタ仕様を崩したくはないし、無用に複雑になるのも嫌だ。だか
ら、以下の制約をつけようと思う。

	* 接続点は「線分の中心」のみとする。
	* 難しいようなら、両端のいずれかまたは両方が line の場合には line-style を強
	  制的に CC にする。


* log
** 2015/04/23

　起票。

** 2015/04/24

　着手。おそらく、面倒ゴトは全て connector で閉じるんではなかろうか。しかしその
前に、現状で本当にエラーになるかどうか確認しておこう‥‥‥うん、なるね（このタスク
が片付いたら、エラーは解消されるだろうが）。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150424
;(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-actor)
 (load-stencil :uml-usecase)
 (load-stencil :uml-note)
 (create-svg (:width 400 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-actor :actor 75 200 :id :actor)
       (uml-usecase 300 200 120 60 "usecase" :id :usecase)
       (connector :actor :usecase :id :line)
	   (uml-note 200 75 "Can connect to line?" :keyword :question :targets :line)))
;;END_SVG
#+END_SRC

[[./itJNaq7qdbB.20150424.svg]]

** 2015/04/27

　さて、この件も進めていかないと。

　直感ベースで作業して見事に失敗。結局、両端の「中心」座標をとって、それぞれが 
shape の場合に対向側の中心点との CC 接続点を取るしかないのだ。そんなこんなで、以
下のようなコードになってしまった resolve-connector-points-for-CC。あと、この関数
に至るまでの間に「shape じゃなくて line でも許す」ための修正が入っている。これで
上記の図もとりあえずは描画されるようになった。

#+BEGIN_SRC lisp
 (defun resolve-connector-points-for-CC (pos1 pos2 e1 e2)
   (declare (ignore pos1 pos2))
   (labels ((get-center (entity)
              (if (class:typep entity shape)
                  (with-property
                      (values entity[center] entity[middle]))
                  (multiple-value-bind (x y dummy) (class:invoke entity :get-line-center)
                    (declare (ignore dummy))
                    (values x y))))
            (shape-cc-point (shp x1 x2)
              (let ((pt (class:invoke shp :get-cc-point x1 x2)))
                (values (class:member pt :x) (class:member pt :y)))))
     (multiple-value-bind (x1 y1) (get-center e1)
       (multiple-value-bind (x2 y2) (get-center e2)
         (when (class:typep e1 shape)
           (multiple-value-setq (x1 y1) (shape-cc-point e1 x2 y2)))
         (when (class:typep e2 shape)
           (multiple-value-setq (x2 y2) (shape-cc-point e2 x1 y2)))
         (list x1 y1 x2 y2)))))

#+END_SRC



　だが、欲というのは出てくるもので、やっぱり CC 以外の接続もできるようにしたいと
思ってしまう。やるなら長期戦だな。考えてみよう。

** 2015/05/12

　さて、このタスクはひさしぶり。:CC 以外の接続でも line に繋げられるようにしたい
んだった。では、今それをやろうとするとどうなるか‥‥‥警告が出て強制的に CC にされ
るね。これは現時点では全く正しい挙動だ。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150512.01
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-actor)
 (load-stencil :uml-usecase)
 (load-stencil :uml-class)
 (create-svg (:width 400 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-actor :actor 75 200 :id :actor)
       (uml-usecase 300 200 120 60 "usecase" :id :usecase)
       (connector :actor :usecase :id :line)
	   (uml-class :foo 250 75 :id :foo)
	   (connector :foo :line :line-style :LT
                             :stroke (stroke :dasharray '(1 1) :width 1 :color :blue))))
;;END_SVG
#+END_SRC

[[./itJNaq7qdbB.20150512.01.svg]]


　で、:CC 以外をサポートしようとする上で、障害になるのは何だろうか？　結局のとこ
ろ、たとえば :LT としたところで、接続先は「中央点」以外にないのだ。その中央点に、
どの方向から入射するか、という問題になるだろう。

　面倒なのは、以前超頑張って「shape を意識した回り込み」を実装してしまったことだ
（〔こちらのタスク(TASK-0042：connectorをもっと賢くする)〕参照）。だから、:CC 以
外で line への接続をしようとすると、その対応コードは完全に新規になるかもしれない。
嗚呼。

　いや、ちょっとハック臭いが、接続先 line の中央点を中心とする極小の矩形を用意し
て、それを使ってやれば既存の処理がそのまま動くのではなかろうか。これは検討する価
値があるかもしれないな。

　‥‥‥やってみたところ、いい感じに動いてしまった。この方向でいってみよう。

　では、大事な儀式をやろう。コンテナの要素として使用した場合にちゃんと描画される
かどうか‥‥‥うん、いいみたい。クローズ。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150512.02
(in-package :cl-svg-user)
 (load-stencil :grid)
 (create-svg (:width 400 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
	   (rectangle 200 200 300 300
				  :contents
				  ((rectangle  50 100 50 50 :id :r1)
				   (rectangle 250 100 50 50 :id :r2)
				   (connector :r1 :r2 :id :line)
				   (let ((*default-stroke* (stroke :color :blue :width 1)))
					 (rectangle 150 200 50 50 :id :r3)
					 (connector :r3 :line))))))
;;END_SVG
#+END_SRC

[[./itJNaq7qdbB.20150512.02.svg]]


&pagetag( "UML", "タグマップ#UML" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/21 12:39:13 access:2020/02/27 10:29:57>
#<begin task ID:iKae8CkxIAq>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/03/04
PRIORITY:3
STATUS:done
TITLE:スペシャル変数参照の精査
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　create-svg マクロの展開上の都合により、各オブジェクトの draw メソッドはスペシャ
ル変数の束縛が外れた状況でコールされる。これはレイヤー順で描画する関係上、避けら
れない。そのため、*default-font-size* などの設定を参照する必要があるクラスでは、
遅くとも check メソッドの時点でその値を保存しておかなければならない。しかしこれ
ができていないコードが散見されるため、全体的に見直しを行う必要がある。



■作業チェックリスト

	【場所】	【コンポーネント】		【状況】	【備考】
	src		link-info			◯		　
	src		label-info			◯		　
	src		stroke-info			◯		　
	src		font-info			◯		　
	src		endmark-info		◯		　
	src		entity				◯		　
	src		css					◯		　
	src		raw-svg				◯		　
	src		text				◯		　
	src		polygon				◯		　
	src		line				◯		　
	src		connector			◯		　
	src		path				◯		　
	src		arc					◯		　
	src		shape				◯		　
	src		circle				◯		　
	src		ellipse				◯		　
	src		rectangle			◯		　
	src		image				◯		　
	src		group				◯		　
	src		paragraph			●		font-property/ size, line-spacing
	lib		grid				◯		　
	lib		textbox				◯		paragraphが解決すれば問題なし
	lib		uml-stereotype-info	●		font-size
	lib		uml-actor			◯		　
	lib		uml-class			--		未完成
	lib		uml-dependency		◯		　
	lib		uml-implementation	◯		　
	lib		uml-generalization		◯		　
	lib		uml-interface		◯		　
	lib		uml-usecase			◯		paragraphが解決すれば問題なし
	lib		uml-package			◯		　
	lib		uml-note			◯		paragraphが解決すれば問題なし


* log
** 2015/03/04

　起票。そして着手。

　‥‥‥とりあえず、現状のソースコード確認まで完了。事実上、uml-stereotype-info と 
paragraph の対応が必要であり、それ以外は問題ないことが判明。あとは作業するだけだ。


　作業も完了。問題ないようなのでクローズする。



&pagetag( "バグ", "タグマップ#バグ" )

#<end update:2020/02/20 16:11:38 access:2020/02/20 16:12:15>
#<begin task ID:j8kVn5rZMZR>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/04/20
PRIORITY:3
STATUS:done
TITLE:クラス属性のUML準拠作業
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:j8kVn5rZMZR.20150420.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　「UMLモデリングのエッセンス第３版」より、クラスの属性について以下の対応をする。

	1.クラスの属性は :members でなく :attributes とする。
	2.可視性には、:public :protected :private :derived :package がある。
	  それぞれ、+ # - / ~ の５文字で表す。
	3.属性の書式は以下の通り。
		1.可視性 名前 : タイプ [多重度] = デフォルト値 {プロパティ文字列}


* log
** 2015/04/19

　起票。そして着手。

　とりあえず、:attributes 対応はした。

** 2015/04/20

　要件欄に書いた３つの作業はひと通りやってみた。以下、テスト。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150420
 (load-stencil :grid)
 (load-stencil :uml-class)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
;           (*default-font*   (font :family "Arial" :size 11 :width-spice 0.65))
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-class :test-class 200 100 :keyword :test
				  :attributes (:m-data1
							   (:protected :m-data2 :type :string)
							   (:public    :m-data3 :mult :*)
							   (:package   :m-data4 :default 0)
							   (:derived   :m-data5 :property :readonly)
							   (:private   :m-data6 :type :int :mult "2..4" :default :nil :property :readonly)))))
;;END_SVG
#+END_SRC

[[./j8kVn5rZMZR.20150420.svg]]

　いいんではないかな？　クローズ。



&pagetag( "UML／クラス図", "タグマップ#UML／クラス図" )
&pagetag( "uml-class", "タグマップ#uml-class" )

#<end update:2020/02/21 12:08:46>
#<begin task ID:jzNIuyE99IV>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/04/15
PRIORITY:3
STATUS:doing
TITLE:uml-classの作成
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:jzNIuyE99IV.20150414.01.svg,jzNIuyE99IV.20150414.02.svg,jzNIuyE99IV.20150415.01.svg,jzNIuyE99IV.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!edit


　uml-class のステンシルを作成する。多分超めんどい。

* sample

[[./jzNIuyE99IV.sample.svg]]

** source
#+BEGIN_SRC lisp
;;BEGIN_SVG sample
(load-stencil :grid)
(load-stencil :uml-class)
(create-svg (:width 300 :height 100 :encoding :utf8)
  (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-class :test-class 150 50 :keyword :test
				  :operations ((:public :do-something :params (:arg1 :arg2) :type :int)))))
;;END_SVG
#+END_SRC

* log
** 2015/03/02

　起票。

** 2015/03/03

　とりあえず、メモ。

#+BEGIN_SRC lisp
 (defmacro uml-class (name &key abstract stereotype members method)
   `(list ,name :abstract ,abstract :stereotype ,stereotype :members ',members :method ',method))
 
 (uml-class :test-class :abstract t
            :members
            ((member :private :m-data1 :type :int)
             (member :private :m-data2 :type :string))
            :methods
            ((method :public "DoSomething")
             (method :public "DoSomethingElse" :type :string))
             
 
 (uml-class :test-class :abstract t
            :members
            '("- m-data1 : int"
              "- m-data2 : string")
            :methods
            '("+ DoSomething()"
              "+ DoSomethingElse() : string"))

#+END_SRC

** 2015/03/04

　で、着手。とりあえず、段階的に進めていこうかと思う。最初は名前だけのクラスがで
きればいいや、というところから始めよう。多分無理だけどな。

** 2015/03/06

　先日のメモを見直してみる。

#+BEGIN_SRC lisp
 (uml-class :test-class :abstract t
            :members
            ((member :private :m-data1 :type :int)
             (member :private :m-data2 :type :string))
            :methods
            ((method :public "DoSomething")
             (method :public "DoSomethingElse" :type :string))
 
 (uml-class :test-class :abstract t
            :members
            '("- m-data1 : int"
              "- m-data2 : string")
            :methods
            '("+ DoSomething()"
              "+ DoSomethingElse() : string"))

#+END_SRC

　とりあえず、２番目はナイな。それよりも、常に全ての情報を記載するわけではないの
だから、以下のような省略記法があった方が良い。

#+BEGIN_SRC lisp
 (uml-class :test-class :abstract t
            :members (:m-data1 :m-data2)
            :methods ("DoSomething" "DoSomethingElse"))

#+END_SRC


　というわけで、uml-class のマクロを以下のようにしてみた。


#+BEGIN_SRC lisp
 (defmacro uml-class (name &key abstract stereotype members methods)
   (labels ((fix-list (name lst acc)
              (if (null lst)
                  (cons 'cl:list (nreverse acc))
                  (let ((itm (car lst)))
                    (when (listp itm)
                      (setf itm (cons name itm)))
                    (fix-list name (cdr lst) (push itm acc))))))
     `(ol:new uml-class ,name ,abstract ,stereotype
                        ,(fix-list 'uml-class-member members nil)
                        ,(fix-list 'uml-class-method methods nil))))

#+END_SRC


　これを使って、以下のコードを展開してみる。

#+BEGIN_SRC lisp
 (uml-class :test-class :abstract t
            :members
            (:m-data1
             "m-pData2"
             (:public :m-data3 :type :string))
            :methods
            (:do-something
             "DoSomethingElse"
             (:private :do-something-imp :type :string)))

#+END_SRC


　結果は以下の通り。ひとまずいいみたい。

#+BEGIN_SRC lisp
 (NEW UML-CLASS :TEST-CLASS T NIL
      (LIST :M-DATA1
            "m-pData2"
            (UML-CLASS-MEMBER :PUBLIC :M-DATA3 :TYPE :STRING))
      (LIST :DO-SOMETHING
            "DoSomethingElse"
            (UML-CLASS-METHOD :PRIVATE :DO-SOMETHING-IMP :TYPE :STRING)))

#+END_SRC

** 2015/03/09

　うん、超めんどい。とりあえず、データメンバとメソッド、およびメソッドのパラメー
タをクラス化し、それを組み込むような感じで記述できるようなところまではできた。事
実上あとは uml-class クラスの check メソッドと draw-group メソッド（そう、
uml-class は uml-actor 同様 svg::group 派生だ）を実装すれば良い状況。だが、それ
が超めんどいのだ。どのくらいめんどいかというと、この記録をこうやって長々と書くの
に逃げ込むくらいはめんどい。

** 2015/03/10

　なんやかやで動作するようになった。まだキャッシュしなきゃならない情報をしてなかっ
たりなので、その辺はやり残しがまだある。あと、気付いた点を列挙しておこう。

	* メソッドパラメータやメソッド／メンバ自体に :etc を指定することで、「．．．」
	  を表示する機能。
	* メソッドやメンバの枠にステレオタイプを表示する機能。

** 2015/04/14

　さて、１ヶ月ぶりにこのタスクに帰ってきた。何をやるんだっけ？　前回最後に書いたのは、

	* メソッドパラメータやメソッド／メンバ自体に :etc を指定することで、「．．．」
	  を表示する機能。
	* メソッドやメンバの枠にステレオタイプを表示する機能。


　‥‥‥だったな。だけど、それ以前にクラスはちゃんと描画されるんだっけ？　試してみ
よう。


[[./jzNIuyE99IV.20150414.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150414.01
 (load-stencil :grid)
 (load-stencil :uml-class)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9))
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 400 :height 200 :encoding :utf8)
		(grid)
		(uml-class :test-class 200 100 :keyword :test
				   :template "T1, T2" :abstract t :active t
				   :responsibilities "- this is test class.
- multi line.
- that's all."
				   :attributes ((:private :m-data1))
				   :operations ((:public :do-something :params (:arg1 :arg2) :type :int)))))
;;END_SVG
#+END_SRC



　‥‥‥大丈夫みたい。だが、テンプレートパラメータの横マージンがまったくないのが気
にいらないな。これはなんとかしなければ。というわけで、新たなメンバとして 
m-cache-fontspice を追加。よくよく見てみると、まだソースコード内には ToDo コメン
トが散見される。なんとかしなきゃね。


　それはそれとして、:etc の指定で「．．．」を表示するとか、あるいはステレオタイ
プを表示するとかの問題。まずはとっかかりとして、現在普通にクラスにしている 
uml-class-member と uml-class-method の２つ、これを「インターフェースの実装クラ
ス」という形にした。インターフェースは、とりあえずの名前として以下の２つだ。

	* uml-class-member-interface
	* uml-class-method-interface

　uml-class-member と uml-class-method は、これらのインターフェースを実装するか
たちで再定義。そして、ステレオタイプや :etc を表現するような特別な実装クラスを用
意してあとはいい感じによろしく、というのが目論見だ。うまくいくといいけど。

　まずは :etc 対応ということで、uml-class-omission というクラスを追加。これは前
述の２つのインターフェース両方を実装する。そして、member と method のリストを 
fix するところで :etc というキーワードを特別扱いする‥‥‥と。同様に、ステレオタイ
プも uml-class-stereotype というクラス名で作ってみた。以下、どうだ‥‥‥やったぜ。

[[./jzNIuyE99IV.20150414.02.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150414.02
 (load-stencil :grid)
 (load-stencil :uml-class)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9))
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 400 :height 300 :encoding :utf8)
		(grid)
		(uml-class :test-class 200 150 :keyword :test
				   :template "T1, T2" :abstract t :active t
				   :responsibilities "- this is test class.
- multi line.
- that's all."
				   :attributes
				   ((keyword-info :test)
				    (:private :m-data1)
				    :etc)
				   :operations
				   ((keyword-info :constructor)
				    (:public :test-class :params (:obj))
				    (keyword-info :methods)
				    (:public :do-something :params (:arg1 :arg2) :type :int)
				    :etc))))
;;END_SVG
#+END_SRC

** 2015/04/15

　では、わかっている限り最後のタスクにいこう。uml-class-omission を、メソッドの
パラメータ部分にも使えるようにするのだ。基本的には、昨日やったことと同じ‥‥‥でき
た。それ、どん。

[[./jzNIuyE99IV.20150415.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150415.01
 (load-stencil :grid)
 (load-stencil :uml-class)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9))
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 300 :height 200 :encoding :utf8)
		(grid)
		(uml-class :test-class 150 100 :keyword :test
				   :template "T1, T2" :abstract t :active t
				   :operations
				   ((:public :foo :params (:arg1 :etc) :type :int)
				    (:public :bar :params (:etc) :type :int)))))
;;END_SVG
#+END_SRC



　いいんではなかろうか？　これでいよいよ追加すべき機能はなくなってきた。あとは
キャッシュ問題とか、その他 ToDo の消化という、まぁなんかつまらない作業だけだな。

　‥‥‥一応キャッシュ問題もクリアにして、残っている ToDo コメントは１つだけ、クラ
スの名前エリアにステレオタイプを表示する部分の位置決めコードだけだ。



&pagetag( "ステンシル作成", "タグマップ#ステンシル作成" )
&pagetag( "UML／クラス図", "タグマップ#UML／クラス図" )
&pagetag( "uml-class", "タグマップ#uml-class" )

#<end update:2020/03/03 08:43:12>
#<begin task ID:jHieamYLeqK>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:yellow
DATE:2020/04/30
PRIORITY:3
STATUS:wait
TITLE:jp ライブラリ依存の除去 ⇒ CL-APPS 用コードの外部化
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!edit

　他の外部ライブラリはすべて必要なモノだけをコピーして解決した。しかし jp ライブ
ラリはそう簡単ではない。幸い、CL-APPS のためのエントリ関数でしか使っていないため、
これを外部化する。

* log
** 2020/03/25

　起票。

#<end update:2020/03/25 07:20:07>
#<begin task ID:jXaItqbEmbq>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:red
DATE:2015/01/30
PRIORITY:3
STATUS:done
TITLE:font-sizeを指定しないとtextでエラー発生
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view

　textbox は動作するが、text が動作しなくなっている。具体的には、「Y は number
じゃなくて nil だぜ」みたいなエラーが出る。


* log
** 2015/01/28

　起票。そして調査開始。

　しばらくして理由がわかった。font-size がないと、width 計算ができないのだった。
実際にはここまで来てから起票しているので、すでにわかった上でタスクのタイトルが決
まっていたわけだ。

　とりあえずの方針は、width 計算だけあきらめる‥‥‥かな。

** 2015/01/29

　よく考えてみると、font-size 指定がなければ width だけでなく height 指定もでき
なくなる。そうなると、valign も指定できないし、複数行も無理だろう。結果、text は
以下の仕様になるしかない。

	* 単一行です
	* align は left center right で指定できます
	* valign はなくなり、テキストの上端が y で指定した位置に揃います
	* shape でなくなり、結果として width や height はとれず、connector による接続もできません


　以上で、font-size 指定がなくても text は問題なくなるはず。

　で、textbox がそのかわりをつとめることになるが、なんならこれは rectangle 派生
ということで良いだろう。ただし、少なくとも以下の制約がつく。

	* class はあくまで rectangle に指定できるだけです。テキストには指定できません。
	* あるいは font-class が指定可能になったとしても、font-size が必須になります

　２点目の font-class を指定可能にする件は、font-class で指定した font-size を直
指定した font-size が上書きできるかにかかっている。しかし、IE で試したところ、な
んにせよ class における font-size は無視されてしまった。

　さて、現在 textbox は stencil 扱いになっているが、もし上記の対応をするのであれ
ば、これは組み込み図形として扱うべきだろう。

** 2015/01/30

　もう少し考えてみよう。text は SVG の text 要素を（できるだけ）忠実に表現したも
のとして、それと textbox の間に「複数行のテキスト」を挟むのだ。たとえば、
paragraph とか。というのも、それはやっぱりあった方が良い気がするからだ。それがダ
メなら、textbox が矩形を描画しないオプションというのがあっても良いだろう。ひとま
ず paragraph で考えてみようか。

　その場合、現在の text はそのまま paragraph になるイメージで、新しい text を作
る感じになるだろう。で、textbox は paragraph を内包する、と。

　というわけで強硬策に出る。いきなり名称変更だ。text.lisp をコピーして 
paragraph.lisp とし、利用個所、および constants の定数名も変更。テストでの利用側
も変更した。ここまでで動作することを確認し、次に新しい text クラス作成に取り組む。

　‥‥‥ひとまずできた。クローズで良いだろう。

#<end update:2020/02/20 16:31:19>
#<begin task ID:jYEoCkSP6CI>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/05/15
PRIORITY:3
STATUS:done
TITLE:履歴ステートの作成
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:jYEoCkSP6CI.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　ステートマシン図のための履歴ステートのステンシルを作成する。


* sample

[[./jYEoCkSP6CI.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-state)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (macrolet ((state (&rest args) `(uml-state ,@args))
			  (tran  (&rest args) `(uml-state-tran ,@args)))
	 (create-svg (:width 600 :height 400)
		(grid)
		(uml-state-begin   50 50)
		(uml-state-end    550 50)
		(state :power-off 300 50 :id :off)
		(tran :$3 :$1)
		(tran :$2 :$3)
		(state :power-on 300 270 :width 400 :height 200 :id :on
			   :contents
			   ((uml-state-begin  50  70)
				(state :mode-a   200  70)
				(state :mode-b   200 150)
				(tran :$3 :$2)
				(tran :$3 :$2 :line-style :B1T1)
				(tran :$3 :$4 :line-style :T3B3)
				(uml-state-history 30 170)))
		(tran  :off :on :line-style :B1T1)
		(tran  :on :off :line-style :T3B3))))
;;END_SVG
#+END_SRC


* log
** 2015/05/15

　起票。そして着手。

　‥‥‥とりあえずはできたっぽい。クローズでいいか。




&pagetag( "ステンシル作成", "タグマップ#ステンシル作成" )
&pagetag( "UML／状態マシン図", "タグマップ#UML／状態マシン図" )

#<end update:2020/02/21 12:09:33>
#<begin task ID:kyvrYILL7c6>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/04/17
PRIORITY:3
STATUS:done
TITLE:開始と終了ステートの作成
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:kyvrYILL7c6.20150416.svg,kyvrYILL7c6.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　ステートマシン図のための開始／終了ステート、uml-beginstate / uml-endstate のス
テンシルを作成する。


* sample

[[./kyvrYILL7c6.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :uml-state)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 300 :height 100)
		(grid)
		(uml-state-begin    50 50 :id :state0)
		(uml-state :state1 150 50 :id :state1)
		(uml-state-end     250 50 :id :state9)
		(uml-state-tran :state0 :state1)
		(uml-state-tran :state1 :state9)))
;;END_SVG
#+END_SRC

* log
** 2015/04/16

　起票。そして着手。

　少し考えて、クラスは１つにすることに。結局、データを記述する時はマクロ呼び出し
なのだから、マクロだけが分かれていればいいでしょ、ということだな。

　‥‥‥できた。試しに、色とか大きさをイジってみよう。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150416
 (load-stencil :grid)
 (load-stencil :uml-state)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1))
	   (*uml-state-begin-size*       30)
	   (*uml-state-begin-stroke*  (stroke :color :blue))
	   (*uml-state-end-size*         30)
	   (*uml-state-end-ratio*       0.3)
	   (*uml-state-end-fill*      :skyblue)
	   (*uml-state-end-stroke*    (stroke :color :blue)))
   (create-svg (:width 300 :height 100)
		(grid)
		(uml-state-begin    50 50 :id :state0)
		(uml-state :state1 150 50 :id :state1)
		(uml-state-end     250 50 :id :state9)
		(uml-state-tran :state0 :state1)
		(uml-state-tran :state1 :state9)))
;;END_SVG
#+END_SRC

[[./kyvrYILL7c6.20150416.svg]]


　うーん、キツいな。終了状態の内部円は開始状態の設定をそのまま使用しているのだけ
れど、それはマズいかもしれない。それにそもそも、ストロークとフィルで色を分けられ
るというのがなんだかおかしいとも思う。ストロークだけを指定可能にして、フィルの色
はストロークの色を使用する、というのがいいかもしれない。だが、nil で省略できてし
まうことを考えるとやはりマズいかも。

　ちょっと整理。

	【種類】	【ストローク】							【フィル】
	開始	指定。省略の場合は *default-stroke*。	指定させず、ストロークの色を使用。nil の場合は *default-fill*。
	終了	指定。省略の場合は *default-stroke*。	指定させ、外部円のフィルとして使用。内部円のフィルはストロークの色を使用。


　‥‥‥でいいような気がする。しかし、これだとクラスを１つにするメリットがあまりな
いな。分割するか。

** 2015/04/17

　‥‥‥うん、いいような気がする。クローズ。


&pagetag( "ステンシル作成", "タグマップ#ステンシル作成" )
&pagetag( "UML／状態マシン図", "タグマップ#UML／状態マシン図" )

#<end update:2020/02/21 09:27:25 access:2020/02/21 09:27:46>
#<begin task ID:kGgXGJEZDlC>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2020/04/30
PRIORITY:3
STATUS:wait
TITLE:stroke-linecap の追加
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!edit

　SVG エッセンシャルズ第二版 p85 を参照。

　line / polyline だけでしか使えないのか、stroke が指定できるならどこでもできる
のか、そこの確認が必要。場合によっては、stroke-info のメンバとは別に管理、という
ことにもなるかもしれない。


* log
** 2020/03/24

　起票。

#<end update:2020/03/24 19:39:21>
#<begin task ID:kIbztPia0yq>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/04/01
PRIORITY:3
STATUS:done
TITLE:connectorをもっと賢くする：BLパターン
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:kIbztPia0yq.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　〔TASK-0042：connectorをもっと賢くする〕から派生したタスク。:BL のパターンでの
挙動を整理し、実装する。


* 現状

[[./kIbztPia0yq.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 600 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-textbox-align* :center)
		   (*default-connector-style* :BL))
	   (macrolet ((box (x y w h id)
					`(rectangle ,x ,y ,w ,h :id ,id
								:contents
								((text (/ ,w 2) (/ ,h 2)
									   ,(string-downcase (symbol-name id))
									   :align :center)))))
		 ;;-------------------------------------------
		 (let ((y1  30)
			   (y2 100))
		   (box  30 y1 40 40 :f01) (box 110 y2 40 40 :d01) (connector :f01 :d01 :end2 :arrow)
		   (box 200 y1 40 40 :f02) (box 240 y2 40 40 :d02) (connector :f02 :d02 :end2 :arrow)
		   (box 400 y1 40 40 :f03) (box 380 y2 40 40 :d03) (connector :f03 :d03 :end2 :arrow)
		   (box 550 y1 40 40 :f04) (box 500 y2 40 40 :d04) (connector :f04 :d04 :end2 :arrow))
		 (let ((y1 150)
			   (y2 220))
		   (box  30 y1 40 40 :f05) (box 110 y2 40 40 :d05) (connector :f05 :d05 :end2 :arrow)
		   (box 200 y1 40 40 :f06) (box 240 y2 40 40 :d06) (connector :f06 :d06 :end2 :arrow)
		   (box 400 y1 40 40 :f07) (box 380 y2 40 40 :d07) (connector :f07 :d07 :end2 :arrow)
		   (box 550 y1 40 40 :f08) (box 500 y2 40 40 :d08) (connector :f08 :d08 :end2 :arrow))
		 (let ((y1 350)
			   (y2 280))
		   (box  30 y1 40 40 :f09) (box 110 y2 40 40 :d09) (connector :f09 :d09 :end2 :arrow)
		   (box 200 y1 40 40 :f10) (box 240 y2 40 40 :d10) (connector :f10 :d10 :end2 :arrow)
		   (box 400 y1 40 40 :f11) (box 380 y2 40 40 :d11) (connector :f11 :d11 :end2 :arrow)
		   (box 550 y1 40 40 :f12) (box 500 y2 40 40 :d12) (connector :f12 :d12 :end2 :arrow))
)))

;;END_SVG
#+END_SRC

* log
** 2015/03/25

　起票。

** 2015/03/30

　着手。

** 2015/04/01

　‥‥‥とりあえず、実装はできたみたい。まぁ、クローズとするか。




&pagetag( "改善", "タグマップ#改善" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/21 12:17:48>
#<begin task ID:kPAm2b8PcLz>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:yellow
DATE:2020/03/26
PRIORITY:3
STATUS:doing
TITLE:デフォルト値のためのスペシャル変数の縮小を検討する
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!edit

　たとえば stroke-info では、現状で以下のデフォルト値関連の変数がある。

#+BEGIN_SRC lisp
(defparameter *default-stroke*           nil)
(defparameter *default-stroke-color*     :black)
(defparameter *default-stroke-width*     1)
(defparameter *default-stroke-opacity*   nil)
(defparameter *default-stroke-dasharray* nil)
#+END_SRC

　これを、以下のイメージにしてしまいたい。

#+BEGIN_SRC lisp
(defparameter *default-stroke* (make-stroke :color :black :width 1))
#+END_SRC

　おそらく、constants.lisp に集約している現状を改める必要がある。また、明示的な
nil 指定と省略による nil は区別する必要があるだろう。けっこうオオゴトになる。

* log
** 2020/03/25

　起票。

　考える。例えば、*default-stroke* だったら、それに依存している stroke-info.lisp
の冒頭で宣言し、それを利用するコードを確認。make-stroke マクロなんかもそうだ。そ
して、stroke-info.lisp の最後の部分で、初期値を確定する。以下のイメージ。

#+BEGIN_SRC lisp
;; stroke-info.lisp

(defparameter *default-stroke* nil)

(defclass stroke-info () ...)

(defmacro make-stroke (...) ...)

(setf *default-stroke* (make-stroke :color :black :width 1))
#+END_SRC

　このやり方でイケるのかどうか、一応確認しないと。

　‥‥‥いけることが確認できたので、午前中に職場で作業してしまった。といっても、
以下の３つ。他は独立した *default-xxx* オブジェクトがあるワケではないので、対象
外（または検討が必要）だ。この時点でひとまずコミット。

	* fill-info
	* font-info
	* stroke-info

#<end update:2020/03/25 18:31:05 access:2020/03/25 18:31:11>
#<begin task ID:kS32RE8FkEc>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/04/20
PRIORITY:3
STATUS:done
TITLE:stereotypeからkeywordへ
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　「UMLモデリングのエッセンス第３版」によれば、良く使われているステレオタイプと
いう用語は正しくなく、「キーワード」が正しい、らしい。そこで、とにかく全部直して
しまうことにする。


* log
** 2015/04/20

　起票。そして着手。

　１点だけ問題を発見。keyword というシンボルは CL パッケージがエクスポートしてい
るのだ。だから keyword マクロというのが使い難い。実際問題としてほとんど使用しな
いのだが、uml-class などでは属性や操作の中でそれを使うんだよな。

　とりあえず、使うのはそこくらいということで、keyword-info というクラス名と同じ
マクロにすることにした。まぁ現実的な妥協かな。

　‥‥‥できた。クローズ。



&pagetag( "UML", "タグマップ#UML" )

#<end update:2020/02/20 16:19:35 access:2020/02/26 17:31:27>
#<begin task ID:lv1wH6ms6l0>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/03/19
PRIORITY:3
STATUS:done
TITLE:uml-associationの作成
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:lv1wH6ms6l0.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　uml-association のステンシルを作成する。


* sample

[[./lv1wH6ms6l0.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :textbox)
 (load-stencil :uml-association)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (textbox 100 100 "classA" :align :center :id :clsA)
       (textbox 300 100 "classB" :align :center :id :clsB)
       (uml-association :clsA :clsB :arrows 0 :line-style :TT :keyword :arrows-0)
       (uml-association :clsA :clsB :arrows 1 :line-style :CC :keyword :arrows-1)
       (uml-association :clsA :clsB :arrows 2 :line-style :BB :keyword :arrows-2)))
;;END_SVG
#+END_SRC

* log
** 2015/03/05

　起票。

** 2015/03/06

　着手。とりあえず、端点に描画するあれ、なんだっけ、ロールと多重度か。あれを度外
視すれば、現時点でも実装はできるはずなんだ。なので着手。

　‥‥‥とりあえず、ここまででできるはずのことはできたはず。あとは〔端点取得機能追
加(TASK-0037：ラベル向けのline端点取得機能追加)〕が終わったら戻ってくる感じかな。

** 2015/03/18

　さて、ロールと多重度。これをどうするか考えなければならない。どちらも使用頻度が
低いのが悩みの種だ。基本的には、端点と方向を取得して適切な align を指定して text 
を描画する、それだけのことだ。多重度に関しては最小値と最大値を与えるようなコンス
トラクタを伴うクラスにするのが良いだろうが、ロールは完全に単なるラベルだ。

　さて、どんなモノだろう？　uml-multiplicity-info というクラスを作ることになりそ
うな感じだが、uml-role-info は必要ないだろうか？　いずれにせよ、この辺は別のタス
クになるだろう。

	* 〔TASK-0040：UML多重度のためのクラス作成〕
	* 〔TASK-0041：UMLロールのためのクラス作成〕

** 2015/03/19

　ロールと多重度は uml-association に追加した。まだ CC 接続の場合の描画がイマイ
チだが、それは昨日書いた２つのタスク側でやることであり、uml-association に固有の
問題ではない。ということは、めでたく（そしてひとまず）クローズ。




&pagetag( "ステンシル作成", "タグマップ#ステンシル作成" )
&pagetag( "UML", "タグマップ#UML" )
&pagetag( "uml-association", "タグマップ#uml-association" )

#<end update:2020/02/21 09:32:44 access:2020/03/03 09:28:47>
#<begin task ID:lE9VsBkSrGD>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/04/10
PRIORITY:3
STATUS:done
TITLE:エラーと警告の整備
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　現在、エラーは単純に error をコールしているが、CL-PREFAB 連携などでは実際に何
がいけないのかわからない状態になっている。define-condition などできちんとエラー
を定義し、CL-PREFAB 側で必要なメッセージ出力ができるようにする。

　また、〔ステンシルの取り込み(TASK-0063：外部ステンシルを取り込んだ場合の扱いに
ついて)〕に関連して、警告も一緒に整備したい。おそらく、描画対象がカンヴァスをは
みだす場合にも警告を出すことになるだろう。

　なお、エラーと警告の仕組みについては多分 CL-STL が参考になると思う。


* log
** 2015/04/07

　起票。そして着手。

** 2015/04/08

　さて、「多分参考になる」とした CL-STL を見てみたが、warning は単純に warn をコー
ルしていただけだった。もちろん、エラーとして扱うべき例外は exception というコン
ディションクラスを新しく作成してはいるのだが。

　そんなわけで、警告をちゃんとハンドリングする方法をおさらいしようと思った。これ
はリスタートを伴うので、実はまともにやるのは初めてかもしれない。書いてみたのは以
下のコード。

#+BEGIN_SRC lisp
 (define-condition svg-warning (warning) ())
 
 (handler-case (progn
                 (format t "step 1...~%")
                 (warn (make-condition 'svg-warning))
                 (format t "step 2...~%"))
   (svg-warning ()
     (format t "warning signalled...~%")))

#+END_SRC


　残念ながら、上記のコードではリスタートできない。何をどうすればいいんだったか、
「実用CommonLisp」を読み直しだな。これは宿題。

　では、このタスクでやるべきことを列挙してみよう。

	* エラーと警告の種類を明らかにする
	* エラーと警告を定義する
	* error と warn を単純に呼び出している既存コードを修正する
	* CL-PREFAB 連携など、CL-SVG の呼び出し元側の対応をする


　大体こんなところだろうか。もちろん、まだやらねばならないことはある。たとえば、
CL-SVGのエラーチェックコード自身では捕えられないようなエラー、括弧の対応がとれて
いないとか。こういったものをどこまでサポートするのか、という話だな。

　というわけで、書いてみたのが以下のコード。とりあえずはここから。

#+BEGIN_SRC lisp
 (defun eval-condition-test (str)
   (handler-case (eval (read-from-string "(+ \"foo\" 2)"))
     (end-of-file ()
       (print :end-of-file))
     (type-error (c)
       (format nil "ERROR : The value \"~A\" is not of type ~A." (type-error-datum c)
               (type-error-expected-type c)))
     (undefined-function (c)
       (format nil "ERROR : The function ~A is undefined." (cell-error-name c)))
     (unbound-variable (c)
       (format nil "ERROR : Variable ~A is unbound." (cell-error-name c)))))
 
 (eval-condition-test "(+ 1 2")      ; -> end-of-file
 (eval-condition-test "(+ :foo 2)")  ; -> type-error
 (eval-condition-test "(xxx 0)")     ; -> undefined-function
 (eval-condition-test "(+ foo 2)")   ; -> unbound-variable

#+END_SRC



　あるいは、警告まで視野に入れて handler-bind を使うなら以下のような感じか。

#+BEGIN_SRC lisp
 (defun eval-condition-test2 (str)
   (labels ((end-of-file (c)
              (print :end-of-file)
              (return-from eval-condition-test2 c))
            (type-error (c)
              (format t "ERROR : The value ~A is not of type ~A." (type-error-datum c)
                                                                  (type-error-expected-type c))
              (return-from eval-condition-test2 c))
            (undefined-function (c)
              (format t "ERROR : The function ~A is undefined." (cell-error-name c))
              (return-from eval-condition-test2 c))
            (unbound-variable (c)
              (format t "ERROR : Variable ~A is unbound." (cell-error-name c))
              (return-from eval-condition-test2 c))
            (warning (c)
              (print :warning)
              (muffle-warning)
              #|(return-from eval-condition-test2 c)|#))
     (handler-bind ((end-of-file        #'end-of-file)
                    (type-error         #'type-error)
                    (undefined-function #'undefined-function)
                    (unbound-variable   #'unbound-variable)
                    (warning            #'warning))
       (eval (read-from-string str)))))
 
 (eval-condition-test2 "(+ 1 2")      ; -> end-of-file
 (eval-condition-test2 "(+ :foo 2)")  ; -> type-error
 (eval-condition-test2 "(xxx 0)")     ; -> undefined-function
 (eval-condition-test2 "(+ foo 2)")   ; -> unbound-variable

#+END_SRC

** 2015/04/09

　以下のようなかたちに変化してきた。

#+BEGIN_SRC lisp
 (defun format-condition-msg (c)
   (typecase c
     (division-by-zero   (format nil "ERROR : division-by-zero has occured. operands : ~A."
                                 (arithmetic-error-operands c)))
     (arithmetic-error   (format nil "ERROR : arithmetic-error has occured. operator : ~A, operands : ~A."
                                 (arithmetic-error-operation c) (arithmetic-error-operands c)))
     (type-error         (format nil "ERROR : The value ~A is not of type ~A."
                                 (type-error-datum c) (type-error-expected-type c)))
     (undefined-function (format nil "ERROR : The function ~A is undefined." (cell-error-name c)))
     (unbound-variable   (format nil "ERROR : Variable ~A is unbound." (cell-error-name c)))
     (end-of-file        "end-of-file")
     (style-warning      "style-warning")
     (warning            "warning")
     (condition          "other condition")))
 
 (defun eval-condition-test3 (str)
   (handler-bind ((condition (lambda (c)
                               (princ (format-condition-msg c))
                               (if (typep c 'warning)
                                   (muffle-warning)
                                   (return-from eval-condition-test3 c)))))
     (eval (read-from-string str))))
 
 (eval-condition-test3 "(/ 3 0)")                 ; -> division-by-zero
 (eval-condition-test3 "(+ 1 2")                  ; -> end-of-file
 (eval-condition-test3 "(+ :foo 2)")              ; -> type-error
 (eval-condition-test3 "(xxx 0)")                 ; -> undefined-function
 (eval-condition-test3 "(+ foo 2)")               ; -> unbound-variable
 (eval-condition-test3 "(let ((v 10)) (+ 1 2))")  ; -> style-warning

#+END_SRC



　ここで、やや思い切って以下のようなコンディションとマクロを追加。これにより、こ
れまで error 呼び出しをしていた部分について throw-exception を使えば良いことにな
る。

#+BEGIN_SRC lisp
 (defgeneric condition-msg (condition)
   (:documentation "return message string of condition object."))
 
 (define-condition exception (cl:error)
   ((msg :initarg  :msg :accessor exception-msg)))
 (define-condition caution (cl:warning)
   ((msg :initarg  :msg :accessor caution-msg)))
 
 (defmacro throw-exception (fmt &rest args)
   `(error (make-condition 'exception :msg (format nil ,fmt ,@args))))
 
 (defmacro throw-caution (fmt &rest args)
   `(error (make-condition 'caution :msg (format nil ,fmt ,@args))))
 
 (defmacro type-assert (symbol type)
   `(check-type ,symbol ,type))

#+END_SRC


　最後の type-assert は実行時の、というかユーザー入力に対するタイプチェックでな
いような型チェックをするためのものだ。大体 defmacro の冒頭で使うし、それ以外でも
使うかもしれない。これをやりきったあとに残ったモノは、また別の（展開されると 
型チェックをした上で throw-exception を呼び出す）マクロに置き換えることになるだ
ろう。

　コンディションを受けた場合、なんであれ condition-msg に渡せばエラーメッセージ
を取得することができる。はず。これは CL-SVG 側で頑張ってメソッドを作るところだ。
このために、condition-msg.lisp という新しいコンポーネントを追加した。中身は、大
体以下のような感じだ。

#+BEGIN_SRC lisp
 (defmethod condition-msg ((obj exception)) (exception-msg obj))
 (defmethod condition-msg ((obj caution))   (caution-msg obj))
 
 (defmethod condition-msg ((obj division-by-zero))
   (format nil "Division-by-zero has occured. operands : ~A."
                             (arithmetic-error-operands obj)))
        :
        :

#+END_SRC



　これによって、呼び出し側のコードのイメージはさらに以下のようになった。

#+BEGIN_SRC lisp
 (defun error-test (str)
   (handler-bind ((condition
                   (lambda (c)
                     (let ((is-warn (typep c 'warning)))
                       (format t "~A : ~A~%" (if is-warn :WARNING :ERROR)
                                             (svg:condition-msg c))
                       (if is-warn
                           (muffle-warning)
                           (return-from error-test c))))))
     (eval (read-from-string str))))
 
 (error-test "(/ 3 0)")                 ; -> division-by-zero
 (error-test "(+ 1 2")                  ; -> end-of-file
 (error-test "(+ :foo 2)")              ; -> type-error
 (error-test "(xxx 0)")                 ; -> undefined-function
 (error-test "(+ foo 2)")               ; -> unbound-variable
 (error-test "(let ((v 10)) (+ 1 2))")  ; -> style-warning
 (error-test "(create-svg (:width 400 :height 200)
                (text 30 40 \"foo\" :id :txt1)
                (text 130 140 \"bar\" :id :txt1)))))")

#+END_SRC

** 2015/04/10

　さて、なんだっけ？　そうそう、type-assert は別に、以下のようなのを作ったんだ。

#+BEGIN_SRC lisp
 (defmacro chk-type (symbol type &optional (name-fnc #'identity))
   (let ((fmt (format nil "The value of ~A is ~~A, which is not of type ~A." (funcall name-fnc symbol) type)))
     `(unless (typep ,symbol ',type)
        (throw-exception ,fmt ,symbol))))

#+END_SRC

　name-fnc が何かというと、symbol が m-data などのシンボルだった場合にそこから 
"NAME" という名前を取り出したかったのだ。しかし、CL-SVG.lisp で defmacro してい
る check-member などを囲んでいる局所関数 get-display-name を渡せないので難儀して
いる。

　これについては、とりあえず局所関数 get-display-name を使ったあとの名前を渡すこ
とにして解決。そして、ソースコード中から明示的な check-type 呼び出しは全て駆逐し
た。つまり、chk-type または type-assert できりわけたということだ。

　‥‥‥で、なんだっけ？　あ—、そもそもこのタスクはエラーと警告の整備ということだっ
た。なので、もういちど error と warn がソースコード中にないことを確認‥‥‥OK。
となると、残る作業は以下の通りという認識だ。

	* CL-PREFAB のための svg.addin 対応
	* svg-main.lisp の CL-APPS 向け実装対応
	* condition-msg.lisp の実装拡充


　これだけでいい‥‥‥はずなんだ。では、まずは svg.addin からいってみようか。修正し
た結果、以下のようになった。


#+BEGIN_SRC lisp
 (defun svg (params txt-writer accessor cntxt log)
     (declare (ignore accessor))
     (let ((terminator nil)
           (eof-itr    nil))
       ;;analyze parameter string.
       (let* ((lst (ppcre-x:capture-list "^\"([^\"]+)\"$" params 1)))
         (when (null lst)
           (class:invoke log :error "invalid parameters '" params "' for &svg.")
           (return-from svg nil))
         (setf terminator (first lst)))
 
       (class:with-members (itr1 itr2) cntxt
             (setf eof-itr (stl:find itr1 itr2 terminator #'string=))
             (when (stl:opr== eof-itr itr2)
               (class:invoke log :error "terminator '" terminator "' of &svg is not found.")
               (return-from svg nil)))
 
       (let ((stream   (make-string-output-stream))
             (itr      (class:member cntxt :itr1))
             (line-num (class:member cntxt :line-num)))
         (write-line "(progn" stream)
         (next-line)
         (do ()
             ((stl:opr== itr eof-itr))
           (write-line (stl:opr* itr) stream)
           (next-line))
         (write-line ")" stream)
         (next-line)
         (setf (class:member cntxt :line-num) line-num)
         (class:with-members (prop-mgr prgm-mgr) cntxt
             (let ((code (get-output-stream-string stream))
                   (*package* (find-package :svg-user)))
               (handler-bind ((condition
                               (lambda (c)
                                 (let ((is-warn (typep c 'warning)))
                                   (class:invoke log (if is-warn :WARNING :ERROR)
                                                 (format nil "&svg : ~A" (svg:condition-msg c)))
                                   (if is-warn
                                       (muffle-warning)
                                       (progn
                                         (pragma-write "<p><font color='red'>ERROR : Invalid CL-SVG data.</font></p>")
                                         (return-from svg nil)))))))
                 (pragma-write (eval (read-from-string code)))))))))

#+END_SRC



　次、CL-APPS 向けの作業。これは以下のようになった。大丈夫っぽいな。

#+BEGIN_SRC lisp
 (defun cl-apps-main (args)
     (handler-bind ((condition
                     (lambda (c)
                       (let ((is-warn (typep c 'warning)))
                         (format t "~A : ~A~%" (if is-warn :WARNING :ERROR) (svg:condition-msg c))
                         (if is-warn
                             (muffle-warning)
                             (return-from cl-apps-main nil))))))
       (if (/= 4 (length args))
           (throw-exception "Invalid parameter count.")
           (destructuring-bind (in-file   input-encoding
                                out-file output-encoding) args
             ;; check in-file existence.
             (unless (path:is-existing-file in-file)
               (throw-exception "Input file '~A' is not exist." in-file))
             ;; check encoding parameters.
             (let* ((candidates '(:guess :jis :euc-jp :sjis :utf8 :ascii))
                    (enc1 (fix-encoding  input-encoding candidates))
                    (enc2 (fix-encoding output-encoding (cdr candidates)))
                    (buf (load-whole-file in-file))
                    (encoding (if (eq enc1 :guess)
                                  (jp:guess buf)
                                  (jp:make-encoding enc1))))
               (setf buf (concatenate 'string "(progn " (jp:decode buf encoding) ")"))
               (let ((svg:*default-output-encoding* enc2)
                     (*package* (find-package :svg-user)))
                 (setf buf (eval (read-from-string buf))))
               (save-whole-file out-file (jp:encode buf enc2)))))))

#+END_SRC


　では最後、condition-msg.lisp の実装拡充だ。これが一番難物かもしれない。

　‥‥‥と、warning などのメッセージを取得する方法がわからないなーと思っていたが、
どうやら根本的に間違っていたらしい。HyperSpec によれば、コンディションオブジェク
ト c の「レポート」を stream に書き出すには、以下の方法が正しいらしいのだ。

#+BEGIN_SRC lisp
 (let ((*print-escape* nil))
   (print-object c stream))

#+END_SRC



　ちなみに、これによって返されるレポートの内容は、define-condition の :report パ
ラメータに lambda 式を渡すことで指定できるらしい。以下のように。

#+BEGIN_SRC lisp
 (define-condition exception (cl:error)
   ((msg :initarg  :msg :accessor exception-msg))
   (:report (lambda (condition stream)
              (write-string (exception-msg condition) stream))))
 
 (define-condition caution (cl:warning)
   ((msg :initarg  :msg :accessor caution-msg))
   (:report (lambda (condition stream)
              (write-string (caution-msg condition) stream))))

#+END_SRC



　そんなわけで、condition-msg という総称関数とか condition-msg.lisp というコンポー
ネントとか、全部ナシよ‥‥‥ということになり、書き換えをおこなった。良く考えると、
これって CL-STL なんかも対応しないとダメじゃん。

　‥‥‥それはそれとして、一応作業は全部終わったことになる。一応クローズでいいかな。




&pagetag( "改善", "タグマップ#改善" )
&pagetag( "ステンシル", "タグマップ#ステンシル" )

#<end update:2020/02/20 16:17:53>
#<begin task ID:lIf95ttQF9U>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/02/15
PRIORITY:3
STATUS:rejected
TITLE:uml-noteをpolygon派生にする
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　現在、uml-note は group 派生になっており、内部で２つの polygon と paragraph の
描画をしている。ここで polygon に shape と同様の is-composition や pre-draw など
の仮想関数を与えることで、uml-note を uml-usecase と同じようにできると考えた。検
討し、可能ならば実装する。


* log
** 2015/02/15

　起票。

　そして着手。まずは polygon の仕様変更。これは簡単。そして uml-note を変更する‥‥‥

　やってみたが、返ってソースコードの総量は増える。問題は、uml-note が２つの
polygon を描画していることで、そのうちの１つを基底クラスに追いやっても、あまりコー
ドがすっきりしないのだ。返って基底 polygon に set-points しつつ、post-draw でも
その座標値を再計算しなければならない。

　‥‥‥却下。とはいえ、polygon に施した修正は有効にしておく。



&pagetag( "改善", "タグマップ#改善" )
&pagetag( "polygon", "タグマップ#polygon" )
&pagetag( "uml-note", "タグマップ#uml-note" )

#<end update:2020/02/20 16:06:12>
#<begin task ID:lLAT6hG8ZYq>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/04/03
PRIORITY:3
STATUS:done
TITLE:connectorをもっと賢くする
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　connector をもっと賢くしたい。必要なら４回でも５回でも折れ曲っていいし、from
と dest が同じ shape てのも対応したい。あと、shape 側になるが接続点を増やしたい。
これは connector の line-style 指定に関係してくる。

　→ shape の接続点を増やす件は〔別タスク(TASK-0044：shape の接続点を増やす)〕と
する。


* log
** 2015/03/19

　起票。

** 2015/03/24

　さて、そろそろこのタスクにとりかかるとしようか。マズやらなければならないのは、
以下のそれぞれの接続においてどれだけ考慮しなければならないかを明らかにすることだ
（CC は最初から除外している）。

	* U type : BB, TT, LL, RR
	* Z type : BT, TB, LR, RL
	* L type : BL, BR, TL, TR, LB, LT, RB, RT


　[UZL] type というのは、ソースコードから持ってきた言葉で、それぞれのコネクタの
様態を示している。そもそもこれが崩れるのが今回の作業なのだけれどな。というか、
shape の接続点を増やす作業を先に片付けるべきか。


　‥‥‥思ったよりも簡単に〔shape の接続点を増やす件(TASK-0044：shape の接続点を増
やす)〕が完了。これでいよいよ connector をもっと賢くする準備が整った。

** 2015/03/25

　さらに準備。resolve-connector-points を分解して以下のように、長くなるので掲載
しないけど、つまりは resolve-connector-points-for-CC みたいな 17種類の関数に分割
してそれを呼び出すようにしたわけだ。

#+BEGIN_SRC lisp
 (defun resolve-connector-points (e1 e2 style)
   (when (keywordp style)
     (setf style (check-and-fix-connector-style style)))
   (check-type style list)
   (let ((style (first  style))
         (pos1  (- (second style) 2))
         (pos2  (- (third  style) 2)))
     (ecase style
       ((:CC) (resolve-connector-points-for-CC pos1 pos2 e1 e2))
       ((:BB) (resolve-connector-points-for-BB pos1 pos2 e1 e2))
       ((:TT) (resolve-connector-points-for-TT pos1 pos2 e1 e2))
       ((:LL) (resolve-connector-points-for-LL pos1 pos2 e1 e2))
       ((:RR) (resolve-connector-points-for-RR pos1 pos2 e1 e2))
       ((:BT) (resolve-connector-points-for-BT pos1 pos2 e1 e2))
       ((:TB) (resolve-connector-points-for-TB pos1 pos2 e1 e2))
       ((:LR) (resolve-connector-points-for-LR pos1 pos2 e1 e2))
       ((:RL) (resolve-connector-points-for-RL pos1 pos2 e1 e2))
       ((:BL) (resolve-connector-points-for-BL pos1 pos2 e1 e2))
       ((:BR) (resolve-connector-points-for-BR pos1 pos2 e1 e2))
       ((:TL) (resolve-connector-points-for-TL pos1 pos2 e1 e2))
       ((:TR) (resolve-connector-points-for-TR pos1 pos2 e1 e2))
       ((:LB) (resolve-connector-points-for-LB pos1 pos2 e1 e2))
       ((:LT) (resolve-connector-points-for-LT pos1 pos2 e1 e2))
       ((:RB) (resolve-connector-points-for-RB pos1 pos2 e1 e2))
       ((:RT) (resolve-connector-points-for-RT pos1 pos2 e1 e2)))))

#+END_SRC

　17種類の関数は今は非常に小さい。しかし、今後賢くなるにつれてこれが大きくなって
いくのだ。とはいえ、なんというか、とても、面倒臭い。

　そもそも、個々のパターンについて考えることが多過ぎるだろう。ここはタスクを分割
することにしようか。CC を除き、以下のタスクを新設。しんどいな。

	* 〔TASK-0046：connectorをもっと賢くする：BBパターン〕
	* 〔TASK-0047：connectorをもっと賢くする：TTパターン〕
	* 〔TASK-0048：connectorをもっと賢くする：LLパターン〕
	* 〔TASK-0049：connectorをもっと賢くする：RRパターン〕
	* 〔TASK-0050：connectorをもっと賢くする：BTパターン〕
	* 〔TASK-0051：connectorをもっと賢くする：TBパターン〕
	* 〔TASK-0052：connectorをもっと賢くする：LRパターン〕
	* 〔TASK-0053：connectorをもっと賢くする：RLパターン〕
	* 〔TASK-0054：connectorをもっと賢くする：BLパターン〕
	* 〔TASK-0055：connectorをもっと賢くする：BRパターン〕
	* 〔TASK-0056：connectorをもっと賢くする：TLパターン〕
	* 〔TASK-0057：connectorをもっと賢くする：TRパターン〕
	* 〔TASK-0058：connectorをもっと賢くする：LBパターン〕
	* 〔TASK-0059：connectorをもっと賢くする：LTパターン〕
	* 〔TASK-0060：connectorをもっと賢くする：RBパターン〕
	* 〔TASK-0061：connectorをもっと賢くする：RTパターン〕



　‥‥‥それとは別に、ここで考えておきたいことがある。おそらく、上記それぞれのパター
ンでは双方の矩形の位置関係や重なりなどを調べることになるだろう。そう考えると、そ
れをうまく扱えるようなサービスがあればいいのではなかろうか？　point のように 
entity とは無縁なクラスを新設してそのメソッドとするか、それとも shape クラスのメ
ソッドとするか。はたまた２つの shape をパラメータとして取る関数にするか。まずは
ソコから考えてみよう。

** 2015/04/03

　‥‥‥帰ってきた。16個のタスクがどうにか完了。重箱の隅をつつけば色々と改善点はあ
るだろうがひとまずクローズとしよう。




&pagetag( "改善", "タグマップ#改善" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/20 16:22:00>
#<begin task ID:lPDgpmFIGvg>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/02/28
PRIORITY:3
STATUS:done
TITLE:connectorをもっと賢くする：TTパターン
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:lPDgpmFIGvg.20150326.svg,lPDgpmFIGvg.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　〔TASK-0042：connectorをもっと賢くする〕から派生したタスク。:TT のパターンでの
挙動を整理し、実装する。


* 現状

[[./lPDgpmFIGvg.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample

 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 600 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-textbox-align* :center)
		   (*default-connector-style* :TT))
	   ;;-------------------------------------------
	   (textbox  50  80 "f01" :id :f01) (textbox 100  80 "d01" :id :d01) (connector :f01 :d01 :end2 :arrow)
	   (textbox  50 180 "d02" :id :d02) (textbox 100 180 "f02" :id :f02) (connector :f02 :d02 :end2 :arrow)
	   ;;-------------------------------------------
	   (rectangle 70 290 80 80 :id :f03 :contents ((text 10 20 "f03")))
       (textbox 100 330 "d03" :id :d03)   
       (connector :f03 :d03 :end2 :arrow)
	   ;;-------------------------------------------
	   (let ((y1 100)
	   		 (y2 170))
		 (textbox 180 y1 "f05" :id :f05) (textbox 210 y2 "d05" :id :d05) (connector :f05 :d05 :end2 :arrow)
		 (textbox 290 y1 "f06" :id :f06) (textbox 300 y2 "d06" :id :d06) (connector :f06 :d06 :end2 :arrow)
		 (textbox 430 y1 "f07" :id :f07) (textbox 420 y2 "d07" :id :d07) (connector :f07 :d07 :end2 :arrow)
		 (textbox 530 y1 "f08" :id :f08) (textbox 500 y2 "d08" :id :d08) (connector :f08 :d08 :end2 :arrow))
	   ;;-------------------------------------------
	   (let ((y1 300)
	   		 (y2 370))
		 (textbox 180 y1 "d09" :id :d09) (textbox 210 y2 "f09" :id :f09) (connector :f09 :d09 :end2 :arrow)
		 (textbox 290 y1 "d10" :id :d10) (textbox 300 y2 "f10" :id :f10) (connector :f10 :d10 :end2 :arrow)
		 (textbox 430 y1 "d11" :id :d11) (textbox 420 y2 "f11" :id :f11) (connector :f11 :d11 :end2 :arrow)
		 (textbox 530 y1 "d12" :id :d12) (textbox 500 y2 "f12" :id :f12) (connector :f12 :d12 :end2 :arrow))))

;;END_SVG
#+END_SRC


* log
** 2015/03/25

　起票。

** 2015/03/26

　〔BBパターン(TASK-0046：connectorをもっと賢くする：BBパターン)〕ができたので、
それに倣って TT の作業をする。


　‥‥‥できた。やりながら気付いたことを BB パターンの方にも反映しちゃったけどな。

#+BEGIN_SRC lisp
;;BEGIN_SVG 20150326
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 500 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :size 10 :family "Courier New" :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1))
		   (*default-textbox-align* :center))
	   ;;-------------------------------------------
	   (let ((y1  80)
	   		 (y2 150))
		 (textbox  80 y1 "f05" :id :f05) (textbox 110 y2 "d05" :id :d05) (connector :f05 :d05 :end2 :arrow :line-style :TT1)
		 (textbox 190 y1 "f06" :id :f06) (textbox 210 y2 "d06" :id :d06) (connector :f06 :d06 :end2 :arrow :line-style :TT3)
		 (textbox 320 y1 "f07" :id :f07) (textbox 300 y2 "d07" :id :d07) (connector :f07 :d07 :end2 :arrow :line-style :TT1)
		 (textbox 430 y1 "f08" :id :f08) (textbox 400 y2 "d08" :id :d08) (connector :f08 :d08 :end2 :arrow :line-style :TT3))
	   ;;-------------------------------------------
	   (let ((y1 280)
	   		 (y2 350))
		 (textbox  80 y1 "d09" :id :d09) (textbox 110 y2 "f09" :id :f09) (connector :f09 :d09 :end2 :arrow :line-style :T1T)
		 (textbox 190 y1 "d10" :id :d10) (textbox 210 y2 "f10" :id :f10) (connector :f10 :d10 :end2 :arrow :line-style :T3T)
		 (textbox 320 y1 "d11" :id :d11) (textbox 300 y2 "f11" :id :f11) (connector :f11 :d11 :end2 :arrow :line-style :T1T)
		 (textbox 430 y1 "d12" :id :d12) (textbox 400 y2 "f12" :id :f12) (connector :f12 :d12 :end2 :arrow :line-style :T3T))))

;;END_SVG
#+END_SRC

[[./lPDgpmFIGvg.20150326.svg]]


　‥‥‥問題ないと思う。クローズしよう。

** 2015/03/27

　〔BBパターン(TASK-0046：connectorをもっと賢くする：BBパターン)〕の修正を再度取
り込む。再びクローズ。




&pagetag( "改善", "タグマップ#改善" )
&pagetag( "connector", "タグマップ#connector" )

#<end update:2020/02/21 12:19:16>
#<begin task ID:lPGn2iQ6CFp>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:UML
MARK:cyan
DATE:2015/03/05
PRIORITY:3
STATUS:done
TITLE:uml-noteの作成
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:lPGn2iQ6CFp.sample.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　uml-note のステンシルを作成する。


* sample

[[./lPGn2iQ6CFp.sample.svg]]

** source

#+BEGIN_SRC lisp
;;BEGIN_SVG sample
 (load-stencil :grid)
 (load-stencil :uml-actor)
 (load-stencil :uml-usecase)
 (load-stencil :uml-note)
 (create-svg (:width 400 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-actor :actor 75 200 :id :actor)
       (uml-usecase 300 200 120 60 "usecase" :id :usecase)
       (connector :actor :usecase)
	   (uml-note 200 75 "this is uml-note.
multi line is OK." :keyword :comment :targets '(:actor :usecase))))

;;END_SVG
#+END_SRC


* log
** 2015/03/02

　事後起票。

** 2015/03/05

　過去に作成した svguml のリファレンスを参照してみたが、CL-SVG でも同等のパラメー
タ指定は網羅しているようだ（eventは除くけど）。というわけで、ひとまずはクローズ
とする。




&pagetag( "ステンシル作成", "タグマップ#ステンシル作成" )
&pagetag( "UML／その他", "タグマップ#UML／その他" )

#<end update:2020/02/21 12:03:49>
#<begin task ID:lQD3TZ4J2Vs>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:cyan
DATE:2015/02/17
PRIORITY:3
STATUS:done
TITLE:imageにlabelパラメータを追加する
REPEAT:none
ALARM:none
TRIVIAL:0
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:1
#!view


　やらなきゃね。label と labelposition だな。


* log
** 2015/02/15

　起票。

** 2015/02/16

　着手。方式はすでに〔TASK-0014：uml-actorにnameパラメータを追加する〕で確立して
いるが、uml-actor 同様、font や class で悩む。

** 2015/02/17

　解決。詳細は〔TASK-0014：uml-actorにnameパラメータを追加する〕を参照のこと。クローズ。





&pagetag( "機能追加", "タグマップ#機能追加" )
&pagetag( "image", "タグマップ#image" )

#<end update:2020/02/20 16:07:25>
#<begin memo ID:073EmTch3zx>
-*-MODE:sh-*-
GROUP:scripts
TAG:
MARK:none
TITLE:SCRIPT：svggen
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!script

#ToDo : image で添付ファイル画像を参照していると、編集中でない状態からの実行で
#       エラー終了してしまうよ‥‥‥（汗
#       　⇒　何か、「このsvgを生成する場合はこの添付ファイルを extract する
#       　　　必要があるよ」といったディレクティブをサポートするしかない。

# パラメータチェック
if [ -z "$1" ]; then
	echo "ERROR : parameter missing."
	exit
fi

# --help ならばヘルプを出力して終了
if [ "$1" == "--help" ]; then
	echo "usage : $0 DATAID [TARGET_NAME]"
	exit
fi

# パラメータとして渡されたデータの ID 文字列を取得
TARGET_ID=`basename $1`
if [ -z "$TARGET_ID" ]; then
	# 失敗なら終了
	exit
fi
if [ "$1" != "$TARGET_ID" ]; then
	echo "$1 is $TARGET_ID."
fi

# 指定されたデータがセッション中か調べる
#ToDo : jobs --check DATAID => "edit" とかできれば速いはず
#ToDo : jobs -f -d, でおおむね期待やりたいことができるようになったはず！
MODE=`jobs | grep "$TARGET_ID" | perl -pe 's/^(.+?) .+$/\1/'`
if [ -z "$MODE" ]; then
	# セッション中でない場合、一時ファイルに note のみ出力
	DAT_FILE="$$.txt"
	note -d "${TARGET_ID}" > ${DAT_FILE}
	IN_SESSION=0
elif [ "edit" == "$MODE" ]; then
	# セッション中の場合、すでに存在する（はずの）編集ファイルを参照する
	#ToDo : 編集ファイル名も jobs コマンドに答えてもらえるなら edit/new clause を統合できる
	if [ -E .makename ]; then
		DAT_FILE=`.makename ${TARGET_ID}`
	else
		DAT_FILE="${TARGET_ID}"
	fi
	IN_SESSION=1
elif [ "new" == "$MODE" ]; then
	# new セッション中の場合、すでに存在する（はずの）編集ファイルを参照する
	DAT_FILE="${TARGET_ID}"
	IN_SESSION=1
else
	# view セッション中の場合はエラー終了
	echo "ERROR : $TARGET_ID　is under view session."
	exit
fi

# もうひとつパラメータがある場合は生成対象を限定する
TARGET_NAME="$2"

# ダイアグラムデータの範囲情報を抽出して反復
for DATA in `cat -x ./$DAT_FILE | \
					grep -E -n '^;;(BEGIN|END)_SVG' | \
					perl -0pe 's/^([0-9]+):;;BEGIN_SVG (.+?)\n([0-9]+):;;END_SVG.*$/\1,\3,"\2"/mg' | \
					grep "${TARGET_NAME}\"$"`
do
	# 開始行と終了行、および名前に分割
	split "$DATA" LINE1 LINE2 NAME

	# 行数を数え、ダイアグラムファイルのファイル名も決定
	rpn -aLEN LINE2 LINE1 -

	TMP_FILE="./$TARGET_ID.$NAME.diagram"
	SVG_FILE="$TARGET_ID.$NAME.svg"

	echo "generating $SVG_FILE ..."

	# CL-SVG の入力データ抽出を実行して一時ファイルに出力
	shell "cat ./$DAT_FILE | head -$LINE2 | tail -$LEN > ${TMP_FILE}"

	# SVG ファイルを生成
	shell "CL-APPS.exe cl-svg ${TMP_FILE} utf8 ${SVG_FILE} utf8"
	#attach -e $TARGET_ID ${SVG_FILE}

	# 一時ファイルを削除
	rm -x ${TMP_FILE}

	# セッション中で無ければ上書き添付する
	if [ ${IN_SESSION} -eq 0 ]; then
		# attach --supercede する
		attach --force --supercede "${TARGET_ID}" ${SVG_FILE}
		# 生成した SVG ファイルはファイルシステム上から削除
		rm -x ${SVG_FILE}
	fi

done


# セッション中でない場合に note -d で作成したデータファイルを削除
if [ ${IN_SESSION} -eq 0 ]; then
	rm -x ${DAT_FILE}
fi
#<end update:2020/03/23 09:02:21 access:2020/03/24 19:27:58>
#<begin memo ID:0jcp8laWIEQ>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class uml-actor
ATTACH:0jcp8laWIEQ.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./0jcp8laWIEQ.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-generalization)
 (create-svg (:width 400 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (uml-class :group 200 50 :abstract t)
       (uml-class :uml-actor $1[center] (+ $1[middle] 200)
				  :attributes
				  ((:private :m-name)
				   (:private :m-radius)
				   (:private :m-thigh)
				   (:private :m-shoulder)
				   (:private :m-fill)
				   (:private :m-stroke))
				  :operations
				  ((:public :uml-actor :params (:name :x :y :etc))
				   (keyword-info :entity)
				   (:public :check :params (:canvas :dict))
				   (keyword-info :group)
				   (:public :draw-group :params (:writer))))
       (uml-generalization :$1 :$2)))

;;END_SVG
#+END_SRC

#<end update:2020/02/21 11:45:28>
#<begin memo ID:0kEPAXAZGOp>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class shape
ATTACH:0kEPAXAZGOp.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./0kEPAXAZGOp.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-generalization)
 (create-svg (:width 400 :height 500 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (uml-class :entity 200 50 :abstract t)
       (uml-class :shape $1[center] (+ $1[middle] 250)
				  :attributes
				  ((:public  :m-class :property :readonly)
				   (:private :m-link  :type :link-info))
				  :operations
				  ((:public :shape   :params (:class :link :layer :id))
				   (:public :get-cc-point :params (:x :y))
				   (:public :is-composition)
				   (:public :pre-draw :params (:writer))
				   (:public :post-draw :params (:writer))
				   (keyword-info :property)
				   (:public :class)
				   (:public :width)
				   (:public :height)
				   (:public :left)
				   (:public :center)
				   (:public :right)
				   (:public :top)
				   (:public :middle)
				   (:public :bottom)
				   (keyword-info :entity)
				   (:public :check :params (:canvas :dict))))
       (uml-generalization :$1 :$2)))

;;END_SVG
#+END_SRC

#<end update:2020/02/21 11:50:51 access:2020/02/21 11:51:02>
#<begin memo ID:0BjJ20zYaEN>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class circle
ATTACH:0BjJ20zYaEN.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./0BjJ20zYaEN.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-generalization)
 (create-svg (:width 400 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (uml-class :shape 200 50 :abstract t)
       (uml-class :circle $1[center] (+ $1[middle] 200)
				  :attributes
				  ((:private :m-center-x)
				   (:private :m-center-y)
				   (:private :m-radius)
				   (:private :m-fill)
				   (:private :m-stroke))
				  :operations
				  ((:public :circle :params (:x :y :radius :etc))
				   (:public :get-subcanvas)
				   (keyword-info :properties)
				   (:public :property-width)
				   (:public :property-height)
				   :etc
				   (keyword-info :entity)
				   (:public :check :params (:canvas :dict))
				   (:public :draw :params (:writer))
				   (keyword-info :shape)
				   (:public :get-cc-point :params (:x :y))))
       (uml-generalization :$1 :$2)))

;;END_SVG
#+END_SRC
#<end update:2020/02/21 11:50:42>
#<begin memo ID:1zZzvzAprox>
-*-MODE:sh-*-
GROUP:
TAG:
MARK:none
TITLE:.fistrc
ATTACH:
TRACKING:0
EXECUTABLE:0
PRIVATE:0
BACKUP:1

TMP=`version -n`
declare --strict FIST_VERSION number $TMP
export FIST_VERSION

# variables ------------------------------------
export FIST_ALARM_SNOOZE_MINUTES   20
export FIST_AUTO_BG_WHEN_FINISH    0
export FIST_BLOCK_SESSION          0
export FIST_DEFAULT_EXEC_COMMAND   edit
export FIST_DEFAULT_PRIORITY       3
export FIST_EDITOR                 emacsclient
export FIST_HISTORY_COUNT          16
export FIST_LOG_LEVEL              debug
export FIST_ONETIME_COMMAND_GUIDE  1
export FIST_OUTLOOK_DATESPAN       7
export FIST_PS1                    "\n\w\nshow@\h[\#]$ "
export FIST_PS2                    "\#> "
export FIST_SCRIPT_CACHE           20
export FIST_THEME                  emacs


# links ----------------------------------------
ln -s 1zZzvzAprox .fistrc
ln -s 7GZEUaGXifd .exit
ln -s 073EmTch3zx svggen

# ln -s gqevoybQeT3 .makename
# ln -s 0003GfV4M6H .exit
# ln -s 001B2M8i7HL .holidays
# ln -s 0000wVxI8cw .moderc
# ln -s 0001X9lfyFf .guile
# ln -s 000729AE7yf .history

# alias ----------------------------------------
alias *              "history -l"
alias @              index
alias root           "chtype root"
alias schedule       "chtype schedule"
alias task           "chtype task"
alias expense        "chtype expense"
alias address        "chtype address"
alias memo           "chtype memo"
alias id             "field id"
alias title          "field title"
alias archive        "backup ./cl-svg.fist.archive"
alias clone          "new --template"
alias ll             "ls -l"
alias lb             "ls -b"
#<end update:2020/03/24 19:32:17>
#<begin memo ID:2dpOHRvoVJ8>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class group
ATTACH:2dpOHRvoVJ8.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./2dpOHRvoVJ8.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-generalization)
 (create-svg (:width 400 :height 420 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (uml-class :shape 200 50 :abstract t)
	          (uml-class :group $1[center] (+ $1[middle] 200)
				  :attributes
				  ((:public :m-x      :type :number)
				   (:public :m-y      :type :number)
				   (:public :m-width  :type :number)
				   (:public :m-height :type :number))
				  :operations
				  ((:public :group   :params (:etc))
				   (:public :draw-group :params (:writer) :abstract t)
				   (:public :get-subcanvas)
				   (:public :draw-debug-frame :params (:writer))
				   (keyword-info :property)
				   (:public :property-width)
				   (:public :property-height)
				   :etc
				   (keyword-info :entity)
				   (:public :check :params (:canvas :dict))
				   (:public :draw  :params (:writer))
				   (keyword-info :shape)
				   (:public :is-composition)
				   (:public :get-cc-point :params (:x :y))))
       (uml-generalization :$1 :$2)))

;;END_SVG
#+END_SRC

#<end update:2020/02/21 11:50:31>
#<begin memo ID:2dC43w0KnUJ>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class layer-manager
ATTACH:2dC43w0KnUJ.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./2dC43w0KnUJ.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-interface)
 (load-stencil :uml-interface-request)
 (load-stencil :uml-note)
 (create-svg (:width 600 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-class :layer-manager 200 100
				  :attributes
				  ((:private :m-cur-layer)
				   (:private :m-counter)
				   (:private :m-hashtable))
				  :operations
				  ((:public :layer-manager)
				   (:public :register     :params (:name :display))
				   (:public :get-display  :params (:name))
				   (:public :get-priority :params (:name))
				   (:public :change-layer :params (:new-layer :writer))))
	   (uml-interface :svg-writer 530 $1[middle])
	   (uml-interface-request :$2 :$1 :arrow t)
	   (uml-note 250 250 "display must be in
:inline, :none" :keyword :requirement :targets :$3)))

;;END_SVG
#+END_SRC

#<end update:2020/02/21 11:50:22>
#<begin memo ID:2vmIheUdETf>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class arc
ATTACH:2vmIheUdETf.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./2vmIheUdETf.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-generalization)
 (create-svg (:width 400 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (uml-class :path 200 50 :abstract t)
       (uml-class :arc $1[center] (+ $1[middle] 200)
				  :attributes
				  ((:private :m-center-x)
				   (:private :m-center-y)
				   (:private :m-radius)
				   (:private :m-degree1)
				   (:private :m-degree2))
				  :operations
				  ((:public :arc :params (:x :y :radius :deg1 :deg2 :etc))
				   (:private :calculate-d-data)
				   (keyword-info :entity)
				   (:public :check :params (:canvas :dict))))
       (uml-generalization :$1 :$2)))

;;END_SVG
#+END_SRC
#<end update:2020/02/21 11:50:13>
#<begin memo ID:2HNuoLxcMp7>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-diagram class dictionary
ATTACH:2HNuoLxcMp7.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./2HNuoLxcMp7.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-association)
 (create-svg (:width 600 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-class :dictionary 200 100
				  :attributes
				  ((:private :history-max   :type :integer)
				   (:private :history-array :type :vector)
				   (:private :history-size  :type :integer)
				   (:private :history-top   :type :integer)
				   (:private :map           :type :hashtable))
				  :operations
				  ((:public  :dict-create     :params (:history-size))
				   (:public  :dict-register   :params (:id :entity))
				   (:public  :dict-get-entity :params (:id))))
       (uml-class :entity (+ $1[right] 150) $1[middle])
       (uml-association :$2 :$1 :arrows 1 :mult2 :*)))

;;END_SVG
#+END_SRC
#<end update:2020/03/23 12:02:19>
#<begin memo ID:2UPRFrwHM7Z>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class uml-package
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./not_yet_exist.svg]]

* source
#+BEGIN_SRC lisp
#+END_SRC

#<end update:2020/02/21 11:34:15>
#<begin memo ID:3EmbsTg9V0C>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class uml-generalization
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./not_yet_exist.svg]]

* source
#+BEGIN_SRC lisp
#+END_SRC

#<end update:2020/02/21 11:33:49>
#<begin memo ID:3SSFCE2SgXM>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class font-info
ATTACH:3SSFCE2SgXM.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./3SSFCE2SgXM.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-dependency)
 (create-svg (:width 600 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-class :font-info 150 150
				  :attributes
				  ((:public :m-family       :property :readonly)
				   (:public :m-size         :property :readonly)
				   (:public :m-color        :property :readonly)
				   (:public :m-style        :property :readonly)
				   (:public :m-decoration   :property :readonly)
				   (:public :m-weight       :property :readonly)
				   (:public :m-line-spacing :property :readonly)
				   (:public :m-width-spice  :property :readonly))
				  :operations
				  ((:public :font-info :params (:etc))
				   (:public :check :params (:canvas :dict))
				   (:public :to-string)
				   (:public :calc-textarea :params (:font :text) :scope :class)))
	   (uml-class :canvas-data (+ $1[right] 200) $1[middle])
	   (uml-dependency :$2 :$1)))

;;END_SVG
#+END_SRC

#<end update:2020/02/21 11:49:39>
#<begin memo ID:4QJ6fxHsKp1>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class polygon
ATTACH:4QJ6fxHsKp1.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./4QJ6fxHsKp1.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-generalization)
 (create-svg (:width 400 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (uml-class :entity 200 50 :abstract t)
       (uml-class :polygon $1[center] (+ $1[middle] 200)
				  :attributes
				  ((:private :m-points)
				   (:private :m-class)
				   (:private :m-fill)
				   (:private :m-stroke)
				   (:private :m-link))
				  :operations
				  ((:public :polygon :params (:points :etc))
				   (:public :is-composition)
				   (:public :pre-draw :params (:writer))
				   (:public :post-draw :params (:writer))
				   (:public :set-points :params (:points))
				   (:private :format-points :params (:points))
				   (keyword-info :properties)
				   (:public :property-class)
				   (keyword-info :entity)
				   (:public :check :params (:canvas :dict))
				   (:public :draw :params (:writer))))
       (uml-generalization :$1 :$2)))

;;END_SVG
#+END_SRC

#<end update:2020/02/21 11:49:29>
#<begin memo ID:594t0dC5NBU>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class css
ATTACH:594t0dC5NBU.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./594t0dC5NBU.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-generalization)
 (create-svg (:width 400 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (uml-class :entity 200 50 :abstract t)
       (uml-class :css $1[center] (+ $1[middle] 150)
				  :attributes
				  ((:public :m-styles :property :readonly))
				  :operations
				  ((:public :css   :params (:styles :layer))
				   (keyword-info :entity)
				   (:public :check :params (:canvas :dict))
				   (:public :draw  :params (:writer))))
       (uml-generalization :$1 :$2)))

;;END_SVG
#+END_SRC
#<end update:2020/02/21 11:49:20>
#<begin memo ID:5lBXtkTiJg3>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class uml-state-begin
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./not_yet_exist.svg]]

* source
#+BEGIN_SRC lisp
#+END_SRC

#<end update:2020/02/21 11:34:30>
#<begin memo ID:5vJpBabaFYs>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class ellipse
ATTACH:5vJpBabaFYs.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./5vJpBabaFYs.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-generalization)
 (create-svg (:width 400 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (uml-class :shape 200 50 :abstract t)
       (uml-class :ellipse $1[center] (+ $1[middle] 200)
				  :attributes
				  ((:private :m-center-x)
				   (:private :m-center-y)
				   (:private :m-radius-x)
				   (:private :m-radius-y)
				   (:private :m-fill)
				   (:private :m-stroke))
				  :operations
				  ((:public :ellipse :params (:x :y :rx :ry :etc))
				   (:public :get-subcanvas)
				   (keyword-info :properties)
				   (:public :property-width)
				   (:public :property-height)
				   :etc
				   (keyword-info :entity)
				   (:public :check :params (:canvas :dict))
				   (:public :draw :params (:writer))
				   (keyword-info :shape)
				   (:public :get-cc-point :params (:x :y))))
       (uml-generalization :$1 :$2)))

;;END_SVG
#+END_SRC
#<end update:2020/02/21 11:47:50>
#<begin memo ID:5AXRRijYC31>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class svg-buffer-writer
ATTACH:5AXRRijYC31.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./5AXRRijYC31.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-association)
 (load-stencil :uml-interface-request)
 (create-svg (:width 500 :height 300 :encoding :utf8)
     (grid)
     (let* ((*default-fill*     :white)
			(*default-stroke*   (stroke :color :black :width 1))
			(*default-font*     (font :family "Courier New" :size 11 :width-spice 0.85))
			(*uml-keyword-font* (font :size 9 :base *default-font*)))
       (uml-class :entity 100 100 :abstract t)
       (uml-interface (label :svg-writer :above) (+ $1[right] 200) $1[middle])
       (uml-class :svg-buffer-writer $1[center] (+ $1[bottom] 100)
				  :operations
				  ((:public :write :params ("&rest args"))
				   (:public :incr-level)
				   (:public :decr-level)
				   (:public :close)))
       (uml-interface-request :$3 :$2 :arrow t)
       (uml-association :$2 :$3)))

;;END_SVG
#+END_SRC

#<end update:2020/02/21 11:47:41>
#<begin memo ID:6ftsjUHFs80>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-diagram class fill-info
ATTACH:6ftsjUHFs80.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./6ftsjUHFs80.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-dependency)
 (create-svg (:width 600 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-class :fill-info 180 100
				  :attributes
				  ((:public :color)
				   (:public :opacity))
				  :operations
				  ((:public :fill-info :params (:etc))
				   (:public :check :params (:canvas :dict))
				   (:public :to-property-strings)))
	   (uml-class :canvas     (+ $1[right] 150) (- $1[middle] 50))
	   (uml-class :dictionary (+ $2[right] 150) (+ $2[middle] 50))
	   (uml-dependency :$3 :$2)
	   (uml-dependency :$4 :$2)))
;;END_SVG
#+End_SRC

#<end update:2020/03/23 11:15:16>
#<begin memo ID:7AkyrJh40Pn>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-diagram class canvas
ATTACH:7AkyrJh40Pn.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./7AkyrJh40Pn.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-dependency)
 (load-stencil :uml-note)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-class :canvas 200 100 :id :canvas
				  :attributes
				  ((:public :top)
				   (:public :bottom)
				   (:public :left)
				   (:public :right))
				  :operations
				  ((:public :canvas :params (:top :bottom :left :right))))))
;;END_SVG
#+END_SRC
#<end update:2020/03/23 11:02:13>
#<begin memo ID:7GZEUaGXifd>
-*-MODE:sh-*-
GROUP:
TAG:
MARK:none
TITLE:.exit
ATTACH:
TRACKING:0
EXECUTABLE:0
PRIVATE:0
BACKUP:1
echo "archiving data..."
backup ./cl-diagram.fist.archive
echo "good bye."
#<end update:2020/03/23 12:57:55 access:2020/03/24 19:27:04>
#<begin memo ID:8U7dblVP7AW>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class raw-svg
ATTACH:8U7dblVP7AW.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./8U7dblVP7AW.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-generalization)
 (create-svg (:width 400 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (uml-class :entity 200 50 :abstract t)
       (uml-class :raw-svg $1[center] (+ $1[middle] 150)
				  :attributes
				  ((:public :m-svgdata :property :readonly))
				  :operations
				  ((:public :raw-svg :params (:data :layer))
				   (keyword-info :entity)
				   (:public :check   :params (:canvas :dict))
				   (:public :draw    :params (:writer))))
       (uml-generalization :$1 :$2)))

;;END_SVG
#+END_SRC

#<end update:2020/02/21 11:45:48>
#<begin memo ID:8Xewwg6eGiF>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class uml-composition
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./not_yet_exist.svg]]

* source
#+BEGIN_SRC lisp
#+END_SRC

#<end update:2020/02/21 11:33:36>
#<begin memo ID:90AwiEhdKes>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class uml-dependency
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./not_yet_exist.svg]]

* source
#+BEGIN_SRC lisp
#+END_SRC

#<end update:2020/02/21 11:33:42>
#<begin memo ID:9c8GVWJpwLo>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class path
ATTACH:9c8GVWJpwLo.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./9c8GVWJpwLo.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-generalization)
 (create-svg (:width 400 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (uml-class :entity 200 50 :abstract t)
       (uml-class :path $1[center] (+ $1[middle] 200)
				  :attributes
				  ((:private :m-d)
				   (:private :m-class)
				   (:private :m-fill)
				   (:private :m-stroke))
				  :operations
				  ((:public :path :params (:d :etc))
				   (:public :set-d :params (:d))
				   (:private :check-and-fix-d-data :params (:etc))
				   (:private :format-d-data)
				   (keyword-info :properties)
				   (:public :property-class)
				   (keyword-info :entity)
				   (:public :check :params (:canvas :dict))
				   (:public :draw :params (:writer))))
       (uml-generalization :$1 :$2)))

;;END_SVG
#+END_SRC

#<end update:2020/02/21 11:41:30 access:2020/02/27 10:29:23>
#<begin memo ID:9IXx8gWRvjG>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-diagram class stroke-info
ATTACH:9IXx8gWRvjG.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./9IXx8gWRvjG.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-dependency)
 (create-svg (:width 600 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-class :stroke-info 180 100
				  :attributes
				  ((:public :color)
				   (:public :width)
				   (:public :opacity)
				   (:public :dasharray))
				  :operations
				  ((:public :stroke-info :params (:etc))
				   (:public :check :params (:canvas :dict))
				   (:public :to-property-strings)))
	   (uml-class :canvas     (+ $1[right] 150) (- $1[middle] 50))
	   (uml-class :dictionary (+ $2[right] 150) (+ $2[middle] 50))
	   (uml-dependency :$3 :$2)
	   (uml-dependency :$4 :$2)))
;;END_SVG
#+End_SRC

#<end update:2020/03/23 11:16:44>
#<begin memo ID:aavx0Z2BGWN>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class point
ATTACH:aavx0Z2BGWN.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./aavx0Z2BGWN.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (create-svg (:width 300 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-class :point 150 100 :id :point
				  :attributes
				  ((:public :m-x)
				   (:public :m-y))
				  :operations
				  ((:public :point)
				   (:public :point       :params (:pt))
				   (:public :point       :params ((:x :type :number) (:y :type :number)))
				   (:public :distance-to :params (:pt))
				   (:public :offset      :params (:x :y))))))

;;END_SVG
#+END_SRC

#<end update:2020/02/21 11:25:48 access:2020/03/23 11:20:35>
#<begin memo ID:anKkqdOGjc7>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class image
ATTACH:anKkqdOGjc7.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./anKkqdOGjc7.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-generalization)
 (create-svg (:width 400 :height 450 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (uml-class :shape 200 50 :abstract t)
       (uml-class :image $1[center] (+ $1[middle] 230)
				  :attributes
				  ((:private :m-center-x)
				   (:private :m-center-y)
				   (:private :m-filename)
				   (:private :m-width)
				   (:private :m-height)
				   (:private :m-label)
				   (:private :m-preseve-ratio))
				  :operations
				  ((:public :image :params (:x :y :filename :width :height :etc))
				   (:public :get-subcanvas)
				   (keyword-info :properties)
				   (:public :property-width)
				   (:public :property-height)
				   :etc
				   (keyword-info :entity)
				   (:public :check :params (:canvas :dict))
				   (:public :draw :params (:writer))
				   (keyword-info :shape)
				   (:public :is-composition)
				   (:public :get-cc-point :params (:x :y))))
       (uml-generalization :$1 :$2)))

;;END_SVG
#+END_SRC

#<end update:2020/02/21 11:45:11>
#<begin memo ID:aqY6z4ijn6E>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class link-info
ATTACH:aqY6z4ijn6E.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./aqY6z4ijn6E.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-interface)
 (load-stencil :uml-interface-request)
 (load-stencil :uml-dependency)
 (load-stencil :uml-note)
 (create-svg (:width 600 :height 350 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-class :link-info 170 150
				  :attributes
				  ((:private :m-url)
				   (:private :m-target))
				  :operations
				  ((:public :link-info  :params (:url :target))
				   (:public :check      :params (:canvas :dict))
				   (:public :begin-link :params (:writer))
				   (:public :end-link   :params (:writer))))
	   (uml-class     :canvas-data 500 $1[middle])
	   (uml-interface :svg-writer  $1[center] (- $2[top] 30))
	   (uml-dependency :$3 :$2)
	   (uml-interface-request :$4 :$2 :arrow t :line-style :TL)
	   (uml-note 200 300 "target must be in :replace,
:self, :parent, :top, :blank" :keyword :requirement :targets :$5)))

;;END_SVG
#+END_SRC

#<end update:2020/02/21 11:44:13 access:2020/02/21 11:51:18>
#<begin memo ID:asmL3cuPi87>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class uml-aggregation
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./not_yet_exist.svg]]

* source
#+BEGIN_SRC lisp
#+END_SRC

#<end update:2020/02/21 11:33:10>
#<begin memo ID:b8Wv4YkLo2i>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class uml-interface
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./not_yet_exist.svg]]

* source
#+BEGIN_SRC lisp
#+END_SRC

#<end update:2020/02/21 11:34:02>
#<begin memo ID:bxScvCXD2Yw>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class uml-usecase
ATTACH:bxScvCXD2Yw.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./bxScvCXD2Yw.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-generalization)
 (create-svg (:width 400 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (uml-class :group 200 50 :abstract t)
       (uml-class :uml-usecase $1[center] (+ $1[middle] 200)
				  :attributes
				  ((:private :m-text)
				   (:private :m-font)
				   (:private :m-fill)
				   (:private :m-stroke))
				  :operations
				  ((:public :uml-usecase :params (:x :y :etc))
				   (:public :get-cc-point :params (:x :y))
				   (keyword-info :entity)
				   (:public :check :params (:canvas :dict))
				   (keyword-info :group)
				   (:public :draw-group :params (:writer))))
       (uml-generalization :$1 :$2)))
;;END_SVG
#+END_SRC
#<end update:2020/02/21 11:43:59>
#<begin memo ID:c0isnUf2oPi>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class uml-state-history
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./not_yet_exist.svg]]

* source
#+BEGIN_SRC lisp
#+END_SRC

#<end update:2020/02/21 11:34:43>
#<begin memo ID:cg0iGdTVBzv>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class endmark-info
ATTACH:cg0iGdTVBzv.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./cg0iGdTVBzv.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-association)
 (create-svg (:width 600 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-class :line 100 200)
       (uml-class :endmark-info 400 $1[middle]
				  :attributes
				  ((:public :m-type   :property :readonly)
				   (:public :m-size   :property :readonly)
				   (:public :m-class  :property :readonly)
				   (:public :m-fill   :property :readonly)
				   (:public :m-stroke :property :readonly))
				  :operations
				  ((:public :endmark-info :params (:etc))
				   (:public :check :params (:canvas :dict))
				   (:public :draw  :params (:points :class :stroke :writer))
				   (:private :decide-size)
				   (:private :draw-endmark-arrow    :params (:etc))
				   (:private :draw-endmark-triangle :params (:etc))
				   (:private :draw-endmark-diamond  :params (:etc))
				   (:private :draw-endmark-circle   :params (:etc))))
       (uml-association :$2 :$1 :arrows 1 :mult2 '(0 2))))

;;END_SVG
#+END_SRC
#<end update:2020/02/21 11:43:51>
#<begin memo ID:cvVLeQtckHr>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class label-info
ATTACH:cvVLeQtckHr.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./cvVLeQtckHr.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-dependency)
 (create-svg (:width 600 :height 300 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-class :label-info 170 150
				  :attributes
				  ((:private :m-name)
				   (:private :m-position)
				   (:private :m-font)
				   (:private :m-offset))
				  :operations
				  ((:public :label-info :params (:name :position))
				   (:public :check :params (:canvas :dict))
				   (:public :draw-beside-shape :params (:shp :writer))
				   (:private :get-location-info)))
	   (uml-class :canvas-data 500 $1[top])
	   (uml-class :shape 500 $2[middle] :abstract t)
	   (uml-class :svg-writer 500 $3[bottom] :keyword :interface)
	   (uml-dependency :$4 :$3)
	   (uml-dependency :$5 :$3)
	   (uml-dependency :$6 :$3)))

;;END_SVG
#+END_SRC

#<end update:2020/02/21 11:43:40>
#<begin memo ID:d4MWhFVt7Ru>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class uml-association
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./not_yet_exist.svg]]

* source
#+BEGIN_SRC lisp
#+END_SRC

#<end update:2020/02/21 11:33:21>
#<begin memo ID:doEay0smoGv>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:クラス情報 - 俯瞰図
ATTACH:doEay0smoGv.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./doEay0smoGv.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-generalization)
 (load-stencil :uml-association)
 (load-stencil :uml-dependency)
 (create-svg (:width 600 :height 450 :encoding :utf8)
     (grid)
     (let ((*default-fill*        :white)
           (*default-stroke*      (stroke :color :black :width 1))
           (*default-font*        (font :family "Courier New" :size 11 :width-spice 0.85))
           (*uml-keyword-font* (font :family "Courier New" :size  9 :width-spice 0.85)))
	   (macrolet ((cls (id &rest args) `(uml-class ,id ,@args :id ,id))
				  (inh (&rest args)    `(uml-generalization ,@args)))
		 (cls :entity 300 50 :id :entity :abstract t)
		 (let ((x entity[center])
			   (y entity[middle]))
		   (cls :raw-svg   (- x 150) (+ y  40))
		   (cls :css       (+ x 150) (+ y  40))
		   (cls :polygon   (- x 130) (+ y  90))
		   (cls :text      (+ x 130) (+ y  90))
		   (cls :line      (- x  60) (+ y 140))
		   (cls :connector (- x 200) (+ y 190))
		   (cls :path      (+ x  60) (+ y 140))
		   (cls :arc       (+ x 200) (+ y 190))
		   (cls :shape     (+ x   0) (+ y 190) :abstract t)
		   (inh :raw-svg   :entity)
		   (inh :css       :entity)
		   (inh :polygon   :entity)
		   (inh :text      :entity)
		   (inh :line      :entity)
		   (inh :path      :entity)
		   (inh :shape     :entity)
		   (inh :connector :line)
		   (inh :arc       :path)
		   (let ((x shape[center])
				 (y shape[middle]))
			 (cls :circle    (- x 180) (+ y  60))
			 (cls :ellipse   (+ x 180) (+ y  60))
			 (cls :group     (- x 150) (+ y 110) :abstract t)
			 (cls :image     (+ x 150) (+ y 110))
			 (cls :paragraph (- x 100) (+ y 160))
			 (cls :rectangle (+ x 100) (+ y 160))
			 (inh :circle    :shape)
			 (inh :ellipse   :shape)
			 (inh :group     :shape)
			 (inh :image     :shape)
			 (inh :paragraph :shape)
			 (inh :rectangle :shape))))))
;;END_SVG
#+END_SRC
#<end update:2020/02/21 11:37:24 access:2020/03/23 11:32:30>
#<begin memo ID:dssDdA0Tch2>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class uml-note
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./not_yet_exist.svg]]

* source
#+BEGIN_SRC lisp
#+END_SRC

#<end update:2020/02/21 11:34:09>
#<begin memo ID:dVDKmkeM2PZ>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class entity
ATTACH:dVDKmkeM2PZ.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./dVDKmkeM2PZ.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-association)
 (load-stencil :uml-dependency)
 (create-svg (:width 600 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*        :white)
           (*default-stroke*      (stroke :color :black :width 1))
           (*default-font*        (font :family "Courier New" :size 11 :width-spice 0.85))
           (*uml-keyword-font* (font :family "Courier New" :size  9 :width-spice 0.85)))
       (uml-class :entity 200 150
				  :abstract t
				  :attributes
				  ((:public :m-canvas)
				   (:public :m-id    :property :readonly)
				   (:public :m-layer :property :readonly))
				  :operations
				  ((:public :entity         :params (:layer :id))
				   (:public :check          :params (:canvas :dict))
				   (:public :write-header   :params (:writer))
				   (:public :begin-id-group :params (:writer))
				   (:public :end-id-group   :params (:writer))
				   (:public :draw           :params (:writer) :abstract t)))
       (uml-class :canvas-data (+ $1[right] 150) $1[middle])
       (uml-class :svg-writer  $1[center] (+ $2[bottom] 50) :keyword :interface)
       (uml-association :$3 :$2 :arrows 1)
       (uml-dependency  :$4 :$2 :line-style :BL)))

;;END_SVG
#+END_SRC
#<end update:2020/02/21 11:43:29>
#<begin memo ID:e1khE5gayAy>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class paragraph
ATTACH:e1khE5gayAy.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./e1khE5gayAy.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-generalization)
 (create-svg (:width 400 :height 450 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (uml-class :shape 200 50 :abstract t)
       (uml-class :paragraph $1[center] (+ $1[middle] 230)
				  :attributes
				  ((:public :m-x)
				   (:public :m-y)
				   (:public :m-text   :property :readonly)
				   (:public :m-align  :property :readonly)
				   (:public :m-valign :property :readonly)
				   (:public :m-width  :property :readonly)
				   (:public :m-height :property :readonly)
				   (:private :m-font))
				  :operations
				  ((:public :paragraph :params (:x :y :text :etc))
				   (:public :get-subcanvas)
				   (:private :caluculate-shapesize)
				   (keyword-info :properties)
				   (:public :property-width)
				   (:public :property-height)
				   :etc
				   (keyword-info :entity)
				   (:public :check :params (:canvas :dict))
				   (:public :draw :params (:writer))
				   (keyword-info :shape)
				   (:public :is-composition)
				   (:public :get-cc-point :params (:x :y))))
       (uml-generalization :$1 :$2)))

;;END_SVG
#+END_SRC

#<end update:2020/02/21 11:43:13>
#<begin memo ID:eoPS3MRF1gI>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-diagram のサンプル（目標はマニュアル化）
ATTACH:eoPS3MRF1gI.arc.01.svg,eoPS3MRF1gI.circle.01.svg,eoPS3MRF1gI.connector.01.svg,eoPS3MRF1gI.css.01.svg,eoPS3MRF1gI.ellipse.01.svg,eoPS3MRF1gI.grid.01.svg,eoPS3MRF1gI.grid.02.svg,eoPS3MRF1gI.image.01.png,eoPS3MRF1gI.image.01.svg,eoPS3MRF1gI.line.01.svg,eoPS3MRF1gI.paragraph.01.svg,eoPS3MRF1gI.paragraph.02.svg,eoPS3MRF1gI.path.01.svg,eoPS3MRF1gI.polygon.01.svg,eoPS3MRF1gI.raw-svg.01.svg,eoPS3MRF1gI.rectangle.01.svg,eoPS3MRF1gI.textbox.01.svg,eoPS3MRF1gI.uml-aggregation.01.svg,eoPS3MRF1gI.uml-association.01.svg,eoPS3MRF1gI.uml-class.svg,eoPS3MRF1gI.uml-component.01.svg,eoPS3MRF1gI.uml-component.02.svg,eoPS3MRF1gI.uml-composition.01.svg,eoPS3MRF1gI.uml-dependency.01.svg,eoPS3MRF1gI.uml-generalization.01.svg,eoPS3MRF1gI.uml-implementation.01.svg,eoPS3MRF1gI.uml-interface.svg,eoPS3MRF1gI.uml-node.01.svg,eoPS3MRF1gI.uml-note.01.svg,eoPS3MRF1gI.uml-package.01.svg,eoPS3MRF1gI.uml-package.02.svg,eoPS3MRF1gI.uml-state.01.svg,eoPS3MRF1gI.uml-state.02.svg,eoPS3MRF1gI.uml-state.03.svg,eoPS3MRF1gI.uml-usecase.01.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

* ToDo [1/6]
** TODO viewBox

　従来 svg の width / height として指定していた値を viewBox='(0 0 width height)'
とすると、以下のようにして小さな領域に縮小して押し込めることができる（逆に拡大も
できる）。これを、cl-diagram に取り込みたい。

#+BEGIN_SRC xml
<?xml version='1.0' encoding='utf-8' ?>
<svg xmlns='http://www.w3.org/2000/svg'
	 xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' baseProfile='full'
	 xml:space='default' width='200' height='100' viewBox='(0 0 400 200)'>
    <!-- xxx -->
</svg>
#+END_SRC

** TODO css と stroke / fill 

　css でスタイルを作成し、後続の要素でそれを利用しても、stroke / fill などのデフォ
ルト値が指定されてしまう。実害はないようだが、サイズが肥大化する。

** TODO css の改善

　現在、ベタにテキストで指定させる CSS だが、stroke / fill / font などを使って構
成的に作る方が良いのでは。もっと言うなら、cl-diagram 全体をスタイルシートを使用した
方式に移行するべきな気がする。

　⇒ viewer によっては、CSS を無視するっぽいのでそうもいかないか‥‥‥。

** DONE stroke-opacity と fill-opacity
** TODO stroke-linecap

　line / polyline でしか使えないとするなら、to-property-strings にパラメータを
渡す必要があるかもしれない。

** TODO grid の改善

　※一定間隔でガイドとなるラインを異なる色で描画する機能を grid に追加したい。
イメージは、[[sample of grid]] を参照。

* primitive elements [6/13]
** DONE arc

　円弧を描画します。

#+BEGIN_SRC lisp
  (arc x y radius degree1 degree2 &key class stroke layer id)
#+END_SRC

	* x			: 円弧の中心の x 座標を数値で指定します
	* y			: 円弧の中心の y 座標を数値で指定します
	* radius	: 円弧の半径を数値で指定します
	* degree1	: 中心点から見た開始点の角度を指定します。0 度は右方向で、円弧はそこから時計回りに描画されます。
	* degree2	: 中心点から見た終了点の角度を指定します。0 度は右方向です。
	* [[class parameter][class]]
	* [[stroke parameter][stroke]]
	* [[layer parameter][layer]]
	* [[id parameter][id]]

*** sample

[[./eoPS3MRF1gI.arc.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG arc.01
 (load-stencil :grid)
 (create-svg (:width 200 :height 100 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1))
           (cx 100) (cy 50)
		   (arc-st  (stroke :color :black :width 8 :opacity 0.3))
		   (line-st (stroke :color :gray :dasharray '(4 4))))
		(line `(,cx  0 ,cx 100) :stroke line-st)
		(line `( 0 ,cy 200 ,cy) :stroke line-st)	
		(arc cx cy 40  30 300 :stroke (stroke :color :blue :base arc-st))
		(arc cx cy 40 300  30 :stroke (stroke :color  :red :base arc-st))))
;;END_SVG
#+END_SRC

** DONE circle

　正円を描画します。円弧を描画したい場合は [[arc]] を、楕円を描画したい場合は
[[ellipse]] を参照してください。

#+BEGIN_SRC lisp
  (circle x y radius &key class fill stroke link layer id contents)
#+END_SRC

	* x			: 円の中心の x 座標を数値で指定します
	* y			: 円の中心の y 座標を数値で指定します
	* radius	: 円の半径を数値で指定します
	* [[class parameter][class]]
	* [[fill parameter][fill]]
	* [[stroke parameter][stroke]]
	* [[link parameter][link]]
	* [[layer parameter][layer]]
	* [[id parameter][id]]
	* [[contents parameter][contents]]

*** sample

[[./eoPS3MRF1gI.circle.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG circle.01
 (load-stencil :grid)
 (create-svg (:width 200 :height 100 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1))
		   (line-stroke (stroke :color :red :dasharray '(4 4))))
		(line '(50  0  50 200) :stroke line-stroke)
		(line '( 0 40 200  40) :stroke line-stroke)	
		(circle  50 40 30 :fill :none  :stroke (stroke :color :blue))
		(circle 150 70 20 :fill :white :stroke (stroke :color :black)
				:contents ((circle  27 27 10 :fill :pink :stroke (stroke :color :red))))))
;;END_SVG
#+END_SRC

** DONE connector

　オブジェクト間を接続する線を描画します。座標指定で線を描画したい場合は [[line]] を
使用してください。

#+BEGIN_SRC lisp
  (connector from to &key style class end1 end2 stroke layer id)
#+END_SRC

	* from		: 始点の接続対象の [[id parameter][id]] を指定します
	* to		: 終点の接続対象の [[id parameter][id]] を指定します
	* style		: 接続線のスタイルを指定します（[[line-style の詳細][後述]]）
	* [[class parameter][class]]		:
	* [[end parameter][end1]]		: 始点のマークを指定します
	* [[end parameter][end2]]		: 終点のマークを指定します
	* [[stroke parameter][stroke]]	:
	* [[layer parameter][layer]]		:
	* [[id parameter][id]]		:

*** line-style の詳細

　線のスタイルを、:CC または以下の正規表現にマッチするキーワードシンボルで指定し
ます。省略した場合のデフォルトは :CC で、これは中心点同士を結んだイメージで折れ
目無しの直線描画します。

	* :[TLBR][123]?[TLBR][123]?

　上記において、T,L,B,R はそれぞれ Top, Left, Bottom, Right を意味し、
数値部分は上下左右の辺を４等分する３点を左または上から順番に番号付けした位置を
意味します。つまり、以下のようになります。

#+BEGIN_EXAMPLE

      T1 T2 T3
   |--x--x--x--|
   |           |
L1 x           x R1
   |           |
L2 x           x R2
   |           |
L3 x           x R3
   |           |
   |--x--x--x--|
      B1 B2 B3

#+END_EXAMPLE

　数字部分は省略することができ、その場合は暗黙に 2 が指定されたことになります。
つまり、:TT は :T2T2 を意味し、これは「上部中央同士の接続」をします。:CC 以外の
指定では、接続対象の位置関係を考慮し、必要に応じて折れ曲がりと回り込みを行ないま
す。しかし、接続対象でない第三者的なオブジェクトの位置までは考慮しません。

*** sample

[[./eoPS3MRF1gI.connector.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG connector.01
 (load-stencil :grid)
 (create-svg (:width 300 :height 200 :encoding :utf8)
     (grid :stroke (stroke :color :gray :width 0.2))
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle  50  40  80  40 :fill :lightgray :id :rect1)
       (rectangle  90 120  50  50 :fill :lightgray :id :rect2)
       (rectangle 240 110 100 100 :fill :lightgray :id :rect3)
       (text 50 85 ":cc")
       (connector :rect1 :rect2 :line-style :CC)
       (text 140 25 ":T3T1")
       (connector :rect2 :rect3 :line-style :T3T1)
       (text 130 80 ":R1L1")
       (connector :rect2 :rect3 :line-style :R1L1)
       (text 130 130 ":R3B1")
       (connector :rect2 :rect3 :line-style :R3B1)))
;;END_SVG
#+END_SRC

** TODO css

#+BEGIN_SRC lisp
  (css styles &key layer)
#+END_SRC

*** sample

[[./eoPS3MRF1gI.css.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG css.01
(load-stencil :grid)
(create-svg (:width 200 :height 120 :encoding :utf8)
	(css #>|
.border       { fill:none;    stroke:blue;    stroke-width:2 }
.connect      { fill:none;    stroke:#888888; stroke-width:1 }
.samplepath   { fill:none;    stroke:red;     stroke-width:4 }
.EndPoint     { fill:none;    stroke:#888888; stroke-width:2 }
.CtlPoint     { fill:#888888; stroke:none                    }
.AutoCtlPoint { fill:none;    stroke:blue;    stroke-width:4 }
.Label        { font-size:22; font-family:Verdana }|
)
	(grid)
	(rectangle 50 40 100 80 :class "border")
	(line '(20 40 20 20) :class :connect)
	(line '(50 20 50 40) :class :connect)
	(line '(50 40 50 60) :class :connect)
	(line '(80 60 80 40) :class :connect)
	(path `(,(move-to 20 40)
			,(3d-curve-to 20 20 50 20 50 40)
			,(3d-curve-to 80 60 80 40)) :class :samplepath)
)
;;END_SVG
#+END_SRC

** DONE ellipse

　楕円を描画します。円弧を描画したい場合は [[arc]] を、正円を描画したい場合は
[[circle]] を参照してください。

#+BEGIN_SRC lisp
  (ellipse x y rx ry &key class fill stroke link layer id contents)
#+END_SRC

	* x			: 楕円の中心の x 座標を数値で指定します
	* y			: 楕円の中心の y 座標を数値で指定します
	* rx		: 楕円の水平方向の半径を数値で指定します
	* ry		: 楕円の垂直方向の半径を数値で指定します
	* [[class parameter][class]]
	* [[fill parameter][fill]]
	* [[stroke parameter][stroke]]
	* [[link parameter][link]]
	* [[layer parameter][layer]]
	* [[id parameter][id]]
	* [[contents parameter][contents]]

*** sample

[[./eoPS3MRF1gI.ellipse.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG ellipse.01
 (load-stencil :grid)
 (create-svg (:width 200 :height 100 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1))
		   (line-stroke (stroke :color :red :dasharray '(4 4))))
		(line '(50  0  50 200) :stroke line-stroke)
		(line '( 0 40 200  40) :stroke line-stroke)	
		(ellipse  50 40 30 20 :fill :none  :stroke (stroke :color :blue))
		(ellipse 150 70 15 25 :fill :white :stroke (stroke :color :black)
				 :contents ((ellipse 18 35 10 7 :fill :pink :stroke (stroke :color :red))))))
;;END_SVG
#+END_SRC

** TODO image

　別の画像を埋め込みます。

#+BEGIN_SRC lisp
  (image x y filename
        &key width height label class link layer id contents)
#+END_SRC

	* x			: 中心の x 座標を数値で指定します
	* y			: 中心の y 座標を数値で指定します
	* filename	: 
	* width		: 
	* height	: 
	* height	: 
	* [[label parameter][label]]
	* [[class parameter][class]]
	* [[link parameter][link]]
	* [[layer parameter][layer]]
	* [[id parameter][id]]
	* [[contents parameter][contents]]

*** sample

[[./eoPS3MRF1gI.image.01.svg]]

TODO : svggen スクリプトは画像埋め込みに対応していないので、今は対象外にしている

#+BEGIN_SRC lisp
;;;;BEGIN_SVG image.01
 (load-stencil :grid)
 (create-svg (:width 300 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
		(image 150 100 "./eoPS3MRF1gI.image.01.png"
				:label (label "this is label" :below))))
;;;;END_SVG
#+END_SRC

** DONE line

　座標を指定して線を描画します。オブジェクトを指定して接続をしたい場合は
[[connector]] を使用してください。

#+BEGIN_SRC lisp
  (line points &key class stroke end1 end2 layer id)
#+END_SRC

	* points	: 線を構成する座標の羅列を (x1 y1 x2 y2 ...) の要領でリストで
				  指定します。
	* [[class parameter][class]]		: 
	* [[stroke parameter][stroke]]	: 
	* [[end parameter][end1]]		: 始点のマークを指定します
	* [[end parameter][end2]]		: 終点のマークを指定します
	* [[layer parameter][layer]]		: 
	* [[id parameter][id]]		: 

*** sample

[[./eoPS3MRF1gI.line.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG line.01
 (load-stencil :grid)
 (create-svg (:width 120 :height 90 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
	   ;; simple
       (line '(20 20 70 20 70 40 100 40) :end1 :diamond :end2 :rect)
	   ;; stroke
       (let ((stroke (stroke :color :red :width 1 :dasharray '(2 2))))
         (line '(20 50 50 50 50 70 100 70)
               :stroke stroke
               :end1 (endmark :arrow :size :small :stroke stroke)))))
;;END_SVG
#+END_SRC

** DONE paragraph

　テキスト段落を描画します。

#+BEGIN_SRC lisp
  (paragraph x y text &key align valign class font link layer id)
#+END_SRC

	* x			: 基準位置の x 座標を指定します
	* y			: 基準位置の y 座標を指定します
	* text		: 表示するテキストを指定します。行区切りは改行コードを用いてください。
	* [[align parameter][align]]		: 
	* [[valign parameter][valign]]	: 
	* [[class parameter][class]]		: 
	* [[font parameter][font]]		: 
	* [[link parameter][link]]		: 
	* [[layer parameter][layer]]		: 
	* [[id parameter][id]]		: 

*** sample

[[./eoPS3MRF1gI.paragraph.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG paragraph.01
(load-stencil :grid)
(create-svg (:width 400 :height 200 :encoding :utf8)
	(layer :background)
	(layer :shapes)
	(layer :text)
	(css #>|
.label { font-size:16; font-family:Times New Roman }|
			:layer :background)
	(grid :layer :background)
	(let ((base-x 180)
		  (base-y  80)
		  (line-stroke (stroke :color :blue :dasharray '(2 2))))
	  (paragraph base-x base-y #>|
This is a contents of text.
multi line is enabled.
this is more line. 日本語も。
and so on.|
			:align :center :valign :center
			;:class :label
			:font (font :family "Courier New,メイリオ" 
						:decoration :underline :size 12
						:color :gray :line-spacing 6 :width-spice 0.85)
			:layer :text :id :txt)
	  (rectangle txt[center] txt[middle] (+ 20 txt[width]) (+ 20 txt[height])
				:stroke (stroke :color :red) :fill :white :layer :shapes)
	  (line `(,base-x 0 ,base-x 200) :stroke line-stroke)
	  (line `(0 ,base-y 400 ,base-y) :stroke line-stroke)))
;;END_SVG
#+END_SRC


[[./eoPS3MRF1gI.paragraph.02.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG paragraph.02
(load-stencil :grid)
(create-svg (:width 400 :height 200 :encoding :utf8)
	(layer :background)
	(layer :shapes)
	(layer :text)
	(grid :layer :background)
	(let ((x1  50) (y1  30)
		  (x2 200) (y2 100)
		  (x3 350) (y3 170)
		  (line-stroke (stroke :color :blue :dasharray '(2 2)))
		  (font1 (font  :family "Courier New,メイリオ" 
						:decoration :underline :size 12
						:color :gray :line-spacing 6 :width-spice 0.75)))
	  (paragraph x1 y1 #>|
:align  :left
:valign :top| :align :left :valign :top :font font1 :layer :text :id :txt1)
	  (rectangle txt1[center] txt1[middle] (+ 20 txt1[width]) (+ 20 txt1[height])
				:stroke (stroke :color :red) :fill :white :layer :shapes)
	  (line `(,x1 0 ,x1 200) :stroke line-stroke)
	  (line `(0 ,y1 400 ,y1) :stroke line-stroke)
	  (paragraph x2 y2 #>|
:align  :center
:valign :center| :align :center :valign :center :font font1 :layer :text :id :txt2)
	  (rectangle txt2[center] txt2[middle] (+ 20 txt2[width]) (+ 20 txt2[height])
				:stroke (stroke :color :red) :fill :white :layer :shapes)
	  (line `(,x2 0 ,x2 200) :stroke line-stroke)
	  (line `(0 ,y2 400 ,y2) :stroke line-stroke)
	  (paragraph x3 y3 #>|
:align  :right
:valign :bottom| :align :right :valign :bottom :font font1 :layer :text :id :txt3)
	  (rectangle txt3[center] txt3[middle] (+ 20 txt3[width]) (+ 20 txt3[height])
				:stroke (stroke :color :red) :fill :white :layer :shapes)
	  (line `(,x3 0 ,x3 200) :stroke line-stroke)
	  (line `(0 ,y3 400 ,y3) :stroke line-stroke)))
;;END_SVG
#+END_SRC

** TODO path

#+BEGIN_SRC lisp
  (path data &key class fill stroke layer id)
#+END_SRC

	* d			: 
	* [[class parameter][class]]		: 
	* [[fill parameter][fill]]		: 
	* [[stroke parameter][stroke]]	: 
	* [[layer parameter][layer]]		: 
	* [[id parameter][id]]		: 

*** TODO xxx
**** move-to
**** close-path
**** line-to
**** h-line-to
**** v-line-to
**** arc-to
**** 2d-curve-to
**** 3d-curve-to
*** sample

[[./eoPS3MRF1gI.path.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG path.01
(load-stencil :grid)
(create-svg (:width 150 :height 100 :encoding :utf8)
	(grid)
	(let ((sx  30) (sy  60)
		  (x1  30) (y1  40)
		  (x2 130) (y2  20)
		  (ex 120) (ey  60)
		  (st1 (stroke :color  :red :width 3 :dasharray '(3 3)))
		  (st2 (stroke :color :blue :width 1)))
	  (line `(,x1 ,y1 ,sx ,sy) :stroke st2)
	  (line `(,x2 ,y2 ,ex ,ey) :stroke st2)
	  (circle  x1 y1 3 :fill :blue :stroke st2)
	  (circle  x2 y2 3 :fill :blue :stroke st2)
	  (path `(,(move-to sx sy)
			  ,(3d-curve-to x1 y1 x2 y2 ex ey)) :stroke st1)))
;;END_SVG
#+END_SRC

** TODO polygon

#+BEGIN_SRC lisp
  (polygon points &key class fill stroke link layer id)
#+END_SRC

*** sample

[[./eoPS3MRF1gI.polygon.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG polygon.01
 (load-stencil :grid)
 (create-svg (:width 400 :height 200 :encoding :utf8)
	(grid)
	(polygon '(100    37.5 114.5 80.5 159.5  80.5 123.5 107.5
               136.5 150.5 100   125   63.5 150.5  76.5 107.5
                40.5  80.5  85.5 80.5)
			 :id :polygon-1 :fill :gray
			 :stroke (stroke :color :brown :width 5)
			 :link (link "http://www.google.co.jp/"))
	(polygon '(300  37.5 354  68.75 354 131.25
               300 162.5 246 131.3  246  68.75)
			 :fill "#CCAADD"
			 :stroke (stroke :color :black :width 5)))
;;END_SVG
#+END_SRC

** TODO raw-svg

　生の SVG 要素を記述します。

#+BEGIN_SRC lisp
  (raw-svg svgdata &key (layer nil))
#+END_SRC

*** sample

[[./eoPS3MRF1gI.raw-svg.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG raw-svg.01
 (load-stencil :grid)
 (create-svg (:width 250 :height 100 :encoding :utf8)
	(layer :background :inline)
	(layer :shapes     :inline)
	(grid :layer :background)
	(raw-svg "<!-- path -->
<text x='125.00' y='45.00' fill='blue' text-decoration='underline' font-style='italic' font-weight='bold' font-size='14pt' text-anchor='middle'>This is a contents of text.</text>
<text x='125.00' y='65.00' fill='blue' text-decoration='underline' font-style='italic' font-weight='bold' font-size='14pt' text-anchor='middle'>multi line is enabled.</text>" :layer :shapes))
;;END_SVG
#+END_SRC

** TODO rectangle

　矩形を描画します。

#+BEGIN_SRC lisp
  (rectangle x y width height
             &key rx ry class fill stroke link layer id contents)
#+END_SRC

*** sample

[[./eoPS3MRF1gI.rectangle.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG rectangle.01
 (load-stencil :grid)
 (create-svg (:width 300 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
	   ;; fill and round
       (rectangle 60 40 80 40 :rx 10 :ry 10 :fill :lightgray :id :rect1)
	   ;; stroke
       (rectangle 100 120 50 50
                  :stroke (stroke :color :blue :width 3 :dasharray '(4 4)))
	   ;; contents
       (rectangle 230 100 100 100 :fill :white :id :rect2
                  :contents ((rectangle 30 30 20 20 :fill :pink)
				  			 (rectangle 70 70 20 20 :fill :skyblue)))))
;;END_SVG
#+END_SRC

** TODO text

　単一行のテキストを描画します。

#+BEGIN_SRC lisp
  (text x y text &key align class font link layer id)
#+END_SRC

	* x			: 
	* y			: 
	* text		: 
	* [[align parameter][align]]		: 
	* [[class parameter][class]]		: 
	* [[font parameter][font]]		: 
	* [[link parameter][link]]		: 
	* [[layer parameter][layer]]		: 
	* [[id parameter][id]]		: 

*** TODO sample

* parameters [1/13]
  
|----------+-----+--------+-----------+-----+---------+-------+------+-----------+------+---------+---------+-----------+------|
|          | [[arc]] | [[circle]] | [[connector]] | [[css]] | [[ellipse]] | [[image]] | [[line]] | [[paragraph]] | [[path]] | [[polygon]] | [[raw-svg]] | [[rectangle]] | [[text]] |
|----------+-----+--------+-----------+-----+---------+-------+------+-----------+------+---------+---------+-----------+------|
| [[align parameter][align]]    |     |        |           |     |         |       |      | o         |      |         |         |           | o    |
| [[class parameter][class]]    | o   | o      | o         |     | o       | o     | o    | o         | o    | o       |         | o         | o    |
| [[contents parameter][contents]] |     | o      |           |     | o       | o     |      |           |      |         |         | o         |      |
| [[end paraemter][end1]]     |     |        | o         |     |         |       | o    |           |      |         |         |           |      |
| [[end paraemter][end2]]     |     |        | o         |     |         |       | o    |           |      |         |         |           |      |
| [[fill parameter][fill]]     |     | o      |           |     | o       |       |      |           | o    | o       |         | o         |      |
| [[font parameter][font]]     |     |        |           |     |         |       |      | o         |      |         |         |           | o    |
| [[id parameter][id]]       | o   | o      | o         |     | o       | o     | o    | o         | o    | o       |         | o         | o    |
| [[label parameter][label]]    |     |        |           |     |         | o     |      |           |      |         |         |           |      |
| [[layer parameter][layer]]    | o   | o      | o         | o   | o       | o     | o    | o         | o    | o       | o       | o         | o    |
| [[style parameter][style]]    |     |        | o         |     |         |       |      |           |      |         |         |           |      |
| [[link parameter][link]]     |     | o      |           |     | o       | o     |      | o         |      | o       |         | o         | o    |
| [[stroke parameter][stroke]]   | o   | o      | o         |     | o       |       | o    |           | o    | o       |         | o         |      |
| [[valign parameter][valign]]   |     |        |           |     |         |       |      | o         |      |         |         |           |      |
|----------+-----+--------+-----------+-----+---------+-------+------+-----------+------+---------+---------+-----------+------|

** DONE align parameter

　テキストのアライメント、以下の3種類のキーワードシンボルのいずれかで指定します。

	* :left
	* :center
	* :right

　指定されたキーワードシンボルは、SVG の text 要素における text-anchor で
それぞれ start, middle, end として指定されます。省略された場合はデフォルト値とし
て以下が使用されます。

	* [[text]]      : [[default-text-align][*default-text-align*]]
	* [[paragraph]] : [[default-paragraph-align][*default-paragraph-align*]]

** TODO class parameter

	* nil
	* keyword
	* string

** TODO contents parameter
** TODO end parameter

　[[line]]、[[connector]] などで描画する線の端点のマークを指定します。

#+BEGIN_SRC lisp
  (endmark type &key size class fill stroke)
#+END_SRC

	* type : :arrow|:triangle|:diamond|:circle|:rect  or function
	* size : :small|:midium|:large|:xlarge            or number
	* [[class parameter][class]]
	* [[fill parameter][fill]]
	* [[stroke parameter][stroke]]

*** type

　※ type にカスタム描画関数を指定する場合は、endmark-info.lisp の
__draw-endmark-* 関数などを参考にすること。（できればここに解説を書きたい）

*** size

　終端マークのサイズを指定します。キーワードで指定した場合に使用される値は以下の
通りです。また、省略した場合のデフォルト値は :midium です。

 |---------+-------|
 | keyword | value |
 |---------+-------|
 | :small  |  10.0 |
 | :midium |  15.0 |
 | :large  |  20.0 |
 | :xlarge |  30.0 |
 |---------+-------|

** TODO fill parameter

　塗り潰しを指定します。省略した場合、[[default-fill][*default-fill*]] の値が使用されます。

　もっとも簡単な指定方法は、色名をキーワードシンボルで指定することです。以下の例
では矩形を描画して青色で塗り潰しています。色名のキーワードの他に、"#FA80FF" の
ような RGB 指定も可能です。また、:none を指定することで「塗り潰し無し」になり
ます。

#+BEGIN_SRC lisp
  (rectangle ... :fill :blue)
#+END_SRC

　上記は、以下の省略形です。

#+BEGIN_SRC lisp
  (rectangle ... :fill '(:color :blue))
#+END_SRC

　上記のように色だけを指定するのであればリストにする意味はありませんが、透明度も
一緒に指定する場合はリストである必要があります。以下の例では、透明度を指定してい
ます。

#+BEGIN_SRC lisp
  (rectangle ... :fill '(:color :blue :opacity 0.3))
#+END_SRC

　さらに、上記は以下の省略形です。

#+BEGIN_SRC lisp
  (rectangle ... :fill (make-fill :color :blue :opacity 0.3))
#+END_SRC

　:fill の指定において make-fill 関数を直接使う必要はありませんが、複数の要素で
同じ指定を共有したい場合は以下のように書けます。

#+BEGIN_SRC lisp
  (let ((fl (make-fill :color :blue :opacity 0.3)))
    (rectangle ... :fill fl)
    (circle    ... :fill fl)
    (ellipse   ... :fill fl))
#+END_SRC

　さらに、:fill 指定を省略した場合はデフォルト値としてダイナミック変数 
[[default-fill][*default-fill*]] が使用されるため、上記は以下のように書いても同じです。

#+BEGIN_SRC lisp
  (let ((*default-fill* (make-fill :color :blue :opacity 0.3)))
    (rectangle ...)
    (circle    ...)
    (ellipse   ...))
#+END_SRC

　make-fill は関数です。キーワードパラメータ :color および :opacity は、それぞれ
省略時のデフォルト値として以下のダイナミック変数に依存しています。

	* [[default-fill-color][*default-fill-color*]]
	* [[default-fill-opacity][*default-fill-opacity*]]

*** fill 指定が関係するダイナミック変数

	* [[default-fill][*default-fill*]]
	* [[default-fill-color][*default-fill-color*]]
	* [[default-fill-opacity][*default-fill-opacity*]]

** TODO font parameter

#+BEGIN_SRC lisp
(font &key (family nil) (size nil) (color nil)
           (style nil) (decoration nil)
           (weight nil) width-spice line-spacing base)
#+END_SRC

	* family
	* size
	* color
	* style
	* decoration
	* weight
	* width-spice
	* line-spacing
	* base

** TODO id parameter
** TODO label parameter

#+BEGIN_SRC lisp
  (label name &optional position)
#+END_SRC

  position := :above|:below|:left|:right

	* [[default-label-position][*default-label-position*]]

** TODO layer parameter
** TODO style parameter

  style := :CC
        := :[TBLR][123]?[TBLR][123]?

** TODO link parameter

#+BEGIN_SRC lisp
  (link url &optional (target nil))
#+END_SRC

** TODO stroke parameter

　線の描画方法を指定します。省略した場合、[[default-fill][*default-stroke*]] の値が使用されます。

　もっとも簡単な指定方法は、色名をキーワードシンボルで指定することです。以下の例
では線を茶色の線を描画しています。色名のキーワードの他に、"#FA80FF" のような RGB
指定も可能です。また、:none を指定することで「線を描画しない」になります。

#+BEGIN_SRC lisp
  (line ... :stroke :brown)
#+END_SRC

　また、数値を指定した場合は線の太さを指定したことになります。この場合、線の色は
後述するデフォルト値が使用されます。

#+BEGIN_SRC lisp
  (line ... :stroke 3)
#+END_SRC

　上記は、以下それぞれの省略形です。

#+BEGIN_SRC lisp
  (line ... :stroke '(:color :brown))
  (line ... :stroke '(:width 3))
#+END_SRC

　上記のように色や太さだけを指定するのであればリストにする意味はありませんが、複
数の指定を同時に行う場合はリストである必要があります。以下の例では、色と太さ、さ
らに透明度も指定しています。

#+BEGIN_SRC lisp
  (line ... :stroke '(:color :brown :width 3 :opacity 0.2))
#+END_SRC

　さらに、上記は以下の省略形です。

#+BEGIN_SRC lisp
  (rectangle ... :stroke (make-stroke :color :brown :width 3 :opacity 0.2))
#+END_SRC

　:stroke の指定において make-stroke 関数を直接使う必要はありませんが、複数の要
素で同じ指定を共有したい場合は以下のように書けます。

#+BEGIN_SRC lisp
  (let ((st (make-stroke :color :brown
                         :width 3 :opacity 0.2)))
    (rectangle ... :stroke st)
    (circle    ... :stroke st)
    (ellipse   ... :stroke st))
#+END_SRC

　さらに、:stroke 指定を省略した場合はデフォルト値としてダイナミック変数 
[[default-stroke][*default-stroke*]] が使用されるため、上記は以下のように書いても同じです。

#+BEGIN_SRC lisp
  (let ((*default-stroke* (make-stroke :color :brown
                                       :width 3 :opacity 0.2)))
    (rectangle ...)
    (circle    ...)
    (ellipse   ...))
#+END_SRC

　make-stroke は（実際には違うのですが）以下のキーワードパラメータを取る関数です。

#+BEGIN_SRC lisp
  (defun make-stroke (&key color width opacity dasharray base)...)
#+END_SRC

	* color		: 色名を示すキーワードシンボル、または "#RRGGBB" 形式の文字列を指定します
	* width		: 線の太さを数値で指定します
	* opacity	: 透明度を 0.0 ～ 1.0 の数値で指定します
	* dasharray	: ※説明が面倒臭い TODO
	* base		: ※説明が面倒臭い TODO

*** stroke 指定が関係するダイナミック変数

	* [[default-stroke][*default-stroke*]]
	* [[default-stroke-color][*default-stroke-color*]]
	* [[default-stroke-width][*default-stroke-width*]]
	* [[default-stroke-opacity][*default-stroke-opacity*]]
	* [[default-stroke-dasharray][*default-stroke-dasharray*]]

** TODO valign parameter

  valign := :top|:center|:bottom

* default parameters [11/34]
** DONE default-link-target

#+BEGIN_SRC lisp
  (defparameter *default-link-target* :self)
#+END_SRC

　[[link parameter][link]] において target を省略した場合のデフォルト値を指定します。初期値は :self 
です。

** DONE default-fill

#+BEGIN_SRC lisp
  (defparameter *default-fill* nil)
#+END_SRC

　[[fill parameter][fill]] を省略した場合のデフォルト値を指定します。初期値は nil です。

** TODO default-fill-color
** TODO default-fill-opacity
** DONE default-stroke

#+BEGIN_SRC lisp
  (defparameter *default-stroke* nil)
#+END_SRC

　[[stroke parameter][stroke]] を省略した場合のデフォルト値を指定します。初期値は nil です。

** DONE default-stroke-color

#+BEGIN_SRC lisp
  (defparameter *default-stroke-color* :black)
#+END_SRC

　[[stroke parameter][stroke]] 指定において color を省略した場合のデフォルト値を指定します。初期値は 
:black です。

** DONE default-stroke-width

#+BEGIN_SRC lisp
  (defparameter *default-stroke-width* 1.0)
#+END_SRC

　[[stroke parameter][stroke]] 指定において width を省略した場合のデフォルト値を指定します。初期値は 
1.0 です。

** DONE default-stroke-opacity

#+BEGIN_SRC lisp
  (defparameter *default-stroke-opacity* nil)
#+END_SRC

　[[stroke parameter][stroke]] 指定において opacity を省略した場合のデフォルト値を指定します。初期値は 
nil です。

** DONE default-stroke-dasharray

#+BEGIN_SRC lisp
  (defparameter *default-stroke-dasharray* nil)
#+END_SRC

　[[stroke parameter][stroke]] 指定において dasharray を省略した場合のデフォルト値を指定します。初期値
は nil です。

** DONE default-endmark-1

#+BEGIN_SRC lisp
  (defparameter *default-endmark-1* nil)
#+END_SRC

　[[end parameter][end1]] を省略した場合のデフォルト値を指定します。初期値は nil です。

** DONE default-endmark-2

#+BEGIN_SRC lisp
  (defparameter *default-endmark-2* nil)
#+END_SRC

　[[end parameter][end2]] を省略した場合のデフォルト値を指定します。初期値は nil です。

** TODO default-endmark-type

※ [[end parameter][endmark]] マクロにおいて type パラメータは必須なので、このスペシャル変数の
　 使用方法が不明確。確認が必要！

#+BEGIN_SRC lisp
  (defparameter *default-endmark-type* :none)
#+END_SRC

** DONE default-endmark-size

#+BEGIN_SRC lisp
  (defparameter *default-endmark-size* :midium)
#+END_SRC

　[[end parameter][endmark]] において size を省略した場合のデフォルト値を指定します。初期値は 
:midium です。

** TODO default-font

#+BEGIN_SRC lisp
  (defparameter *default-font* nil)
#+END_SRC

** TODO default-font-family

#+BEGIN_SRC lisp
  (defparameter *default-font-family* nil)
#+END_SRC

** TODO default-font-size

#+BEGIN_SRC lisp
  (defparameter *default-font-size* 12)
#+END_SRC

** TODO default-font-color

#+BEGIN_SRC lisp
  (defparameter *default-font-color* :black)
#+END_SRC

** TODO default-font-style

#+BEGIN_SRC lisp
  (defparameter *default-font-style* nil)
#+END_SRC

** TODO default-font-decoration

#+BEGIN_SRC lisp
  (defparameter *default-font-decoration* nil)
#+END_SRC

** TODO default-font-weight

#+BEGIN_SRC lisp
  (defparameter *default-font-weight* nil)
#+END_SRC

** TODO default-font-line-spacing

#+BEGIN_SRC lisp
  (defparameter *default-font-line-spacing* 2)
#+END_SRC

** TODO default-font-width-spice

#+BEGIN_SRC lisp
  (defparameter *default-font-width-spice* 0.65)
#+END_SRC

** DONE default-label-position

#+BEGIN_SRC lisp
  (defparameter *default-label-position* :below)
#+END_SRC

　[[label parameter][label]] 指定において position を省略した場合のデフォルト値を指定します。初期値は
:below です。

** TODO default-label-offset

#+BEGIN_SRC lisp
  (defparameter *default-label-offset* 10)
#+END_SRC

** TODO default-label-font

#+BEGIN_SRC lisp
  (defparameter *default-label-font* nil)
#+END_SRC

** TODO default-connector-style

#+BEGIN_SRC lisp
  (defparameter *default-connector-style* :CC)
#+END_SRC

** TODO default-connector-spacing

#+BEGIN_SRC lisp
  (defparameter *default-connector-spacing* 30)
#+END_SRC

** TODO default-rectangle-rx

#+BEGIN_SRC lisp
  (defparameter *default-rectangle-rx* nil)
#+END_SRC

** TODO default-rectangle-ry

#+BEGIN_SRC lisp
  (defparameter *default-rectangle-ry* nil)
#+END_SRC

** TODO default-text-align

#+BEGIN_SRC lisp
  (defparameter *default-text-align* :left)
#+END_SRC

** TODO default-paragraph-align

#+BEGIN_SRC lisp
  (defparameter *default-paragraph-align* :left)
#+END_SRC

** TODO default-paragraph-valign

#+BEGIN_SRC lisp
  (defparameter *default-paragraph-valign* :top)
#+END_SRC

** TODO default-output-encoding

#+BEGIN_SRC lisp
  (defparameter *default-output-encoding* :utf8)
#+END_SRC

** TODO default-history-count

#+BEGIN_SRC lisp
  (defparameter *default-history-count* 9)
#+END_SRC

* UML
** common
*** note

[[./eoPS3MRF1gI.uml-note.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG uml-note.01
 (load-stencil :grid)
 (load-stencil :uml-actor)
 (load-stencil :uml-usecase)
 (load-stencil :uml-note)
 (create-svg (:width 300 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-actor :actor 50 150 :id :actor)
       (uml-usecase 230 actor[middle] 120 60 "usecase" :id :usecase)
       (connector :actor :usecase)
	   (uml-note 150 50 "this is uml-note.
multi line is OK." :keyword :comment :targets '(:actor :usecase))))

;;END_SVG
#+END_SRC

** connectors
*** dependency

[[./eoPS3MRF1gI.uml-dependency.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG uml-dependency.01
 (load-stencil :grid)
 (load-stencil :uml-dependency)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 40 40 :id :rect1)
       (rectangle 300 100 40 40 :id :rect2)
       (uml-dependency :rect1 :rect2 :keyword :invoke)))
;;END_SVG
#+END_SRC

*** association

[[./eoPS3MRF1gI.uml-association.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG uml-association.01
 (load-stencil :grid)
 (load-stencil :uml-association)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 40 40 :id :rect1)
       (rectangle 300 100 40 40 :id :rect2)
       (uml-association :rect1 :rect2 :arrows 0 :line-style :TT :keyword :arrows-0)
       (uml-association :rect1 :rect2 :arrows 1 :line-style :CC :keyword :arrows-1)
       (uml-association :rect1 :rect2 :arrows 2 :line-style :BB :keyword :arrows-2)))
;;END_SVG
#+END_SRC

*** aggregation

[[./eoPS3MRF1gI.uml-aggregation.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG uml-aggregation.01
 (load-stencil :grid)
 (load-stencil :uml-aggregation)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 40 40 :id :rect1)
       (rectangle 300 100 40 40 :id :rect2)
       (uml-aggregation :rect1 :rect2 :arrow nil :line-style :CC :keyword :arrows-nil)
       (uml-aggregation :rect1 :rect2 :arrow   t :line-style :BB :keyword :arrows-t)))
;;END_SVG
#+END_SRC

*** composition

[[./eoPS3MRF1gI.uml-composition.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG uml-composition.01
 (load-stencil :grid)
 (load-stencil :uml-composition)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 40 40 :id :rect1)
       (rectangle 300 100 40 40 :id :rect2)
       (uml-composition :rect1 :rect2 :arrow nil :line-style :CC :keyword :arrows-nil)
       (uml-composition :rect1 :rect2 :arrow   t :line-style :BB :keyword :arrows-t)))
;;END_SVG
#+END_SRC

*** generalization

[[./eoPS3MRF1gI.uml-generalization.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG uml-generalization.01
 (load-stencil :grid)
 (load-stencil :uml-generalization)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 40 40 :id :rect1)
       (rectangle 300 100 40 40 :id :rect2)
       (uml-generalization :rect1 :rect2)))

;;END_SVG
#+END_SRC

*** implementation

[[./eoPS3MRF1gI.uml-implementation.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG uml-implementation.01
 (load-stencil :grid)
 (load-stencil :uml-implementation)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (rectangle 100 100 40 40 :id :rect1)
       (rectangle 300 100 40 40 :id :rect2)
       (uml-implementation :rect1 :rect2)))
;;END_SVG
#+END_SRC

** usecase diagram
*** sample - 01

[[./eoPS3MRF1gI.uml-usecase.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG uml-usecase.01
 (load-stencil :grid)
 (load-stencil :uml-actor)
 (load-stencil :uml-usecase)
 (load-stencil :uml-generalization)
 (create-svg (:width 400 :height 200 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-usecase 200  50 120 60 "base usecase"    :id :usecase1)
       (uml-usecase 300 130 120 60 "derived usecase" :id :usecase2)
       (uml-generalization :usecase2 :usecase1)
       (uml-actor :actor 75 130 :id :actor)
       (connector :actor :usecase2)))
;;END_SVG
#+END_SRC

** class diagram
*** class

[[./eoPS3MRF1gI.uml-class.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG uml-class
(load-stencil :grid)
(load-stencil :uml-class)
(create-svg (:width 300 :height 100 :encoding :utf8)
	(grid)
	(let ((*default-fill*   :white)
		  (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85))
		  (*default-stroke* (stroke :color :black :width 1)))
	  (uml-class :test-class 150 50 :keyword :test
				 :operations ((:public :do-something :params (:arg1 :arg2) :type :int)))))
;;END_SVG
#+END_SRC

*** interface

[[./eoPS3MRF1gI.uml-interface.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG uml-interface
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-interface)
 (load-stencil :uml-interface-request)
 (load-stencil :uml-association)
 (let* ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1))
	   (title-font       (font :size 16 :weight :bold :base *default-font*)))
   (create-svg (:width 600 :height 200)
		(grid)
		(text 10 25 "socket" :font title-font)
		(uml-class :test1 100  75 :id :test1)
		(uml-class :test2 200 150 :id :test2)
		(uml-interface :foo 200 75 :id :foo)
		(uml-association :test1 :foo)
		(uml-interface-socket 90 150 :test2 :name :foo)
		(text 300 25 "requrest" :font title-font)
		(uml-class :test3 350  75 :id :test3)
		(uml-class :test4 550 150 :id :test4)
		(uml-interface :bar  470  75 :id :bar)
		(uml-interface :quux 420 150 :id :quux)
		(uml-association :test3 :bar)
		(uml-association :test4 :quux)
		(uml-interface-request :test3 :quux :arrow t :line-style :BL)
		(uml-interface-request :test4 :bar  :arrow t :line-style :TR)))

;;END_SVG
#+END_SRC

** state charts
*** state - 01

[[./eoPS3MRF1gI.uml-state.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG uml-state.01
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-state)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 300 :height 150)
		(grid)
		(uml-state :state1 75  50)
		(uml-state :state2 225 $1[middle])
		(uml-state-tran :$2 :$1 :label :click)
		(uml-state-tran :$2 :$3 :line-style :BB
						:label (:trigger :cancel :condition :focused :action "close form"))))
;;END_SVG
#+END_SRC

*** state - 02

[[./eoPS3MRF1gI.uml-state.02.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG uml-state.02
 (load-stencil :grid)
 (load-stencil :uml-state)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
;	   (*default-font*   (font :family "Times New Roman" :size 11 :width-spice 0.7 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (macrolet ((state (&rest args) `(uml-state ,@args))
			  (tran  (&rest args) `(uml-state-tran ,@args)))
	 (create-svg (:width 600 :height 400)
		(grid)
		(state :state1 100  75 :id :state1)
		(state :state2 500  75 :id :state2 :acts ((:trigger :enter :action :on-enter)
												  (:trigger :do    :action "Action")
												  (:trigger :exit  :action :on-exit)))
		(state :state3 300 250 :id :state3 :width 300 :height 200
			   :contents
			   ((let ((*uml-state-fill* :skyblue))
				  (state :state3-1 100  70)
				  (state :state3-2 200 130))
				(tran :$2 :$1 :line-style :RT)
				(tran :$2 :$3 :line-style :LB)))
		(tran :state1 :state2)
		(tran :state2 :state3 :line-style :BR)
		(tran :state3 :state1 :line-style :LB)
		(tran :state3 :state3 :line-style :B1B3))))
;;END_SVG
#+END_SRC

*** state - 03

[[./eoPS3MRF1gI.uml-state.03.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG uml-state.03
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-state)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (macrolet ((state (&rest args) `(uml-state ,@args))
			  (tran  (&rest args) `(uml-state-tran ,@args)))
	 (create-svg (:width 600 :height 400)
		(grid)
		(uml-state-begin   50 50)
		(uml-state-end    550 50)
		(state :power-off 300 50 :id :off)
		(tran :$3 :$1)
		(tran :$2 :$3)
		(state :power-on 300 270 :width 400 :height 200 :id :on
			   :contents
			   ((uml-state-begin  50  70)
				(state :mode-a   200  70)
				(state :mode-b   200 150)
				(tran :$3 :$2)
				(tran :$3 :$2 :line-style :B1T1)
				(tran :$3 :$4 :line-style :T3B3)
				(uml-state-history 30 170)))
		(tran  :off :on :line-style :B1T1)
		(tran  :on :off :line-style :T3B3))))
;;END_SVG
#+END_SRC

** 未分類
*** package
**** simple

[[./eoPS3MRF1gI.uml-package.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG uml-package.01
 (load-stencil :grid)
 (load-stencil :uml-package)
 (load-stencil :uml-dependency)
 (create-svg (:width 400 :height 100 :encoding :utf8)
     (grid)
     (let ((*default-font* (font :family "Courier New" :width-spice 0.85 :line-spacing 3))
           (*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (uml-package :cl-apps 100 50 :id :apps :width 140 :keyword :application)
       (uml-package :cl-svg  300 50 :id :svg  :width  80)
	   (uml-dependency :apps :svg)))
;;END_SVG
#+END_SRC

**** nest

[[./eoPS3MRF1gI.uml-package.02.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG uml-package.02
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-package)
 (create-svg (:width 400 :height 340 :encoding :utf8)
     (grid)
     (let ((*default-font* (font :family "Courier New" :width-spice 0.8 :line-spacing 3))
           (*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
	   (uml-package :foo 200 170 :width 300 :height 300
					:contents
					((uml-package :foobar 170 120 :keyword "container" :width 200 :height 200
								  :contents
								  ((uml-package :quux 80 120 :keyword :foo?)))))))
;;END_SVG
#+END_SRC

*** component
**** component - 01

[[./eoPS3MRF1gI.uml-component.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG uml-component.01
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-package)
 (load-stencil :uml-component)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (create-svg (:width 300 :height 300)
		(grid)
		(uml-package "foo package" 150 150 :width 260 :height 260 :id :pkg
					 :contents
					 ((uml-component :foo  70  70)
					  (uml-component :bar 160 160)))))
;;END_SVG
#+END_SRC

**** component - 02

[[./eoPS3MRF1gI.uml-component.02.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG uml-component.02
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-component)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
;	   (*default-font*   (font :family "Times New Roman" :size 11 :width-spice 0.7 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1)))
   (macrolet ((state (&rest args) `(uml-state ,@args))
			  (tran  (&rest args) `(uml-state-tran ,@args)))
	 (create-svg (:width 600 :height 600)
		(grid)
		(let ((*uml-component-iconsize*   30)
			  (*uml-component-iconoffset* 10))
		  (uml-component "Web server" 300 300 :width 200 :height 200 :keyword :server :id :srv
						 :contents
						 ((uml-class :foo 100 100))))
		(let ((*uml-component-fill* :skyblue))
		  (let ((x srv[center])
				(y (- srv[middle] 200)))
			(uml-component :pc00 (+ x -130) y) (connector :$1 :srv :line-style :B3T1)
			(uml-component :pc01 (+ x    0) y) (connector :$1 :srv :line-style :B2T2)
			(uml-component :pc02 (+ x  130) y
						   :keyword :foo) (connector :$1 :srv :line-style :B1T3))
		  (let ((x (+ srv[center] 200))
				(y srv[middle]))
			(uml-component :pc05 x (+ y  80)) (connector :$1 :srv :line-style :CC)
			(uml-component :pc04 x (+ y   0)) (connector :$1 :srv :line-style :CC)
			(uml-component :pc03 x (+ y -80)) (connector :$1 :srv :line-style :CC))
		  (let ((x srv[center])
				(y (+ srv[middle] 200)))
			(uml-component :pc08 (+ x -130) y) (connector :$1 :srv :line-style :T3B1)
			(uml-component :pc07 (+ x    0) y) (connector :$1 :srv :line-style :T2B2)
			(uml-component :pc06 (+ x  130) y) (connector :$1 :srv :line-style :T1B3))
		  (let ((x (- srv[center] 200))
				(y srv[middle]))
			(uml-component :pc09 x (+ y  80)) (connector :$1 :srv :line-style :CC)
			(uml-component :pc10 x (+ y   0)) (connector :$1 :srv :line-style :CC)
			(uml-component :pc11 x (+ y -80)) (connector :$1 :srv :line-style :CC))))))
;;END_SVG
#+END_SRC

*** node

[[./eoPS3MRF1gI.uml-node.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG uml-node.01
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-node)
 (let ((*default-fill*   :white)
	   (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.9 :line-spacing 5))
;	   (*default-font*   (font :family "Times New Roman" :size 11 :width-spice 0.7 :line-spacing 5))
	   (*default-stroke* (stroke :color :black :width 1))
	   (*uml-node-depth* 20))
   (macrolet ((state (&rest args) `(uml-state ,@args))
			  (tran  (&rest args) `(uml-state-tran ,@args)))
	 (create-svg (:width 600 :height 600)
		(grid)
		(uml-node "Web server" 300 300 :width 200 :height 200 :keyword :server :id :srv
				  :contents
				  ((uml-class :foo 100 100)))
		(let ((*uml-node-fill-1* :lightblue)
			  (*uml-node-fill-2* :skyblue)
			  (*uml-node-depth*  10))
		  (let ((x srv[center])
				(y (- srv[middle] 200)))
			(uml-node :pc00 (+ x -130) y) (connector :$1 :srv :line-style :B3T1)
			(uml-node :pc01 (+ x    0) y) (connector :$1 :srv :line-style :B2T2)
			(uml-node :pc02 (+ x  130) y
						   :keyword :foo) (connector :$1 :srv :line-style :B1T3))
		  (let ((x (+ srv[center] 200))
				(y srv[middle]))
			(uml-node :pc05 x (+ y  80)) (connector :$1 :srv :line-style :CC)
			(uml-node :pc04 x (+ y   0)) (connector :$1 :srv :line-style :CC)
			(uml-node :pc03 x (+ y -80)) (connector :$1 :srv :line-style :CC))
		  (let ((x srv[center])
				(y (+ srv[middle] 200)))
			(uml-node :pc08 (+ x -130) y) (connector :$1 :srv :line-style :T3B1)
			(uml-node :pc07 (+ x    0) y) (connector :$1 :srv :line-style :T2B2)
			(uml-node :pc06 (+ x  130) y) (connector :$1 :srv :line-style :T1B3))
		  (let ((x (- srv[center] 200))
				(y srv[middle]))
			(uml-node :pc09 x (+ y  80)) (connector :$1 :srv :line-style :CC)
			(uml-node :pc10 x (+ y   0)) (connector :$1 :srv :line-style :CC)
			(uml-node :pc11 x (+ y -80)) (connector :$1 :srv :line-style :CC))))))
;;END_SVG
#+END_SRC

* others [0/2]
** TODO grid

　背景となるグリッド線を描画します。

#+BEGIN_SRC lisp
  (load-stencil :grid)
  (grid &key (size 10) (backcolor :white) stroke layer)
#+END_SRC

*** sample of grid

[[./eoPS3MRF1gI.grid.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG grid.01
 (load-stencil :grid)
 (create-svg (:width 150 :height 100 :encoding :utf8)
     (grid :size 10 :backcolor :white
           :stroke (stroke :color :gray :width 0.2)))
;;END_SVG
#+END_SRC

　※以下のようなガイドとなるラインを描画する機能を grid に追加したい

[[./eoPS3MRF1gI.grid.02.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG grid.02
 (load-stencil :grid)
 (create-svg (:width 150 :height 100 :encoding :utf8)
     (grid :size 10 :backcolor :white
           :stroke (stroke :color :gray :width 0.2))
     (let ((st (stroke :color :blue :width 0.2)))
       (line '( 50  0  50 100) :stroke st)
       (line '(100  0 100 100) :stroke st)
       (line '(  0 50 150  50) :stroke st)))
;;END_SVG
#+END_SRC

** TODO textbox

　テキストボックスを描画します。[[rectangle]] と [[paragraph]] 組み合わせたイメージです。

#+BEGIN_SRC lisp
  (textbox x y text &key align text-class font rx ry
						 rect-class fill stroke margin link layer id)
#+END_SRC

	* x				: 
	* y				: 
	* text			: 
	* align			: 
	* text-class	: 
	* font			: 
	* rx			: 
	* ry			: 
	* rect-class	: 
	* fill			: 
	* stroke		: 
	* margin		: 
	* link			: 
	* layer			: 
	* id			: 

*** sample of textbox

[[./eoPS3MRF1gI.textbox.01.svg]]

#+BEGIN_SRC lisp
;;BEGIN_SVG textbox.01
 (load-stencil :grid)
 (load-stencil :textbox)
 (create-svg (:width 200 :height 100 :encoding :utf8)
     (grid)
     (let ((*default-fill* :white)
           (*default-stroke* (stroke :color :black :width 1)))
       (textbox 50 50 "class"     :align :center :id :box1)
       (textbox (+ $1[center] 100) $1[middle] "multi
line" :align :center :id :box2)))
;;END_SVG
#+END_SRC

#<end update:2020/03/23 12:56:08>
#<begin memo ID:ezvsLiBSHwx>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class uml-implementation
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./not_yet_exist.svg]]

* source
#+BEGIN_SRC lisp
#+END_SRC

#<end update:2020/02/21 11:33:56>
#<begin memo ID:fbiSsy39Hjj>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class uml-class
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./not_yet_exist.svg]]

* source
#+BEGIN_SRC lisp
#+END_SRC

#<end update:2020/02/21 11:33:29>
#<begin memo ID:fnplAByF7Sp>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class text
ATTACH:fnplAByF7Sp.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./fnplAByF7Sp.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-generalization)
 (create-svg (:width 400 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*        :white)
           (*default-stroke*      (stroke :color :black :width 1))
           (*default-font*        (font :family "Courier New" :size 11 :width-spice 0.85)))
       (uml-class :entity 200 50 :abstract t)
       (uml-class :text $1[center] (+ $1[middle] 200)
				  :attributes
				  ((:public :m-x)
				   (:public :m-y)
				   (:public :m-text)
				   (:public :m-align)
				   (:private :m-class)
				   (:private :m-font)
				   (:private :m-link))
				  :operations
				  ((:public :text  :params ("..."))
				   (:public :property-x)
				   (:public :property-y)
				   (:public :check :params (:canvas :dict))
				   (:public :draw  :params (:writer))))
       (uml-generalization :$1 :$2)))

;;END_SVG
#+END_SRC

#<end update:2020/02/21 11:42:55 access:2020/02/21 11:43:02>
#<begin memo ID:g6prG5J2HbD>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class uml-state
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./not_yet_exist.svg]]

* source
#+BEGIN_SRC lisp
#+END_SRC

#<end update:2020/02/21 11:34:23>
#<begin memo ID:gff4ouzBmey>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class rectangle
ATTACH:gff4ouzBmey.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./gff4ouzBmey.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-generalization)
 (create-svg (:width 400 :height 450 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (uml-class :shape 200 50 :abstract t)
       (uml-class :rectangle $1[center] (+ $1[middle] 230)
				  :attributes
				  ((:private :m-center-x)
				   (:private :m-center-y)
				   (:private :m-width)
				   (:private :m-height)
				   (:private :m-rx)
				   (:private :m-ry)
				   (:private :m-fill)
				   (:private :m-stroke))
				  :operations
				  ((:public :rectangle :params (:x :y :width :height :etc))
				   (:public :get-subcanvas)
				   (keyword-info :properties)
				   (:public :property-width)
				   (:public :property-height)
				   :etc
				   (keyword-info :entity)
				   (:public :check :params (:canvas :dict))
				   (:public :draw :params (:writer))
				   (keyword-info :shape)
				   (:public :get-cc-point :params (:x :y))))
       (uml-generalization :$1 :$2)))

;;END_SVG
#+END_SRC

#<end update:2020/02/21 11:42:42>
#<begin memo ID:gQhjguYxDdZ>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class connector
ATTACH:gQhjguYxDdZ.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./gQhjguYxDdZ.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-generalization)
 (load-stencil :uml-association)
 (create-svg (:width 400 :height 400 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (uml-class :line 200 50)
       (uml-class :connector $1[center] (+ $1[middle] 200)
				  :attributes
				  ((:public :m-from-id :property :readonly)
				   (:public :m-dest-id :property :readonly)
				   (:public :m-line-style :property :readonly))
				  :operations
				  ((:public :connector :params (:from :dest :etc))
				   (keyword-info :entity)
				   (:public :check :params (:canvas :dict))
				   (:public :write-header :params (:writer))))
       (uml-generalization :$1 :$2)))

;;END_SVG
#+END_SRC
#<end update:2020/02/21 11:42:17>
#<begin memo ID:hoLfEiOKRdj>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class line
ATTACH:hoLfEiOKRdj.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./hoLfEiOKRdj.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
(in-package :cl-svg-user)
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-generalization)
 (load-stencil :uml-association)
 (create-svg (:width 500 :height 500 :encoding :utf8)
     (grid)
     (let ((*default-fill*   :white)
           (*default-stroke* (stroke :color :black :width 1))
           (*default-font*   (font :family "Courier New" :size 11 :width-spice 0.85)))
       (uml-class :entity 150 50 :abstract t)
       (uml-class :line $1[center] (+ $1[middle] 250)
				  :attributes
				  ((:private :m-points)
				   (:private :m-class)
				   (:private :m-end1)
				   (:private :m-end2)
				   (:public  :m-stroke :property :readonly))
				  :operations
				  ((:public :line :params (:points :etc))
				   (:public :get-points)
				   (:public :set-points :params (:points))
				   (:public :get-endpoints :params (:type))
				   (:public :get-line-center)
				   (:public :format-points :params (:points))
				   (keyword-info :properties)
				   (:public :property-class)
				   (keyword-info :entity)
				   (:public :check :params (:canvas :dict))
				   (:public :is-composition)
				   (:public :pre-draw :params (:writer))
				   (:public :post-draw :params (:writer))
				   (:public :draw :params (:writer))))
       (uml-generalization :$1 :$2)
       (uml-class :endmark-info (+ $2[center] 250) $2[middle])
       (uml-association :$3 :$1 :arrows 1 :mult2 (multiplicity 0 2))))

;;END_SVG
#+END_SRC

#<end update:2020/02/21 11:42:05>
#<begin memo ID:iO5Nf6CpUFe>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class svg-writer
ATTACH:iO5Nf6CpUFe.main.svg
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./iO5Nf6CpUFe.main.svg]]

* source
#+BEGIN_SRC lisp
;;BEGIN_SVG main
 (load-stencil :grid)
 (load-stencil :uml-class)
 (load-stencil :uml-implementation)
 (load-stencil :uml-dependency)
 (create-svg (:width 500 :height 300 :encoding :utf8)
     (grid)
     (let* ((*default-fill*     :white)
            (*default-stroke*   (stroke :color :black :width 1))
            (*default-font*     (font :family "Courier New" :size 11 :width-spice 0.85))
            (*uml-keyword-font* (font :size 9 :base *default-font*)))
       (uml-class :entity 100 100 :abstract t)
       (uml-class :svg-writer (+ $1[right] 200) $1[middle] :keyword :interface
				  :operations
				  ((:public :write :params ("&rest args"))
				   (:public :incr-level)
				   (:public :decr-level)
				   (:public :close)))
       (uml-class :svg-buffer-writer $1[center] (+ $1[bottom] 100))
       (uml-dependency  :$3 :$2)
       (uml-implementation :$2 :$3)))

;;END_SVG
#+END_SRC

#<end update:2020/02/21 11:41:42>
#<begin memo ID:iTpTedJzevE>
GROUP:
TAG:
MARK:none
TITLE:.moderc
ATTACH:
TRACKING:0
EXECUTABLE:0
PRIVATE:0
BACKUP:1
org	# 
sh	#
c	//
c++	//
lisp	;;
scheme	;;
mail	| 
#<end update:2020/02/20 12:38:53 access:2020/03/24 19:26:14>
#<begin memo ID:j6XIv3TxQ9Q>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class uml-state-tran
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./not_yet_exist.svg]]

* source
#+BEGIN_SRC lisp
#+END_SRC

#<end update:2020/02/21 11:34:51>
#<begin memo ID:k6Bw9Vpl90Q>
-*-MODE:org-*-
GROUP:cl-diagram
TAG:
MARK:none
TITLE:cl-svg class uml-state-end
ATTACH:
TRACKING:0
EXECUTABLE:1
PRIVATE:0
BACKUP:0
#!view

[[./not_yet_exist.svg]]

* source
#+BEGIN_SRC lisp
#+END_SRC

#<end update:2020/02/21 11:34:37>
#<begin attach ID:0jcp8laWIEQ>
789c011803e7fc14000000306a6370386c61574945512e6d61696e2e73766799
0b0000f402000001000000789cb556db6ea330107d6ebec2abedd6a91a2ee64e
37a40ffbbc1769d5e7ca0507ac382632a624fdfab58134bdd3554924226c8fe7
9c339ec133bfdaae19b823a2a2254f20326d08084fcb8cf23c81b55c1a110457
8bc9bcbacb8132e555020b29379796d5348dd9b8662972cbb16ddb5216b033b9
dc32ca57af19a2388ead76153e064510dce28afc11e5923292c065cd58ebebb2
dae0544d6464896b26216868268b047ab6e259109a17b21b2c26279393f917c3
00b9a019300c3531df602989e0806609bcb9d10b0f0ed0a3fdfabd37bde6542a
857545c45f8dfc9b5f570402e5ec642e482ac13681ca7ad7febfe14a4960096c
0a2ad54eabddba29d94e8926fd1a2fb95aaaa428574adb2dab1f4646efd3361d
c5a9a45cb341f6cc06dda3fd6b9773ab27acdfdf26667f7b4c4d8f3a02b560d3
af5d44ce3f40a445d4b1add7cc4819aeaa3ec07b641474d8ee013c7a7240cfa2
7240c4e9ea3924ea0125d9b6ce1dbb73eefba60f819e35304f8b5224704db38c
297fcb924b6389d79429bb1f652d2811e01769fa958ade2b30843672cfa307ee
56e54ee71c9598d1549d752eca7a33b734d090eec8314395d171cb0ff9b626d8
ab705ccf5489693b2386c1ec0281c260e4382cb4409cca521c74bfae311ed018
059fd118851d96df823976f0e2c42b8985fc8450636d70bc2607996f40a3f818
d00267b4ae06c15de718e0b250473488edbdacb211b0aba2ac5946c420bc1f1d
035e4f0c4287e828cadb841f282b270cde2fabd01db1ace2f1d3ebe2e10332d5
e535dbce7633d334cf8782eedae3a7db1993dff543b8a4727796ab917a0699a0
f133ef222d48ba9aa698dfe16a96d1540e07c41d3f0bf701692fb60fc7c3f3c6
8f47267063b434a68d50792cce5fdeb339e144a8abf81e4bd51d82a528d7e014
0159825367dfd7bddf4ebd5e11fb6eaabd4767ed650dbaf7b0bd58adbe632cfe
afd0546bf9b3f303421b306004a6ebc64ee801e49a7eec052854b3c8318330f2
bd0818caf2c90f8561e0fa4104ee5b0e93b96ea417937f36c492d8990b00006d
ad7d8f18030000
#<end update:2020/02/21 11:45:28>
#<begin attach ID:0kEPAXAZGOp>
789c01870378fc14000000306b45504158415a474f702e6d61696e2e737667af
0f00006303000001000000789cb5575d6f9c38147dcefc0aafb65ba6ea1830df
6487f4619ff7435af5b92260062bc646c61366b2daffbeb6219d6c9b04aac048
206c5fee39f7f8cee57affe9d450708f454738cb2c64bb16c0ace0256187cc3a
ca0a2616f874b3d977f707a04c599759b594edb5e3f47d6ff7becdc5c1f15cd7
75948535985c9f286177cf19a2344d1db36a3d054516b8cd3bfc97e015a138b3
aa23a5c6d775d7e6859a2871951fa9b4404f4a596756e02a9e3526875a6656a8
06379babcdd5fe2708c141901240a826f66d2e25160c9032b3be7cd10b5f1da0
27efebe7d1f43323524578ecb0f85b23ffc93e77d802cad9d55ee04282536629
ebb3b9bfe04a854033abaf89546f3ae6d596d3b30a1a8f6b8c33b5d449c1ef54
6cb7f4f87504479faeed294e9c30cd06b93b170c97f6af5dee9d91b07e7e9998
fbcb536a7a3410380abafd7950e4c30c2206516b7b6c282c68de75a3c08fc828
8cec3434f0fe053f896c05eabad18544f0ad3e17ecbcb8fb161c8dd0129f0c8c
4a337b08320c6d05a7e761ce8a9a8bcc6a485952e5b1e24cc22a6f085576bff1
a32058803f703fae74e441c121d4ca472623f4b02acf3aff88cc2929d4be6326
893cef1d8d34254294d8711ca4696018a220d114c748bcc8b38370791d501c2c
2cc34d57e72dbe44fc4274c96bd1f9c15ba28bfda7489e1b7cb7d59dcc857c43
881f9b6103ff11382f39a3e77f2ff1bec002c58bb3800dd485f05adf2061159f
12ddf3bc5744f7bc7441d5fd6479d54d666d8df23b1df48ee6672c76aa064dca
1fa2e5e91cb08445014d95dd9e76e76916d10aa9483a58f0a6e51d91ea63b89d
26112f9f891f5b816129f27edb0b9539629a44eaae408277f28758f8aebf388b
f754feaaaf56f0160b797e7f5063754d7241d1f28a98bfca744af85eba3cb629
1333b0036f79eca1a4cd007fa60d783338c5d51ce868850259a876038b19e0c9
0ae550ccd43c5da1084ade4e2307ee0a956f689766807b2b54bc5b2e256f6680
fbeb15baa1c39d5be682608d3257e3e26e5be4ec3eef762529e487ef1bee0366
58a8a6fc21d79f495009de807708480ede798fa7bdd70f59cff7408f672cd352
ef4cd30e86e7d8f4d8ce788eac7facb55207cedf073f2076010530b27d3ff5e2
0020b5956910a158cd22cf8ee2240c120095e5ff7e288e233f8c12f060386cf6
fa787db3f90f6682dddfaf0f00006a4ab8e887030000
#<end update:2020/02/21 11:50:51>
#<begin attach ID:0B9y2Iy4cna>
789c015202adfd180000003042397932497934636e612e32303135303531332e
7376670c0700002a02000001000000789cb555d16e9b30147d4ebec2d3b47a93
06d890a42183e461efdba4a9cf150906ac3876664c49f7f5bb064250946855da
221961fbfa9c73cfbd16d1eab013e889e9922b1963ea128c98dca894cb3cc695
c99c3946abe5382a9f7204a1b28c7161cc7ee179755dbb75e02a9d7b3e21c483
08dc862c0e82cbeda5401a86a1d7ece22129c5689d94ec975619172cc6592544
83b528f7c90616529625953018d53c35458c270474168ce7856927cbf1683c8a
3e380eca354f91e3c042b44f8c615a229ec6f8f1d16ef4007470de7e77a10f92
1bc8b02a99fe6d997fca8792610460a348b38d41871843f473f3be0205298818
d7053770d26b8eee957886a459b7279584add268b585dcd6a2ea674e87495c1f
34292ead1a4abe12d40e8b6f2123af136cbfaf0b239f86d2ecac155069f1f963
ebc89717086918adb7d54e3860cb36c95967f1917bda92cfe63d7b302c913ff7
cf8c399102de392bed38cfd0a764d00083cce6b7601b7668b0ef3be5538cec92
93c84da1748c773c4d0580654a1a274b765c40d4775569ce34fac1ea6ea7e47f
8189fa7b7314d1b12e33a522cf42fedf3d4a5a11744afb0cfda17f7476ff1aff
c2d00dedd392d053916840dcf98926085ee3249d4ddd494b6181ded6cd3b61be
d9b181b004ae92becb6101c6c9e30b3a26ef51d575a25f5cd8ae737d7f36bc96
27c76ddbdd5ed71e9ed2cb37e326f4a38f7ed795beedcaf7a926b8b9ba5ec85e
c0eccddbe94f551d8e84e3c8febb96e37f9afb2c430c070000fc9921fc520200
00
#<end update:2020/02/21 09:31:11>
#<begin attach ID:0BjJ20zYaEN>
789c015703a8fc1400000030426a4a32307a5961454e2e6d61696e2e737667e1
0d00003303000001000000789cb557db6ea330107d6ebec2abddad53355ccc3d
dd903eecf35ea4559f2b0a4eb0e240644c49faf53bc6a44db32de9aa341211d8
c39c33e3e3613cbbdeae39baa7a26265116362da18d1222d33562c635ccb8511
61743d1fcdaafb2502d3a28a712ee5e6cab29aa6311bd72cc5d2726cdbb6c002
6b93ab2d67c5ea2543329d4ead76161f82128cee928afe16e582711ae345cd79
ebebaada24290c647491d45c62d4b04ce631f66ce09953b6cca57e988fce4667
b34f8681968265c8306060b649a4a4a2402c8bf1edad9a7874400ede57f79de9
4dc12444585754fc51c8bf8a9b8a6204cece6682a6126d630cd6bbf6ff155710
028f719333096f5aedab9b92ef2068dacd156501539514e50a62bbe3f5e393d1
f9b44d073895ac506c883db191be947fe572667584d5fdebc4ecaf87d4d49326
500b3efeac3372f106222da2ca6dbde646ca93aaea12bc472681c6769fc0a367
0b74949527c4245d1d43920e50d26debdcb1b573df377d8cd4a89114695e8a18
af599671f0b7280b692c9235e360f7bdac05a302fda44d3753b10700236423f7
3c3a603d2b774a734c269ca5b0d6559e6ce8cc5240a7e28e42d30b7ddb0e5a82
84448fe13b8e6fda1ea87dc02c983a0fc473074fc43c6522e50751bf12a1df1b
61e8be27c2a9a3a0344ee81d0558c944c877c467ac8d9416b0638ced53902f21
47e18721ef7a915b990f8d2c928cd5553f2e7187c75503fda84e303caad6d729
113b2ee91331f1c9402a76bca1b574a9b7e9783bd94df4d24e4cd3bce8cf7430
b4ae2e9714a6ebbb3429ee936a7c023e1c5a5ee75c7e53d746941b2a24a3d5f9
1246e0ea27120dadb8cb8ec14e6be1542294c83e085f6bf704019738031300ed
f5233ac7dfa9a1d61e0a2a93bb37adbbeb4683efc29ca6abb196ff2463a93c91
78555186659089a4193702ca9338811d0cfd25dd2f41db26bd6d05c2c1eba0aa
40696ab41db2aa8617fff66b4b5a50012ddd4322e1948116a25ca32f04c9127d
71f6e783feb6fce56abfefcadb866c023d9f69237d1fb61d9ad59d3cf2fffb88
c011e587f683421b716404a6eb4e9dd04304dabda91790104689630661e47b11
32c0f2d98f8461e0fa41841e5a0ea3993a90cd477f01071154b7e10d00007fc0
9c9357030000
#<end update:2020/02/21 11:50:42>
#<begin attach ID:2dpOHRvoVJ8>
789c016b0394fc140000003264704f4852766f564a382e6d61696e2e737667f5
0e00004703000001000000789cb5575b6f9b30147e6e7e85a75d9c6ae56208b7
2e740f7bde459af65c1170c0aab1913125e9af9f0da4e9ba34c9542f1211b60f
e7fbcecdf6597eded414dc63d112ce52886c1702cc725e1056a6b0936b2b86e0
f3cd6cd9de974089b236859594cdb5e3f47d6ff7becd45e978aeeb3a4a028e22
d71b4ad8dd214194248933acc2a7a0088255d6e21f82af09c5295c77940ebaae
db26cbd54481d7594725043d296495c285ab78569894955403cf8537b38bd9c5
f28d658152900258969a583699945830408a14dedeea854705e8c9f7fa7d12fd
c5885416762d163f35f277f6abc5102865174b817309362954d2dbe1ff0555ca
049ac2be22527de90c9f369c6e95d1785a639ca9a5560a7ea76c5bd1ee71644d
3a5ddb539c38619a0d72af5c303e5abf56b97426c2fafd6562eefba7d4f46824
d0093a7f3b7ae4f20c2203a2f66d57532ba759db4e0ede21a370c4f6f7e0f1d3
003df7ca1e31cbef9e43a20950e2cda0dc7347e541600710e8592b6379c5450a
6b521454e95b7326ad755613aae4bef04e102cc037dc4f2b2d795060083572c7
63021e57e556e71c911925b98a755b650d5e3a1ae894dd516c232f18d8213778
b4dd5bf8761418b4df1e3d807cd7b80b6e4ac1bb666fee21d3162f9b16becab4
d8df8384e89965adcc847c85611f6b6b73cdba7a85c5debc43c8d1c23cf2f62c
e438328f3cb8fa1cf4a1ae4ca38f79f117fc81acf28e140c4a4ca595e7194fab
a160e6b66d5f1e77af6f38ad0e6e561f0b91f5d648a917ca55e204ab85f1942b
b15aee5679c6eeb3767e023e349e7383030abcea4a6b2db21a9fe786c837cce3
03959ff4d308de6021b71f4a3556cf711a7168da1d3bfcb1364e852349fe1bfe
58cb2708f8c8334c40d5e57144eff9096a2af298497266dc7d3f36edf7bcc2f9
dd7c2cc2ab82e4f284e303e3fba22ec4b38acf0f4d1fb8bb100c57b7f3221019
df07496be5bc6e784ba46a6b4e257e627c23d4fb709e5b43d730df5c6d2fffbe
c3969861a14e8e874c53046bc16bf00e01c9c13b6fd7331d6f550e9fbebb4e65
b8aaaa2625b05d30be47c3ddd599bab1eadf0e75d5b67d1df580c8051458a1ed
fb89172d00f2ed2059842852b3c8b3c3280e1631b094e41f3f1445a11f843178
1838cc96ba49bd99fd06b8e3b221f50e0000b1d0a6ce6b030000
#<end update:2020/02/21 11:50:31>
#<begin attach ID:2dC43w0KnUJ>
789c01cb0334fc14000000326443343377304b6e554a2e6d61696e2e73766707
0e0000a703000001000000789cb5576d73a33610fe1cff0a757a3d7213039278
774d6e3afddc9799ce7dbe5140064d40b8429c93fefaae00c7d4e7d8979ab30d
2369a57d9e5dad56ebf5c7a7ba425fb86a4523538b38d8425c664d2e64915a9d
ded8b1853ede2fd6ed9702c154d9a656a9f576e5babbddced9794ea30a97628c
5d98610d53564f95908fa726922449dc5e6a4d4189851e58cbff54cd46543cb5
365d55f5ba56ed96653090f30deb2a6da19dc875995a21069e251745a953cb83
cefde26671b3fec1b651a1448e6c1b06d65ba6355712893cb53e7f3682170564
b2deb4c7a99fa4d06061d772f59741fe437e6ab98540d9cd5af14ca3a7d482d9
cffdfb15556042955abb526858e9f64bb74df50c46f351261b09a256abe6116c
7ba8ba979e3deac40e054e8d90860dc14b8c86c7e8372ad7ee48d8b45f27867f
9a5233bd8140a7aadb1f078f7cf806223da2f16d57577656b1b61d1dbc470eb0
83233f49a29e013d50a049e2c420880f3cfc63171de059f6788c4f4674cd9f7a
2408200762c82804243f70020b1999cd6456362ab56a91e71568dd3452db1b56
8b0ae6fdda744a70857ee7bb51d28a7f009290addeb319e1ef2bf6cc955d33c9
0aaed6ae51febaa9e17953a36b4c0d822952141e19da6aa6f41576dab59d75ca
eecd3d98791a3c4ebe0378d3497d199a603a3f76c9da52b3878a5fda5f82a373
1b1c79f36d30a1decc86defd27946f3f5c74b537778cdd295e881676f956b29a
2f73d16e81d36522fedcf17657706d8ff03d97cb1cc2b9e3aee7b055a251427f
2b89e838bd5d4d222b992cf870ec6f25df0dade50e48713521b44ff7c21cd20d
5c8563cacf84ca2a8e32c3d583ec97f5a7041aeac4edf7b6e3e0e1310cc9dc39
1d4a137bb0f08c81b6e27f77bcd568a39a1abda34837e81dd99712e76ff0d3e6
ed2f70cf874b8b06707b4372417e04efa13d7ae07f291f077248654c29061ef1
90870ea0131814d05920f7aa031c39182721688c9c60aa1dbd88126aae66772c
c3ca37e140b9f61bb829727c42629c047e9c447e8c084e9c300047c634a47182
c304fd0283e667bee4c492043b9e0f078a445e04cb3d7254ccc846f3c90e178d
7c5b00bf9468706ee3604929717cb4ef44b11322cff71d72dcf1cd348f0e1db3
e6b8ca098d86a1980afcaf6a9c6b93c0980851dd41b43f7024e4d789684a218c
66a7b012d284df12ad4c489c87f7a971d0acf0ef2bfdb379cc91178ad75ceaf7
050cc173e07255449cdcead7f6fdbb2400ea63c70fe1338625a5a113f67d3821
632258accddfb6fbc5bfc76d48e2070e000016d8d5b8cb030000
#<end update:2020/02/21 11:50:22>
#<begin attach ID:2vmIheUdETf>
789c01fe0201fd1400000032766d49686555644554662e6d61696e2e73766762
0a0000da02000001000000789cb5565d6f9b30147d6e7e85a77575aac6802140
e842fbb0e77d48539f2b171cb0e240644c93f4d7ef1a4893362ddbd404c9c81f
d7f79c737d2ddfe9ed7a21d1235795288b1853cbc1881749998a228b71ad6764
82d1edcd605a3d66084c8b2ac6b9d6cb6bdb5ead56d6cab34a95d9aee3383658
e0d6e47a2d45317fcb9046516437ab781f9462f4c02afe4b953321798c67b594
8dafeb6ac9129848f98cd55263b412a9ce633c768067ce4596eb767033381b9c
4d3f118232255244084c4c974c6bae0a24d218dfdf9b856707746fbfe977a677
85d0a0b0aeb8fa6d907f167715c7089c9d4d154f345ac718ac37cdff1d572041
c678950b0d3bed66ebb2941b10cdbbb5a22c60a9d2aa9c83b607593f8f48e7d3
b15ce0548ac2b0a1cec8416d33fe8dcba9dd1136fdf789395ff6a999514ba056
72f8b98dc8e53f1069104d6ceb8524896455d505788b4c8316dbdb814f5e1cd0
aba8ec1059327f0d493b40cdd78d73d7699dfbbee5636466092b92bc54315e88
3495e06f56169accd84248b0fb56d64a70857ef055b752892700a374a9b73c3a
e076556f4cce09cda448e0ac21b2f9d436387f93ed8fadd06fb8d1c033e43a05
6ee498d1d1e45b6d00e8243ab2fe1ba6929dd44359aed3232bf43e22cb8f9e41
687470b095664a7f4017599084177041c87aa7ef0d68cf3d21f4a6177a7c98ce
4780562c1575d50bec4f4e019cf24c714e7b91437a3a64b7378fc3e0fd3c0e3e
743df7e445c74fa62bb8a0c3f568336acf75045aa9f9b923cbb22efb82ed3927
c8af84c9a4964c739292946936eca7408f9f6917527f350d6e98d09b8b0c46d0
7a5978c7cfbaab24e7c97c98b0e291c1a188445f1ebe18192fb88237e5896928
73d04c950b744e912ed1b9bb2d50faeb82b7d36f5b16340fc3a8797950db0f9b
97c2ee4a9ffcffb21a6aa4efad1f143a482212589e17b9e118514088c6010d61
96ba56104efcf10411b07cf1d1300c3c3f98a0a786c3606a2ac29bc11f939934
13620a00002bab707dfe020000
#<end update:2020/02/21 11:50:13>
#<begin attach ID:2HNuoLxcMp7>
789c01ed0212fd1400000032484e756f4c78634d70372e6d61696e2e73766768
0a0000c902000001000000789cb5565b6fda30147e2ebfc2d33ab9dd9afb8da0
843eec7d9b34f5b9721393583536729c02fbf53b4e4261b46595481f40897d7c
be8b8f8f93dd6e961c3d51d5302972ecd92e465414b264a2ca71ab17d614a3db
f9246b9e2a04a1a2c971adf56ae638ebf5da5e07b65495e3bbaeeb4004ee4366
1bcec4e36b815e9aa64e378b0f413d8c1e48437f29b9609ce678d172dee59a35
2b52c0404917a4e51aa3352b759de3d8059e356555ad730ce8783eb9985c649f
2c0b558a95c8b260205b11ada912889539bebf3713cf09bc83f5e67908bd134c
83c2b6a1eab741fe29ee1a8a1124bbc8142d34dae418a2b7ddff1ba94002cff1
ba661a563addd295e45b104d873921054c355ac947d0f6c0dbe7376bc8e9da3e
70924c18369e7be3a2fe67f29b9499331036cf6f1373bf1c52336f3d8156f1ab
cfbd23d7ef20d2211a6fdb25b70a4e9a663078879c047618410d441d037f4fc1
8f02db853d4ff73cc2638bf6f0a4783cc6f706744d371d12ecb5ddeb0c231be0
ccb84544514b95e3252b4b0e191752686b41968c43dc77d92a4615fa41d7c34c
c3fe009ce7adf48ec9003d2f59a1a12489da668ec9fcb6c6f8a4c62438476332
05a40e25898f14369a287d8640ab668d966a6b2dc96606d5452baaf6525f1298
a61f45802845b6b32730579e64e0b9fe47513021ef31c1f38e0b6d340a5aaede
c5c09f8ecd604956b39a34b5260f9cfeafdabd203879a49371cadd0bc72eb76f
e6445b85a244d3abc37dbf3e69773c76cdf53c14ad80025557acbca14233bd3d
4d2319bbee7a1a15d5560f0f440e189ceaf06110d8434bd877be69dc5582e952
e374f73089ed6877ee3fa0bff7aa5f2a06bdb260c4f47eb45072892e7da425ba
f4761f12a7efefd795edaeefc037a2e0ea869b0b753ef6cf83f6b37287be6b47
6e1a43c6c48e0eb3a3e7a9d43746feebb33fb577bd2db5e3d8f5a363afa928cf
30faebcee34966be0be793bf27653f5e680a00006f566889ed020000
#<end update:2020/03/23 12:02:19>
#<begin attach ID:2O6Y7IfFQQ8>
789c01c3043cfb16000000324f3659374966465151382e73616d706c652e7376
67592100009d04000001000000789cbd9adf8f9b4610c79fcf7fc5564943239d
edfd89cdc55c1efade56aaa23e463e1bdbe8306b013edff5afcffe0076708fe4
94b23cd81a60d9999df930cbd7f2eaf3f331434f4951a6328f0332c3014af28d
dca6f93e0eced56eba0cd0e7fbc9aa7cda2335342fe3e05055a7bbf9fc72b9cc
2e6c268bfd9c628ce76a446087dc3d6769fef8da401245d1dc5c0da05312a087
7599fc55c85d9a2571b03b679999ebae3cad37eac436d9adcf5915a04bbaad0e
71106215e72149f787ca1edc4f6e2637ab5fa653b42fd22d9a4ed589d5695d55
4991a3741b075fbfea0bed0404dcafed7ae8973cadd40acf6552fcad3dff997f
299300a9c96e5645b2a9d0731ca8d12fe6bb672ab5842c0e2e87b45277cecdad
2799bda84527f5b55ce6ea525915f251aded213bb747d37a4e3ca32a2699e63a
1a826f31b21f3dbf9e7235af03d6767f60f857189a3eb2019c8becb77736231f
df1088f1a8735b164fe80e9d8fd93497dba4cef2dee4575d0adab5ee65de4d83
73b1de3c5efb206ea90aa419bea5447d234ab54d226d73726db3a5b6993e73cb
f55d6fccf5f7fd433f766e134b337793698a6dae2901d98e2007d135083f8ac0
3aa89267eb2012d6010d03a44f4ed7f9e6208b3838a6db6da6e6dbc9bc9aeed6
c73453c37e97e7224d0af44772a9af94e9bfca1921a7aa89a3767cff21ab3ee9
8f425c3d811ff6ea487d5673ede5f518d862e818fe491e90f5dffa5dcdf70d65
9aaf4db62ecb1ab036eba1cd3ac32eeb4b9074fe33396f97cbea9a322a6662e8
05efa4742b6dd6089ea1ee43533ebec067f1c7d812a6510d85a296706d0a6d52
22baa619862836366fb9fe7f8f0cf46266d661d4133795538e4d6e43d1166e21
5ce1b46d5d67fac4dbd6de291e0917334b2bc16ce8e29d361877abb79179ae96
260bb42be411bd27a892a639ba6afe743e4df3b1e541b5bd306513d736756dcf
0353ea696b98a28b9629c645d7b44c31362853d00beb61aae906de98a2915fa6
c8784c31ec98b2b65f76ecd669d8317bb32d255f88ae69d9e1e1a0ec402f610f
3b2cf2cc0ea70d3b16223f5bb8da55feb37fbf1202c1cbe1635000d3f100aedf
cb387817348d90896bdb2fd8dc3445d39e14c3c6d6fd0909d3b0a06da244c274
2f4e0762bbe3c64c6d42b9a29b37ef49dc1bde6d6b644b1fad518c4896ad68c8
db5ec5b87f8268e808a2c251036dc63028f3a004d56eccd4f495fed81044fd35
48479097cd958f4e10c68ea0117a10593a82c8c251036df39ad8967950826a37
f6b56fd94f90bae69d204a7d10c4c62688b2b0250856cb975ce4402f72a012a1
2d806214c32a460e2423ff8e66e4238846e1a5072dc7168d86a35a3472e68462
c71e413472a01a39d08ad01640370e4656c70deb23ab518efec872d2d10f598b
b1a5a325abb647908e1c68470e1423b405508f8311d47113f611d4e8477f0439
f5e687a0706ced6609aa6de6f45ac7f64a16906e40b91120a908506e6458e5d6
71d3abdcbc0b37cfba2d1a71c7e34eb7d111741b906d40b51120a708506d6458
d5d671d3abdabc8b36bf9a8d8cf9233b779a8d8ea0d98064038a8d0029458062
23c32ab68e9b5ec5e65db0f9d56b64c49fd32d3d56afd12bbd3659e93f42dc4f
be01c3e4d3735921000021b0592ec3040000
#<end update:2020/02/21 09:52:14>
#<begin attach ID:2Oy4hZw41ku>
789c01770288fd16000000324f7934685a7734316b752e73616d706c652e7376
67230700005102000001000000789cbd554d8f9b30103d6f7e85ab6ee5560a60
f3918408b287debb95aa3d55d58a0513ac387664cc92f4d7770ce4a36dd2aed4
6c0f588367fce6bdc700c9dd762dd033d3355732c5d425183199ab82cb658a1b
533a338cee16a3a47e5e222895758a2b633673cf6bdbd66d0357e9a5e713423c
a8c07dc97c2bb85c9d2ba4711c7b5d169f36a5183d6535fbac55c9054b71d908
d161cdeb4d96c346c1caac1106a39617a64a71488067c5f8b2322986ee7831ba
19dd246f1c072d352f90e3c046b2c98c615a225ea4f8f1d1260e00f4e4bc8d87
d207c90d286c6aa6bfd8cef7f2a1661801d84da2596ed036c550bdebd60b5020
41a4b8adb881935e7774a3c40e44b321279584546db45a81b627d11cee9c0193
b83e70525c5a36948c09ea2f8b6f21136f206ce3cbc4c8bb536af6ae27d068f1
fe6defc8871710e93a5a6f9bb5706a93193618bcef1c456e002340828e41141d
28cc623780471e87471e2110d4dbde2abd3b63d9914e96af7ee5430736866dbb
cea0caed75cf880b7dedbe93c9bc523ac56b5e1402104b258d53666b2ea0eea3
6a34671a7d62ed90a9f9776847e9c6ec990cad179d569a7816f56f1ef8d684ff
ae3f787dfdfe05fd8ed19944a5566b74eb23a3d02dddbf777f1ef7f3b20ed31e
86ee743c8d5c823a4bbb7050fd4fc07ee8c394c6137f3cf3dde8041c1d3393a9
35f12787fd83c393f8fa0ee782e7ab171b1c5cc3e06e64c6b115de87d4b731fd
2d8eaf643c25e0ead8ae714c82d9011dc5fee9fe45df69485fc1784062e26ba9
72f8d817dfbc5ca81ae429bdde3f8d51627f698bd10f1a67252e23070000dbc8
2d3277020000
#<end update:2020/02/21 12:02:13>
#<begin attach ID:3ilbfuOFbA9>
789c016c0293fd1800000033696c6266754f466241392e32303135303432302e
737667ba0600004402000001000000789cb5955d6f9b301486af9b5fe1a95a9d
68e5c384342183f462f7dba4a9d7150503561c3bb24d49566dbf7dc74093ac4b
b349cd2e8c6c9fe3f33ee70599f876b3e2e8912acda44830717d8ca8c864ce44
99e0da14ce0ca3dbc520d68f258254a1135c19b39e7b5ed3346e3376a52abdc0
f77d0f32709732df702696c7124914455e1bc587a204a38754d3af4a168cd304
1735e76dadb95ea7196ce4b4486b6e306a586eaa04873e70569495954930a8e3
c5e0627011bf731c542a9623c7818d789d1a4395402c4ff0fdbd0dec0a9083f3
76dea7de0966a0c35a53f5cd2a7f11779a6204c52e62453383360986ec6dfb7c
a514b4c013dc54ccc049af3dba967c0b4dd33e26a48090364a2ea1b7075eef56
4e5fd3770360924c581ae25ffba81bb6be2d197b3db09dbf0ee6bf3f44b3ab0e
a0567c78d93932fa079056d17a5bafb893f154ebdee067e5d9d40da713dfbf69
09c2b13bd94104c1c4f54378ed7b92f0a5497b80345bbe2420bdbea19b560bde
b6db753a814fd3ee3aa9c82aa912bc6279cea15e2185718a74c538647d92b562
54a1cfb4e9239a7d073142d6e699a3175e5c71f3d10e43b5b92a610e23f6acc6
71829be8dc0456b9b378af7bdce5d95f5c9e8edfe2721458ad56288aacd06f6d
6a932af3862e3faca8a9644e86a33fdd3d50262438bbf465271d0c477370006e
b9d304e0ebb9099c8e603c1c3d299ae652f0ed8fd310e3d9b921baa8d9dacb96
9994b30cc07e7660e1305525b98647309ac30d749a6d42fed7d731b11c2dc153
21e5cea2416cff348bc12f7d911a64ba0600006af126a96c020000
#<end update:2020/02/21 12:01:20>
#<begin attach ID:3iPbh1Ccks9>
789c011405ebfa1600000033695062683143636b73392e73616d706c652e7376
67ab230000ee04000001000000789cbd9a5b8fe2361886af777e85abaa4a2b0d
e0234946307bd1fbb652b5d72b16628826938c425866fbebeb63e2985d53a94e
2e267c38e6b35ff33ef890d97c7c7fadc0d7a23d974dbd4dd01226a0a8f7cda1
ac8fdbe4d2f14596808fcf0f9bf3d7231055ebf3363975dddbd36a75bd5e9757
b26cdae30a430857a246a2ab3cbd5765fdf2bd8a28cff395ba9bb88da2047cd9
9d8bbfda869755b14df8a5aa54aea7f3db6e2f0a0e05df5daa2e01d7f2d09db6
0985a29fa7a23c9eba6db2166f9e1f3e3c7cd8fcb45880635b1ec062210a366f
bbae2bda1a94876df2f9b3bcd12740cee7656caa7eaacb4e28bc9c8bf66fd9f2
9ff5a773910091ecc3a62df61d78df26a2f63775fd412a21a1da26d753d9894f
aed447df9aea9b105d987b75538b5be7ae6d5e84b62fd5a57fb73039e1128b3e
35652d7b83e02304fa4fe69729372bd36119ffb863f017b76bf29deec0a5ad7e
fd598fc86fffa123aa4539b60788c01390ededea6355986156edcb3116b713d9
11a27b42a0f37d0d1da1fe180dedeff62f7e0790d37c57bc77a64d158aa6986e
4abec8a2c5aede9f9a769bbc9687432572f3a6ee167cf75a56a2d6efcda52d8b
16fc515ccd9d73f94f2187e6adb37d329d78165a362b99d236cec3dab9d18e66
148f2653cf7df5fba6ae85d4a605bc6d5ed560748df283412decf0ef6beb0d4e
e0123e327101a98d8cf2ff9537c3cb3c87247ba478c9446a9118f4652c5db291
b571d8dad8b53642f3795b392ab6b9b16feea07a6ed45b7367339a1bc109dc8d
efb81b6b77e378ee163284bdd5751c93def62a8cea7b848df145eac1f988f8d6
2761eb9391f5d7335a3f9bc0fac4b77e503d37eaadf5513ea3f7319ac0fbe48e
f789f63e89e77d21a3f7bb1b8bafb7f77e16ddfba9f57ee67a3ff3bd4fc3dea7
89e3470267f8f253d3169ec0fbd4f77e503d37ead56c27edc8e6f0be010da713
789fdef13ed5dea751bc8f94dfa5bd41e687399314603f26f20af23e8c410482
d6fc04492472951b38c5d867828599602326e6980f2c1353cc07cc6722a89e1b
f596093ac74ad03241e32f05b9afff8609a69960f198a0a407c10de1c0811b93
6c6022d62ce1983fb54c6423266ee689759889b57205cee65b20abc9689a05b2
90e3431194cfad7cfbdb3d837c6c7e7fe80448acef20b1d648ac6320818936bc
f038865ea8260cc2bc506f1fd4fca0e3184410a2ac4f1f73c983482e5383be14
419f8734cc433ae201cdb172e88188bf72107a7c2082fab9d56f81986396b044
e0296689f40e12a946228d8784ba1a1046311c507063943a58a4b1b140eb9e8b
d4e522f5b9c8c25c647a2f6d560f84cec1853d925c4fc045e67311d4cf8d7e6b
5532cb4c913a831d9b8bec0e1799e6228bc285f239d12c603fc6b9f27fe6c78a
0ec3088975b44ad60600a2ce56455e991b0cc537c7ab79988b7cc4059d63a36d
b9a053ecb4739f8ba07e6ef40f8b9a19b998403ff7f5df70916b2ef2785c503c
b0308ad38185518c072e68accd760f0045960b917be082fa7b6d04835c481e5c
2ee6387db45cb0f8a78f428fc745583f37fa2d176c967594e1824db08ef2f5fb
5c88e1905c8897685c303ab0308ab3818551ec70c1a273c17a2e98cb05bbe122
fca41921f70c8aceb1dfb6ae9860bb8dfc67cd61f5dca84f6784229f90893bcf
9a917ed68ca23c6bd60f98d5b289faa18200e19b18f607502cd6767b3869a2b9
398012b99d0328d66fb81f36f25f6b9e1ffe0576f95b84ab230000b2a49dda14
050000
#<end update:2020/02/21 12:15:45>
#<begin attach ID:3lelWhCFaIV>
789cecbc6554145cfb374a7777c310d2258d32a47477b708489774ced0dddd8d
d2228d0c5dd24ae3480e4a87a080efa0decffdfcd7f970def79c0fe7cb712d96
ccceabafdfb5377b28101010049c9e3b19d8cbca5b29e9f33ce6e317e213e217
e5717379a1128980f0f0f3f02f46535d01178b0a0bfe2bae92a29c360202b226
020212130612bc25bcddb907fe1fa2a7b6820c42fd071a18fc03ca0b69356904
84a624ec5b2b54f8674c3745234f0404bc81871fc411d76a5b0404f067253969
5d5ff3c302dec035c5c277e8341886967c0c965252a1fd08118868c838781438
7cb48d0c9f43fbc311224251d19170f1286830303070f9e02329da3f8786f5bf
47e5e5e3e313f5389effa1ff295d2fd5789dbbe672ef274250ad721f47c6426d
6dd5e2fa15feaf17f1fcc314367609e0690a9b787ebb5dc3eb3f0d89ffaf1a54
4d7a83ef7ebc6ad1ad6f681808b28437863f346e74fb9ddfdffd6cbccf03bb7b
795d8cd087804cfab38fdabbbab045728ce8e82583038383f1de85c328b18b1c
b0217b2c214dd78b2212ee3e3e5747eb5d0fd3fa07c34fa34cfa2fe2c1d3ad43
2af7a9a775aefe48d0f3d43ec3db03fc98bf8d37b0aaa2a3e3e322acfbef21bf
44d2a95a44cccfb2e22dee004d27396d8ddb26d764d80df787878792d8f7970d
21606d9babdd4f162197f0457c2ffb827eeebe4a1db0840a38379da8e5f25af4
9ed8754a54082d415ef84320ef6c7d2f7ffdecfbb54a3cc1f7c0105760daee7a
d72b7a60a0e573e7885e397a473278b386e1f523dc0633dfa425bc0dbfc85c54
b2dedf3b3fb4e27d87cd57252f8382a5c81fa39201e789c97a9506e4fad79afd
f39690363c89681e16881c84bc58b186e609920105d4e15b3c2ae2a4b2c46a3e
a125808b250eec4af41408a4a3a5bd9bc1400481b1f4b6d3dac1d31720b0ebdc
b6e73364b2de01eb3fc423999789b86e805471a97f41d4813126bf09ab443a97
f79d301ca83368808b48d68bf4bfc66317e59091f5d684ce8175715fe4dd5717
828f1bff7219fa69fff2eb27d52e5c02b86498fa2122a45c813a237fc844999e
9e2627271fa297f2edcf13710dbebf795181697f1fb503279fe261bd93371bbc
1f3d3d3c20c2720656d0275c70bec9b037cbad0a9fb7e1e6a8195e4f5a3ed0e5
19bdc15f4943ce16141cbcf154ccf01a2fee419d101107ae40bb7cb8ecd48006
8296ffce864bd4fd414637a6b3a1ffd2390c79311cf37f9104157611252b5cd2
69d3a4b8ff770b339f143de79f87c0bbcf3a4a11b137adfeaa0eb121e5d74973
0e013a61ef749164c8ed35bf2dd1c1b80824af3a2a2a2a9992534343e342e0a1
49e5b3a3ff48f617c989c700aec04a6ef8b6ef5f6e87bcb17b347802895a749f
4956aae6741d587de74a490598c76fedfba57525f6ea1774a7c6e6bfd4c07533
9539c31db44487c314c8f6e95e61f906ebdaa24e8df6af01f039f4fa5fc6d674
2022e5eee9c399c3c9bced07b99a7c82eaef45e2e72035c38901e8d86644430c
62c9330e41bafd0303b22b4ecf9f16d89e34b398ad603b60aac1ce77aed93d61
5bbbce0d119ff7017a1160d7edbf428cf4cb5c16b615b6820a44f4a74ac69f38
bf1483ebd73eff739b010076a112ec4e1e939747bd62f4ac2f48250f2bb4d327
da806a7498c3ef69a7fc44a8077b4af0ced1c101875c5f501da7123ea9fc53e4
220f2210bbb95380d0e7fdfd689fdc1856c3987f55667705f97e7b7b0b37af89
8909d7cd5e30a300aae1193a41aff31d1af540dac5424213b10ddb6be2deec4c
1bd29f2f57a5fbac73e73729f0050ba949ef9246f4cc882e34c11ed22c67f36b
fd371eff5369b8e7dfa2f0e90d8d57a44e5a4149e0eda93c113827affdcc852b
515580ef4c472f90ef41dfdd5c41b7b99d1e8a43714f3894e9c0de100323f34f
1f060690773a0d285d4e63cccc9ece58f2049af65cefab57c922bcb575f22b45
398dfffaa0c969b8c630b037117d8383edae0bf2f34992de23e35cc3c306285a
ebc13cb998872cd4ed273e3558c84e85cf626d6e6d31d944e90dd60dc9598d1d
9b5c87fe248bb9c90f9ce338180ffb196bb6afebff522b5599c2c8589198714a
bf0d39bfdd34a1c701fde08b437206a30416418e0c82da5b12a0328746777d37
9153d2ac41b7c61aceb1187720fa20444470b32f44e1b2fd58652bf3f2f2fb66
c8e6f5ab78bc511270d2bb5998b71d1eeaee7c3dcfe3797b98f753062f797cb4
1f96f910050d750d0d1517c7077970103c0e82bc8923dae1d031c05365c0c00a
c811d195c90dab144caef0cf25a870dac0dbb72a4ca48bfda83b4c6cc41e38a8
496145342ac1fb88d1f6fb3b09cb0bf0f7e8c3cfaf65a790f05e40a971b0378b
3ffbbdd6f8fefd3ba0e8f470f5ddd6d6963bf020aff4843f4f6a94c4b560f971
4bb9ce15906fd5675117af47adeaa75d7699d0e53cbd56aee1775bd0834d4cfe
e87f529d2c320f22148f3f417cc53b509e70ceff83424ed973afc500e6352a40
30aa6db0038b8edbf13ec4684649dfadeef4a59a042775c2b8a4cd6c53deac4c
12877bb1b6bd93a4998588c02311f4fdd5465f08fde34b78fc2c2c2a4a3a2919
2a012561b27d085d8538210174542b274b7e2030921ca2cf9f0ef71eaefd124e
501055fbe2dd2b95fbb644768fbae4e454bced17652c25f75a7d0426bd1bb280
b8c71bf60ccf57fc666c05b1e43d0965a9d9f6962883be129d3a9df5b4fdf573
a2ced123db1ed03281c1fd5960568ae0409acc8f9a9e0a94e4ead6cece337368
31596f7fe309eee0f7e34db8cbcada11af7d676565b5e9faf98410f8e851c2a1
72f6ac8c69f8eea028a60b6a0b2648557a5dcbb834498551b5a1b88c4f27aa38
ebdb5a88f12e01601e234a5d234dbdd600b0896a430cececa7c0a41478deae15
4502fcbc6b152af8845e44cca138a08940f0801d6598d6c1514b3d9cbf70e4d3
5ba6d252f06de5b557562236ccfdb235493df58d6a23f75bf683f19f915bc6d7
6803109187f0cea58e5bb4bd1b7873b603b72afc1cf7999813fe634b496f7be5
712b6be7256a68c2637ef6bae5a66c2c9d2bbfa3a1d7e9221807851b2ff65abf
8560e20dee60e5f82f88f6bb2f6e4bd97e156fa18653482616e2ed4ae7d685c7
15f8ded9d46f46dbcfbd2fcbd57783ff31d9456f0a616d58250ad8efa96e1bb2
a8fe4eab2639fe8a9eff27638e6d12c1891d4cffded8d16ace636af5cddf5a05
58969b999b47aabe841bb2c2e55d796fd109ff19e71eb03f307619a48a746cbf
85a216de48d28d2e63a7167f8ce2ff0140e5cf237a347c9f55bc7cb12a263699
e4ef396dabf6d39efef40244e44f1a2e6ead0b1979525d56c6d40670adc479e5
f44ed683a891cdbe9a6ebb63c5f733a3e11fb1c033245495850b0a4ffe183984
708908bd1f8d4a76403fb6cfe1e77ca65ceebcabd12d38d10ad01d7d1fb6ff1e
8ffe53ecee7d8b4ad211467577882187a8573e8b910cc9e60cb48032e324e8e7
d5e1eded53dbc9412b108fe6b5e873bb6bf02addc981c99fad14141492929200
f3547628aafcb6f2ef31c049beb795826afb3a44419d5a821d8e3a8e43f9da20
145b5d6a0097aea214fd29df95f2a7fad8a2114783807d938d5f185df6340b1a
e1d499e84e497c9fdb66bfb1438e7ae0fb1e5e8daec513bb7c43c52a22ecfef1
db182f3f9c9f9fc3d1818c1df5fd5ec8fd1e6fc8cdc4012f7902f207c6608572
7c8a1b82c7dcef4133c56b61733ed6549269f8159eb17639c220ac976e4fdeca
a36ffb910ff10a88eaff54d1fdf40be35021267d6878a0a2d1f060ff401b0bec
b7f72a42845bf2d7edb9523f0ce6d0ce8a3708470cb992df8489c3a95721efe0
008c3b30c20a4a8df4713d79050d0de1a5b00e54f1fa74845ee10c94e417a658
efd87bc0249fae10a7bcba7019bf4cfb9eaaec2025594e1e396e7a898a465df0
4292c5d934ddf8e3a7507b85cded09b364990fe2b6575bf0e4d23abd8063d117
8cfb7d30ecfaabc52ff15ad727d9419fe9768570295bf8feb32dd904adcb4e53
90564d5a92570a73c2218d3c10d44ed51e6f8f4e17b153fca444b06441915d25
23217751ea76dc2c504825b7a2c592fa8c92fa6791b6e3d32862e9cb56437d34
9da5999c37148b0a9d3721db82f360800026747e2020921b599ac52ee4dfbdaa
68ef651ef253eea79f6130b9ebf227199fa56af29f6563001b7e3d298794eea4
274f5774556b3ba675d20653298608f7ca1ffeb42855db4a19b7c412f31ffd36
520d72adeb737490c7dbb2f685da343a7d759ea43ee018e00889dd5c94fa4ae6
bf1adceae173c89a5ffff96fa4e9872722a32dd94a5ab8538f8c8cf404833ab9
0b302c90edddef9722d9a55207c930eccda99575d01ea24dbf4e554841228f90
46caea9524f8fa0d282920fe9a04abcb384a9e25b07155c7534086a22408bb88
8b9bf6a7ed2bdf2d858c28a1926a295721caf5279b6915682a7cad4219194bd7
ec6110994a421261759d9484c363fcf59613dc48b02bc387e96938da267bcc7d
1d203d1a1fd10b6ec01b047730d8b695df05bea39e8cf1e2b5755ceaf8357976
c86aaa3623be892170fd21ab7e7009747cf7f3fba74f9f00369538228e9b9011
b5897d0c38e8f1667a47a1f4766695e03b514f5f78425984fb9b51924847b389
c69693d9b3614cac0b6f5b901e328da649a72d348f92ac37ecb33e100874b919
316abf8487df91ab57cff159027f26f7911f9399d7b8d0531ee1ccfbf73acef5
24afe43561d20789526ef6d10b3e799f2ac9012debc673cc5851b2aa053cb23d
e8af9b6117c2b8484879d6921e159d3823db254cccc02bed6fde695af0bd8a08
7b33190eeab726b2785fbc78417d0c3bdeec6b4975be0c598ab48a85bce8b476
82a0dfc3869fee6b5cbbb8b830eb6190a195b532e405a396eeac0a7762015a22
f3dca65f65b44a8588877cad568801e820dbe40830aa560d63f7231808cb5de0
a037ff96a8666fd04f9fc040d3efc8897b7b7bf8f4c0fcc2c2c499abf7f0b245
9e2df0e4fe2e40ff6b32ffbc5c21e1e38270c5375c95524539f26eb9f6623373
4bd5da3f76e9250c742ace30beb31e46a992e270fe1816de26a678e9d84d39c8
a3eb8bd975e0cfb2e0573b218459c99a2ef8aadd443413eccac715287b7e7d3d
2a08ba6ad2e7df18849b172f2fef66b79fc0eee2047cdf61f6c0f7ef117f59ac
c320a9d334148fefdeabc58d805411d1c1c90e5140c054d7b8dbfb1c8e8a04cb
f1af209c85a64ef445dfa583d32d95727b808ee68dda137f155b715dce28e795
172b25efbc0b6098e6a8d89bf072016fe0eeeeeef2f2edbd33025f28a51353df
3a77a08a5d2b043d9e7683abe9ed951a61e66d04067d2dc9e343434aeb1ea6dd
aae208615d2b1ac219279098aec3bce78a6a1e8bda50277ace0508c11f497c4a
b142cd0723aaf1418e0fc5019c72ae40a92c1e5edea4c444c377fb566c423aa1
2c21bed097356a29af8624659c3635d0b0a3423bbbb4cc903a01538e7e9bb5ca
a30b0c19aabf0c196a153015306f84d23d1dbf95e23b8a554c355dc1c119f39f
fa2295b2e32406ae9e068bbeb98164111d4b0428e7ecfd5e9d4cdb27f3a08be7
a21fea8e08f21b2e54bed736379e7e6409cd14891c83cad8257c10bf1bd42f82
cee1fa34811b6d7059c87ac5ac7e170cdc394a1845398c5c37c8d8f40aaa9247
4e528f1636ae2e74e3af232d540898a6b06e9022f54a02eb420ae9626bab053b
30bc1d4c8310f000e9a889d838b6439212124355a1b1bae232986fc0aa926e18
bfe5fb80cc55e0c5947f384b081f744b8a06efd2e19e9a6d6dfb34e283f07a57
47c76cd67634ab16f9b4b44342f605bf0928a216cc66cb629fd9838b268fc02d
279ac9c6ec86ca9df6dca03ab97834d94816f3ad4c25bd28e8b7c53c14452cf0
6a47a23fb56fb6fa0a7d79ee98684978956e343f3a1eff7d6eca61893bb54679
871a9a4105b6cc7ad689b2d36d7eae96e9cd454a6687280d63c532ef93feff92
a7e1b5616a9e412e2209e0b99d0a61d6bb3b91a51f7614506497cf9948ef9091
d700ed96210afd727e00c1f74c34b37d7305c47f672e1b5d47e327613b5a5660
96602e58b330f40b87ec96f45058d933deb43d716039f8ecf6a41d6fcae30740
20a8b5d31371e8fd956978214d1bf26ee8efd45c6603dd5a979a184b5fd6995e
dc52a525665745a1a6ef7b357aebd23e5ed7490de7727e8cb8b70e495ef03e3d
e9a510cfc5733f229a74cb66d860789965981326439d2264dfb0e5444bc5aa3c
c7a47a69d75494e0adfe3ac7d2c75b5b03b18ca2d787f1bdf264b93c9a450347
28eaf9669cb39c0c66b0b5086903eec038b0c103fea1c5a6e72daca4682bcf51
90e34a1a74c892e3d26204c7e69ea2aad5e4fbd5fa75325b46557da7a95f35ba
6eb417b6503b400d08ceb7829a3c0ec02a4273e58f36c00cca88850e3bd72004
263a61a500f492817b4c1353aa66878ca9e64dcfb3da3246afa275f515545538
520a0fa4c23fb8b2b00d7de62c9bc727342358e1fefcc57e65725d979c23585d
21fc5bb26bad673b1e59ef10a4ce154a1dcf034e228f27d7381e52b2511f8a6b
978111bc2bf44aff40cc4ee2413c7a5efdeca7ea0b7f4ffcd8b1127cd571f7e6
32ff3c5ec6fd0457d3c5b682887dd2f509adbdaef09a9c38ca5cf3b47a3021b7
2eca5763427d3ff0aacd1feae5c35c9e1175923a282f2b3ae5989dfa54f00575
2b649ae1681c3c9e8bd9de483cf516f11bbb62f47a7d419774a5a3516a2d0e9a
4f3c8ca8c4aec82988c53e473a5cc9b9ed0e3d2f3d17ac57926dcbb2480b2b11
f80fe91f40bcbd661f75217123f16539d88a3a443271638963d1b048cbc97867
d572cf3a9c78502e69c910123823f9b009f7c63aa704141119884b232e41a077
80a7a5b4f37acae180a433fc2b4d2ecf8cb73aaf314827ba4a95627dc953ff2d
dc65d50b4fdc3538085bd60600a596422758b85fd8a88668e252bd4eb453cc50
34df259cb8af124b75186f608cc4a66833fe78dfe4f5317edfcb50a8ac51d93e
73382351071ddcdad0ea039bf244aec152107c1ba98a94c5a38e44836d2fbd8c
2cf3af7d4804974f6c97c259a8a3f1d5126a909090d0aa56625563c3f9325967
97b3a60422c326c984a81a344b48631e661d5509aa0a04fc98455b1e1ff3e2f4
32adc85990e923bebae5030b9f9fa7067a5e7a215eb601fb1ead5affd1818be4
918fcb687be7bcba434595fb911e5ef9291bc523ab575a60b250c5f18c47f2a4
9833fa049304c5a065b4689c2707d019558626035d2de343fb3aa28466bb8347
c9e3308c6a480c48352cd20d1905342324f8817d7b87307102f47a9efd510969
05b9b5a2681c32dd3a0d9979103c345db0041667f195cacc948f919471c1b465
f850f99c67191c8426e4e465e6d334cba3d3026a0ac4a359b5bf1224a47d7c5c
5613e5ec1465d4251a614cd59dccc3ff8e432def4098a5d88ba477465f028bb3
1fb5641a9e61df729379142b236f20fe090beddfbd0690df710e70544ac3088c
09d01f075032b853c8db267845f438b16be9a7f09bb308d64395f8ac56f4a2e4
250658b72d4a7bde7b633c7b5292385b94ac3113039a54975bdd2270928551f1
3ccb67864981ea06855170f15ebc31fac445f09b152ff6c06ee36e5f82bd74a2
dc896cd36cedad5b193f76407409ad31d314cf5b9c2114524de6e44791993971
2a870bd23aee1531773187fb522b752e82c91aaf19bdc7498c1313b01f7d8133
d2a1afadf813b773cc8fffe74b61f20edab611780abb0a84a0af05ac3529cf63
bce33179cec4753b34d5fb1801f5255f66a222a6774791034afbd82243572ba9
0377f8a2258b9c63e342c2734b8679dffc741fd98f869fc23f70dab64579c61f
1f7949cf213b8897fe9aa480e9852f2e9c78c85311893b404db87e570dfbaad7
827d5217d43df83c535ce1636058460d0d061b8b35766b0d661c247b718d996d
61356806ba804b34c5f715eec4015aa3d06c119815db0aa97f45615674c1267a
81d0a12763052c55a73868dc9b4c9c26b952196385ee411d3ad7d510dc9a3cfd
32de90e392bc1cea0c418598ef8ec63c4bcf10def5ec6251d9d2158304539e29
52d68ea0a16ec8928e2f020384a274655ccb5486aace4ca45dc5348fd2d3e7d1
a545e610a9198da5b2ce6a187a13706ebee869967a65b44998be9b1998c3b1cb
446ee885a7a71f3f14457a631654b160b7851f78ddabf76c0a2bab15c3e5518c
1649b1548e896a09c81eebf155cd63f01fbc48349ec95d3839794dd9595ea6bb
d1efb0f7aa5830697eb19d04d387ffa7a78452791565c39e8be175e6e4bdc675
682795d1ca010feecf587742059a1458cf384fb8ac9dc4b4db74da8c61dc77c9
290ead703265913e9c1819f134bc22a20bcd145c7e6a2dec8a73d2f4d795111c
3272d8a2a866b1c91ac54fc98dc48913b5a4469622832264f1cf27acc990fed0
4e0454dbef3eb6adfbf438c8e4b55124ca0e8a7d26ab96fffcb43915b334df62
4e5b7a6869582ca5326ee4241556ce6bbfaf933cc5aead04573d203f05c4f2af
d6b95053afa38ba73d41364561303d81d74b0752f98adfac40f2da7b712309bc
51d19f3c45e0c0c08e1ebae5f2299a21c5911836c7cd218883897783e30843b6
56a3a5f262ae4685ebe28b4a59e54ebb8d9b96fbaf0a7bdd384a839aec00a47c
4b87235a227305ec4d6be8e2bb135c795e082bbb151d7be5666cdf418d51e465
448f3b6231e3f24584aeb27d328a0944ca48135bb9aa3a2599dd92dfd0dbface
abf128b334df48a3282cb2f4b024c858d355763657f75ab9951c5860b6b3906f
9e8fc10263952b3fcfbe7a903a10f2e9e629cfb4c079a8d2d83fc5e56cc5098c
908a97da84127fc0d0f508b58b84fd97a501ac050d499b492b932f5c0f02b027
de2a79ab7c6cc5324a8fd3da91b08f49fabde895fc5b1277791628a7c4f612d6
83552a5cc73b3c206b38009e3b25eecd7c4a0a5265bad6f9896e5969f0173b41
fe747b50400574067fff5ec9fabbeb3fd8a5e924a7b0f1849bf27785f01fccf5
77de9fc36b7867110cf3f758dc98bfd8f4ffc14237377b45217c2a3b9bf7879b
f7a74921bee6c2050f89f4efddc45320d0d13017bce5b7ec35eada7747b6a197
fdec6c67825c83ebef550825f4a16b7e5ea7bd69b2f974704ee4f7c645848559
6a5186d7f1277f5a32f7f65ea095f3df7fff5829cb1528cff70e1400b98878b8
179aecbfdefc7567d193c2873d72ccfc134eddc3a591802757e0f0c3a591c0c8
ffdff0bfd9d046dcdbd5d52560d3b97b7f0f5cb37ae885851d828e8f437efdec
7a753c03b4e9fc727b7b3b5fa501c51380f7aae23b7107123c1ef6427405fc5e
4cb5c1f07a320cae52f8b24170188ebedb1072f7f5f2f2b2efe353090930edef
1531b08bc4f83036431ece803c713f90fb3c1051c9c415b8fbfef77d5f762fdc
6c90e1b3e1a37fc0b58917fffbf60f46fd308f0cf830d8f5bf06e7649c2c7684
d35a4ffef339e9048ad577ffe3653db6f78ec0d6d648d2f1460f760ea8f3ecd4
f2cf9a768f20516c96de4eb2c16a663738ed1d1dec396b7bd34562cb0fa7eef4
987fb7d865083484cc39e103836fb35fae91144cff96d2c5d436588323cd44c6
4c4c914be6118037c4d7d7d7dfbf9470dc46a782af42059cd2fdd44e69a6772e
8531d0f329acae8e53dd8df4ee717014b687e11f116daa9a5c1fd0992e6630a9
a6f799c9668f9fc6b7de1e1da9ef90647eb1d1a7afd24ef1a2222e88b76c5e19
12f6c731eac8f5194a7a6ea3c3c15a77367e1d17873d2705707826ef25de0456
34bbb1fa2b6b012be8000e5fe11afec1b8158b5adf7d6dc874921821d944996f
c6b8caa947ffeaaac910039be4ed89ecebb800a5be85a8bc3cea39ddaa94eae7
e923c2364fa4ac9c58efdadb787acf98d63102b608750ec6f1a3ff483dcf4112
2adb974cc705d8fea49b29f9f429c30b87923927760d49b367b5172749f27ccc
a495e1cf48630c543112ebb8fafd3a7423e57ed86a591d501f2ae46e010e3530
2562701ec4ff7065f65bfc679b5059c2648a3640df235e563322a0b4522b9bb4
7ea102b609a6c564a653fc99af3d52baa69f531402285e4e8e3fe354933570be
59a2f12fab7e50642ec40c2beab397ca3bd9286de5d3b636fa91d25faeaeda74
d5730fa8c1f85a71ce8c7a1c06324503953b04d4514bea35f8badb6eb5e694f8
199057dede7a3731ce663714ff2c870e45bea3426ec0ba11aaf0b8fb812829cb
35777cc09ee0da1487a02916230c511023bd44edba96e8d6e304bb8c5f89b68e
2be9547b39a16330a83191cc6178eb999387787a126f3dcf5f8855d0a8f9d780
ec1803919462f157b5e73cfc484d4d4dcb3757e3766aa8533ee2f332dcc98ee8
2e200ba08039da2dcdc9a3b5fc5ae51593a857099b0a042b018503ec7487652e
b0fdd2fac0a7ff5a392e7e78b82b387e1913bb08eeadf32264bd3d529a5c8101
d6ff78ca3b5e5165c59c82c67fddef4f2cbc48004fd350fc330be869f9d7100d
af39a49e7cd9541d96e4e1e1a9c7d26dc67ff5ead5e97137cef0c8e5a61b1deb
7f7cedb95be28564a3958a72550882eb8b8bac2b193b7cba584936b31b057495
41c99f93254327c3cb7fdd344f0c7b131e2c56d8b430f3994881c6c505ababab
88a0869e840cf16504f351c265ac395d9a8c73a3bf8c159ec02b0754a16ac660
9f986a2597b35fef3ee224a49b1e40a1802917955343ee50a139dfe4068b9084
5f32c8fb622cdf9ccf93f8cfd4f565745a291f0f019843009278ff7896c6f5cc
23d32abcabc876486cb9e694459f2c0443a54459f1cdf2de29dde2fc0ba7d27d
a7a134614ae8f080bb23085e5c71344a588b7a054e8eb98f251efe0cfc477397
20fc3c25b00683c637ac1c109b5e1dab2be612a0303d18a6c6d64eacc9df69fc
7d3fa527a38b2d8955265c7d636383c304e9c5976fa2a0fb917a758536033ff6
878be0dfc2300a8a6ad0bee648412b2107144959adf3cc8c743963909a874f7d
7b640e17f7054721ede2d85ca27a07b3d23523841cdbd5c585a4fb503aaaff6f
b82102e3d7319cad4f348c43ad6a2736d80207b7adbe3947182bcee2db215659
f172bfcba24ec406b41c31d37e4c7bcaa075834deaa481f8ad429ff91b1de25f
7ec85803d9c0286c771cd41c9192b0085da4d2fa592ad8056768970454b6cdd6
4e91da44d9be637f68555832bb826c5d3128f1ca86959fd9bffae39c45d87e31
c8c140f9f513b4bf42e652b97671757dfe34fa191b071b5d1178efc537e5a07d
b3d3f9a84ed70967b9a2fa39241327d5c22a33dbe71e1551d1ecfcf28fa9d8bd
b507d519536a5926261b948251f1fe892d37bfec650747ccb209524a5aa52cdc
e3da06375255b4c099af88096d13b786a33c6b4e309138e8cfdc457d08715856
23bad3d80d0c0c4e8b75dffdb6716c380e617d518b821eeb51366d3ea69cb734
247ce7a6bfaf315fa200b0d8d1ce26fe90156cdc29d071f28cb979d4e2f619f7
7ab14d0652faab66bc95a6bf2be8d3c34a154e1d28574044881e11925a1b73cc
6e89993c6f91712151fac378c877ae9a935705e5ec3cd8236a258d55c46b887f
1da985a897a41b7a75e51335e221aaa092b58238a63f6a6b59c19d54777cf556
ac2be3a9feddf25ea1ba1bfa5fc14dea5f5f211e62d4d4cfeeb5010430d8ec6e
d1ac6c3f0305ffb733ddff515afc3f1abcac7ecdc3cb1b727b3a52140f4b2c2b
2bababab2b0ef8330ebd2d18f2fd68bdeb894de7161c676dde817eaf441a52fe
122f5e724ee8ff13dae501815ce7f492c1bf130b1e940070499418f0ea15f963
eeeab886977d9cc090fb6e6783bc9aaecf773d047fe7e0f106be3e850303ced5
640b1d830d80e0fdd5e16ab21fe68e09bbbad9d31d6a0dab3dcfeef6f6e2a07a
2250690f948bc3a48e7393feafb6d1c98064be82e1cea30d359cc7f99db25e2c
81ceea250924facd9e4376f0dd4c613ede3bff84e2dd64c8ab800013076fef1d
d9b98c93b7564e107459f1a2bf461f81b9a9af7c7ab4fec42b96bb0b1e79e9e8
e8acc592db3b3b4b4dc18e88a56156c9ee0dc564010eacdc49a4f068a01da6e3
3deefd5ad12c50f91b37bf6e5f57978e0e5665f205bee4ada6608b635535c938
a04d89c976b95620839465fc7d98b6732c3a77c6a7822ccd9714860ff46e52fe
65228ab0f78d133edb60f5091128941b66c8c3964e6d15fcad825693f4596a62
9f9314fb28a3462b591ec4e6847532868f8af90d9a4d07de54fdee3551abc633
a26f2c6acca70b2c6aeb5555ac97611ba90c2ae5ea61146f553365ae3c30e6d2
6748ba9449d9b5e8478990eb06c8db143aeaf1c1ba5a7eeb7e15fb04441fd33b
cfd6ff66264f3e68577bfb68d655a78717e82c999d0b4b07202df651863b6362
db5abf9e89b7dfc11afbd49dc19f1035bab294b69616337f7c875150512cc6d0
1cd417cd4bb8b5ac225e48b56813184f68bb632515ce052e17237764972f2725
143523fe8c554d567e37882de66e96dc79ae5c523047f8ccecc6e5af6d892d29
74721d2a223f188191ba52ad0ebf0a922ec6426c29d32887b63a530e03805d75
cba63cda88a81819733101b1343d41b3ded38ad75b0fa31cbe21221151178944
7c797e8b66b62267389e74892620a633316c855cbc6194af0dfd1f5bbb29c3d5
7fb51006b797b189b1833435697d2259f83ebad2d6da360cd412f26f47b5ab89
8638d51849cbb2b933140ebea868d6135bb9aee879cbc328909909bab2137433
ab4879635db7c630d86db3c65568bbd881118fb43878a50d5756e1d00f68786d
377d7e2ef0aa00ce9638c46b99358a046819a6c0008fce70645b932f185edad0
de14d72a98e8c12683f42db6c8f2e07c868d405be24bd97e357b450d691e2351
97b6a1b13afa9792af5f5408a6b5141b450e1d5770ade738dfd7fb62a5b764e9
14a7d8419968a9cbc597b3138b9e7fba94e446f7099b63ff6dea79126b39ae1b
dd627093d7199a9d9d45f8f0ca128aec847c1edd46a834a184a04df42e963df6
572bdb7b0a12849a410c65060e7078069adeac30697b6bfe1bac121e20d88c06
8c12a0e2ad122c1f83a45c957c6f2fabf6cc7a4b2adb71e8cdb837e5bc1947d4
f89978dd6f3fdcfc06b3d9e01bce5e0e3de796b996abe00e1b9f252432c56bab
199020014d52c58765e7e5e599d2ce590863e0309563593f1bd7aad0340e44d5
a4c5b811f23e4d590206ccd7a77e58d540b6efd0d53ee048579e53cff4a9117a
c0a192bccd80cbd4ceb3bba693a9c2fb5d5c9bf81cc409a25e3be64080cd2e18
ec7a45e3f8b0b79225f467daabe38d8cc2c99c654bb804a27245e2f9ed886e7f
7c6d8087c65febdf194571a10202f0f239e0a92bc5e9cdf9de2dabbfa6c1c6e4
d40f57bcf87c681fab0dde101c1d052f453658f4d59682a7b990e09c9d765b21
d4c549e2a9c09d55b1c1e2923de8ab3ffdbeed0ee6c78c3c58f3226bcb12b44a
a3287d57bdf124e7c606be6fa188ea5e1bbaee378debceb74d40f5cdf8e467d8
f466f8353ebaf7338b93d4f025977d36f80490fd624370052beabb598889808d
e753f1c79b7d5b3e2ceaeaeaf50d0d197662d8254293cad7fbaf6e5fba1587a0
a6a4e27b0f53e895077d4b08094f848cab48211cba3dafa1c0fc19ebeadb9aaf
262aa778881264b8ebaadc6ef13da7e1412c4e42aed939fd5c8880344d830f34
e6aff143c6695a5e5229199f73f37321da2af11166dcbfd69b1d2e0a192c54d4
a4ca7eb154b7fc08bf52888cb6984fddbdb5885e2548a748ef83bf5c38d714c7
238f800015b116d38798255286bafa445c5c7ce27a27cbc2973d23f8f240efdc
63b840c004cad433d72414dfe3d560991f3a972f69c5ac7c584e20fb04e4601b
ce58132ea4ad1ec348fdb9f4d7c940d1af4a9fd56367bedaf903cfd21b6d371d
8fb72a83942d1264bdcb2d8bdd56bb28c4323bf9339a1fcaa7bcb026598d9194
05c41c325e42aab0ced14ce6b43e2bb6543cad67e7305de48d76d6474bb37b0e
0845d12c85a98f94ba3c2573d80d195f64d839a05b649faed2ac259eef5d8b27
3ed248e7b175f43ddf9da20fb9257cace7b63a2977ed35e2899e86a06c6dac8b
45cf82f3b442c849d19eb9ba1165c7f49590a2b07cb31e208124ec2dc14063fc
f41e85ebc262b66b0c5a071eabe8db4657ea851bb4b683c536fb4eaefe0c87f6
d08ba89ebad516a9f34787a0f5370f967a751e9943a91a99e1092f477594f325
73b098a5546b617272b9442c734629370a027eec8546cf3091befc68e66fd755
6f1825d359c09a3b90a592179b1aa68c17645156d8975a712aaf87538fbd896d
8bfc182d41e92878581e742a1b130e8e0fd3d9e1d08c134c46788b0ca366e841
65967ec9afcde2e44da21cbbe428cac89db54bdb2c6e9a17574f266a8ac5921e
15fd713fc59656703590270062741e0b8a20fd15209bf5eec3e39817bcfc008b
b586aecb19b86fac4c53db052fd4a83e171378ef88c7bd213e6c944ec99ec0ac
a6944be0902998c0173424724eb03abb5d29638f47166b453d0b4989ac395746
765096a9b4ac53b11ac6794700acca79f380552a30e8678ee7d6a797a2b72123
be65209de70b8452b9a91446ba3fb2ef6b9986750ae59b398745e219ebbd5d02
c2f11ae33eca000142eae265ea918188e87af49d2c12044133ce5a8c87abf7fb
721cc74f79727f0ce8eb307fcab970a16d844bf9cd2eae80641b29ad1dd123b2
ca74d3da50b8d8ca5bbcb8c827991de9ad632ad977ebe7268bd0f7d0d55a5204
e3617157196873e920d5a6d7ba6d9a062ec393f020cddb63d746c2954caa06fb
faf52b8119b2085426a4b5df72beac395943deb58636cc62c417a29ce2a4a7c8
54b79fe5262426b8c8f93df662594f0e3da1cbf669abfe9c26464ee2cc5396b7
48b406fb8cd17849759c3575b9909c7af38ecbef717e8b5ef69a63780f19411f
6e122c7335b7125635f939ccf7a876b68966cc7339a69ce0ca4758319f2e2616
a4737bca7330cb306a4d1d0ca73e0cdd522619929b1a03053f11167375795072
d37226b01a9eb21c8c4fc989997c2b7a5eb2b9767a06289067913bd0ca916f38
40324a70b49ef328b1cc20960f2722d58664ca149763fc22468d0b7415680afa
5c61bd61e562fda538d9280234a99a9668ad1fe4280dc4afac9ebe517b9f5182
df19c9ee3fb114c996c2d22a626b9eba3155ee4d99f77333fe6f38e980ecdbd5
5bc2abfb398f35151dacc10edde35603bbd642ad1c227603e353a71c90c114a9
a4bf1a7549e6b8b4da906235f6c7c17a0fda44338772bb5aaf0c28099b0195e2
d772fdbbb643ee0830167d19b86462e64be508c792bc2e85d6d301f9ab622eb7
7b2abbfc10631e8a26aaea724ca609fd345416a731199ad8f76bd2fac40a81da
a4576f438d17128e8162356c3efee7e45a00cd670acb8a117c6391f3941c908c
121527d9e0a9428882d854b373efe1c50f8ec7cf57d927ff9af606dffbadd69c
d44c01cac7de0242153a6158a4b2c61a97e996504b03878c0a1e6ecd428d37aa
5515c005d4baa7b8ea5d807d29e33862cc1a66355216e58587902f072debc2e1
500f7d23ff884f5110814db71405bc3244c687c9c2a016b5effd143332415e9d
cbaa4ee6472396d92ae6f2b57572628008e3ea4b7dca7cd53ba75ffeefc2d4e7
ec80ce887b1384cb91b71b27d6303753f1b664910f71d4df65dc737e81e266ee
6bb1e079c241cc95629eb38eb28f613b01960b064275fa08c393793fa07f6594
b6e2dfd74fdfa06637f7ee70547e7f78e8acc8722f6d7cea8b1683c1e2b4434f
531a6d4648ff01d39bc1f6a0841ae4dc2ac1a04a1baad94adf7d20ee05bbb307
71ce949cc0fcc3a9e297e7a84d493d9cb7ce17d2e7845c23e09a6e2d128987e1
4b0c9fe3d8fcb0816d4275728919d4301d88da21ca23e6f707c209517148443f
f685fba2f9cd07b2b91c4b396c635eac32d07f735c52895acca55b718f6e2c8b
bdb68c0726bbfcf21791da73203870c2173535808c607a707d60744e8893521a
13ddaad0c4cf4814b43857e60a6c7951e7374061f32816ec8aca4a16148e6292
51b57d7a7a434f7a6eecf0d44e9e8f2e0718b52a7d6d1f26938b5a43872b6c11
74c3a65bb8d056ac2ffe2ab13e0debc947394292035bb9de2e520a0e8505a8cc
ac4a3bc3376e097a54ec228731b8e3f10fc7e7fffcf9d3a0c1bce9b1f0c9ee54
dec8c888660996fec60d06fd11232059a3b8e70741f2c5d454823a0e094ef972
dc17c58e39b3629940c6ed4fa767a44a685931448932c6f79fe07c8e7f9f7b81
a5458fd73a3b0f4348c9c7d3f31058c53513cc7df3447c6fc2fdebd21b6ad3f7
17905d02026d4c5de81acc39e6b656f80119984c510f53087818164fdf160933
7a194ff4018fe28b303d72b65fac6073a0eb01e8d66b48c839867da44e59eaca
34210a4cdf9ed79dd11847242f637abfbd99dfa08c387107777c66277109d0e3
0e6ca9baebb61ac624e6b511b095c7541976717df54ea685586572b421125e91
59a03b3d896d4b10611a849bfe0f382a09e1a3bb6c130eb2e8a1f625e2a4394e
93054688245768084757f1d95295044cd1ebe8cabca85edc20e920a151dcf455
7fb9b3e92b4692afb55e255b29db3ecacacaea44ed7bf7e32d783a9b1c1ece92
f6129418f2d8fb73e1a168a9bf5a3b57d20331c89ae0f1d7e377d5f8256c250b
268ca434354ff5ef63927b5d48ceb88b05aae982e22023e915b2ae8beaca15ee
cacd9e1c0df2a04477f92dc2998ef0b102bdd3790dc9bbb3095ee5a2a222defd
2781c3adfdbfd19a6ab83874fe9581cc4cbda29c3deecb784d0a1ff262b54904
e5b227839c5212ec305d7b6b5c6f98ede86bcc124c9239ddd1d7605e3add64b3
311b899bc5198defd6515fa5be89765229d5bc6ecf3b69ca42931dc6c12bfcb4
f1933bd0cefd372bb803fe8f3a622cc5481c5db9b4c23de62892aec645d9adea
3440cb9137d6b87a178b9d247a1a0e4c8182e6fbd64207e6186ac599dba2db75
52d7da9c3b2862826ff7650da6b7f7cd5b0873cd9b4e28e741703ff2dd30141d
c555d731c6d0221ecff8b854b57dbe37ed4bad3f98e984d5f5a54c88431b4245
c9fe1c20d491614e3a839402d0b9bdf4852c4506c64dbfaea1eb425c700eaefd
f43af45b457f3d096ec964430b251128c9404760431e0e12b902ed8cfe28817f
a078404c784e3e92a35f92590f60c120a4d4d7252fa2fd8cf8c064947986926c
34d9ef66e8edd223529b976cc68030528bcb326b2e25b57a223bd6f0798524c7
b0d80c62f2020050628a68141191853d3dc385598e7534557698261c8e841d3b
5f2addeaa18bcc35831a8e989d11ce1f10b47f81c864a125f550cb1bf2cfb8f6
0aa324837bf25a85b9294fc77c475333d76674551b724d649504ab2ebebe2489
d43ddb5387c5bf56292867575e52894fc4567da45c4ea0aa0a9fc6f3567a8463
4a8b646e2c75162b31634441149563977e575b3d8f3d3ffd470e51297134f471
a4aa7b86cc783c9d4b062a26fd3b879d5078a14f8047b8d97488c08b3f10ef3c
cacaa74cbdb17a88e9ea28c693bedb5060e5535cd33de0bd63660577bbbb29ea
4ad66cc303af3087044c2b2622de484f5d820a2d1aaa17791c71c0e5f4d514cb
0fe876c8531eb994e918a41f09e4c5464adf31db175160a94c4f32d2a4cb8254
a59fb76454a78937106570bb152b1711fb73603aeb1775af8a9922c2b383d008
8b090c6c073af9c1f3ec9aa282e031a6f7ce3a047045021c265d4dd658620bfc
f6261fb8f27e41f69d98cbb988625bf8c7f6c3334f3813280fa593c3069f447f
b7ae48d561d264fcd57c478120f8bd34a6948e2d872dbb6efc1547810ca08538
60273afa436d49ae65ae5a95a9f54a514de2dcee1bde348afe565311b1892bd1
97e23a9d241904f211001d593ad91641f317f976ba272bf072ac9d9dd3f57be7
5953ffc47cf0389b34b75d72f2726a27a5b3867dda135ed78efac01078fcad4a
f21bb8882aacbb1424f2cb1b078dd942f48f5bc5081c68d32943895ae35b2d0d
54ed1b34ade4ac04b1b3e94d9aa935c258221b936bf61ceecc7a848febbd1935
c927a51d38ea5dc685fbceabdeee2e260b4c2555bbe81c2979df9e284f595c8b
8e8d57bdf4133baefb6252e7b5a463e81716fbb50dcba66ee4e7b8bc75261989
264dc91782f2f9d79fa339a2e6544962c0a704cfae8bc0ee8971e0d266394ca1
67fa037920e348bd826115add292fcaf4521c53a06bdacf07a61fea6dbcabf62
eabc7cdd723cb63e0de837e7d430968ce299bb8be82f53f2e52d2744ae9c5d77
c7cb101fd5666c98d50434dbee284470989629ab858b3263a59efc61b082199c
664d8ec8e6c0c6114d4473c60b555d36f1f3e221598ff05d8bfe81932eb25a4e
89dc6d2b400efcd078f6a89ecb621df2acc3e58ba1a2f16aabb2f187c30fbec5
c98259da88cca31c6ad9488a52fe18e09a7cb99a4eac658fe8764e167d40a4d8
cbc5f14e2c30474c992eb1dc0ee132d170a301a0878590d3b19eb924d669cb49
268f83f094488f8e05ec0732bba9d334e8c57fe0ed10ce1b78766a6dee9002bd
12cfeea971668f9e766e5c7439c82f891b166897cc5a23bd5b219a40dce085bc
c0f2ba1fd48e748010c5f05afb338a447c0aee3cd3cea0d47304702ddd192689
7e26f65b76124c2e4453c462a3b9d6d7cf21f164e66fc5b0e99950641e95d4e7
4f94508b9b63434639de284977e97eb895312e538c280a15cd4b66a813ecc71a
c59716f789a46856aeda611695731263a1d3e2e6541bb1163f8cac7eca684513
3eea35332c2f9522fe5ccd96a38a2f73dec9d8dccf9cbdb3bc364fdba057e081
1b289c9b6716a15f6fc308d270a69062347551112711aa49134b7d9bd34744ea
dd85cb4ca75bbfe499f80c0d0bb1125bd4e82fb088be31c1f476082be3db0297
5209eeccd9ed40190f3c2344b5255ca5f7e666a212d62376b772f9dfdf099cb3
06ae8d67c8d637e74ff4172b4b44bc8eccb1d4b56fd5cc56e7e4570957a99121
b2cda8ac4752d4a4c0efc728992a3d4408f063295e20b1e2cf231aa8a646c5b6
163399e30075321d1054743c3e449e716e1eac266371e44ed0ea3c628b2594d3
2efc48eabdf3f3e17061fd0375a564b6fc5c4e2d67768e7b6282ac8927551a05
6666a8571b3a554cd0804776b4f6a7923baf485bf27e6f05b9d9155fed807d1f
45efa971446a89b949e4a3bd9b90a8247eca113765f30f3ba1c9ec33e5c5d8cc
82d29a8589b7d98b4ea5bf6935424dc793c6b11eb43411ea7994c959f042e70b
e116408eeb057517a2a3e316e1337f715dc084563b038da2b3fe47a48c3d8598
e48a1a6dc042c6710c3cff78015db38d2027f8ec3664682fbfde82f13dde1157
78f0a0835411972fa4194acb449cd34762d918aed2b02d5a1919cc11eb9099a3
3e971213f7dda8e8809e55c51f7762ec2b5f1f242a1ab69ca42466c9d08f276b
be3c4d78ddaceb20cafbb97bdf196608b753c907cd8e745bc5f3b784ed781342
d031141c8d535af3e5d8e52bbd756eb9c583e264b2628c89a8c66b647058d275
d838b5f95e1bd79003190af984c072c33d4d348adfb8027f78e95549e9a4ebd2
a578b59c10caf319491c2067cc5375b901df6666a6f1d0a2da7a2b572d64bc0a
87737621e84a6133f9d4126c167b82a8ecae75a906354ccc0ac56262c3cec27c
65c569454444a529d34cfa3c1aada3f2d44d30ce833d855ee647b5f1b5115b90
1f4662e151ec20c72901a333479bc6938a548a616149b9158c2ae286886dae0d
fea6a28afb3d857eec9aea1ef67f53081cb9211bda9233071248ea7169196c10
e5cbff7975787521fe40cd8251fec925e8f7733abb69923d5c9b784a1c6c0b11
b79bab40797bff2178ceac147d186769783dc9082f5de9a6e14bce87fe7bca14
cf8ffb3fbadecf818f77771fdda97066acadaf57841c950fcecfebc034722e06
f72aeebf52d7ffbadf7381d326fbe18136b14aeec087e798167eab0856253268
7b0d169f52195e9f4591a7cbdea679307ee3bc5fa0f196ada47b0d9697b10b70
1ba717bea33fea80eca0d67bdaa20fb4fd39b1e01fe622d09fcb790add42298d
aa90f918af1a0ebab7f4a8d0d20af6f494a508108b656457f8acabce14fb1a59
ba04cb6a5677a327200a89631ded8b03e072763d9844f54d06ff62cba9df1ed0
ed87698f5bb990e97024baafa9956a960a39c0a493c4f9a16a5f7f38c533c2e0
2a9e2703b62a6d14875c157ba94a39a2b583cb0132cc83ad4430f4765392717e
d25c0e4c7a13da700eacfa0884f0adcb8a695bc22cb459252d7a6671f627a394
77f81975c9c6e019ba19efe864d402839da9aa8d4a5e7483bc6b5af535b8c4db
7e1f013a347e5637b9e643c80f75ae3849f93c28634f681a8e10649a970a0c60
52c1c9928fc1e85a2283aa41a2d89bb3465ba9a5f4eb756e549b4074c730c370
a0cedc0db67c1683ad3f03f073bc5b4d0746cddcb376b97ca64115103df1248c
b38bf4ef99553cbf4ac465d0198455018a928c4c3a8cd2c566209e0a346062b8
9b6eeb5025196f7274de311adaf06568e3789dc62c3116d18d8fe45ab7f6cc4f
f10d7755b95cf36a320c6f25de67e839b4db636ee2ada4a3802d91a885f84053
3b30162aee49eb03ecfc5387c3ad68ce92a5608018288628a3a9bcddcc12122b
5f4151e047c73b56ace9601bddd35a4cd44682441a77424ea06a56bdb68a80ab
adb26e39a1652b26485194ac4531152f035929be16bf68e406aecb7578f98813
b68dcb5f06fafb631dba941efdf4691d8bd94eba0b2567f336ad07042d8d0871
ff53a365a271c25ac1f8dc339e0c333625abab26cfc352d784a347e8dcc8e706
91fdfbc1a1bac0ea519ef0e55496de685c4d489b6671f3c918c65b83a9485aee
e269dd783be23a1d759939d916666b03bd0d342aad0ce5760c1a715ba26a3d23
83757be49412f5f0c927850eb46be95ef18adf9281721c424d880fe5b0a4ebed
c39b200585a11e87cca1b131a576cc5dc8d6d6569e882b0496c3d2fff5431dfd
51848f25b60e29108493a6d86f205a94eca7a4f4b31157ddb0b67c4ff534c762
7c7d9dd66a8ee1ad2c6366a31ee0f07529f64fddbcd6474c00eaef2e72dcb2eb
4cfc8943e62b1aabdb52ba4eb2d59ae08bb82b596058ecb7f1baf9b1d2c5a9ed
aab2019869fb7d892053e1f1416977f99dde83fee73d3610862f97978d46b359
fa6d89b43dc35ef172dd026c32511a9e34048fb646787b3e82b06262e4c840d8
307354afd9b4ba6b47259722d7314dc919950822879b3218b48956ab52187d48
55c5ef701ddc41fa8e32dc54285498cff4f64f9975a90e5cf62fbefe500a595a
5dab7bf33976b6b8f010e6a53c7de3dbc436bb586ce03490280413727d0847ad
f922ef21ef0cb39d651c790cafc9269a41bccf82092477b76c47f5ef4ff176fd
3fe45835a0ab9437a113cd3e5576acae542478f40b21a3b182808ddd9a533370
74412aeba286258586275d1f2050b647d3caacf444f6a5b8d7e88b1916a4dc27
1f0b7d0b647b2b913bdb98970e1cabfe16f00fb528d4844b55082044ce1518f7
bc043272c14d6a434d0c33b8676ac6bd92276736b4467c8c7f354cf4b9535306
897081494a79ee45d8d4597f7d60031054c17857e24eab8bb482702ae7b3e3d7
bd44a3a530bdba9dea215a320111de4edb747642ad9aac80c37aff012679bcaa
af453256cfdd901f641fbcd178c24db69b939c8b4dd63bd4bcc61a18ee977fde
8fdfda337a0f4636da7e1414a9c07c052f4ca7f57410bf742a8adae78f8573f7
ca60ee60d967e2fbec04546816d7cf599e577cf223dccc38747f2e2a889b5a7c
aa992b95159b68d0222be2669a889111852c6671afa90f191106bbcc2710cce2
fdb1483762e3eb47584c59590d12252b548ffe10013bbbbea67099f7792a2919
958b1a470c1464e4f9758669aa5cd5cf23d11f3e4ebc75d61477aa815d528d55
8f6d95da5d9d4491048a40d9c17d1006ef5dbfd317f4992902255607e6ac9202
69bf0e51ee2733a434f517ee7e31e35931060a55457381539c7f4e99d16c3621
225a1fa6a735d4d57d6f564e7e5c7e7d78879c8b4a0614a07b78c992943430d5
8969be935ac7a575adc9538f24e06b76ac827fc3388a4eaa62c01725cb906e5a
a0fd449c86481e1b9743de1b23c76cb90f0c8370e6f5c977fbac9a13ff61d4f0
ba129b9786d762d4297c113a5fa501d0b1840a6c01fa24a947f7de0d6116f173
ff3df506bb761a5e2bc387c7815d9f055b0f7f8bf973a6c415b8b5777373b335
92e4afa663b84d31a11c72f74348eed3c3570b407ffc3016711e1f1b1b73edbb
ab144404b4a281c1aa61e0e96cc73fb6c5af0e9d08e9e9b52510ca94eda9f476
6a15c12e82437279783080d6bf090bb50bd0311c2531bc8eaf19fe73d06743dc
9b3454246ecd23af29334be7e6e3ddd72b4912dfbe4befb4c3e048dd1009c6e7
0a6457fd66606070e8da46db8bd78bec6c5e96709539ed4a06b4a9fdc3ca7009
bce26da00de2b9ff797578c80d731e62439f28792b7c4810f1327381c00894ec
d03f7c990a8db473e62c26ebcda451be6ef713cc8ad534c6ffae846136bffba1
a6ec282af54700d561d5aba3902fb27601fb4a8a42d6d0978c92fc360faf83fe
500ad407e61f3bce1799bb228bb4dddb13721a292fdd11a121210d0a6f632f54
242b69ee3974a3702fdcb1a068f9a5273c3cc8bdfcfaa95b9525f86687bcb3e4
e2e1dda6172e59effde7ca2fd6f25e020beb0eefebc86488ab53fbba3eeb6bbd
04544bb1c8b064bc5a38d8e0beb7d22bbfd92d1f10a4787cc927e3a0afa05142
4dbd9989d040f8bdd66585c465178e312a301b4f28e771fff89668fa092ec204
7e9ca6612256fa9b6e2825c60dc4e875362964e4998db3f9980de2573652f692
536d6c168ea439b4c46c4f0f0f8fa0a03717777741186ffa219fe8d790fd61a8
bc51473de379e85e16e07d2141998cb51cc811c817f97c388243575778a7ed3a
efad18ae7a650b468e5046044bcf0d0cd9ec0b2d55421a1e6142e0af7b33b869
dcdc8825b0a94961bc01146d72050eeb3e9ca71deee1567e32c2a2df1bc21a0c
27394335b697dd65c141f9b21c19282d1b1813f565732f1d2f4bc72fbd000ade
1294b5237e1091f7b45ecc3b4453a8727f6d57c3c1b80eb30933d50afa0a20f5
0937e48d0c2b7561c1572e0c26e996562932611f4caff6e4e598db7b2786ffde
35010ad6d08008430a28399ca6e7e789b9b7b149c1def800d13520e4d3636d05
28966048fb47226c8b182d4cfa7d7dfc1cd078173820e27382851d43e4006cd9
bce0504bddd0c13a8b21f3c86da37a86eaae5c521710ca9dbca8a5e8fa8d0811
74d8916878adbfcd6a37590847931a3ffd6c7ca136a456dc4ab39d148f5f5ea8
60075955e3c2be28e87312c4d160facce6ce79bf7a820cb0c05bf4185d28bbcc
a88f0c9410c7ea5fd16eea69da8937bd360cf57ba3f26bfa8dc1f0a3c0f43d11
d2fdfb8575d2d93b02c60340fca94c8b777f7a8b4888829643918750a23a37aa
fd1aa63797ad63b2c2c79e24478de010e1e4ffe11527902c9d77e61017c8c8e3
e18437ad54e45c0e1c9300a0459e43dbd4162ec79c6fefe0ee60999bb957b6b1
ad9832ac9d9bf2cdc9fae6a6678d51042f2fefaaaf9b81aaf175f194991cce94
b0eaca5ab21fd31aeb45f98d1d4f01b8798ad7e2b6f2f3b0553321f666eced60
fcf2dfe80367423cec49fe955166f697af473e39cf1dfce6bf503dd66b549ee5
32396833baa27079f89bb12f6b35d48f4d1eab43bb7a7b814060e2af9b88e7d9
2629f50fdf9bc1f4f0e534b7b7b7bbbbbba7a75a88b48f85a15bb93a859b1edd
5f3278c50fdd62a868545e79fc24978040abb3813dffabbbb70c8bf26bdf8595
ee1890901886066990941a3aa41ba4a511544085219da1bb11e954941650ba5b
4a04a41c40094106a9a1df7bf0797ecfb3ffefde1ff6d7cd71f065ee7bd5b5ae
38cf75af75ad618d3168d82c6cffd71c33bf3bb5584bb69bd25f49ec53ca09e0
982e6756a28f83af9e112fb70c72f5483781c9046015d35ea69baed8125277e8
236ce783cc5786aa63814e91bc7faaff27f5618507c7011cb3b312cc46dd363c
3c7cbcbb1ca18da4180037b25ec082824ae1733fe71bbde0fa3a50bb07c2bcc8
a907a62fdaa717510c5e0943d89ecacf7ef6e93ed08a9bb97821afe85e4f3fa6
333794e2a6f1b747a29472f7fb293fa1638403bacfbc163700820a3e819b4538
65264ae12c04f1899e05e39793fdf6fe36637080428d5f3e2ad35c5c79db1ffa
cebb64ecb3b834380712e239d0f87226d262d4833ae7267cb73b827caf7255fa
a98d3eebd830e4fbf9790bc416bf8f0d360be2d03b698acfc687722a1eeb2e52
c92d0e923e33e560d81d54d7ca06c0e35b0f5139943bb3fdf674dd121e81cb23
f6bc6527561847d3d7ad3ce10713cbad8fc854e4205f1f7b239bcb4f381cb85c
482bacacb227924d4e10bc0ba9e2a15ab4d120a39adf91241247b5a4277e809f
a6f57845fae6b64b8129f2eccf8fe1ddf6abca0300ef01c8efc7214fe783dbee
3b63371109316f9aa11bcce50105732a24f3d4d36fcf4c6edc7fa339d0c8d2c6
3ff77c9f8094c628cda1a4188cb3ff0a849db63bbe06dbf63433fcd6a2cab0c3
7f6dd5f55d5d12f27f086be2bb896c5e9aee107a3efaf04da589e5edc0296db4
357458ddad7ba6c0acee971c9943d384c87ca2573f1ab17b7292754be233fb49
cd6d05f4a7538edd02784240783347c909475f3a74416b8b5acacde44c262243
c1f81bb980b59c314f5283023e1d13e9224b261561162f1fcc12087b390e7f27
aadf0e412efcedea3830cddba1e8a1ef1d176c91de9f82423bd84cc46fbeb2e8
aeafafbfd6c28eb8d5f6ebd72ff4746b954dbb49d0e3f7643ff3525252749c0a
9408976fa0fedc6de91f8004cdf37677b81f0010c07be6ab420866539345926e
a4af502bf311db833a4a13117842c69b1e5df98b8361c176ee9c4ba34250fad5
257cf7e040ec5286cfe49767c658767636a09c89732fe989973d9e0705fdbc08
01e28275535ef0a5b92bd6abf6b9ac6b673002c5a83d1f6c0a411b9f21e8283e
918792bdce4fc4d33abfa34cecb272d90ec0b2fb19fff8ce4c4432d01300160c
abc377cf8e77cbcaca341bdbf73419c1e0e5e5e58891ca6bc400f4d80f9247f1
0b284a6b2d99aed1fa95414a4a6a1021b83d9f80197e492bd0b9c5cb2eb28add
e0f3fe6038cdb31f5ec167f309f29774166229613259cddc2d89d9df3f3b3360
522ac50a13ab4cd90f888938201d40bbbebcf2922d7efe059606a7eb34346dae
9da356c75ca74e379c69ad7bfd520f3e7739c79a73bfa2522a4d92225cee4f00
4fd9ccd843b47f4ca81c29074fc7e229059da2d916858be4174122bda323ad17
95e846cb021779176f89bb60ae6b91b8b6fffeac815ee2bc3a4dd7b0726d2836
6e22170b83f84e1a918da65f7e9fbbe1c301cb3977616ba8267f0a92f3c18196
a2441bf62a97f27caa7dc8e2564b21a204d7d56455a2848977cf334e34dde9dc
d9e72a735135bcf5946d8ba7cbb57b8f3635d12196dc722ffee43d8cf2e6f23e
db39ea47997cca2000df7ff3a1f24b711c6a67e1cadab316449c27ec5410ab8c
3ea83162d2a734c8445026f9bc71d75d1f26b9b079ffc97d832e82c2975c88ba
4f7c6dbe3359d41569d905b6fee9371d68a9f1a3bf6881fd93b3dff38731328f
32f4f522da522834bc9c6a211b1c32c779bc562989f438ffaedd0c1d835b8245
93fc89437158bb44ac989ce14fdfd45dbeda1d8b3456e41d9a03f9097bf38f1d
31e917ba052946736515321d944a6e5e98342c0909abd1c3b75caeb8c44bff54
4d3fdfece64feb4c7bf7b474ec57b06076fb81abc692e407236144b59e5d003b
0c806915d9cf499ff1a8210f8914e9f9cf6cecc72a7f6314bc4e4f9515462a26
48b861547221a4d6bf1ec667fbea1d5bfda03f8d883bf5c2ade48f71360dee53
57d461aee99f8f1b516bde3d895b6107aafe30d83d29a993a39dec5a52ef0c56
18a44ea295c806bbe51d8508bd55d61003de5cb4d28d17bcbfbfcaeb6743ea4a
3b6bfc1444666c030aef5f690981e664d6bca2f9313a2de28bacc001db07f212
1a7ec229f51489ba0321703065d8625e9cc072a78b983d59de3639b219b7f49b
90ac26f3a41ed2d9304187541c23bbf14bcc15c7c6c692a22697c3a2169697f3
727341ed57f2b391b186685ea4c0cae9d35e68d07db184fad1c95192def7dfa2
f5204acf1c9414447d2f683fa5f86a518976ccd35dcfc2882ebabe634d972d51
88f391ab8d470affa64f16fb7d0d0617a12f1a1d58732af88e01c5e6821f2a38
80923eba714f5974d4ee70446c1c45e910c6830c16f72e2fce9683af64a517ca
74f3e2131278d6c4a7861557863304ad22000783de7dd66ccfdb15618d3afd69
3c7926de30786b358db7159fe51d4701148b7452c4738bf96778c4fbd8b2ca2b
caa349c9c0d21f85b415bb2da5ab354fafad5e44145994d2b34e1cfbb56b56c7
c39018b42da8cd67c198516a5623994ec35fc263eac7e67b9130aee3c11839a3
39b72c8dc3285c2c8d9be77018b78c5ca5aeacaafad82f742f5e1d8bcdd12b82
fc883585424e80a0b3a5e964540952d53ce99acddee4b3706be877ecef3baf26
174b3a5987e1e963690ca7603b2fc6b41e51eb6f8ded0c7fad2a0545d9075281
5da6b1bcb784ecd7deffac459c5d2b43016ea8b1aa61aee64d74aa686d6c6c64
241317e826bd4848bd4d7bc10f0d630b379a7189939796b69f3f7168c1eb1384
ed350ceea81d6bb4e44c8abf582eb490690f8d7aab962d8df3beb7b370f969b5
44fa9789f1abd4fac713c7a31e48d13ebed42402f0e79e161b8d36f6545ba2f8
a15e719bad03088f30248f5fb478fe9d9d6f35c9f73b8f6f726ab97ba4e1a60f
86f7491cc97378c16e48daab1f7603d10e9816ccd12d38ecea8017b640d8b290
e6bdba078a68ba2dc4ce43db79423cba08953ab61c70060d4ebc691e63a0bbad
cbcf0f0e195d3670f91d1cd5b2d786d94d4d33a40e4fb8abfacb84ec8e5a1bbb
cbfd870f2021775fd2817cc7406679b30c22b827224a860f2e8c128d432fab49
4f781bb68235b3fb6422d8c2bf586d18a38b77d3501675a48fddf5608ff0486f
2e929c5cd02339edbcde32a9740b7e5b0b5fbfaf33b07d5fc9b9c7e4427042ae
f6cedf890721dd430e439422466e6b9af1867cccfcc14fee523af330dcd8ae28
e53acdd2b37844d51d6f45822cf873d1d4dcca0fa1161422b20afde264e93967
cba57b8ffef61c8da88a0f641e38fc3452cd3b2e379f5865d778f9cb5573bfbf
0d889fbfb23d976b8aada8e1dae4f5f47c807b4a3f963a66aabe2ee883182309
478c8de05d9b89197a44950fe6247e1d157abb9cc5ed91a2759dd73e9f46ae8e
92382f8bf45a4d6a505971c0bb1ed7754423c63c7aba9c9d5e5e7b1aa0381bc0
aa19ae8707146700de9dc31c5ce2a326ce9b8bfcbf6e6a4e13ada3a333fbaa44
580b197071ea2bd9aaf22721f89cad9806afaa19d3a2f2376270dd5a96393be6
989444a715108edb9a9a08ca1ad531e7f9f88b69fa30847ad5a189fc9b1dd08d
91d0a32e676da67791984470536109f4ae871111f81e7cfc760525ec8e5f29fa
1e3ffd59561628d45ed670d179ff2150429b19e838954967a3d7f2d0bc199946
8cd1845cf0a5b609424242e25dfe9742d4d65634bc01727075a92bbcdd7bc28d
3ff9160b522ef9888f5d918450259cc030015125bba06f08925bda13a25672d2
f249e6d0f4fa49f7fa249b377e00459695412daac40f19a09b920746ce254913
ddf765143eb695cfbfb672cb14e7238bf02bd45cb2c0d139f84fff5273b34c98
b98bfa1459a2f10a12a998641485108650dbdeae467d889071d3ec527b764843
34b0459a3ede11d333c14137f898e57130b7a286c6b09141ad42dc55e20b0d69
498d8cda7f9adb0bc5aa93a8b861f9feeec83a5164cf660efceb6d0e23956697
fb3f0043e70d1dfa6ad4249d9c87f2fc67147809dfef96f61b083798b1445118
29141cd5c6e02809903113bd617030225006153dae540b740cf5f0518ef41a66
11c7fd562186d836f846277a03d39ef6b753b85a5d63e9b3482a9985c5c51ab7
ea187ead5266318aa21238ff26ab37ee2d734d3373855b1ae502701679e43c39
b14d405311271b2c93e6a5a22be82053b808a228fd5b539f8eb041b91697e890
26ba86568d2980679d82faed7d3c37615ef9adc0ecc944b9aba27b5d9ef81043
8ab058e10b07a4e859fed8d30fda2e84b6648226b19c48b64e6b3da831c1d4be
9409dc7efdedeb64fb9b27547709dec9443add4b4fe76aa8d59d22a1952a1ee1
6c6a061aa7a3eb56758dbbd347c2a590eeb390068ac8c33261abfac9f6e0aeb5
3fa760648190a335f4231e57f9fd129e7715f6b19bd880cae03b7938c673dc30
2333ea32792a63281d10d371ebb17f4679cdf15b742525a12ca56d059fefe0d2
d2526d5b259f571cd9cdbdc1b0fc87b25191c50974daf11869c7a550ca9d0ed9
e667ece9835f2a76472df5537247ea43942a259be5974bf4d5d3e1e12944a17b
ef9e076632f497f1e96d4a6ae2fe78ec9d1c6f479d4ca6d8977909d85e60e298
eb2ddb3f5c94b4b4203ea2cd355d12669a19024e583a614911ed5b225f631d99
4d2cca9922237479614214b4ada36b2616d3b6ef14859c06f3a2ca4088188204
8f9421ae845588456beafb4d5c97f3c4c412d748d04824aba2a102b448c7a116
a7f94b5bfe9beaa2c40903711c7a87d3fe2ee723b5dde92471137c9a576674ce
97f3f396b57c14da7f80201b926c857651ebe27ae6486a5ff1c0551a3aeb46c8
434369f1cb4b36979ea6edc8dbfdbe129ace2bf6661f39a122a448ab3b7c4954
27ba83566f400044c4422766120ab2185f32c32269791ee9f4a5498f18e2104b
4f833151594d85d5d9156ff2c1dd7dd6d43ab754bf1a0a171e8d0983aec28ea1
a1951263d5e6493197dea83db7383e445aa0100fa6b167f715d0b9d1369f45e8
3658094b78ca8e49e44107b950cf98db376f25e723d00a72fc38b788e8d9116e
79fa9ade9a8cd327028f6408b2eec27996e8a6ee000a4dfee71e3fa98b895c77
3f7e105438cc181bea24bb4ea5eb9e7aa7e287c6cd685329f3a1c732fcaaa915
e47c7eb50a0fef33fd6d7595d0464c94941c942c9f45df3a933951198915626b
755faffc992b057fa2d80ceba2c140bafa03a671815ed16f4aae3777c6f99e59
df260f0a761a11025c67ae8fdc8329968ae4493ebbc71f794ad2287aca1637bc
8c734981dabf0ba59c4ce00989a378f39bf587e14be2bd1276ecde82b24f8a5e
3ff3f2c04540d2605c0938e61f3456bfac3c2957bea937a47af055c8801e7328
0670cdc43d5d33cc8c4e18577233a5bbe26041607b8025447d49e587f0f68a87
9253dcab38d01bbac9d1ae3209ef056f344740a885b4cfe64930f86feac03c7a
51fb4bf46a8277fb512c622c13d71ee94eee24428f547aefcd23fb3b7d5fe3bd
81c0d7e53cf5bc94a2c0480bb8c5139902f5ad4217478d729a441d72c5573776
0c8a99690a7389f04062e5955058d82c3e5f0940e704e46ac59d625fbf7e5d4d
7aec3e06440d731660acf9dc53146d070c1fc27edb3f28cfd6d63222a241d83d
bbb549cbf904d9cdc243ed13f2de2fc9d6f494aeca657bec934fc26a1f5a4e01
bdd4f2824aa42f36a1ae4e141870a93c1f6c47519f731f5ed57ea962f67ae599
eb4d5aed3ceaf45a8ef2ccaf4c3788f3e8a5805084391bfc4d940329ca0184ad
35a176d8c5695a16eeed253edfb07f8d3301e1d56586d65e0604a1596cd1254b
ef464322da4ee0cbe2182b3c0cd81533f132bc06c544d3a77d8a3b6e1e06cdc9
c9192c117ff2f8b1fe29e83d10ca007d6a3b3243738e6422bcaabd1e91f6dddf
b3dc4de4b9fcbdbab3c31f547795651f17dbdd16e822d1505bae9b27873980a8
f4af660196c1bb9bddd8bbdc4698e53f09964b600c27826b43601ef4e267c779
aa9975b3e1e7ccf52ddb3b73438598c86c0744c9af097c59f7e6928360309233
6dd26eed019a366b171e58392133cbf356f364ade028ce6d4b2518892dcb7bb1
323403dcb7dab43369acf78a4537c1e0991765837e2641bed6962a3cbaf9c2d5
5da79d9d837fe2b152295a2b51a1ff082c1edb8a872c7a9dd2dada4a7aa2facd
6a4c1a00a93fb479a47f259e9c2d6797196104ef85c9ca151474b9355d515757
0790d6f6cbc32a0f0d301353cdc5e9a17ba428fd3fbdea4d6e3da56509611fbc
2ae4d740d79b5268471dadd0e3a4e657b20a336b731c7359e4bf5635e02669a6
e22eeb4c34373c952adb528d5c8fac1f8b82478615ba7f80e743d1e55a32f397
2e466ae459ad050c6e7ac5193115b7c3880e68b9095dd89a944bb9e6997f7394
6a4919322d788ce6d95802f2bde8640c9bb40b90b4e1f627a4a2fe8525aced52
30c04e220ab144fbdbdd4112676149e54da215b5897f636b3641a0971c3deed3
ced996b4140a525fa1acd0972545044473c394528c84ae1488d1274a74c21f69
c529c28824135f0bae554406c6ebe1429d48ed0abad2f592b4fac5117852ca97
338c871cf27e9e3e6d39cd5f7e5adbdffe00802c32aca7039b9baefbd4ec9190
6474a2847b7856223facb5ba0e05a198605ea3e7a51dede22ac9178832a853e0
1fd21a2b0fe92ac7aa1f0b29a68c2d2bd6132befc2ab4b72f96962a41614a670
96c6a58eefe3e2f1e42e27c884f6f145bed82472393da557fcf5f392414add2a
a85360ce14f99425e630586cfad95900a340e023b5c1c3c3c308727066c6ac88
ac01e8e87d1eaec80ebc8587ce09da803aecfadc859f198a0395eb1137a00743
325bb94d5d5df17f4376484fee1ad4978bf40cecdbcb187d11f8e8b4f404a793
9525f8ddec0d67e5b44457e5e52b7e1e53c65b1531b5721f66ed14ab7c36c50d
36dff887a871b9fa59bed40ec015c37a8d8b60acb848e434580ee1e96427d6a4
425d9c1deb15106134e8293318acaba353b8239cf23a2f0f0c06b7075fe56a18
27907bcb697227ec934425b3bdb2e37424b611f4e180fd79a9be604c18f0d194
17ac5c335b27614a731efb2791e75c502e8c9729465d9a42c4b83a63a921b805
bf3e8fb9954c27ba3a59f3ad40b33aed8cd37463727bd85603c4d498290ccf15
3e0cfd845cc9f81e66281cb8a57a585171e7b42f7456253d339dfcfc79b0b621
c7a545be4fdd4e28c6a6a5469cf6cae8b445221f2c3e43733bdf8f35e4fef087
e7d9e05f1d2ae8e682f1522f10a51af13235177342f292e697006337de62e7f4
c316ba554b1af79406a7baa433d94c2c31cf365e875ed3212459d286da54d84a
f5f026be819f4453577d3744f2f103e37801fd225851c9e091665eee94454b6e
bd0209c7d9c1d33b31b580fe7c42bc595d5b53de1c1ed672cafcd97e0b757e7e
8eec8e90a4bc7bdee510fa2f7d76462ae17ae3f23c2821a7b439e92b8fbb57e2
6d4a6923edafc9cb7daa523dc9e112a14ac0a9685269f824465afce8e4e7cff0
90d9e7f068468e6f935bac95baca797cdd0d791d44be8492b8aa4cfd3f14f636
6ae47de3d40447aa6e7cd09cf11ed36f4d53c138adc5aed4ae1e28863db75f5d
361349d45abe9f131d81df63454ed9b8af99d83e6017de24473fa391f3b929aa
277d0c99d316a05a00a7fdf0f5d6a2246787eae305688525bfccfcb9a347bcaa
311693ac3999c25fe0ece15676a0cc2f3f37ada24dd63faad4abc9bf44c0051d
7edc92741f41ae3eb59fa81149be932f925f09736ea8e506942725e4d90c8508
bfadfe38777c0fa1e8b271e19fb83b5eee879b3d7daea177e3d3e2ab016a7ff4
7400a0977b7bc27becd6ed41a39fc07e7cd9769c6bfa04e0b288cd5fd99b7c5a
a7bee412548d13cae093065ab9172189377a2774343ed152db8058f0de0fdd51
f322dba12259302b2827c2d2046ba67f4f4b4efcd1af3263b0bedaa2be5ece10
dd3929a9a862a0eedb90eae215cd27ca0472e37724da3831497162b22a4c4695
8ccb92a5fa655e6658e7a82f6e6e8f98d0009cc4092414916f15abe90402f52e
34b0e698adc46a86f110645a8a75dff841a45551d7987a038b3aab5035934aac
003149e2b3d37ef9ab5d5da86623ea41c00a2d7aa3e3ea2cf84a17411c91e140
d9d5df1ab61b7cf2874322f033a016afcfde9c64df642b2e413d76bbfd3ccc43
faed1492978e7defa9f6c4e4128eafab22afc93a07a5cadb3dea9d1fdec5592e
a9a3136c9f12df282697895de89f7d59914ed5a9cb9a2e99f379b7f85d8c019e
a0457d3612337d4f9330866b9ed0d23c1508961a7ada4e379d481a62f53c9594
3b3587a24fe0effd340a26e16671a842dc9f8ef78779099b67f6bde15b0a619b
0fea4cba3d46de06faf8d4ef184aafd8b407c97e7cd86afafcc14f41d8821943
a08e6ae652fe6a59096a873c03e1de34b18493e17f6787fb77ab889dcd9ea370
b134ab27ec4e34a15b06b9b70434a3c9de97c9fdc59cca7ecb1c0953fe23c22b
cd99cc934e78378da8438788ab90cee0d064f4c54dbf50d0f643ace24227a831
e5974238dd114d02d6cb6e7d3a06472cf30f1f4a5d567b6d72b91492a446ee95
959541ea4819bbae5cf91f66129e2476f5e71c008695e8ba767979b9b6e60805
1f9173c29c8e84d087ed3c5ad4c1e163c11163992721eb1a68470b9600876149
7ea849627aeb5e6e0add0eb4a05e8233e4014ea21e713e9ec37b8208135666a3
4d03b32898bdebe08f1f0f7fe00fc520dce59c91f35f914dfb16df9074d5a8ac
4a97a7824818e96e17409e47d0764685eeb10f3d8b026a1ebee6c59b8da10dcb
c5b20ff218acc5c58ce4f5732207e8f4145ed64d6e7d150b3432627a59814511
d940a5a5758f2bf5fbca98395a4757572288ccd83e8237a2abcbf913f03f026a
6a6d7d6854fbb0dcde2235df6a80917088be6c0fc2f86ee4d145d2230db426db
8322cbb8fe5de49a52ee116567c44a30f1208186c76b7abfcbb3419f640d1ec7
9116845723f925d78173001facf44e53467c7cfc9ab6af771de00db2c406d22f
1b6ed472c4d88f6c3dd555ad08ca6b8cbe93389f648b72a3a62ac2e10edfaac7
de4eeee061982a9152047363f3b325f5c0990e17969701771f3122aebdb1372a
e4fdc1f90e0c1c1d5cce28f2fe455010e6b4dd402c0371de66e2af5fee528644
5438f091e5abb6bd0c5d00c971de1cea75f9c1cf4898966f537c584f4e5787a3
d7c51d1f3ca268deb1464d5320f49543ff155108bd02e90a0ca1115e75a1b82f
a3a1801e6f4b748d98e9671438f440ec1e2f075ffdf9a135e0d1fd6ba6eaccfa
b574a744fd66f67bbe21405eecb6afed3d4874df69919f6bdea30eee04e248f4
8f5c2e02363a935393e7766f58bbf3a06fdd9923bbf0bf9c222348afa45c2374
975cc6f3d6d3bf9764bd47799e0fe933059f0cdb08080af65f1d6344e6f5d763
adaa59948ae1d180bf45596d3e7af468cd59c15bbdf55c8997c4bbf634329d3f
60dae334aec3257db6d83e15b76b7240b3c13f6c7f67be717f7f3f51d8fdb9ca
39bc6a2441fe128decc6b7da3a3d95a68e03011262a08e0ef0385433b7f086c1
46644af4ea6c334f54007ced8a5d9a46a63a79bb008b8158e6ab1ee8a85559fe
73be7437a3775372fd668dcd00fb06f6ca10570ca9773ee027c5c1dba041abd4
dc224aaba339a2e5dc6564000c06bbba94ad5874b97a5284183b202d0a316f96
2d595fe91e11c468558bddedce93571987bf7efd1abc20477466d6a17cffdc79
50bcb5b2b2b2bded01973f02d86b12e618bdcf0030024cb2fa39f337538d19a9
86d093b3e3ddfe2bdf774ac2cec8974c41690fcc7ffcfe1dff4499a29f4885ad
a3cb5935fe3af4be9be0eb575353abb26e3ddd2ccb9bc5e260830988f23a09c0
162fcb48971418c1602aa164090a1a39d12718507c69fbf80a1901fe26b847ec
fcb30b7f942c63b28f6c4eeba5cb57baa0313ba4281b26d1d0e62db860f10827
e07cbcf5cf6b767ff63fc9930b74bbbaaffbea76f7ae14861a6056b45a015c3e
c60a275f7b6ad3061b047f7ffc737d7d9d214e087f597afb7fbc65002797940d
1ca55251da9583a115b0eca4af97dc2d09bee5625fe676ff7b30186ec0a78eee
d9df178d3eda9c2a4be80513ed0e4d92fd0920fb6f82522789fc95800cfeafee
12db001ac424baf6bf369b80a8a2d5abb919f43f5f949d3cfeffbdf8ecf44cb6
ff393ce1e93d51b6d5ea607683ff3cf322f03fc53cd30dfef9f3732c9e7592f0
6cc27f984c78d1fef2d3584db45ce029b588134e6c4f1046ccd635a80ffd5d12
626616a6edeb80039356b597ff77f71d903224cfe6af72570188b730e7497739
6c49d356230c3ac32c73fa233830a2e7834538562c3f7d9d93531005311c534c
6fed265a9e9e9e5e1fcb537232155fba884d4c7c8585ff91f4c97f5a7b66fbed
0a9065c63e0a8502642b406cf9fbbbde27aa7aefc78f29458c371420868c16dd
78ea1193617aaf3a84863f7efc4878cbff3b4ba32259992ba0810711882a5980
8b04c98a8fff3c6624a69583ddc15769fef46985f3f2fc647f67c79360915980
af4eb5db01da871761e9faadaa7d8858a39c5cc1c20e8a102bc7b1570be9a333
8f87863d623b2d809233ae890f207b301f472eab511f9c3309e7aad4eebc0a1e
abf1462a253c39488c85dbfb850f7f7ed769abae71a14b4e294551a81a06c2f2
b16a288e29a7a5e8cb67ed14c7eb81babdf1d7fddf54d54ff39d26ad7d1da5f6
49b6a03f20164ead6900997aaa0c8a4d6182271cbc9d2834e7e0ae41f90eabeb
ccd189b2033305e0bfb3c3d957e7c78c31b7e416734631b9ae36767870b61135
132c29eaa7a3f7e8190865b7d8141b5a5194d55b25f2933b2949af6b859dd401
e64cef043dfa55435cb2fc94cf10dd24483fc630679ebb21050a9f2f99110f7a
74e780408f437f77762bbf861d9a9daa87d8e9edc52da3c02ec435d09a0e58c1
8898eb1152b4d4f4f7ee6e56110db1a8a73a3f89f5b1377ebd133096ae4699bd
63462e2eae96be82fadc977c01d8f248a56cefda449e485df4ec3428cc153eb8
b2bf3e66640ae120c1e6f8c2e2edf79c4109815d9356de8b6339a962fb1d40a9
d0bbd0308b3f2a91847a87b992039e89a223e7acaa4f86fa4808bbb73636363c
3a5b822ea431ebc9670d295b4254b5082f1bcc0a465ed0e99b12d4c58e57f0d4
8a04dd024c292882dc722588342bc3569f1f4237a6153c1f93a7d1cb42864756
fc2c713b2e019b878b3258a48bbbebb656b013e2866f32ff4d8f506860b1d67b
0358e3862f6156b71d66a07dfb57e9231da84f8d57fda45d5d12a4e36fc0c1e7
35404bfdc1e71134ed9ddfc56f6ba39b0c85851a20cb3cb37471d88f68a3894a
1c86510a33925399e92700fd7da05215d59561603e8befff00fad39b44b43d12
331f4af6484b3e9a36fab0b59cd7afbf83016c327caeded8333a4afa8d5ae441
f7f3fcc7b283c3fd2ffd926c190ee32f5922b79369890255df55cfcf5b4e4293
a0c163555c644f1830a60f788365fb1ad468f4d9d919e07cebea44ad196ad9f9
601dfcf311bc8f8fa744984b2b72c8f1cc596002ea3631f668f8ba5f79eeb79b
6fb9b56fe66f69665ccaab3562141373ca0b7005bdf6c86cc216504646467f7f
ff725b20b10a4d5b58c58a338d6765b7c9c61b8810097442eb802e61b5d0fdb4
43c2df929d68a17f25e2b666868ba4f27fd7b3d9e55e665ec1c1d15a87ba9fbb
beee6c6d6a2478a5da8ed0fd9a7619e4175c2dd67763d4dacaea0be90d73cef0
32be2aac4e90f2105bda189343310b5f31119d2fa4d2fdbf06e863b7e8183ade
f3811227c4b3dcdc16992d2e49250811743b7718e6a1918bfc3a0d69c4851822
98b711da58d8aa6c6a3df2a429617ae18bc6f07c668c1e396066930f36f5b0c2
5714f3f9de10b7645c50f4b63536719eeb98e2a3978c40c806dc64b6002001fd
d387aad8347253b92f17f030ce1ab3d93d28372fcf9cd5bc530bd57571be3fa6
49a56056aea722d76e8e2ec5c990b9020a7ce23a782ba14037afe7cccd077350
92501a6024fb5b29837c8b6a954d7b9b3b3cc42960785d827859cc050d9400e0
f1b416f3c9fcf2a59f8f0fb508614b7ac1673d33745ff86f78a21423a6e11f21
5d11a530edf273d0530e40d177870615d7a58e135d15b3675c8a5a7fec6723bc
b058545b745a9ea4b58fcc4663931d8200179c3446860f004ced2a46ef5b4d1f
3fda85c4801b4e76d508c0617422775d26cbd97098b07ed6885fe8d6a0f82997
a83cce1ff69998a1b5994eb6bd29c2b36c7a005f9309a1efe6edd8f86d82fe62
8b9d168c7de7cfc1417d5aa227e292fa9749b078de9bdde90ad3ad174c386263
8927e74e48069e9de0ac9a5b3472866a72328c98afe9ad4f50c6379a276d783d
cd16c705d905a1deea1cf0f1bbafc478214de6686a2a910745f2ef6f8b9cd54c
7fc26cc0689be8bcbbb895416f29cc8c9c92aa0c72170ba40341ee3e6c12eeb3
95bf16c5f78a1b4acdcf95a7d961255e67106d49fb01d879d37b28a5f6fbc437
61b9075cb02dd8c07604c24b6efb6838f63d5d0266fb8648b1f30dc1394c2648
112ae72bc1a8df40c0cbb49642f3e627484a689aad2191058e11461ebbced256
164c425ca5afa8eda16f6d2b746d196691fb0b787c30d150d324da971965332a
cfee7549303c47d2c1210e474e00ea5aa32a14ae5bff5e11e2a835aff7856057
e529d2dd9c96178cbfb4b030ae0ebf4190157640dbf36d3e5c0f125a54f6a0b5
b57551ed920fa6d4f1e65140d6b7eec5851d40fdaa51bef1882a4b40e8ca7290
dba201646d442caae874b1ca93602322ced9642d88233f22e1488a680f62d33b
3d6d6ce7fe21818418db43a5bc3a9c3ed6692ab84ea39167ee85531d8ab41380
591f0d162400ec323333f34016fe6b33839ed40c2ddddf35c37f2dc0ea8a1b26
d4d39a4753e733e8592ded4d2eda927e275fa108bd462910031bdecdb8d6adc4
0347956c81bbb6488654afe53648f059f0683cf1ccf2ffaea74d4442e5133968
766df293573b11736974ac4a6d21bca31f14c8f049c1055bc47e1ed3357adf98
eab32ac90ee0d89bb4430cc17d7b1767cf3e7fea393991ba95c6c902ff8ad986
d7f620b1720f2a7ec5d5ac8987310a9ab6cf987827b41f33c0a5ece034566072
53550ccb0874f7aba2944d49fae0d11fc274b4810c0fc1426f2fe29567a612bb
f5698b71a0e1c9e5b8dd61e291ab38d4843bae1e41440fd89c75ebe4b2aefac9
8f0c1b8029a571e6cf2dfd391905c2d4bb8305634b29b071d34a0b5ec4a95431
a2ea291f6c510408357f082732e79e261a2b801f897c52920b7df0241fbd469e
082134946e76b300b81547d31f427ac4933706ee52625adae77890d16463ff60
49b11c5ac648befc862df98da76e47e144f4ffde7ccb50b136ae416c139281fa
f347c4f136f28869fb3fd302a06bd63c8ab82cd9ee2a2c1237f67707b22da9c9
ddc2a841acdc625081dfdad3345d1cd788a28d8245557be277ab7fe41f468456
8ac3be7a00f64660b31f51d77d25527493d866dd0cfda91763f024ed442c1214
223b2c72e0cb5332ab975c3b785492533a1a02e4c455131313499ce5d204d528
52d28c9018b3934e8166b23fc3b1809663be3bd3606c76c5d816646563e31ea6
290500db9dc6e554cc34e55727f200f3af7099b85bdd3ee2d2a1d48a11973dc6
a3b61069d37ebd6df23a714e19e30ba5bf030c6bb391eab96cd33bab0de1f3a2
b720e6adffaefd93199a6cecefcd2ceab16b80249e97633e9a5b02e8ef20da34
74b350306a73acd6036efaf1a05799d846e2fc8760f004c7cf4278a1fe4ac192
144ddba3ebf0226a8dcbcccc7c80af070df2bb2727b7e4a9b439830b3c949496
763b314475db237f3112db346262479ad47bac91d6cde337eaf2b2b210d803fe
fe93bcf04d8ad2a6cfc18f176211550cd6ed418bc72b5f08ff2a5e0cc641644d
f176f8dc84181280e781bf4ae63f87bc3031eb93f5a2b3eeae999b7b32b05560
f6309da1770aa2a491ab53e86b20b2752d1f7b707145ef9e8f6a9547ec023867
a48f4967e089c87d355fdd55bfdfc155e2e651882aece725639f3f439d160015
580784951e4ef6ef4afc1fe002449108bfa2d4a0b75aeccb7ac461fb07cfef9b
9b1aa24acaa3e123b7bba0889d02e99ca80d7000416d9aa8c1d965467e3a4257
5b030d701121d47083e82aa51c8d451cab28b3dc87cbcee060cc070de23c7396
0890dc79b8676400e1cb9cd6c4e6dbcd50b70bf21786628f1123af02d31da415
0e9b9b9bedf188acacacbc53f1f2d854231efd0e8e926dfe04d8622040d07fb2
1eb58af8f602a4a2d1df619c988a3eeae21f10f3a4dcd89623f06e177eb9c10f
e75223577464c3c7519def1ba30d5c7e1bed8c942acc23603ed89908806d6d91
a2be00abf84f80294319777d7b354c33053d1f6b71cd3e21bf2b2020403d1e1b
b495d41d3a1b93b2b8b8b8234e6b7c24cf8aa43ab09bd7853febe86aa45d6e0f
969791b973f1265bd8e17fd498158d2a309f3578e4f08e890eb48fbd395b1aa6
3536794429671557345ecabc41a12a1eedc4b0750a2e50bced9c1ed36f3f3fbd
1b73a706b543b61eecefffedf8d517c0511af6ab6f3b03fe3d762d358e3e5983
00ec86b858db1b214c55abd19a2fa670fe6693596ca360e8c1019b65c01fcaa9
8dff7459d6d3d70b109aa87505c832203326a449c75143ab1f3ea024242ff9f3
04b95d9f3b64c847cccc04ed7bed1285df578f8b4d9a1d033c1cdd200f8328fb
2a6d5b45c59d2fd1df610d8ec88e9495113db714b1807d0bfea412c5f3fde7c5
865c2986a51c696207f2255fd037ccd00d2fa9540de31312040505b90e341ef5
00ad740be6c8e170f87683141dc7d3c36f62bfec4a1cb4353d65fe8d442a3a10
6a2e9f9096b8a374fc930d8f670a1a1eb21f75d39b03a691606d1afac99528f3
7436bc893793eec7d359831f5c0538a9302dfe8891d3139b7dfd57485298f4ce
b885eb1fafe7fbed35571c7ffacefaba668874d0dbdbdb070707985dfb85c7c7
c776fd5f32f35098bcbe94b527f7dfa83de2e065e34948c195b51ae5e8bd87ab
99112ecce116ed1abf97af6edb1161b4e7b9409133a256c30322c29e247a396b
e111fd2c4e41ca1034378dbe7349720bc050f200d17c9d0418e3e586ef2deefb
033c23169bd45ccfdb6faf2b8cfa6ac78a81fcdae152a1ae528e44e5966e758e
1e01d0e08d17034635c6575a140b0bcf018f68b1f76398d6ba6b77b93de2dc31
0be89dad413388e4e3c1d7359d5107e5730513037515228d01a4ba219446ecad
0637f3b8e0e85d0f8d94f1727504c92497b758856a249722a1ef742999bef205
e1f42d3c1c6e11fe6222f39263c77f24a8043817f8a6239d9df814f5a79715fa
94d0527cb10711daa432c7edf757011f69495347dde6220f6dc3ddfbbda6a382
9ee5bd2374efd10fb38c2c757396d01d7dba3432fb82fcbbac139d62e1374ed9
b2d820f55a3db6c65c8a26c21e0e3249747838e55e1d9bdc8a1a9b2d7e4e40b3
1ad7cdeebdc32afcfdebb3a72d5368e2e64d27b4cfb72ac7f54bd1de9da7bf65
6c8136b528e4be7f2d16d2c1717c8a7cd9f2a85ee03ce1f9c755cf5010759f9f
ba1ec10881fffa10a5294d7a07acc0565108c17e509e80634ea6c9ca2cad12a1
f7ea062c29f98090d57896d756f79f69a0cb46657556a3f8631004e08d6ef392
8f864f91ab4b3f4cc2130523bf966cb15e499a752a08354484be3111e61eead1
154ebc7757459a39927fb39e1d0ae69ee8be27407b33ba787416df2fc9d8ff3f
f5628e3a112fd79ac5a3f49939123c053c43f4d37edbba3d0e2eb3e9559889ec
994e8ddb68aa31074917d6f28895f3beae658cbface6c8edca1c2f88e9b8c1b1
37651768f60e0f225bf9f9713050a915067b5ed85d73ab873562c8a9a9bbbf8d
2607a8103c0b435fe274bf7327416b7a4fa88bd402358907c11fc4f06687d39f
bc8efd84d92817195aa0de3029693fab45182075fcdc0a741a1fc92a55590bdd
b9735fe13249e07eefe5eea0fa763f26d29aa16962105ee67c6a68f6a79a4fcb
582d3dd2e2002a4ef97232e9a70927e91f51be681c3dfda82609a2acd478287b
c254c15dcd034ff9a35a6385db6326f8853999e9353519504fd309dc03f3f725
4634bfc7d4b723a61a81e806be26619634c4d75774b2b93142cd7f7fd144bedc
b0ee58b4fac36f91488615359b9f5f09d7b524d384a8e907cf0ea19ecc9694ce
f6756fdeb47b937ea0bf389e45a412fda9c863f87feded8831da4726ba02882b
8494875d6a606e5d7968c90733fd0f2eaff10e79dcfc9b534ca2e205b88a5e7f
e586743618f4463ad28e73b2c4d8a93d56d6b300f16c747477774f4da5607da1
2f29a8001f255caf111d4423bc6accd0e9bd7c08727e2dc570977bdb02df758c
5fe8f088dc92ebf854ae15f5d6c1c2aeffb4ea22c9568be46bafedb8738f5b0a
cefb37fefa0e08e6d509be690d0a8db0cc5474cebdb7a641f209744c9f2cffae
3201bcabd18c0f366c1fd4459b1710a5a914567dc651329f515af93598ce7c74
e8ea063f5b9c93228cb30c874339592fe46d85551e563f48d63ff6abba2f9609
3f0d7842f5a0b81adec50a471829127c4b489a25cf1806e411fc6f79e8a2a595
c977d62c67e95c6543a7ac3bb078ec18fee0c28541ea4242de72b7a0a9bdf387
f2f35f5fca9618d2a9dcd629fcd24670e646a078260c3a4346632c91fc9a7af3
1313e7bd71603ffa17c98c01facdc7072b8d4f9abde61b357f55fc3fcb67fe08
e3ef1b1bea12ede6d42dbf4569db225604374c8204ddd8be4cbf4827689608ac
e30515563435358d3fbbfa15e4398e094b114eff90c2bf87ce3e9d8c167ef75d
9f263f5694e1e4841d18d854e06bdc8aef958a3cf0aa4e222bc1a5d350e7b87a
a8e8daabc5c126ccc9c94a2aa2c6ced47d12c47de963b57ce73562ec4b013dc4
910cbfa80393fed7c13693f0a328720a3c4ce193030299f6b61b73749ad885f8
264ddb0cb140ae56d9e7544c7c435b35535914ded7181792d6972a6d3817681e
47001501f2c0a01836a9870eb1f45cddda033984602c5a59ed499a565e5e0b4d
126c505e4c7b4c85fc98c9eb27275e4b7deb8854a55737ea397bdee7dd4d57bf
cab7d0a6a2dff289fb5b93dd17cc9aa513098928e419270c3d25d7c545444a4c
a6060dc035d78034a3a0208fb4fcd75d14a60a765166b21ccac71dcfafef5223
a8a4bf05501fe40f294692eb2ca4b1a1769c6b8fe0bacb71530e0de872f2fec2
5fec9229c928fdf80a7d9d150058110e19128f20aabedcb6e4e04ef8c02aad3c
403d7d8b24d3e654b99abc8f0d56171a0084393ec7912521474c5e5d51bcf0ac
c4664ab9c0255e1587187d1ec5190d65152aea5a626fe5866dd61b526c94edb3
f8ec50449831c2df05d2f3be40f15bc20f2236c5e5c2eca388bf1ca36b1cb30d
73848ece09fa5b010d6058ef3768078286adca5a76492a9c4a1fb25465063648
3996f0fb56d60694d1f9eaf9c12693d1a51c6d055bf283e47b1f46c42f06bd75
ff451f6271ff1925199cfc5633f7a5206fd807910fd0d50d1f3171cde2671ec6
586f5076b6a7d841ae107e6ecaecb88d89073a970b64f34589cf012e53a2e50a
3eedfe8b64ed5afe23f4a322d2f122b9c0dc3b5a8652848126d9721629f3fa88
a9a2d77cc5e0cd303e3de195adade81b5fee9bc79738a57118c41153872a7187
f0df64176aaf6790b5fb8bbdff824fe13e31a111f84209aac06583fa6d99ee83
0991b4a2874fe41e4e88b0f24032851805e4bad988359534beafccec36b13a1e
ba93d77ecbee1218228c8f1b7fe7f6e6f5e7834f03e67f874b42facf703fc3c9
5b958a0ff848dff07eb4d08cb523245771670f83a4745a6f53449a47d915849f
841667fb840fe8a51280d5b5792005c91870ff2fa641270a2a65879dfabf666e
987840483f0f3a717e3340fff5164f607176ff53881c6db0114208a6b3f762d8
b1e8be3ddc274aa881f7e691c11d89cf95ffa2c14d57fcffa50fa7bcf331f90f
e918a07d95ea0266b366b3a62a1e863b2c9efabb2bb7209da1dc82be2c5d4b60
a2dbccd27ef1ff5203c9da7fd44015b3a7cdf400ff74c07876747663feb3efb3
bebf738259471f51cf4c466581fe2127740eaa61d75b97fecdeb63e901e642e8
f00fe1117662374373c6fe6d07b32d2433c916992df47fa8009b185c95530ffc
a81d9517743ad82561fc970da64310bb7b7b7bf2b1c27d5f508ded173b67c7bb
81ba98fd3dff5e08a0961b0f059e8a3920b3e9febbf2488497fd7ff70e42d316
65f75fbd8303bd0bff17e1ae463d267088156678e1ef4fb4ef346386f6efec6a
6408be3a5b0e9e25b4d9f1a4bfcea3cb48436c236886f65b5d6c7e9627174894
e5d971021daaefc678ad98ae6147ccb36ecc1daa4073e6d4d69c01984aaeef89
04c45788129923a6695bfc7b251e9d030d2263d05a010d90be40e786b5f37398
3392f87ea6dff9f9fed875793260887f77254b5a3ef5f73f8d71edd495bfa8af
432138b565822e0e6782cf57c1d76f12d0b441d0795727e0f7ef4ab39683ce3c
af6bdab99eb4ed1a146928a28a83a6ed25663b75e69c0392018bd8468b0f867f
9d6bbd0e88caaaf0e012774cdaf5d00c0d51d6bf79bbc1cfb3c4d8bafe6663bf
fef95fe79dc1752f06373737e71bbd943857a72b4c0b0801b1f5399aa147229f
c36024c1b492aba7a7a76b6bec8e2298ebd0a930775f0c02f1c635643a272707
717db17d03d07269e8755ee839c03d66e15da70f7672e68339ddfe9baf38a706
28f1f7de0abfbeff075e7e49b80c0096aaf6cbd38303ea3fb81212985bb32129
8f7d7d0fc7822f451dbf52e8e62995ca6c0ceeec780e602e06d9c1884c281355
f0c86bb98d34eb2e583ea8074be927c7d5e94c7ba47305df342e224f3e982ceb
03997d68aa57b1a2c0265e8e7e587572e66da0701a301b624d1f3f4a49494559
4f8307e8874ac4dc38b05f8283d090e2a5b6382c7cb399e9e9b45c62cd4be5db
e4106988acde43050e7d74b586db6397340687bfe9529e9f5c5e9cfdf8f1235b
c22b91cb83bcfdc5c5e96185699537dff9eec989548f2f3ebf831163fc4ef3b3
dddcdc5c21dec90a679fabf3b2f304e5486bf91ab6d8cce4803456b667cf9ed5
63f75015f9682b9c8eeb5c684040f6168495aae5b680c48cec90a20e6b36c090
76dbaf82fcfda3873039280aea6f8c9d9d1ede6105d4499b35d50fa7ed96ac36
cd210aa560a24ba3afc08d85ed38374cf3cb80f003bb5dadaa22db37e2fa7747
771009ca6fa378b521378849b2ee06c2ccc7e91c465e03329cd803c2714a4a0a
e6dc3e8c3492656b1f1854e22e018cf80d2b25b83749657312a767ddfb0906df
fe22b47997962c57cf1683951c891f96696b7a6995d8a7f496e07b24c4b09ec6
006316b23472a20298fd877e7e5f2f9bfd8120ffe6c68eee4135fa1d19776822
cfb8924c58928e74c83aa59e6b40a14b00eee6ac118c888e6a9b9710dcd06f1d
5ff8cede279077350e501746e23c7a4a4ceef9c1c1c1d5558781466cc4290aa9
34b01d07dfdddae2bdb067e47035e1065188701cd49313bd38a3d284e674b111
1609243acdececbcaf55d03895d4a3188338c6a9ec57e8fa4e3f39b5ab018ccb
100041b1041ee49b84599e92f2f257473b9603db3759113a9b51b799010c2417
4a55e21c9d6aebd0449b53265dabdedbdc2cd3a58080db3d8197e8557e92e2d8
99b2790ec9ccdd180e6664ddc62833e6da7a074c5a028e24377211385ff808b3
adfe8162105e64c67634bfeb0e2b65de11cf0d72c3ccd7bac1af5582f0e0494e
962039fb5906915edab32f4ddc84608e68d35b819fb3831a3106e10a60bcbe2e
c0a35f5c040e78e89a929f248a7ee175fc5a5a22d665ea5fc9793129bea89566
847eb216bf876dce54ffc7c6656171712292793b8963b4467d1c0be1b19f1082
912008980b22cc273709af25f8888e958dcdb33f318b46686f9e49e8186a5c70
07c49b044f62d1822c95f6681e1321ef044ee9246ddb33509d3cc35134e95fda
08c3d1428708b87af1619c122f60befa21bfadacadc34774febd4d8439351785
8451f4fe5a59610d4a7c9bf068ae1454fa8ef930e906083ee15173859bac72e4
962d2e30909e8ba4ccdaca594bce4c94002a7b0ba89e3eea382c712eaabfbfbf
a8a82871eed6174ddd3fa9aaef1385ded03d091f1904e0941bbb265dc0432fde
04f3bb04e4e4e46e86080543b18a07d262e5c5f05ce2270746d77e451cb045ee
26fe4b318d81ed21ccf541e15f986d1df2c5fafc9e3e4d0966b1048920923a66
27d57ce01067855b69e3d49dbc6feaa5cbcf78c271a8a14b1889c75d7b2261a7
9fd78e8acec129feffa11f463119c8f1a507eb036fdb718adf00fe345474942b
a1b661ff1f9084d8bf73860000
#<end update:2020/02/21 09:22:53>
#<begin attach ID:3lelWhCFaIV>
789c0163029cfd18000000336c656c576843466149562e32303135303532322e
737667bb0700003b02000001000000789cb555cb8e9b30145d275fe1aaaadc4a
e5610742124166d17d5ba99af5880403561c1b193364faf5b5c13c1a75d4519b
2c1261eef579dc7b24e287cb998167226b2a780291eb4340f851649417096c54
ee6c2078d82fe3fab900ba95d7092c95aa769ed7b6addbae5c210b0ffbbeefe9
0ed8b7ec2e8cf2d39f1ad176bbf5ba2a9c9322080e694dbe4b9153461298378c
7558bbba4a8ffa4546f2b4610a829666aa4c60e06b9d25a145a9fac37eb9582e
e2778e030a4933e038fa455ca54a11c901cd12f8f4640a23009add37cfb6f591
53a51d3635913f0cf337fe58130834d82296e4a8c02581bafba5fb7f054a5b60
096c4baaf44dafbb5a09f6a24d135be382eb52ada438696f07d68c27c762fa2e
d69a04e5460df23ffba0ff197c03197b56b0797e5d98ff612ecd9c7a018d641f
dff713f9f406211da3996d752ac00e3467e6e8e19cd282d84117dd887515fe36
a9b057b48e4649abf9def0667535ad498986bf968286694ef06e4f10ce3ca3c0
dde8906d8399f3e89f6814b97434c88fdc20ec9d6854f3da49f9b1143281679a
654c23e6822b274fcf94e9ae2fa2919448f095b4b652d39fc468abd4a0c452ef
7321809d65ec19e86eb9c5307033eaa338573a305cd9610ff691dfbb47ab68be
f2c9f7fa3a8c6ff13dc147bd6714e0111ecfb7f77fe8ebc82e0f05a11b4e06d6
ee8c23bc1145b8ba2dc5180d9b7014614370f3684c91f85b18b00d03be4f18b0
0d03be4b18f0b8297caf30cc28ee15066cc380ef1186432a87302c63f3a9dd2f
7f0167365672bb07000009d1216863020000
#<end update:2020/02/21 09:22:53>
#<begin attach ID:3lelWhCFaIV>
789c014904b6fb16000000336c656c576843466149562e73616d706c652e7376
678f2500002304000001000000789cbd9a5d739b381486afe35fa19ddd56bb33
0bd69110c659482f7adfdd994ea7971dc7c636138c3c80e3a4bfbe0204c849da
ad531f5dd811469c0ff9d181f738f1bb875d4eeed3b2ca549150f0192569b154
abacd824f450afbd8892773793b8badf103db5a812baadebfdf5747a3c1efda3
f055b99972c6d854cfa0dd94eb873c2bee5e9a08f3f97cda9ea5b653a0e47651
a5ff956a9de56942d7873c6f6d5d57fbc5527fb04ad78b435e5372cc56f536a1
21d3716ed36cb3adbb839bc9d5e42afecdf3c8a6cc56c4f3f407f17e51d76959
906c95d02f5f9a138301b0ae6fc666eaa722ab7586872a2d3f369eff2d3e5529
25dad8555ca6cb9a3c2454cf7e6cdfbf634aa79027f4b8cd6a7de5b4bd74aff2
479d746ace15aad0a7aaba54773ab7dbfc301c79c626f3b98e496545130db0bf
19e95e8dfdc6643c350137e3ef07c6ded8a135475d008732fff3f76e45fefa89
405a8fcdda56e53db926875dee2dd56eafb3286ab3d49b7691f5797ab2569c75
41b57f8d496e7f77edc1c98a8dd12c96774fc3817e457b0722340e6074202cfb
e217cd0791df3b903e976312816f7999f9f2526ef8ecf26eeaf4a173d37f1b10
52d27ce82d8ae5569509dd65ab55aeedad55517bebc52ecbf5b4f7ea50666949
3ea44773a6cabe6a6700fbba8fc338be799bd7ff342fbd71f4be7ebbd147fa15
4f1b2f2fc7c067978ee1737a4b3aff83df78bae9d96da9cd175565881d10ed09
8a4682226bd183d710f42c5dc164f3e55d36e1b55263a6438e4f76669f27f02e
92d94981b0ab686fbeba7bb44bc1ff643ad89fcbcebe45efc946ff45f3d1cc6c
9159e48f2e20b43788bc948f28bcb48f1e0898751e000388fd92b1532296aa28
7476aa24eb52edc81f406ad596717387fcf18de9e57c86fbd25cfafa962498cf
881987fa9d70c99e8c7595f799751ff911a7fa0a544e0547e554003ea7a30f3c
4efbc285c529b8e354303670da8dcfe15144b83c061295c720c0e771f481c763
207a1e19d6b38bbe9d3e7b7079ee1f0061377077bb216063d536e3b6520bab6a
8bb3ab7660aab69048db449ab22d24ce3e91434d15126da3584e42b49d22fb47
ce08a7724b87acb61c6a8dd7b2da8e83f399e458a5bb679223d5ee11178e57bc
2d2778d55b62ca20cd64e09c496631f98a3a097364265b3986ca24cc5d30c9d0
99e41c8749e19a491e8c4cf2f0e799ec3b0301766b2040ef0d042e9a03017e77
4022d5c9c875774033357407023176044ec6afe80ea0b1dab707b0581db53b22
ab9613fc0e0116ab33d71d828e55337e4587008dc9be4580c5e4a8df1199b49c
e07709b0980c5debf48e493316a3363f199fc12ab64c0764990e2e643ab890e9
802cd3e70e6ff5964ce767cb746c950ec82a1d5ca87470a1d20157a583cbdfa6
2c95cecf56e9d8221d90453ab810e9e042a403ae4807873f438125d2f913913e
899b7f9fba997c037cde4fe88f2500006fa7290649040000
#<end update:2020/02/21 09:22:53>
#<begin attach ID:3NaPGEbsNRQ>
789c010005fffa16000000334e6150474562734e52512e73616d706c652e7376
67b7230000da04000001000000789cbd9a5d8fe2361486af875f91aaaad24a03
f8334e46307bd1fbb652b5d72b16078826938c425866fbeb7bfc11483c8ba954
2717430e8e39f6ebbc0f39c1b3faf4fe5a46dff2e658d4d53ac60b144779b5ad
6551edd7f1a9ddcdd338faf43c5b1dbfed23e85a1dd7f1a16ddf9e96cbf3f9bc
38d345ddec970421b4841eb1e9f2f45e16d5cb8f3ae22ccb96fa6cdc1f14c7d1
d7cd31ffaba9774599afe3dda92c75aea7e3db660b0d32df6d4e651b47e742b6
87759c2098e7212ff687761d3378f33c7b983dac7e9acfa37d53c8683e8786d5
dba66df3a68a0ab98ebf7c51272e0970eff32ab65d3f57450b0a4fc7bcf95b8d
fc67f5f998c711247b5835f9b68dded731f4feae5f6fa40209e53a3e1f8a163e
b9d41f7dabcbef203ab7e7aaba8253c7b6a95f40dbd7f2747937b739d182c09c
eaa252b3c1e81145e64fe55729574b3b6115df9e18faa53f35f5ce4ce0d494bf
fe6c56e4b7ff30113da25adb1dc2d153a4c6db54fb32b7cbacc7576b0ca76335
116a6642af536183cbe5acd175fccdf6c59d00ee0ddfe6efad1d538730143743
a9836a9a6faaeda16ed6f16b216509b97775d5ce779bd7a2845ebfd7a7a6c89b
e88ffc6ccf1c8b7f72b5346f6d37273b8967d0b25aaa94dde0d2af5d0eb5e309
c5e3f0eaa5ab7e5b571548ad9b68d7d4afda086dadd7c4a2e677f88fb57506e7
68811e05bc443a82b55b743eff5f791959f0478cc502a12c21905ca58eb8e8b7
0edc4dfcee26fa0a633c9dbd311dcfdfc4f5b757bdb4ead309fd8dd188062777
0c4e8cc14908836b471b879b1094a9187d8843593f1b5a1fb26bef6374dbfcd4
6f7e6acc9f4c68fe743cf353d7fc5ef5b2539f4de87e8247743fbde37e6adc4f
83b83fbdba3fbd3a1ef4b97128f71334b43fa4d7f627f8b6fd99dffeccdeddaf
961cfbfa5362c61223d89fb9f6f7aa97563de90a0e3c85fd458fb5d0f66777ec
cf8cfd5908fbc375046f67cae626c4445b3ee34e9cea5071d20f310e0545a2a0
c82e4c089d1b8ea2d73c4082fb91e00689644224d2f190e02e125ef5d2aa6778
4224181d11097e07096e90e0419048af48a4572418e24eac3960140dc3604830
324002b26b2418bd8944e24722e9d7c8249db046d677a6d04c242e135ef9d2ca
b7f72d324591c4ec5863d448c91d2212434412a446d2e5bfbe3fd84701aa9e85
23e1840419389c3054e144150fc4d6471892abd41113fdd6010fc2cf83306533
9f1208312210c205c2ab5f5afd5d253f0911848e8884b883843048882048881e
123d0e0872634382866018077b9e20432e20b10683d0db64a47e3252533cd9ef
2f3a45f9d0556a347cf9007a5c32bcfa65a79ff4cc3abafeee6611be7c94aefe
0f64a4868c3448f9c4af04d8d83c30646e4c343d947e8879b01b862683766450
aa93c351f4db0764647e32325358a309c96064443232970caf7ee9e89f848c4e
ff28646477c8c80c1959083218b9926163f3dc20dcd8d060fa0ce25064303c24
03d26b3218b949063c7af8c85024a88b954d4806c7e391819143865fbfb4fabb
294d4206a7e391e1ea77c980e55064c021c41e5b8f0cde2383a76e6c68e0ec43
1c8a0c4e87647066c8e0ec3619fe7d676cf65e596fc360fcbdd7d17e8ac2eece
b35fbdb4ea3b2ec484586423507167e7199b9d671c68e7f9f2439409cd8f4f3c
7563a643ea84221411ba8ae2978d6aaa52c341f45af538b395fa379be7d9bf79
275d0fb723000018b6807400050000
#<end update:2020/02/21 12:15:02>
#<begin attach ID:3SSFCE2SgXM>
789c011f03e0fc14000000335353464345325367584d2e6d61696e2e7376672c
0c0000fb02000001000000789cb5565d6fda30147d2ebfc2d33a996ae4c34e02
a44ad8c3deb749539f2b37718885b191e314d8b4ff3e3b091feda0456bfa008a
7dafcf39f7eafafa265f364b0e1ea9aa98142944ae0f011599cc9998a7b0d685
3385e0cb6c90548f73605c4595c252ebd5ade7add76b771db852cd3decfbbe67
3c60eb72bbe14c2c4e39a2388ebdc60a8f4911040fa4a23f942c18a7292c6ace
1bacdb6a4532b391d382d45c43b066b92e5338f68dce92b279a9531898c56c70
35b84a3e380e982b9603c7311bc98a684d95002c4fe1fdbd35ec01d0d179fbdd
b9de09a64d847545d54fcbfc5ddc551402037695289a69b049a1f1de36ff67a0
4c083c85eb926973d26b8eae24df9aa0696713521853a5955c98d81e78bd5f39
1da6ef62a3493261d5207fe483f667f12d64e27582edf77961fea7636976d50a
a8151f7e6c337273819086d1e6b65e7227e3a4aaba04ef98f1d445386ae8c370
cf8fc3c09d440705e1f3e41c8849b678ce8c3a5e4d370d078a7cb78d701cbb06
d5ee3b4464a554295cb23ce706b190423b0559326efcbeca5a31aac037baee2c
15fb65e8105ae99d928e7ad698992864e259e033c14dcf0787107e4b7441b027
41b6b69f445769a2f41b82fbbcec8efd5694e452f0ed9f4398a714a0a07f05d6
78293f1ef7cf9f492ed5a50282f81d12a0b7fce20c44b87f0139cda422daf4dc
4b558c9fdfb31e54ac9b0b73a982c9b47f05b6133bf661316fdca53a62f40e99
b0adc00861d9c9b238d17f503c3edb80c66feaae47b162d47bededbbebd075dd
9b17338d71ef359795345b0c33221e4935ca59a65f5110f45e735a9adbaf4cb9
0d5fa18e7a2eb306eb70efcdcb2f72aaec0568124378e6581762ca6f68914676
75a4f1a5473ff42337dcf5cba3a923c0ee348ce3695f0f7f3841ee74b2eb8b51
ff6f7f5b194e4e34f937f29caea8c999c8b6a0507209ae31d0125ca3dd88f9f2
64773abc6e232755499422466e00027018f8701bf1a81979409be75137ff78ff
cdba430f626cf0e2716020276ef4041f1c19436c536df806899ded6783bfd512
d5a72c0c00005a3983611f030000
#<end update:2020/02/21 11:49:39>
#<begin attach ID:3THN0DmmhmH>
789c010705f8fa160000003354484e30446d6d686d482e73616d706c652e7376
6733260000e104000001000000789cbd9a5d6fdb361885afe35fc16118b402b5
4d8aa43e022bbdd8fd3660e875e1daa22d44910c59aed3fdfa9122254bac4d0d
28c98b24af2599e4a1cf139c37cce6d3fb5b09bee5cdb9a8ab2c402b1880bcda
d5fba23a64c1a565cb24009f5e169bf3b703e08f56e72c38b6ede979bdbe5eaf
ab2b5ed5cd611d4208d7fc89403ef2fc5e16d5ebbd07519aa6ebee6e309e1405
e0ebf69cffddd4ac28f32c6097b2ecc67a3e9fb63b7e619fb3eda56c03702df6
ed310b22c8d779cc8bc3b1cd02c25fbc2c9e164f9b5f964b70688a3d582ef985
cd69dbb6795381629f055fbe881bc30068f47e51ab473f5745cb155ece79f38f
98f9afeaf3390f001fec69d3e4bb16bc67017ffa7bf7fdc1505c429905d763d1
f277aebbb79eeaf23b179dab7b555df15be7b6a95fb9b6afe56578b55463c255
c8d7541795580d821f21905f627c31e466ad162ceac70b83bf8d97265ec9055c
9af2f75fe58e7cf81f0be966147bbb87083c0331dfb63a94b9dae66e7eb1c7fc
76201682e44ad06d2964f271697b749b7fbb7bd5178046d3b7f97babe6ec4a3e
159653891fe2d2725bed8e7593056fc57e5ff2b1595db54bb67d2b4afed41ff5
a529f206fc995fd59d73f16f2e167a6afb35a945bc702d9bb518b29f9c99b533
a53d950b4a3c6847c33e5b57cf74f5bbbaaab8d4ba01aca9dfbacd68ebce0f0a
35b3c3ef8beb0d9ec295b036ff0eb05652b8ea2dff5353e078453f46e12a4d21
4ef8d07c601086a36b139787669787d2e5893f9b87d09dcf43dde746f54ca90f
437f460f8943a38733460fa5d1431b46e79b36d83b847a6dcbeb219c989d0f2e
dc8ed28776c766bbe3ee03c71eed4e1cda1deb7637aa67bdfac89fdd6f3bedc0
ee78c6ee58da1ddbb03bdfb4db6f73acd711e525815a690b023285804808f063
08881902d2d980627f1050ea0e02a2436054cf947a92f8838042871090190888
8480d880806fda607c42f5ba733ed54b5b10503a81800f2e20a0e42104d40c01
9dc47bec2fdf23ea0002aa436054cf947a15f0bb44e62be17761cb3604740602
2a21a0d6127e977e64ac1f9528b619f151226d9d8a8ccf8796217fb83a317b64
367b344df93edcdec77c27768f74bb1bf533a5bfcff95efcde077d277e8f66fc
1e49bf47f682be74b90cf7e3da9ae565d2bf795e447d617a99f5efbb3e36bb3e
9e867d1fae272e5d1febae37ea67bdfec8a3ebfbcd76e2fa78c6f5b1747d6c2f
efabdfed58af51724bf993da160d44a381281ab08186c44c43324dfd3e68e863
bf131a129d06a37ea6f4f7b9df0b0d7df0774243324343226948ec057f49800c
fbe35a12407fac6dd120b3ff8d0611fe050d32fddfa72135d3908ee33ff618ff
b10b16529d05a37aa6d4f7f13ff219ff130728a43328a41285d45efc173c8058
2bc9ed6ffda3125b6d0ab0343b113d01ee7b82fee21800048d00888f63d41278
2160f8cbbf030410d41030eb674affd012f8606068091c30a0ebd719e0db2118
e03fecb5049df311d56b323a0718d7d64090adc24082e814f0d029dc65c17cd4
8bd0a451f0c20271c9827edc6bd6cf7afd9147168646c1050b3307be481ef822
2b07beaa5148468dc2a896fe2750afadb140a62c10c5027ecc82f94018859336
c10b0bc3e9800b16f42361b37ea6f40f6d820f168636c1050b3367c2489e0923
2b67c2aa4d48466dc2a896fea73fd4d658906dc2c082e812f0d0254c58586cc4
bf78bd2cfe0345fc252a33260000b44c7bf507050000
#<end update:2020/02/21 12:14:23>
#<begin attach ID:40gdNMcCBbV>
789c016e0291fd16000000343067644e4d63434262562e73616d706c652e7376
67fb0500004802000001000000789cad54cb6edb30103cc75fc1a228d80211f5
b2acc8909c430f4581002d10a4d780916889304d1a141539fdfa2e2929765207
4ddb1c6c2c7797b333c3b5f3cbfd56a07ba65bae6481431260c464a92a2eeb02
7766ed5d6074b99ae5ed7d8da055b6056e8cd92d7dbfef7bd2c744e9da8f8220
f0a1030f2dcbbde07273aa31ccb2cc77557c3c34c4e88eb6ecbb566b2e5881d7
9d100e6bd9ee6809898aad69270c463daf4c53e079003c1bc6ebc61418a6e3d5
ec6c7696bff33c546b5e21cf8344bea3c6302d11af0a7c7b6b0b8f00e1d17d1b
8fad37921b50d8b54c5fdbc9dfe44dcb3002b0b35cb3d2a07d81a1fbc17dbf00
05124481fb861bb8e9bbab3b251e40341b6b524928b546ab0d68bb13dde3c91b
3103120127c5a5651306e7011a3e16df42e6fe48d8c62f130b3e1c53b3a78140
a7c5c7f783239f5e41c44db4ded2d2288d96a8db0a6f8807a36b67b1cb6027b8
e4ba140c957b3717a3128865294930d29049c8739b0e1468b979ce217ca58da7
af1e5c0c081818462441631c3b226f809d260e7a4122c08e0e8737044fd2a7bc
a7398973751863d8de2d82b31c1c0fd3cc166ddaa3b26c1498bfe5552560fa5a
49e3b5fc271008a39d99de6324b3fa7ce55dfff892fbf6aedbb77ada01fbf652
1936fdc6405aade4df3de7242d9aa7243c8fe7206708170b08e32422d97198d8
8638b6a1ed1d1772521b8105a1d39b2c6cf189dcd6506dfea8f62ba2db61b9c9
41f27f29fb8df8690dffb41863a2a26d43b5a6203c46313a7215664517493a58
38ed6338ede32cb77fd5abd92fbee1c482fb050000ef5f1f136e020000
#<end update:2020/02/21 12:00:24>
#<begin attach ID:4DT4GKKbkE2>
789c0171028efd1b00000034445434474b4b626b45322e32303135303331392e
30312e737667860500004602000001000000789cad945d6fdb201486af935fc1
344d6c528c01833f223bbdd8fd3669ea75e52638417120025ca7fbf503dbe9ac
aaad26b517898ccfe17ddef391943797530b1e84b152ab0a128421106aab7752
ed2bd8b926ca21b8d92c4bfbb0073e55d90a1e9c3bafe3b8ef7bd427489b7d4c
31c6b1cf8063cafad24a757c29911445110f5138871208ee6b2b7e19ddc85654
b0e9da76d05adb73bdf52f76a2a9bbd641d0cb9d3b54d003213808b93fb8f1b0
592e968bf2531481bd913b1045fe4579ae9d134601b9abe0dd5d083c0990d9fd
f03ca5de2ae97c859d15e67720ff54b75640e0c516a5115b072e15f4d98fc3f7
2b52be84b682fd413a7f331eae9e75fbe88b16534c69e543d6197df4b5ddb7dd
d3299a3431a2de93962ab8217885c1f809fa41b28c27c3e1f97563f8cbdc5a38
8d063ad37efd3c76e4db7f181988a1b786803508b85aed5b317579c087161b3f
466f23e5830ffee42399352879dea07ff07a7b7c4e2773367d934d0736c1239c
a41f8def4e6d545babb7b2767e6b4163f429f4c3e9e06cdab7b7c7fc32e13ae5
3c41195f251c6140488a285ff922d075deef922e1822599aad1847599e70ccc0
1506b202a594f174c50ac428e1ec23787e0a28a749b2f27a88929415b39200a1
18251967cc8731e259ced209eac46558e42c453c25e3165154704212ef2b44a3
5a6d0fda545028ff5b6eb47251539f64eb33bfebce4861c00fd14f112bff78b3
849cdd75e893f14d181e29e3a038e7129a209614e306f11c6196e7d933b075b5
71ef40ef8475f48a5e96e15f73b3fc0bccefa6f686050000a96e26b071020000

#<end update:2020/02/26 16:12:42>
#<begin attach ID:4DT4GKKbkE2>
789c0174028bfd1b00000034445434474b4b626b45322e32303135303331392e
30322e7376678b0500004902000001000000789cad945d6bdb301486af9b5fa1
31863688657d3b0e767ab1fb6d307a5ddc584e441d29c87293eed74f72942e94
b60cda0b1bc9e7e87dde738e70757ddcf5e041b9415b5343823004caac6dabcd
a686a3efb20504d7ab59353c6c404835430db7deef97797e381cd08121eb3639
c518e721039e5296c75e9bfb9712495996f91485975002c15d33a85fce76ba57
35ecc6be9fb496c3be59870fadea9ab1f7101c74ebb7350c4008b64a6fb6feb4
59cdae6657d5a72c031ba75b9065e143b56fbc57ce00ddd6f0f636069e04c8c5
f9b84ea93746fb50e13828f73b927f9a9b414110c4ae2aa7d61e1c6b18b21fa7
f72b52a184be8687adf6e1643e1ddddbfe3114ad52cc5813428377f63ed476d7
8f4fbb2c6962448327ab4d7443f01c83d313f5a3649527c371fdba31fce5d25a
dc9d0c8caefffaf9d4916fff616422c6de3a029620e21ab3e955eaf2848f2d76
618cc186986c48f1e4835d34883d6fd03f78b3be7f4e27976cfa269b4e6c224f
74823f1a3feefaac1906bbd68d0fb71674ceee623fbc8dced27d7b7bcc2f13ce
536602e1f982a1428050455813221115c9c2bba47989382582cf8b1249ca8504
4c241417a8583081f9bce48814b2f8081e11188962c1e59c508c5821388f35a5
8a4070822891bc0cd759a005652c41bd3a4e179915c11aa6254fb3e48849ce24
0431216bcc7a6b5d0d07dfb8f047e8acf159d7ec741f72bfdbd169e5c00f7548
9141ff098e09d9fbf3e493fb559c20a9f2a87909279222cacb8224b8449209c9
9fc19569df816ed5e0e9193dabe2af7335fb0bcfa4a7ef8b050000f98329d574
020000
#<end update:2020/02/26 16:12:42>
#<begin attach ID:4DT4GKKbkE2>
789c010d02f2fd1b00000034445434474b4b626b45322e32303135303331392e
30332e73766791050000e201000001000000789cc554c16adc30103dafbf42a5
14b510db524c4877b13787dedb42c93928b66c8bd54a4692636fbfbe2359d92c
21491b48dbc38ad1cce8bd376f169757f35ea23b6eacd0aac23423187155eb46
a8aec2a36bd3cf185d6d93d2de75085a95ad70efdcb0c9f3699ab2a9c8b4e9f2
7342480e1d7869d9cc52a8dd538d74bd5ee7a18a4f492946b7ccf2ef46b742f2
0ab7a394016b63075643a2e12d1ba5c368128deb2b0c8418f55c74bd5b2edb64
95acca77698a3a231a94a6902807e61c370a89a6c23737be7004a027ef7d1c5b
af957030e168b9f9e199bfa96bcb3102b0556978edd05c61e83e84f319281841
5678ea85839779783a687980a179ac29ada0649dd13b98ed568ec75b1a314976
0e9ab4505e0d2567042d3f8fef21cb3c0af6f1f3c2c8875369feb608188dfcf8
7e71e4d31f08098cdedb5a985af2e86ebcd473c0c6a83ec4c054f8f2e2910f0f
1cacde3d26a12714c1a6b8bed7ba468f8986d99e19c34052810af4e065413272
e60f442f7d18ce7f47bf9006fee2297ac76717e943e8bdbd58f61aacf5c994a9
bad760f25e348d0415ad562e6dd95e4868fba24723b8415ff9142b56fc04c194
0eee7e2771095be3ff1965ee415f10f0f7f8256f7f4f1f780f8b8cff31fe3d3f
7d7b01a7f327a5ff806e935f4aa2b30b910500008113f8c10d020000
#<end update:2020/02/26 16:12:42>
#<begin attach ID:4DT4GKKbkE2>
789c010d02f2fd1b00000034445434474b4b626b45322e32303135303332332e
30312e73766791050000e201000001000000789cc554c16adc30103dafbf42a5
14b510db524c4877b13787dedb42c93928b66c8bd54a4692636fbfbe2359d92c
21491b48dbc38ad1cce8bd376f169757f35ea23b6eacd0aac23423187155eb46
a8aec2a36bd3cf185d6d93d2de75085a95ad70efdcb0c9f3699ab2a9c8b4e9f2
7342480e1d7869d9cc52a8dd538d74bd5ee7a18a4f492946b7ccf2ef46b742f2
0ab7a394016b63075643a2e12d1ba5c368128deb2b0c8418f55c74bd5b2edb64
95acca77698a3a231a94a6902807e61c370a89a6c23737be7004a027ef7d1c5b
af957030e168b9f9e199bfa96bcb3102b0556978edd05c61e83e84f319281841
5678ea85839779783a687980a179ac29ada0649dd13b98ed568ec75b1a314976
0e9ab4505e0d2567042d3f8fef21cb3c0af6f1f3c2c8875369feb608188dfcf8
7e71e4d31f08098cdedb5a985af2e86ebcd473c0c6a83ec4c054f8f2e2910f0f
1cacde3d26a12714c1a6b8bed7ba468f8986d99e19c34052810af4e065413272
e60f442f7d18ce7f47bf9006fee2297ac76717e943e8bdbd58f61aacf5c994a9
bad760f25e348d0415ad562e6dd95e4868fba24723b8415ff9142b56fc04c194
0eee7e2771095be3ff1965ee415f10f0f7f8256f7f4f1f780f8b8cff31fe3d3f
7d7b01a7f327a5ff806e935f4aa2b30b910500007360f8ba0d020000
#<end update:2020/02/26 16:12:42>
#<begin attach ID:4DT4GKKbkE2>
789c015103aefc1700000034445434474b4b626b45322e73616d706c65312e73
7667140d00002a03000001000000789cbd97df6fda3010c79fcb5fe1699abc49
24b11d421294d087bd6f93a63e572918881a12e43885eeafdf9df383006d5589
b40fc0e56cdfe7cefee62ca2dbc336234f52956991c794db8c12992f8a659aaf
635ae9951550723b1f45e5d39ac0d4bc8ce946ebddcc71f6fbbdbd77ed42ad1d
c118736006ada7cc0e599a3fbe34918761e89851da87724a1e9252fe51c52acd
644c5755969958b372972cc0b194aba4ca3425fb74a937319d30c87323d3f546
d70ff3d1cde826fa625964add225b12c7044bb446ba972922e637a7f8f035d00
de5b8f7633f52e4f3554589552fd45f2effcae949440b09b48c985268798c2ec
67f3fd4a2828218be97e936a58e998a5bb227b86a265339617390c955a158f50
db4356754f561393d902722ad21cb3e16ccc48fdc1f81832729a84d17e3d31f6
ad9f1a3ed509542afbfeb5de911fef48c410716f15233382b8245f67b2d96583
c72d5680863402cfe4813f4d10e1f6b6c83c9cecd1919f2c1ecf13e07d3c7f13
cf0d5e78f53e7071dc893eff0abc78132f0cde609f9b3406c557dbcc4acab258
a48986f786ac54b1c52dd1059e4ba3f8b785f632a1d599987a36484c309b91da
f63c34193b3503cf6e65781dcff36d0f24eddb8c8553814ca413e18bbe7f0814
0f3124c46d480cab801fbfe76d385a1eccdb247cd79e4e99a8d5ccb9291a07ad
245f6c0a15d352270a5ad2aac8b5b54ab66906f37e16954aa522bfe4be1929d3
7f12d7ef747bf04db2739dac79e460c8132e0b7adc807d04561cb19fa32c2c63
cc5dd4903bf1ce6ca32ae2f2ce1e445c70e261c826a0283864021920931cdd13
50c4102017e2d7115163580616413ab711d9b9b6ea570875e54ddad31efa90dd
4b6db982355cc1c38fe24ede232e319cb84cc31a9b86453cefcc34d20a065556
d798c6a65111e02392f4fc9e3f8cb6dad6548b08ea30d2eabc467167d26a1a95
b981a6b6eb86fef911cb7c79dd017b97c20a5a5df1907f0c74fad9aa728d68b0
3052dba6593557e089cd07ba0f4d4b1ab71d0aa9c827a68175ee417aa3b9f7da
0e656e432882d49764eb3ed795a8d534a9ef25114e2f2ea6abcfd8bf14564f4f
10cf75f9f0d4a0a58e22fc0f331ffd07c287de46140d0000c0e999f151030000

#<end update:2020/02/26 16:12:42>
#<begin attach ID:4DT4GKKbkE2>
789c01ca0435fb1700000034445434474b4b626b45322e73616d706c65322e73
76674a190000a304000001000000789cb559cb6ee336145dc75fc1a228d402b6
cc872492819d5974df0e50cc7aa0b1655b882205123d4efaf5252f25527ec430
1a7a114322699efb383a3c72165fde5e2af4b368bbb2a997118971848a7ad5ac
cb7abb8cf66a331311faf23459743fb7482fadbb65b453eaf5713e3f1c0ef181
c54dbb9d538cf15caf88ec92c7b7aaac9f2f2d2452ca39cc46635012a11f7957
7c6d9b4d5915cb68b3af2ad8ebb17bcd577a605d6cf27da5227428d76ab78c12
ace3dc15e576a7eccdd3e461f2b0f8653643dbb65ca3d94c0f2c5e73a58ab646
e57a197dff6e26dc0664f47d73dd2ffd56974a67b8ef8af61f83fc77fdad2b22
a4377b58b4c54aa1b765a457bfc3e7075be914aa6574d8954a7f730e5f7d6daa
779d74d1cfd54dada73ad536cf3ab71fd5deddcdfa3d714c754c4d599b68089e
6264ffccfe66cbc5bc0fd85c7f1c18fe6d1c9ab9b301ecdbeaf75f6d45feb821
104034b56d317a44062eafb755d15719e04d895b0dadc3a0360eea0361d9a844
707354238f9faf9e4f0320637872159e003c61169f7b7c3a82a7ff1f9d5e45a7
36f9f45ee8ec2a3a0374462c3ad4202c7c72153e3982872284854fafc2a747b5
8730c2c26757e1b323e2dd019e5f85e700cfef567b71155d8cd1c3136fff52cd
f2ae6b5665aef46981366df362844035e681ec75febabc5e4670ea9ae2184f85
fe40d45df6017c6ee38cc6526226a79cc629d23816c58f0b1ea7219028e331c6
3223b0a349a3cfc78d9b087a2455bcc16941d234b64d9332ce324c53bdc24cce
f27ab56bda65d4a9bcd547eea6a9d56c93bf94955efb67b36fcba2457f15877e
a62bffd52112f2aa8616f7e13e995691c5dcec3906a6c900cc49cc98e4c92970
51af3f01bb2e3a453decc724a24022168244941be6485374fdf8eb4bfd208461
1115499c0821a792c542502a32a4c12c14e530c6b42d804542244120651aa784
9029a1594c08e7243159d99c10c376704a885d46b21366d18cc70921c22a822e
47964a9a66419b6c3a48cfb9c58826ba2e8985a6386609e6491298d88661ec16
863160581282618c02ad5268015c835a85e837a35a35a64e96908342504e3f13
040cb674cae47341360c3773422a46ac58a4b6b55966720f4c28768150545871
b487ab95aee0644a6e215302644a839009340a440b59e9829120fd1de461102e
908e1e6a109641b882a8d52082c3eea08f900f72e23944754a2a6c1582d9ee3a
dd0accabe4c221c825c822b79691b25eb682532bbd855a29502b0b7212828782
a71a117f1dd6e6805480cfb140a31942c3782aefd2604bb06f7d567e86f2335b
e5ddcd48b102f3293de79377731a7250ace064ca6e21530664e241bc3973da84
a493ac20ed75e6c56903d2683d96373e4e5582803a9be61450a7d58ba3f3774e
394f0d3b1b799b917205f7ecd939bd845546627552e241bb02db767e0bbf38f0
4b84e097703e0a0967af42749a1f9b9c0107894b16e773291c7bb7210dc42f39
37d74ee1def8eee46a4cabf8398f466f7c7771718644e21612092011094122e9
def790d52b1988445e11bc5a19bde8b1bc9878b90aa2525efc3c068823bc748e
94d30578422f29dd2b9fe97272177363fa282e1c84a397bef7b170056699fb61
63b230fff9789afc07a5ae7e134a190000d7913f76ca040000
#<end update:2020/02/26 16:12:42>
#<begin attach ID:4OBeHVvM8Vz>
789c010a05f5fa16000000344f42654856764d38567a2e73616d706c652e7376
673a260000e404000001000000789cbd9acb6ee3361486d7f153a8280ab5406c
9314a94b606516ddb7058a590f3cb6680b51244396c7993e7d499192298e4d15
28c9459c635d48fed2ff21e7f064f3e9e3bd0abe15edb96cea3c842b100645bd
6bf6657dc8c34b479769187c7a5d6ccedf0e01bbb43ee7e1b1eb4e2febf5f57a
5d5da355d31ed60800b0665784e292978faaacdfee5d08b32c5bf76743755218
065fb7e7e2afb6a16555e421bd54553fd6cbf9b4ddb103fb826e2f551706d772
df1df330066c9dc7a23c1cbb3cc4eccbebe269f1b4f969b90c0e6db90f964b76
6073da765dd1d641b9cfc32f5ff8897100a8dccf6379e9e7baec98c2cbb968ff
e633ff597f3e1761c0067bdab4c5ae0b3ef2905dfdbdff7c30149350e5e1f558
76ecce757feba9a9be33d1853c5737353b75eedae68d69fb5a5dc66f4b392658
21b6a6a6acf96a20780681f8e1e3f321376bb9601e3f5e18f8455d1aff261670
69ab5f7f164fe4b7ffb0907e46fe6cf700062f019f6f5b1faa423ee67e7efe8c
d9e9902f24132b496f4bc193d7a53da3dbfcdbdd9bbe00a84cdf151f9d9cb30f
d954108ab92037043fb8dcd6bb63d3e6e17bb9df576c74dad4dd926edfcb8a5d
f67b7369cba20dfe28aef2ccb9fca7e0b79fba61557219af4ccd66cd871ca6a7
66f554aa1f57e45e7d24a68aac6ba7baf65d53d74c68d306b46ddefb47d135bd
1f246a6687df9736189c8015788ed847c05ee7344cc16ab0fcff9a0202b422cf
71b202208b111f9c0dcd7e25cad189d191d9e8a87fd508f9733ac20e9d8e74a7
1be553291fa6feac8e803bafa319af23e17564c3ebcc3283c3d91b9d86b6cc8e
a289d9d9e0dcec083f347b64367bd4bfed28f667f6287568f64837bb513e1de4
7b343b7668f668c6ec91307b64c3ecf866764cb430262c8c522db48540944c10
60837304a2f42102d88c00ee3d80537f0810e01001ac2360944fa57c12f94380
107708e01904b040005bc96d92d1f7ac689986bdef891eda4200671304d8e01c
01021e2240cc081035b7efff1cfb4aeefb34cb36024447c0289f4af943721ff9
cbee21718000994180080488b5f41e925b52afc60858cdf0612a9c0dfb149f0d
2e73fcf1f8c4f1b1d9f1f124c9f762f921cb7762f958b7bc513f95fac72cdf87
e78734df89e9e319d3c7c2f4b1bd3c5f385d64f76a6ccdf522d5bfb99ee7fadc
f522d9bfeffac4ecfa6492ed7b71fd905b3b717da2bbdea89f0efa7dba1ebb74
7d32e3fa44b83eb197f00ba763f2439cde127d35b64683c8fa6f34f0b49fd320
f2fefb34a4661ad249e2ef858621f3774243aad360d44fa5fe31f3f741c390fa
3ba1219da1211534a4f6727f4180c8f827717acbf9d5d81a0da200b8d1c02b00
4e832801eed3909969c8263580cf0dfec845199ce93018e553297f5811f1b8c3
9f3840219b4121132864f6b6f8390f41a28548ad06d4d8eede3f9235af280cc6
cdffe1b04a0104460af8fb57eb029fbbff2e308040c3c0ac9f4afd435de08583
71fbdf0108ba7e1d04f6383808ec97bdfdffdefe28d363a4d6086a6cb73530b2
d0970b636fe02e0be68e2f84d36ac16773c0090b7acfd7ac9f0efa7db2805db2
30d3f785a2ef0badf47db1c202267a2cfc2f2b0435b6db231859e88b85b14970
9705735318a269ade0b34be08405bd2b6cd64fa5fea156f0c2c2d82670c1c24c
5f188abe30b4d217264a5a241b054a2cfc4f7e8ced360b4616fa5261ec164c58
586cf87f7abd2efe05373d26133a26000086398df40a050000
#<end update:2020/02/21 12:13:46>
#<begin attach ID:4QJ6fxHsKp1>
789c015703a8fc1400000034514a36667848734b70312e6d61696e2e73766726
0e00003303000001000000789cb557db4ee330107da65fe1d5b2a4087271ee61
1b78d8e7bd482b9e5148dcd6aa6b47b64b285fbfe324a550010191ad942ab1c7
73ce8c8fedf1ecea7ecdd01d918a0a9e5bd8f12c4478292aca17b9b5d1733bb5
d0d5e564a6ee16084cb9caada5d6f585eb364de3348123e4c2f53dcf73c1c2ea
4c2eee19e5ab970c7196656edb6b3d05c516ba2d14f923c59c32925bf30d63ad
af0b5517253454645e6c98b650432bbdccadd0039e4b42174bdd7d5c4e8e2647
b32fb68d169256c8b6a16156175a13c911ad72ebe6c6743c3ac04fc69bf7def4
9a530d116e14917f0df26f7ead8885c0d9d14c9252a3fbdc02eb6dfbff8a2b08
81e556b3a41a46baedd05ab02d044dfa3e2e3874292dc50a62bb659bc72fbbf7
e9393e7012941b36d83bf750f718ffc6e5cced099bf7d78979df9e52335f1d81
8d64d3af5d464edf41a44534b9ddac995db242a93ec13b641cc54e16b5f0c11e
3f8d1d00f5bcf8e9541de4678f5d94ab4370dc436b72dfc280cc9c2ec8287200
ceb4db052f9742e6d69a5615038f73c1b53d2fd69481dd0fb1919448f48b347d
8fa20f008771ad774c7ae8ae576f8dfea82e182d61de09d7546f67ae411a4a42
e63b38047d872d438cd3c744f838721248041e3f11380c46cfc4a591eb42f07d
d8af8418bd1962127c26c42c7906958407412a5d48fd8918edb5ddadaf7d94af
40a7c9f8d0ad7e86907db3c98d8d6c1a068171303e7037dd83d07e3c3eb4396f
86c4ec07f82d31e3088fa7663f1c5b5267fd929d769a3e771ce77430d5f1d8f2
3aa3ca2ec5ba168a6a38d9a7c31492b18576564b6257b268a68d846992c314d2
b1050773a1f4c73864d9d81c14d1fdfed64b62904480fdb157de5cc875f1611e
fee179f6591e274c7f374f2d454da4a6449d2ca0059e412e413abe3e5b12dbee
08185e2281d978fe4b3abadae6dda988c73e81cfca252957d3b2e077853aaf68
a98793918cbe71bebc4e7775de827022a1167c28cc8686e652acd131465aa063
7f77c978bbb67ff970d895f66d21770eb5a2e3a1ee3d692b3bb7bfbe2c3f76e6
c03de767e707251e62c88e9d20c8fc244418cac42c8c7102add877e2248dc214
d960f9ec8793240ea238450f2d87c9ccdcea2e27ff0076a9683a260e000011bb
9f2457030000
#<end update:2020/02/21 11:49:29>
#<begin attach ID:4Tbj1y9DpLm>
789c01d1012efe1b0000003454626a31793944704c6d2e32303135303531342e
30312e737667fb030000a601000001000000789ca593dd6ea3301085afc3534c
d5aedc950ad8b4dd9408d247e84a55af2b0a06acb876649b92bc7dc7fc64d1aa
5d45da0b2c9b199fefcc0c648f8777091fdc58a1554e5844097055ea4aa82627
9dabc307028fdb20b31f0d60aab239699ddb6fe2b8effba8bf8db469e284521a
63061953360729d4eeab4496a6693c44c912ca08bc1596ff36ba1692e7a4eea4
1cb436765f94f8a2e275d14947a017956b738240022d174debc6c3365805abec
220ca131a28230c417d9be708e1b05a2cac9ebab0f9c04d8e2bedf4fa92f4a38
acb0b3dc3c7bf2937ab19c008aad32c34b07879c60f67158bf91c212644efa56
38bc190f57f75a1eb1683ec5945618b2cee81dd6f626bbd3299c346994a0272d
9477c3e80d85f1f1fa5e328b27c37effbd31fa6369cd9f46039d91d79763477e
9e616420fade7a52a11ac9a706cfe4db11fdf0877db768cadda92976775c423c
b228777f33d91944762e729ac3d9c0522b850c6da036fa1dae12701aaed8fc45
fd7b905f6bcf735cd3c84f105740fbf37e62ff973263eb88d2f4578292ebe8de
cbcfa053244da2fb811564fe57dd069fcb0630d8fb030000d503dd72d1010000

#<end update:2020/02/21 12:43:38>
#<begin attach ID:4Tbj1y9DpLm>
789c011102eefd1b0000003454626a31793944704c6d2e32303135303531352e
30312e737667c4080000e601000001000000789cbd96dd6e9b301480afc35378
9a2a6fd2083684b544906a4fb04953af2b0a06acb83632a6a47b80ddef15f724
3b069236d5baa1227141049c9fef7c47c84a7c7db817e881e9862b9960ba2618
3199a99ccb32c1ad29dc2b8cae774edc3c9408526593e0ca987aeb795dd7adbb
60ad74e9f984100f32f090b23d082ef77f4ba45114797d143f87528ceed2867d
d3aae08225b86885e87b6d9b3acde045ce8ab41506a38ee7a64a704060ce8af1
b232500f0f3b67e5ace277ae8b4acd73e4baf022ae5363989688e709bebdb581
53037a568fd1987a23b901c3b661fabb257f95370dc3089aad62cd32830e0986
ecc7fef79556a02012dc55dc40a5d797d64a3c82341b635249083546ab3db8dd
89f6f4e48e3dc9da87991497761a4a3e11345cb6bf6d197be3c0f6fef5c1c8c5
d9962e8ec3b55a7c783f6ce4e384417aa2ddad25a5b2146c5cf0914c0774f0c4
de3c5bcae6e5529e8069b67f49ec3fc113d1b0831961fded61a000cc0f711f75
5399554a27f89ee7b980ee8592c66df80f0050bf3647f608db91d8b365ff530a
9754ba9ca744a729454b2a513acfc99fe6448345a5c27952c144a9cb45a5a279
529b6952fea287843ff39408274a2d7a4cf833cf89cfe752ff20846f247c994c
b87a23e1f7cf5f478613dbff1c3be70fde7e9e7bc40800000435ffac11020000

#<end update:2020/02/21 12:43:38>
#<begin attach ID:4Tbj1y9DpLm>
789c011802e7fd1b0000003454626a31793944704c6d2e32303135303531352e
30322e73766726090000ed01000001000000789cbd96dd6e9b301480afc35378
9a2aafd2083684b544906a7b814d9a7a5d513060c5b5916d0add03ec7eafb827
990d246daab54545e28208383fdff98e9095f8aabb63e09e4845054f205e2308
08cf444e7999c04617ee2504573b2756f72530a95c25b0d2bade7a5edbb6eb36
580b597a3e42c833197048d9768cf2fdff127114455e1f854fa11882db54911f
5214949104160d637dafadaad3ccbcc84991364c43d0d25c57090c9099b322b4
acb4a9370f3b67e5ace20fae0b4a4973e0bae6455ca75a13c901cd1378736303
c706f8a41e8231f59a536d0c1b45e44f4bfeceaf1581c0345bc592641a740934
d90ffdef0bad8c024b605b516d2abdbeb416ecc1489331c6053721a5a5d81bb7
5bd61c9fdcb1275afb662641b99d06a3cf080c97ed6f5bc6de38b0bd7f793074
76b2a5b3c3708d649f3e0e1b399f30484fb4bbb5a494978c8c0b3e90f1800e1e
d99b274bd93c5fca2330cdf6cf89fd2778246ad2e911d6df7603c5c0fc10f651
37e559256402ef689e33d3bd105cbb8afe3200ecd7fac01e613b147bb6ec2da5
7049a58b794a789a52b4a412c6f39cfc694e3858542a9c27154c94ba58542a9a
27b59926e52f7a48f8334f8970a2d4a2c7843ff39cf8722af50a217c27e1ebdb
84601ee1db64c2e53b097f7fff39309cd8feabd939ff009b30bbad260900000f
f8f28218020000
#<end update:2020/02/21 12:43:38>
#<begin attach ID:4Tbj1y9DpLm>
789c013902c6fd1b0000003454626a31793944704c6d2e32303135303531352e
30332e7376670e0b00000e02000001000000789cbd96dd6e9b301480afc35378
9a2a6fd20818c25a2248a5fddf6dd2d4eb8a82012bae8dc014da07d8fd5e714f
329b9fb4a9d68162898b4480cf39dff90e964570d9de527087cb8a701642b4b6
21c02ce6096159086b919a17105cee8ca0bacb800c65550873218aad65354db3
6edc352f33cbb16ddb9211b00fd9b694b0fdbf0291effb56b70a9f4211043751
857f943c25148730ad29ed6a6dab228ae58304a7514d05040d49441e42d7967d
e69864b990f9f26667ac8c55f0ca344156920498a67c10149110b864802421bc
be560b8702e8281f8221f48a11210deb0a973f15f93bbbaa3004b2d82a28712c
401b42197ddffdbf504a2ad01036391132d3ea520b4eefa5341ed6186772a912
25df4bb71b5a1feecca1a6bd76644f9c30d50db2dfd9a0ffa9faaa64600d0dab
eb971bb3cf8ea67436365797f4cdeb7e226f6734d211d56c15296219c5c38047
32ead1ee237bf364289be743790446f1fe39b1db8207a2c0ad1860dd65db5324
ccf160b76a462cce7919c25b922454564f391366451e2400398518d9036c6707
964a9b52f296543ad75342f394fc259510d27372e639217751294f4fca9d2975
bea894af27b59927e52c7a48389aa78437536ad163c2d13c27de1f4bfd87e09d
48f8364d70f5081f2609e37e3e95f0719ae0e9113e4d13901ee1f32441f3457f
990468bee7afb3f7eac589843fbf7e8f0c23505faf3be32fde454d870e0b0000
cffcfcc739020000
#<end update:2020/02/21 12:43:38>
#<begin attach ID:594t0dC5NBU>
789c01e3021cfd1400000035393474306443354e42552e6d61696e2e737667af
080000bf02000001000000789cb5565d6fda30147d2ebfc2d3ba9a6ae4c30949
4897b40f7bde8734f5b97213432c8c831ca7814efbefbb4e42615d299d604846
b6eff53de7dc7bb1496e560b811e98aa7829534c6c172326b332e77296e25a4f
ad094637d783a47a98217095558a0bad97578ed3348dddf876a9668ee7baae03
1eb873b95a092ee72f3992388e9dd68a77410946f7b462df5539e582a5785a0b
d1c6baaa9634838d9c4d692d34460dcf7591e2b10b3c0bc667854eb10f8bebc1
d9e02c79675968a6788e2c0b369225d59a2989789ee2bb3b63780a4076ce9b79
ef7a2bb9068575c5d40f83fc4dde560c23087696289669b44a3178afdbef3da1
4082487153700d279df6e8b2146b10cd7a9b2c25982aadca3968bb17f5d3caea
63bab6079c4a2e0d1be28e5cd40d13df844c9c9eb099ef27e67ed8a566561d81
5a89e1fb2e23976f20d2229adcd60b61658256559fe00d3209423b0e5a787f8b
3f096d0075dd704b62fc3c3f5b6c9acd9f83931e5ab3550b036d66772283c006
38b36f519915a54af182e7b98088d3526a6b4a175c80dfe7b2569c29f49535bd
a5e28f0047c8526f98f4d09d55af4dff714d05cfa0ee4c6aaed78963900e26c1
05bdd1388e5b86c48f0dc58d9249648781eb7aa74f05094f9d89ebacaab692f7
c88b0ec8f3c831f208211d58d75424febbde95a64a1f21f2e3a2ab76f553319a
9752ac7f1d126d92feaae8f0a89a3e13ed91f0f4a2a1b4c34ef648d03553975b
cdfb6878f1c9695c08fdc98ceee7753183158cc354c6de7fc848c1b2f930a3f2
8156a39c67fa0d2979e1fa399a47ae68336c14b4cd6e513617ce8c49a6e0527a
a41ade4c3455e5029d13a44b74ee6d5ebbd71f99971b70f3c6b4f7c9a8bdb450
378fda0bc6e9dfd1e2dffa1a1edc2f5d1c14b948202bb47d3ff6a23122be1dc4
e39044b04b3c3b8c26c178822cf0fce343a228f48370821e5b0e83c4fcbdb81e
fc06d381a476af0800006168647ce3020000
#<end update:2020/02/21 11:49:20>
#<begin attach ID:5vJpBabaFYs>
789c0163039cfc1400000035764a70426162614659732e6d61696e2e73766784
0e00003f03000001000000789cb5576d6f9b3010fedcfc0a4f7b71aa06b021bc
75a1fdb0cf7b91a67d9e2838c1aa03c83625e9afdf19c8daad6de8341289087c
e77b9e3b9fedbbd5f56e2bd01d938a576582a94d30626556e5bcdc24b8d16b2b
c2e8fa6ab652771b04aaa54a70a1757de9386ddbdaad675772e3b88410073470
af72b913bcbc7d4e91c671ec7452fc18946274932af64d566b2e5882d78d109d
ad4b55a7190ce46c9d364263d4f25c17095e12e05930be2974ff71353b9b9dad
de5816da489e23cb8281559d6acd6489789ee09f3f8de0b701fa68be791f547f
945c83878d62f2bb41fe5afe500c233076b6922cd3689760d0de77ff2f980217
4482db826b98e97453eb4aecc16936c8caaa0491d2b2ba05df6e44f3fbcb1a6c
12db054e152f0d1b4a1604f58fb16f4cae9c81b0797f991879ff989af9ea0934
52ccdff611397f05910ed1c4b6d90a2b13a95243800fc834e8b1bd07f0e88f05
fa2b2a0f886976fb37241d0035db75c65dd21bf77ddbc7c88c5a699915954cf0
96e7b9007bebaad4d63add72017a9faa467226d117d60e12c5ef018cd25a1f78
0cc0bd54ef4dce719d0a9ec15aab22add9ca3140637e47a1bd0c7d42828e20a5
d4301cdc705ddf264bc8f709e360f791a05e387120ae9810bc568fdc7ec1457f
c4c528f81f1763d780f54841f864b9954ea5fe0f27adad95b112b68db57b70f4
39ec889c107b7f1c3bf64e812dd39c376ac46f970427c43eeeb74be353609b81
e3b89e7b0adc3ecfc7b693eb85c7b713ecb789f693eb4f9f5717c3a931df2df6
0bb95bc8fdc2b6edf3e3f10ea6cfb18b0d03717393a5e55daae62304c2e913ed
83d01fcd53cbaa665273a63e6c60049ee354e2e973ef62e0b0ef736224181e79
7aa94ec7a0cfe2310a349a9c0264e1714c8f9e2c07e090e77affaaf5f796cbe9
a39f152cbb9df75b6191f34c8f84df9ffe9ebdc865dace5b0907961c410fa7bf
690f0bd1d571af5b87e80467a33993b2ccea8a7873409e3f2d2937ac6412aace
fb54432384d6b2daa27714e90abd730f2dccf1cee1f93be0d0387415e3a22b4b
51ff1e7625a4333447c5bf5d2dd0457deeeda0902081acc0f6bcd80d978842fc
e265404318a5ae1d8491bf8c90059a7ffc6818069e1f44e8bee3305b999ef16a
f60b86c8846c840e0000aad4b0ef63030000
#<end update:2020/02/21 11:47:50>
#<begin attach ID:5AXRRijYC31>
789c013403cbfc140000003541585252696a594333312e6d61696e2e73766713
0a00001003000001000000789cad565b6f9b30147e6e7e85a77573ab15b031d7
0e5a4d7bde459afa5c5130c1aa0399314db25fbf63421296a6ddba46b908fbd8
dfe51c633bb95ece247ae0aa154d9d626a138c789d3785a8a729ee746945185d
5f4d92f6618a6068dda6b8d27a7ee9388bc5c25e30bb5153c72584383002af87
5c2ea5a8ef0f0da4711c3b7d148f4929467759cbbfaba61492a7b8eca4ecb12e
db79964347c1cbac931aa385287495629f80ce8a8b69a553cca0713539999c24
6f2c0b4d95289065414732cfb4e6aa46a248f1edad096c01e868be791e86ded4
4283c3aee5ea8761fe56dfb41c23003b4914cf355aa61846affaff27a0c0824c
f1a2121a663afdd4792357609a0fb1baa921d46ad5dc83b73bd96d5bd680496c
173435a2366a28b92068fd33f806327106c1e6f96961e4dd589a69ad05744a9e
bd5d67e4fc1f84f48c26b7dd4c5ab9ccda7648f086d90fecd883d286bd826827
210a6ce02524d8e9f0f653b4a3cff2fb7d7e3ab06bbeec9900cd5efba4c4b77d
8c4cc0caeabc6a548a67a2282440964dadad329b0909033f379d125ca1af7c31
445af10bf8289deb8d94817b1dd52bb30685cea4c8a1f6bcd642af12c7308d13
01c5e1aa8445322423172a971ce5a09279cc26202eef75825e756069bcc8f706
7148ef515d5fc19b6b2d1488528f5d1e2ab7eb45b61f7a71b42e44305a725164
c7f072d263d57be49b46c72f786ffdae2b4bae1e65e0b05b973ceb3678955bd7
67632a1aecd96d75a6f42bdc7ee83d9ebdcf66f38f8ab71a656ada9eef2c3fa1
c38d8fad43d4b9b2247fe0f2eceff49e7b6cfa82bf80dedf5f74afa6cf65d3f2
31f3a32dc552fc67670a54aa66864e19d20d3a7537c7daf3a7c9e175b63d4cfa
17eaa2df47911bed1ac352fc2ff0a1a3c8da2a532a837c30c4d08e74cc83183b
0ee9069cb900e4c7012086b6ff073cdac662d7ec1dce702ba85e4404b7872fc8
8d89ed05348c43e6d1d8637e882889edc08f5d3f7203378a4910a34fd069bee6
430fcd811ee691d0a3210b613ea37ba72b6cb64d2e320d17a3a1f66e5f7b768c
dab3a1f6419f9aa14137659824e60a7735f90d62c40a70130a0000ba7e8f0934
030000
#<end update:2020/02/21 11:47:41>
#<begin attach ID:61ZxT9hLMky>
789c015802a7fd1600000036315a785439684c4d6b792e73616d706c652e7376
67400500003202000001000000789cad54ed8e9b3010fc7d790a5755e5562a60
f3918408724f50b5d2e97e9f483060c5b1913147ee9ebe6b43d2244aaa562d12
c8f6ae6767c66bb2c7c35ea057a63bae648ea94f306272ab4a2eeb1cf7a6f296
183dae6759f75a2348955d8e1b63da55100cc3e00f91af741d8484900032f098
b23a082e77b712699aa6818be2f3a214a34dd1b11f5a555cb01c57bd100e6bd5
b5c516164a5615bd30180dbc344d8e63023c1bc6ebc6e418aae3f5ec61f6907d
f03c546b5e22cf8385ac2d8c615a225ee6f8e5c5064e00f46cbf1d4fa9cf921b
50d8774c3fd9cadfe573c73002b0874cb3ad41871c43f69bfbde81020922c743
c30dec0cdcd656893710cda6985412429dd16a07da36a23fcdbc0993f8217052
5c5a36947c25687c2dbe85cc8289b01ddf27463e9d53b3b39140afc5e78fa323
5ffe8088ab68bddd8aa2ebd00a1976301b75986cae9dc12e862f9c5a103f719c
96f1895492fa677e45e1955fbfb814dbdd35197af4d3d6b7052819355332c78e
9457c86da3748ef7bc2c05e0554a1aafe3ef0049c3d61cab4df06b473a0bec56
e76a7d540ace335d4107dc517b8a5f2a0e93d84faf25a7cec4ff2439fa57c927
e6b764f77be1f17d2bd89e495318b89ea8d26a3f1dbc5167be4c57ecf79d7d5b
d1b450165d53685d809a0845e8ace1c3d44fa0d7894f9073741c4f8d089ddffc
9d83705edf462034820ae4d1c84fd2784e17c89bfb5194868b18962178f1d0c5
621e25f325a2a13f5f2c937889de1d8d5966ff77ebd94f02da91f9400500007d
f61bd858020000
#<end update:2020/02/21 11:59:43>
#<begin attach ID:6ftsjUHFs80>
789c011f03e0fc14000000366674736a5548467338302e6d61696e2e737667a5
0a0000fb02000001000000789cbd565b6fda30147e2ebfc2d33a996ac4c4712e
4e45d8c3deb749539fab3471c022c4c83105f6eb779c848b282dd5a07b0025f6
c9f92e3e3927a36feb79899e85aea5aa124c898b91a83295cb6a92e0a5291c8e
d1b7716f543f4f1084567582a7c62cee87c3d56a45568c283d197aaeeb0e2102
b721f7eb5256b35381348ee361b38b0f4129464f692d7e6955c85224b8589665
93ebbe5ea4192ce4a24897a5c1682573334d70e802cfa99093a94930a0e371ef
a67733fae43868a2658e1c0716468bd418a12b24f3043f3eda8d5d027af0bcbd
ee421f2a6940e1b216fab745fe593dd40223487633d22233689d6088de34ffaf
a402096582575369e0c961f3e842951b102dbabd4a55b0551bad66a0eda95cee
ee9c2ea74b3ce0a46465d95077e0a2f667f3db94a36147d85ebf4eccfd7248cd
deb50496baec7f6e1db97b079106d17abb9c974e56a675dd19bc458e3c427d38
5abf61c06212ec48783420119407dd33f18f4dda1348b3d93103dae11bb16eb0
287749ab340414bbeaa45536553ac17399e725e42b54659c229dcb12a2beaba5
9642a31f62d5edd4f20f8051ba305b1e1df0d8de39b22ad4686813bf2e313a23
91f997488ca243ac3820c7426b936a7381ceaf992a95de8b3c0d4c5d7e7d6405
af95349b730653cace1451743d87a9175f5fe8ae96fa8490bbb35efbde079cf2
5464b37e9656cf693dc86566ced3083ea0d88c72165a2d84361b078e05264bdd
3f60f2566361b14f78db54f67d8d87049a99eb5faba3f82c223c68504ec8bfb8
a9b4febf536f14da61684fe24030f59a97e1ea6a4f9df6c5726d9dc1584ff5e6
a5e45c2c4495c3f7c506155acdd12d4346a15b6f3bafdf1e93a7c5750b795a4f
53ad535b2a88a1fdf4f4b8d53b808eedf230e4a829a941c009f3231ef1ce9d7f
82de4230ce881ff99c0f424e286761708c82184cad90c6be3708203688629f1d
cdd517def8ffcd1beab924a68c79a8a9bf01659cb85e10c7573127a4901cf40e
6c8f8b6910bf80412cf44914f93130010363d76b3f3a7a23fb5139eefd056972
38e2a50a0000ea897c6d1f030000
#<end update:2020/03/23 11:15:16>
#<begin attach ID:6lVQ3ZMTUu0>
789c011a02e5fd14000000366c5651335a4d545575302e4e414d452e737667ac
040000f601000001000000789cad545d6fdb20147d4e7e05d3b4d26ab50d5ed2
c5999d3ef47d9b34f5b9726d6ca31088e0ba4ef7eb77b19d0f458d36a97b0001
f7de73ce3d20d2fbdd469117619d343aa33c6494085d9852ea3aa32d54c18292
fbd534752f35c154ed32da006c9751d4755dd87d098dada398311661061d5296
3b25f5faad449e2449d447e92929a7e43977e2a735955422a355ab548fb574db
bcc083525479ab80924e96d06474c650672364dd4046919daea693e924fd1004
a4b6b224418007e936071056135966f4e9c9070e00fca4deafc7d4472d013b6c
9db0bf3cf30ffde80425083649ad2880ec328ad9affd7c010a5b5019ed1a0958
19f5a55ba35eb16931c6b4d1187260cd1a7b7b56ed61178c982c8c519391daab
e1ec969161787c0f9946a360bfbe2c8c7d3a95e6778380d6aaeb8f832337ff20
a467f4deb61b15142a776e3478cf7c370b19de6cd20bb84bc2f94143fc95870b
7c1df3a390d9b94747febc589f0be0233d885d4f85971d221e8b7baec58c121f
09725d34c6667423cb52216665340455be910ab31e4c6ba5b0e4bbe8c68893bf
9190f32decb58ce4ab2b05dffc00e1e0aac6358e34f21c975524f3ffadc2b30f
4e1fb9df349bb3bfb81df3f7b88d7779c215cfc3f34e1de416ded1e8e7d204ce
6c0434f8e15ce7b6e6b738c5374b7cfafbd6a7a9ff5b56d33feb1c6f1bac0400
001c6600df1a020000
#<end update:2020/02/28 15:43:40>
#<begin attach ID:6qBusJh1auF>
789c011c05e3fa1600000036714275734a68316175462e73616d706c652e7376
6733260000f604000001000000789cbd9a5d6fdb361486afe35fa16118b402b1
2d8aa43e022bbdd8fd3660e875e19ab22d44910259aed3fdfa913ad417dd5203
4af222c93125913cd4fb242f79b2fbf8fe5a7a5ff3e652d455e6a34de07b7975
a859519d32ffda1ed789ef7d7c5eed2e5f4f1ebfb5ba64feb96ddf9eb6dbdbed
b6b9e14ddd9cb66110045b7e870fb73cbd9745f5f2bd1b519aa6dbeeaa3f1d14
f9de97fd25ffbba98f459967fef15a965d5f4f97b7fd8137b0fcb8bf96adefdd
0ad69e333f0af83ccf79713ab7994ff887e7d5c3ea61f7cb7aed9d9a8279eb35
6fd8bdeddb366f2aaf6099fff9b3b830748026cf8b58defaa92a5a9ee1f59237
ff8891ffaa3e5d72dfe39d3dec9afcd07aef99cfeffed67dff41573c8532f36f
e7a2e54f6ebb47dfeaf21b4f3a97d7aabae2972e6d53bff0dcbe94d7e1d35af6
196c423ea7baa8c46c50f01878f025fa175deeb672c222fef1c482dfa653139f
6002d7a6fcfd5758910fff6322dd88626d8f01f29e3c31debe3a95b95ce66e7c
b1c6fcb22f2692c24c92712a64f6ba94351ac7df1f5ed409a0c9f06dfedeca31
bb900f85108c85842044e37a5f1dce7593f9af056325effd5857edfab87f2d4a
7edb1ff5b529f2c6fb33bfc92b97e2df5c3cfed6f6b392d378e6d9ecb6a2cb7e
78a6cf9ec9ec8719d9cf1ec350d878ee4ccdfd5057154fb46ebc6353bf764268
eb6e45246a7a857f3fb541e028d8048f09ffe641884548fb48aec14f0d11859b
340d70f218861bcabbe61d7b431b8e3774a6f250aff2b07bcf61e84ee621b128
f35095b9367d26d347893b9d87813da1870b420f41e8a109a1f3d7d80b1dc24e
e85c4806951e6290750a52e79d0bad8fad7762c77ab1e3ee6de3c89dd8716251
ec5815bb367dd6a7ef50ecc4a2d8f182d831881d9b103b4e06b14318511e12aa
841d02c4280204c44e800002040c8d7700103d00a4530049dc0140038b001015
006dfa4ca64fb13b0028b507005900800000c40400fc35f60040d8a93e524330
3bb149006802bfed236977e28e80b1f50e01aa47804e6d7df7c7d895afef4c96
6904a88a80367d26d3ef7d3d7667ec11b580005d40800202d49cb30f83d1da23
3a78fb2e346aee1191ee9e773dda7b4455b9477ab947337fef44efbdc1b7a2f7
48d5bb367f26f31f0cbe0bc1f70edf8ae2a305c547a0f8c89cc507c5430c8a07
936f4cf2a39f07cd0b9b2f443f69bf537dac577d3c33fa4e54dfdb6a2baa8f55
d56bf3677dfe2e554f6caa3e5e507d0caa8fcd797d503dc428192dfe2ca6a3df
3746c3e0ed01062261189bef5848f42c2433cfef8485def45b61215159d0e6cf
64fe83e977c142effaadb0902cb090000b8939db0f2c400cfa8fee633a5a7f63
2c8c2e5fbaa1186098b4dfd190ea694867f6dfe5b13eb6b1034e5518b4e93399
7e3f23eaf05c3fb68042ba80420a28a406edffe4643fec241f2b218ec703ffd8
f4a60047fd917f3c3bf3572040811602f1faa79b0297a7fe3628408142813e7f
26f3ef37054e30188efd2d70a0e6af72c0974370c07f98db144c0efe41fc61aa
c64082ac0898426172f81f0d3581785e145069d0177a119a6f165c9605acd0a0
967af5f9b33e7f9734109b342c947b11947b919172afdc2c4c2a0340006c10a6
31d040ccd2301602a2a13c10cfea032a0bfa72300ae79b059715022b2ca8f560
7dfe4ce6df6f169cb03094086cb0b0501146501146462ac272b330291280fea3
bb587aa4d8280b93924034540ae279a9a0a761b513ffe2f5bcfa0f31cc254733
26000069278a541c050000
#<end update:2020/02/21 12:13:09>
#<begin attach ID:7guAPN3sW0C>
789c013b02c4fd1800000037677541504e33735730432e32303135303432312e
737667b60500001302000001000000789cb5945d6fdb201486afe35fc1342d24
5afd819dac4966a717bbdf264dbdae5c1bdb280432c075ba5fbf834d932c4bab
495d2f40c0399ce73daf2dd29bfd96a307aa349322c3248830a2a29025137586
5b53f90b8c6ed65eaa1f6a04a94267b83166b70ac3aeeb822e09a4aac3388aa2
1032f090b2da7326369712c972b90cfb283e85128cee734dbf2b59314e335cb5
9cf7b5567a97177050d22a6fb9c1a863a569323c8b40674359dd980c031dafbd
91374adff93eaa152b91efc341bacb8da14a205666f8eece060e05c8c97dbb76
a9b78219e8b0d554fdb0e46fe256538ca0d82855b430689f61c87eece7674a41
0b3cc35dc30cdc0cfbab3bc91fa169ea62420a0869a3e4067abbe7ed61e7bb9a
51108326c9845543a2ab080dc3d6b725d3d009b6ebe785451f4ea5d9dd20a055
7cf27e7064fa0f427aa2f5b6dd72bfe0b9d6cee027f22218d8f34fc1fc804f16
b3e0c49ad9b935476c5e6cceb9c4510dddf704f8c68e710d217beae7a268a4ca
f0969525877a9514c6aff22de390f545b68a5185bed2ce4534fb05304276e649
8703afc7dc7cb6c3506dc635ac61a4a1655c56b088ffb7024b1e8c3d72cfbd5d
bee4edf56bbc25894310125bc61fbd69932bf38ad63e6ea969644926b9aaa72b
f8a1ff76f6c88fe76fc58f274c2090b0022becd336fed94af8d2fd3c7d4952b2
782b49094892adb1aac8154cb1d366d7c965815e6a5fd9b5f71b308cc991b605
000067cf15903b020000
#<end update:2020/02/21 12:03:09>
#<begin attach ID:7l82ipTBWaG>
789c01b0024ffd1b000000376c3832697054425761472e32303135303332342e
30312e737667970d00008502000001000000789cb597ef8f9a3018c75f9f7f45
9765e9960ca1e0f434e025dbdb655bb6ddeb0b4281c65a4c2987b7bf7e6de979
1c39c1a4fa42e98f87e7f3ed473431bc3bec2878c4bc22258b209a7a10609694
296179046b9139b710dcad2761f5980359caaa081642ec57aedb34cdb409a625
cf5ddff33c5756c0b66475a0846ddf2a44cbe5d2d5bbb00b45106ce20affe265
46288e605653aa7badaa7d9cc8851467714d05040d494511410984a0c0242f44
3b594f6e2637e13bc701392729701cb910ee6321306780a4117c78501bc706a8
73bf1a9bd27b46843c615d61fe47917fb2fb0a43209bdd841c27021c2228ab9f
f4fb8956f20834824d4184bcd3d5b7ee4bfa240f8dcd1e2b99dcaa042fb7f26c
1b5a1f678ee9e94d7d99a9244ca541de670fb42fd55fb50c5d13588d4f07f33e
74a3a9591ba0e6f4e3fbd6c8a7338268a272ab492b7d89594eb1f1ac97956435
802a8adf66f13b61e65d4df3bea7970c71b2ed87409d0802c90009e1c9916e26
8a2f646522f1aa7d62f85c5e9e61dd13be7dde57287f08e5b728e45d86150cb1
02c39a5d84b51952b8e92944b776ac21879bbe435bd890c44d5fa2258c0e59a4
c6a26f58733bd49044eabf46699916ac218734e8b166562c3ea4901b85fa63b2
77c8871c72bfc7b294c88724f2a00fb3b328f041188a1e9a2faf6c1c2ca0de75
629614a524ec489a52d92c2b9970b27847a8acfa56d69c600e7ee0c6ec54e49f
e422b4172f89f4cff2fa2f0a5dd57180add55d07ee8fc367578307a370631d2d
fc4bc3bf9eaffd1af4f3bd5f833e2edeffa2e1f33ebb12311716e8efe3da0d1a
7917678f4b7f66cf2ece1e578e16279c63965a907f9ff1a02f4e29b7449ff194
2f4e19b7441f7d4f42f5376a3df90fbe450d42970d000029bb3e8cb0020000
#<end update:2020/02/21 12:36:22>
#<begin attach ID:7l82ipTBWaG>
789c01c70238fd1b000000376c3832697054425761472e32303135303332342e
30322e7376676d0a00009c02000001000000789cbd56db6ea330107d6ebe6256
ab9577a500b6891388a0fd845d69d5e78a262441a1108169dabfdf19632ee9b6
55a5a23e248c3dc39c3387634474f3f490c3635ad55959c44cb89c415a6cca6d
56ec63d6e89d1330b8b99e45f5e31eb0b4a86376d0fab4f6bcf3f9ec9e7db7ac
f69ee49c7b58c1da92f5539e15c7d70a4518869ec9b231a860709fd4e99faadc
65791ab35d93e7a6d7ba3e251bdcd8a6bba4c9358373b6d587982d38f23ca4d9
fea0dbc5f5ec6a76157d731cd857d9161c0737a253a2755a15906d6376774789
be8118dd4fb12dbd2d328d1336755afd25e4dfc56d9d32c0665751956e343cc5
0cab9fcdff1bad70843c66e743a6f14ecfdc7a2af3671c3ab5b9a22c3055ebaa
3ce26cf779d3af1cdb93bb12399559416c049f73687fd49f5a469e254cf1dbc4
f88f31355ab5049a2afff9bd55e4d707881844d2b6e2b006824b8a7d9e5a950d
3c495c2134d20894e14117db44fa2389cce242a3013fd91c5f12106378f12ebc
30f052b53a08392831c6ff04bc7c175e1a7803fb6c694c0adf3ce44e52d7e526
4b349e1bd855e50349a24b7a2ed6f1ef1bed7584ce6772a95cb498e42e873656
8a42ce2fc340b99d0d3f87a756ae424baf5ccec3a5244c4207b992e3fd29a044
482db1af45e234055e56a3dd2f953a2021854fa2fa0bf52236c2802ffa7812b5
518230e40b9498ba2303c284617b21a701f2b1bfe98847804612aa1ba84f2c07
07bd2db79c4e6ee369cb42a91721791a823e9cc46e9d77db5101f12de428a326
02ebfc3b3776c649680ee8778df5bf546c32d2dc381cdad8b81adae37e118b89
de244299e76bad0c3d0330a7aa4f4c728ccc8bb1b3f2300898e7d9273e28b89c
447035b85b04ffc5f436055bb39ae88c8ba551d40f3b83ab1e68c8049dc16711
7d1c5ecffe012c4000706d0a00002c7b50f8c7020000
#<end update:2020/02/21 12:36:22>
#<begin attach ID:7tfSZyNIqAj>
789cad57095053e716a6a84108812908941dad0a12164196f010ca620137a0c8
1ab6224b844012411a36631113ca96a010412068d8c21a2a104108f28c4804d9
51500131ec5521ac4691e5ddeb327d6fe6b5763abd337feefdff73fe93effce7
dcef9c2b252424647c2ee81432dafee859cb109d830775701894194c48081ce0
95e4686f0b135310031e6147ed8e3801f75e60f4ed14067ef5732a48c0edab08
275b2b2166b7d26fc0643bcaf2a4a590d04d0a74dd6f073017c5d97944080949
dc03c7575c6c6980909078ffd12396ce513e73a3be679c510a109c2e7bc1ea98
86ac553b113a3f9e3cd7f882190fc934922b89da6db049dfa938ece8a5101aa2
1dd0e7e2e137ba0fbe874332ea55bbbd7354a6e69bde140bebcb672c067f55bc
159ffc4baeb647fa9e509dfe2b2f9fce74e6750a829ef395564fdeb9669231c3
2ba675f6c8a3cc55a63bdbb392d07b48653fba234a0a92a0f82dc2a321b9340a
a39b0a9f1a7a40efa05f855c0aa1ee3b3092e56b4351657437c77e5ece443628
1a27fbae1562f75b53e95785fb3b38d156543db81d1c3a23ead256a956a595a7
ee2c5f7bb1ae0697ef18d829f6c70afb894de1fb6216d422dbb80fab2f5b53ad
b5611a2cdc4870ba35d5dfd53184176547a57764cb145189cb9734fd5dd35d65
bba5cb533d2c911e088752fda01dc181bcc3ff5fa1c2a32129296980a11bb4d7
333151fd8ae9d2be5e7f9b527d79b1fe9c5d4c4d53982a212a884b56b63d7917
36765e70e2a97287e84ab69eb389bcd8316d2f979f14ecaf9b27ec52e52e438c
d75f241c0ac46ba8f7fab7394e056800005d4c8ada223d6d788d4db518c559bd
6f9daf89ff09942f62cde0b8a0197e26c409fb843c0567c0ed8601b5444d6ee5
8d479cc5744debbf77b49f157276914d61e1a5e19d805f4a788549c7a96c994c
2442c529f0cf41fd05d4671996122e640fcb3210b952b952ed452728d7ba5cfc
ef01fdac807642cc1b0099a607ff875201dd843b74a87d878c2c53cbb054adea
282fe42c83d757585a76e0e5ebd4205406fa08ce1af8c732cb1dc5b24c1bbcc2
f474417efe6c2f7df2f8d723e9c0d98538021e3ee4c622d8d3da10e3c9dd2e25
1099224337e230dbc49c231bc2e5508bc1056c35cedbfb87e3509d1a5c20602b
b8cb85977c57b18913465136736173722d28f2f48e000d3bb404d46d27e66db5
eac65ec25d69eceb0061b3a04b9a1974b52a139d112c61543a126f9b6bf43d14
daceda13af72c88adaee983ea824a7132dc9756bb002c020977d1b9cc84a0768
f740b9930c2d3b1b717eedb44d4d6454d49edbdffa02f6d2078b70910bd748d7
ca6cb7debb0c49ea1a6ea24e437c21319dd9e51a83219ff2bea206be0d48f68d
b812dedd138b5637b8a965c9d38bcbaa40de3dbeb73b32586593fe9d39c73c2e
3baed9203eff6b29bb04a6cb0dae783fb29e18bb40b15d34794d82f54d068453
ed6ea02e6defbf819699d54ba81b0ce35d69c18768e65cd7f5425eb1e8d9295a
4475afc80422c37a0e7513cbdf6def1f112be1d9c7422a00d167e670bababee7
52b8b64ffa7e88939995df1d5f578066190001f53624c221b64f389408488c8d
9d5a1507a90de64d45252e251a37e3c796ccbd1ef14493490542ec86e6e12452
eacfc1607dbd8e209e99946c56323ad0153c888ae57af50d01b6fee0d2daf8f6
983bdfd44e2f1a9f8c7782d63fbb10db2f803a102ecc2fd6539281d30164e18c
bbf72b17a5061ff89d26986fd6d9fbfb1b1cfcb95ad8ccb7b5d2b0cef5381826
adbc9ddd7e22228b5b163d727ae8aeaac7a7f5778159b7d795fde871bfc3b3c7
2bc8e2ed45865c62ec0c6dfe36674691ed31efdf66a245fe9528c7aed112e40f
64d01f7ac16575baf5e51689720a83d5be2d98d1c63445e3f967ac8ae6e6e68a
0ae890a4b8786a6aaa5773cc7bc2dad8c6098abced935a1434eb6aeb7adcd7b5
b2579389f0d64a78cd2f5197ad6fb6b5b59148241defc6734b93ed643279b409
dfb2d4f1a6a4a4c4103d68606404d866b158324382959595376f24800b9676d2
c1e1bb983709d3abaf8af9522248d85e0033409090e0aa2d01aeb6b6362323a3
b0b0306aca143fef85c70be8d68939b9f8b067756574badfdc3356547c6870f0
d3263c1685529fbfd5d2b295e140c28e3612557433cdf34f8d24cebd4a919515
ae8238adb2963ec46ca3c88f4050b9df7876a26d6101e7ebab3a2fcb8add5835
ebeaead2d8e3a3f6434757aef144fac6f0ad5b2dd8a7fdb16f42b17c211f4746
4989e3d4a4cf919751556cf02d28c2ad030c6647cb8b7b7b5f6ee0fa05f39f36
d7ff9d24ddcc6fc6af77199b4aacbfce1abeb03e20e73bf2b38d916158dceae3
392cfb26a3b9795bcfec04a56fb865bc874219db5a7bf5ae7f6317e3ce5079a8
05c05d2d036a33656b933de7119cf1164a8b6f039ebfd9955bcff4517eb73240
385c583f66be34e83957dd3c7851ce2eaff7451d843b4f33c52b23700b1b8226
b2b2e9fba7a86d434cef9608d4d2dd71aeeea45996f729857983866c431f0e5b
797ffa1106a3d02c7685cf843769771f9f7fde9c627db0db59c7aba1f7b1ccf5
8117e241c3b7c210b907d81646bcf0c53c48f27709b5aaebd123c70803ea14f4
0e9018974692a5dd5ff548f57476bec89b5e5b7d8560bc9b2dacf5f6f6169154
69f5b4615b5cbdf35b42448eb6e7ad494c9505c889f99e2222137c29816062bc
e37904605637eabd80df338a8c0719d7fd5c886648581a664c6245307df6e38e
ab15cbcbf0cddad6682f38489e19532f67cffcd6d4dace4ad11b8b5019120373
3c60c7b970fd108ccee6395aeabbfce506d70f3c0e2f29766bb82fe99fcb3701
017f2c39aeae2df22d5bf78ea78d6dde54cdea1274d220c6415d7c7beba786e1
eb6b3d65676698eaeaf639fc6ba6309da0b4ac83d844d156e6a283938cce5b82
add695b3c387993260b538ea4ecb4d31c2a4f6f8b9e86372b92c6190e94599a7
4e2d9a84dadaf2a059a9c39f3dd02c7a3976acb321ec13d8a28264414455d5a2
79e8748fd4cc679d2a04e756dd8fbf9b2a23db3ba0ce805b581d44341a7d7c73
5ffc8c38c61d4b8407a318e689da2b556431372a8df430ab7a6e18bfb2c07bd4
3eb83c534d1da5e7019c2e8d44d9622e0852aef209cfd7f9d5d3c75a013f9d4d
e025c6d8db0f81f245efa864fb345efaf635df9e86b4e7bd55d101ca5f3531e2
09d687f0ce814b511f3a8c7247c8959f206d066e11d80ff6f97e9e1718d8c505
8756be0da6a124a133601d706b18ef91f22f614097567ec5e9005d4724111e84
73c4de2f21122380e272269a77cc722eeefae0653f9e17d0ebe420114aee9ec8
82b9e1555d9a46b12c14700322ee624f320f64f805ecbdfd028a794023059486
eb67024170be66a13014264f9c886dd80bd80e044dc4678286b73bc9761335a5
ed3c405c6aff2de88f81834dc5a31b4b876098d270e10378055068c0541cbb27
634d152dd2ca83baec4faf01d15a74706e3b060a1f007df95f0112fba9f7015e
1a7a8768d148300eb4dd8089937413fff2f68f82e06619f2876a7d7be0054953
3d1d607210f344e3a29997de97b77f12acba223ef40253f6098ae579161d3408
e872daab3601eefe5fd8fe515060101616260754583413ec604e25c4bc5b629d
7f4f5631cffbd7d398cd75568d69a634502b8176890631713609023a0f72a2b3
fc5feb67fe4801a0c7dfdba57fb2855490c3f8edd69340058a3cd63cee852095
b983df0c7ebcec6412d15f5341965c760658b89854b0b58dda5bee4cd8bfd909
7e341dfddefe08d3eac78bff01d4606ced5f0d0000
#<end update:2020/02/21 12:29:22>
#<begin attach ID:7tfSZyNIqAj>
789c01e3011cfe17000000377466535a794e4971416a2e73616d706c65312e73
766728040000bc01000001000000789cad93dd6e9c301085af97a798aaaa9c4a
016c364db32bd83c422255b98e1c3060ad63af6c13366fdfb1a109f9552e7a01
1a7bc6e73b9e81f2f278afe04158278dae08cb2801a16bd348dd5564f06d7a41
e0729794eea1032cd5ae22bdf7876d9e8fe3988debccd82e2f28a5395690a964
7b5452efdf2b649bcd268f59b284320277dc896b6b5aa94445da41a9a8b57507
5ee346235a3e284f60948def2b824002bd905defa7c52e5925abf25b9a426765
03698a1be5817b2fac06d954e4f636249e04d8e27c88e7d21b2d3dde7070c2fe
09e42b7de30401145b9556d41e8e15c1eac7f8fe400aafa02a32f6d2e3c93c1e
3d18f5889716734e1b8d29e7add9e3ddeed4f0b44a674d9a15e8c9481ddc307a
4a617a827e902cf3d970883f36467f2cad85d56460b0eae4fbd4919f5f301289
a1b796c116028eeb4e89b9cb111f5a6c718c68e36cf251d0c5b45ed878d5a267
3caff7aff96c492f3ea51791ce66fcc57fc7d7466b84190bad35f7a117de044f
f3b7f6f988dfd7fe37e1739ad1d3dfe71905b48f212bce32ba4047e12f70ac68
de5082d0bcd570d7736b39b6670d6b78e6ff8a7c1af831646b3af39332fcd7bb
e42f89393e3d280400003f70e972e3010000
#<end update:2020/02/21 12:29:22>
#<begin attach ID:7tfSZyNIqAj>
789c01e4011bfe17000000377466535a794e4971416a2e73616d706c65322e73
766728040000bd01000001000000789cad93c16e9c301086cfcb534c55556ea4
056c3649b32bd83c422b5539470e18b0d6b157b6099bb7efd89094a64994430e
a0b167fc7fbf67a0bc3edd2b7810d649a32bc2324a40e8da34527715197c9b5e
11b8de27a57be8004bb5ab48effd7197e7e33866e32633b6cb0b4a698e15642a
d99d94d487d70ad976bbcd63962ca18cc01d77e29735ad54a222eda054d4dab9
23af71a3112d1f942730cac6f7154120815ec8aef7d3629fac9255f9254da1b3
b28134c58df2c8bd1756836c2a727b1b12cf026c713ec473e98d961e6f383861
7f07f24f7de30401145b9556d41e4e15c1eac7f87e430aafa02a32f6d2e3c93c
1e3d1af5889716734e1b8d29e7ad39e0ddeed4f0bc4a674d9a15e8c9481ddc30
baa6303d413f4896f96c38c46f1ba3df96d6c26a323058f5fdebd491b30f1889
c4d05bcb600701c775a7c4dce5880f2db638c6531847f471fe8f91e5b45eb4e8
2f9ed787977cb6a417efd28b48bf9ae8ecf3f1b5d11a61c6426bcd7de88537c1
d3fcadbd3fe2d7b59f26fce332a3eb4b9a5160c53986e83ea30b7414fe00c78a
e63f4a109ab71aee7a6e2dc7fe6c60030b3ee2d61791bf0921bb78e22765f8af
f7c91f87053e3d28040000d820e917e4010000
#<end update:2020/02/21 12:29:22>
#<begin attach ID:7AkyrJh40Pn>
789c013602c9fd1400000037416b79724a683430506e2e6d61696e2e73766771
0600001202000001000000789cb5554f6f9b30143f874fe1699adc6a01ec24b4
2582f4b0fb3a69eab972c08015c746b609e93efd6c205996366852b30308fb3d
fffef110c9e37ecbc18e2acda448210e100454643267a24c61630aff0182c795
97e85d096cabd029ac8ca99761d8b66dd0ce03a9ca7086100a6d07ec5b967bce
c4e6bd461cc771d855e1292986604d34fda164c1384d61d170de612d754d32bb
91d38234dc40d0b2dc54295c20abb3a2acac4c0a2d3b5c79136f927cf27d502a
9603dfb71b494d8ca14a0096a7f0e5c5158e00f8e4bc7b1e5a9f0533d661a3a9
fae9989fc4b3a61058b049a26866c03e85b6fbb5bb5f80b216780adb8a197b32
ec8ed692bf5ad374a809296c491b2537d6db9a37c7953f60a260663549269c1a
8ca608f497c3779049380876cf9785a12fa7d2dcaa17d0287ef3b94fe4f61f84
748c2edb8c881dd160099a2df7334eb41e922ebb8cfb32fc2bad6811dc479db0
791c44476db318b9d541dce23cb73f9a48b63917850fb91abaef48ec0404bdfb
3b0bea767d22b24aaa146e599e730b584861fc826c19b75ddf64a31855e03b6d
878a66bf2c1bc6b53908199857bda92474a8179cdd8f38bbfb98b3283e90c451
70ee4d1ba2cc07ac7d35b23e31f69613a387eb93aea531723bce3bc3d7e7e5b4
30e3acf3c5f559951b83d1e9c1631fc60c5f697c70f41fe6a7ff366eec184dfb
b73a75214f3bcfb747d34958ae3c2f713f8895f71b1d75fd0771060000acb80a
7636020000
#<end update:2020/03/23 11:02:13>
#<begin attach ID:7CcagSgVKyn>
789c01eb0214fd1800000037436361675367564b796e2e32303135303531342e
737667590f0000c302000001000000789cbd57ed6e9b3014fddd3c85a775f226
156343f8aaa07d814d9b34f57745094950a989c069d23dfdae8da16e9b745483
444a84af2fe79c7b7d7243e2ebfd43891ef3ba292a9e6046284639cfaa45c157
09de8aa51562747d358b9bc7158254de24782dc4e6d2b677bb1dd9b9a4aa57b6
4329b52103b72997fbb2e0f78712591445b6dac52629c3e82e6df25f75b52cca
3cc1cb6d592aaccb6693661058e4cb745b0a8c76c542ac133ca7a0739d17abb5
681757b3b3d959fcc9b2d0aa2e16c8b220106f5221f29aa36291e0db5bb9d103
30e37e79ad536f7821a0c26d93d7bf25f34f7ed3e41801d8595ce79940fb0443
f693fa3c0205259409dead0b0177daead64d553e41d1b9dee31587ad46d4d53d
d476576efb95a531297140535570a986d10b8adab7c49790b1ad05cbebe3c2e8
17539a5cb502b675f9f573db916f03842846d95bc994f25599eb0677cc6e4bed
52e380ccf379d59467c234bb7fcdc886f04d4598559c034755a3655d3da07307
890a9db3ce4fef1fe361ecee14034ae885071f08d4eb4bcdfc5fb8a143a288ba
e1c5dc211e0a34471ff502e28d41e3b280501af90a5096a06be9c2927db853c2
533b6574c2a99d025fd7de2aeaba3bc454ac35ea0b9ce3b030fc7e802f508b58
22e6122f9afb2c403e71ddc809e610b460efc58b0581ef7a7e882ce6103f08bd
7988febcd530b06d4a0314d38bb09e5558868ca32ade8a18e03276f281343ee3
e43e334612f346f19942fcde8f2008c891f11d451e89421af80732d4ec1ac35e
1ab91b4b1a1902744e288b1cf7408a92f7115b9d7c7a8dcf38b5ad1c637c39c6
f8ca8a3a8332b3bdccc32883e2f4760d11f913f221cfbdc6540d3b0a3adab1b4
a7e29c7cbc8ccf38b90f8cf1e218e3a5abcc578f0db2b4f601a283f188f954ad
56836aea3be60c079ec61c271f12e3334e6d0ed718122e7dcf1cd154e6f827f0
473b378be51fe1abd95f58e36e70590f00008fc76bbeeb020000
#<end update:2020/02/21 09:49:56>
#<begin attach ID:8tI2983qU55>
789c011902e6fd1800000038744932393833715535352e32303135303431372e
73766745070000f101000001000000789ccd95514fdb3010c79f9b4fe1094d66
12699202d25ac5e51b6cd3369e919b3889856b47f685b4fbf43b2786f5814240
54da435bdb77befbfdff39a5f9cd6eabc883b04e1acd68364f2911ba30a5d435
a31d54f1574a6ed651ee1e6a82a9da31da00b4ab24e9fb7ede5fce8dad93459a
a60966d03165b55352df3f97982d97cb6488d2c3a619251beec40f6b2aa904a3
55a7d4506be55a5ee041292ade29a0a49725348c62434a1a21eb0618bdc2cd3a
9a45b3fc531c93daca92c4311ee42d0710561359327a77e7034f05b283fb7e1d
526fb50454d839617ff9cedff5ad139460b1596e450164c72866ef87ef23a550
8262b46f24e0cd64b8da1ab547d122c4b4d1187260cd3d6adba8ee6917879ae9
7c814c466a4f93a51729193fbebe2f992701d8af8f83a59f0fd1fc6e04e8ac3a
3f1b1df9320164e8e8bd05b183e0edb0c4a6d76357ffe38f62ae8bc658461d70
8bcfab321ae28a6fa5c2a4df722b1cf9267af2d36cb90e5127ff60f3ecba8547
bc11640cc2de0f8404ae64115a94a23096c3303b9d2e85f5d686fc3ea8dd1885
0f7b1de626f6b13cf1b75f9792a52f693925ad154e0019dd9a4cfb4ee74f82ee
cd990abe78d1e6378ccc87d11746193b19ff0413ff4ed3bdf6a9d8971fe5fa2b
f3731cf79fbec9ccffc1cb25c08f8a1ec1a3dcffe9ada3bf31fa5ba945070000
896002d919020000
#<end update:2020/02/21 11:58:33>
#<begin attach ID:8vxD0Cjh1M0>
789c01c5033afc160000003876784430436a68314d302e73616d706c652e7376
67ab0f00009f03000001000000789cbd57db8e9b48107d1e7f45479ba8b31234
7de5323213adf29e5d299ae788d8d84683c16adab167bf7eab1b0cd899f1241a
661f0c45575355e7d485f6fcd3715ba21fb96e8aba4a312314a3bc5ad4cba25a
a7786f567e8cd1a7bbd9bcf9b146b0b56a52bc3166771b0487c3811c04a9f53a
e094d20076e076cbedb12caa87a736b2244902a7c563a70ca3ef5993ffa3eb55
51e6295eedcbd2d9ba6d76d9021696f92adb9706a343b1349b148714e2dce4c5
7a63522ce1e16e7633bb99bff37db4d6c512f93e2ccc779931b9ae50b14cf1b7
6f56d11b60a3f7addc6dbdaf0a0308f74daebf5acf7f57f74d8e1118bb99eb7c
61d031c5b0fbd15d9f310510ca141f3685813703f7eaae2e1f0174dee9aaba02
556374fd00d8be97fbfec9ef6c52c221a6baa86c348c7a14b53f6bdf9a9c075d
c0567e3e30fa611c9a7d6a03d8ebf2e31f2d237ffe4220cea3e5b63199c919ba
45fb6de9bb878ee9b5e3b855e333b6942202aa830a179c527d74714204544322
c789c4481f5b16f5e3136c0e91668b87cb50d9896d931f9d6b404c5a4e624ac0
b15df7b36ab1a9758ab7c5725982c9555d197f956d8b12f67daef7bac835fa92
1f3a4d53fc0bfe18db9953289defbb16ec3cb0565d46d6672cf1eb2cf1739624
572472a18a78c89f8c89b2140d0c4572528654cf90926fc20feff979b1099e8e
f7d4038e204f2584221549229c7809470adab1185da61ba2d1e61568f20aba2d
a82bdf0923543ffb4ed8c4be9775f0d7c2c0a8bcea96d1686accc7c238c8707f
b6cec5f53a17e775ce545b6eeede65598c6739a7d3ce0067dc9a09c337297031
5581032304e67b045f602407f934ee7bd22fb9ee994d14910eaaa3b0ff042476
80bf3c609b87c7f1f8bf4e6fcf2e57a7f9c1a13fdf66c40a7f3464af31c00706
c2ff8d01313010bf1d03fc19067ca3b30aad74bd45ef3932357acf4e479fd7d4
a2a092841ee7000d3980e77248fbba7c9d1bc989f2b88c08a549c806f3204563
cde8047205ba9802ba2b228fc7162e6fe319cb7222e8bc05a83849122a92c13c
e22d2927cd0bd0bb0319c0ef0e1d1350c0a4844f6da4ec20725f5d2b4e015a32
4e22c8a7f062c038328e064d18d9267a1933ef314f92767710f2188401e70b27
bb8c7493b81b73133010bab4428149c78072b6d1b0ac7e11bee8e14fd2f06c80
8918bd949389f20f2714286d7bb5a51df7d651c2c7ebbf877f9aae8752a49e9b
3fa8935dd78be82779aa5210b6073cd165de5ab7b691b00dd02f3b47b3b9fd6b
7d37fb0f1df9a6edab0f0000ebd1d354c5030000
#<end update:2020/02/21 09:45:51>
#<begin attach ID:8U7dblVP7AW>
789c01dd0222fd1400000038553764626c56503741572e6d61696e2e73766785
080000b902000001000000789cad565d6f9b30147d6e7e85a76d75aa05b02181
d041fbb0e77d48539f2b179c60c531913125e9b4ffbe6b204dd6a5d9a6241291
3faeef39e75e732fc9ed7a29d123d79528558aa94b30e22a2b73a1e629aecdcc
9962747b3348aac739025355a5b8306675ed794dd3b84de0967aeef984100f2c
706772bd96422d0e19d2388ebd7617ef83528c1e58c5bfe97226244ff1ac96b2
f5755dad58060b399fb15a1a8c1a919b22c563023c0b2ee685497100939bc1c5
e02279e33868ae458e1c0716921533866b85449ee2fb7bbbf1ec80ee9db7e3de
f44e09030aeb8aebef16f9abbaab3846e0ec22d13c33689d62b0deb4ffafb802
0932c54d210c9cf4daa3ab526e4034eff754a960ab32ba5c80b607593fcf9cde
27717de0540a65d9503222a87bac7feb32f17ac276fc3a31f27e9f9a9d75046a
2d876fbb885cfd039116d1c6b65e4a2793acaafa006f91e92474e3490b1fecf0
a7a10ba084843b12e397f1d961b36cf1129cf6d086af5b18b8666e2772327101
ceae3b4c6545a953bc14792ec1e3ac54c699b1a59060f7a9acb5e01a7de14dbf
53892780a37465b64c7ae86ed76cecfd1386499141deb932c26c12cf22fd3508
84ba5d0c6810dbd156451cb9e4fc21a0e1b92370a359e3c05bbc937b405a7444
9a4f4f914649b80589ff4c6f6598362768fbb0b4d27266d80fcd595e2ab9f979
4ca80df4ab42c39372b813ead3f0fc42fb2c0eadd691641baeaf76420f70f0e3
b373b894e6a37dbad7e7720e33788eb218fbe78f4456f06c31cc987a64d52817
99391e880345e5640a396463d868b824fb59d8969139575c43a97962063a219a
e97289de51644af4cedff6b0e3ade3f075db768eb65a8cda7284ba71d4960faf
ef8ec5ffdd6268a39f3b3f2822482227748320f6a331a2813b89c7218d6095fa
6e184d27e32972c0f2b71f8da230988453f4d4721824f6a3e166f00b950c9c7e
850800004a3b66eadd020000
#<end update:2020/02/21 11:45:48>
#<begin attach ID:9c8GVWJpwLo>
789c013403cbfc140000003963384756574a70774c6f2e6d61696e2e73766779
0c00001003000001000000789cb5575b6f9b30147e6e7e85a76d2555c3c51020
74217dd8f32ed2d4e7ca0513ac382632a624fdf53b06d2644d4b3a35894404f6
e17c171fcc617abb5e72f44865c90a111bd8720c444552a44ccc63a352993931
d0ed6c302d1fe7084245191bb952ab1bdbaeebdaaa3dab9073db751cc78608a3
0db959732616af05e2288aec66d6d807c5067a2025fd2d8b8c711a1b59c57993
eba65c910406529a918a2b03d52c55796c8c1de0995336cf557b311b5c0c2ea6
9f4c13cd254b9169c2c0744594a2522096c6c6fdbd9e784e80f7eed7e75de89d
600a145625957f34f22f7157520341b28ba9a48942ebd880e84df3ff462a90c0
63a3ce99823bede6d655c137209a7673a21030552a592c40db03af9eafcc2ea7
63b9c0a96042b3c1cec841eda1f3eb9453bb23accfdf26e67cdda7a6af5a0295
e4c3cfad2357ef20d2206a6fab2537134ecab233788b8cfdc08afc06dedbe14f
020b401d27d85faa17feecb049b278098e3b6845d70d0c9499d58af47d0be0f4
b8494492173236962c4d3964cc0aa1cc8c2c1987b8ef45251995e827adbb9992
3d011cc62bb565d241b7b36aa3eb8f29c25902eb4e85626a33b535d2311342cf
1afb20b7f5017ba1a6d829717dcf72a0f6a3d35b8103efc44ecca0b6f29de637
f48547f4051fd2174e00ac058abc83b52e1591ea0302cda599ee041e62ba4e70
0ecca66a7a7171740e5c3dd00bebb9e7806d57f85821b9c71e14ecfaa7a9249d
fbd432aff5b3324c4796655df55a1c9cbea2ae4baacc7498f603876728a924a7
c902d2a5505a6b333553a2c8f0a805d119aa2c2be492a82d855e7ccf397c697c
14ff92ab6ffa58c96245a562b4bc9cc3081cbd4cf0e40c85d852d8b4bbcc112b
3c7c362bda57e6bb6c188f4f6f43539ac3848847528e5296a87e23fcf0f41452
49ea612d61ab925787adc39c0a2aa1bd78220aba5f94c96289be60a40af4c5dd
f6adfdede2eb9bdeb65b6c3a8351d37ea0f63c6c5a05bbeb88f3ffdb4ba175fe
d1e641a183383203cbf322371c230cbb69340e7008a3d8b58270e28f27c884c8
7f7ed028049e1f4cd053c36130d51f0ab3c15fbd52dada790c0000f327886d34
030000
#<end update:2020/02/21 11:41:30>
#<begin attach ID:9IXx8gWRvjG>
789c013103cefc140000003949587838675752766a472e6d61696e2e737667a0
0b00000d03000001000000789cbd565b6fda30147e2ebfc2d33a996ac4c4712e
4e45e8c3deb749539fab3431601162e49802fbf53b4ec265404b35e81e40897d
72be4b8e4fcee061352bd08bd0955465822971311265a672598e13bc30238763
f430ec0caa973182d0b24af0c498f97dbfbf5c2ec99211a5c77dcf75dd3e44e0
26e47e55c8727a2a90c671dcaf77f13e28c5e839adc44fad46b210091e2d8aa2
ce755fcdd30c1672314a1785c1682973334970e802cf8990e3894930a0e361e7
a67333f8e43868ac658e1c071606f3d418a14b24f3043f3dd98d6d02baf7bcbd
6e431f4b6940e1a212fa9745fe513e560223487633d02233689560885ed7ffaf
a402094582971369e0c97efde85c156b102ddabd5295b05519ada6a0edb9586c
ef9c36a74b3ce0a46469d950b7e7a2e667f3db94837e4bd85ebf4eccfdb24fcd
de350416bae87e6e1cb97b07911ad17abb98154e56a455d51abc418e3c427d78
b57ecdc00b49b025e1d18044501e74c7c43f34694720cda6870c688b6fc4aac6
a2dc258dd200a8d955272db389d2099ec93c2f20df4895c619a5335940d437b5
d05268f45d2cdb9d4afe06304ae766c3a3051eb6c8b21ca941dfa67e5d647846
647891c828dac7e29ec5fa4b6a65526d2e50fa355385d23b91a781e3e0fac0b5
e273c0d4e5d7475670a2a5599fc5f6e8f5b1f3b49aa45aa7eb737545cf9e9ee8
7a8545fd0fa8acbd43d42584dc9df53bf8802acb26229b76b3b47c49ab5e2e33
739e46f80125679433d76a2eb4593be00b7c54abee1e93b77a2a8b7dc26b666c
d7d27948a08fbbfeb59aa9cf22c283a69b1ebf858bfb69e3ff3bf546a19d03ec
9bd8134c3d66695d5deda9a2bb58aead33986852bd3e969c8bb9287318add668
a4d50cdd326414baf536a3cadb13c26971edc2b6b7808988a1dde0e071abb717
c5c4e561c8515d52bd8013e6473ce2ad3bff04bd81609c113ff239efc1f1a19c
85c1210a62f0c10e69ec7bbd00628328f6d9c14871e48dffdfbca19e4b62ca98
87eafaeb51c689eb05717c1573420ac9416fcf36da9806f1110c62a14fa2c88f
81091818bb5e336f7506769e1e76fe00f64c8977a00b00000392966131030000

#<end update:2020/03/23 11:16:44>
#<begin attach ID:aavx0Z2BGWN>
789c014f02b0fd1400000061617678305a324247574e2e6d61696e2e73766777
0700002b02000001000000789cb5955f6f9b3014c59fc3a7f0344d6eb5f0c710
d22482f461efeba4a9cf150103568c8d6c53c83efd6ca0495a3569a5260f20e3
7b7dcfef1c5922baef2a0a9eb19084b31822c78300b394678415316c546e2f20
b85f5b917c2e806e653286a552f5ca75dbb675dac0e1a2707dcff35cdd018796
554709dbbed78896cba5db57e1b12882609348fc47f09c501cc3bca1b49fb592
7592ea8d0ce7494315042dc95419c3c0d39c252645a962a8d5e1da9a5893e89b
6d8342900cd8b6de88ea44292c1820590c9f9e4c613f001d9d37ebb1f59111a5
1d36128bbf46f9813d4a0c811e3689044e15e862a8bb77fdfbc4286d81c6b02d
89d227ddfe68cde94e9bc6638d71a64b5209bed5de36b4d97fd9e34ccff13513
27ccd0206fea81e131f3cdc8c81d81cdfa3498f7e318cd7c0d008da037df8744
6e3f01d22b9a6c7b22b0024d45ed9426528e41177dc47d15becaca5f38c80f7b
2e7fee847b347f163877e1016ef636b70353926edf42a1975c15ee7a19147ace
e03ed4b866d74e585a7211c38a6419d50373ce949d2715a1baeb176f04c102fc
c6ed5891e49f5643a8562f20a3f2ba7715b966e8296bf373d682d997ac05c15e
66e11b9957eea44a84fa82b99f95dd1d797b4774195e4374773e507d57cf247a
175c2a5184e69777d75f989bdbf3b1227f792de55a7da43dbbc2451ab4bb156b
aa0d16d3ddb8f80825bcc2f5ca881ec1526c2bfe8930e68bcb13f03c9758a731
dd1dd423b7585b56647e936beb3f7a584d71770700002a861a474f020000
#<end update:2020/02/21 11:25:48>
#<begin attach ID:anKkqdOGjc7>
789c0185037afc14000000616e4b6b71644f476a63372e6d61696e2e737667c1
0f00006103000001000000789cb5575b6fa338147e6e7e85573b3b4e95703110
2eddd079d8e7bd48ab791eb9e0805563906d4ad25fbf369069663a2d590d4422
02fbf87cdfb9d8c767ffe95831f04484a4354f21b25d0808cfea9cf22285ad3a
5831049fee577bf954002dca650a4ba59a3bc7e9baceee7cbb1685e3b9aeeb68
093888dc1d19e58f3f1244499238fd2cbc0445103c6049fe11f5813292c243cb
58afeb4e3638d3033939e09629083a9aab328581ab79968416a5d21f3b17deaf
6e5637fb5f2c0b1482e6c0b2f4c0bec14a11c101cd53f8e58b99f8aa005dac37
efa3e8674e95b6b09544fc6b90ffe69f2581402bbbd90b9229704ca1963ef5ff
6fa8d226b0147625557aa5d32f6d6a76d24693718ed75c4f4925ea476ddb036b
bf7e59a34ed7f634a79a72c306b95b170c8fd16f54ee9d91b0797f9b98fbdb25
35f3351068055bff3a78e4f60a223da2f16d5b312b6358cad1c16764140ed8fe
0b787c19a0efbdf28288b3c7ef21d108a8c8b157eeb983f2ddcede4160462dcc
b3b21629ac689e33adef5073651d70459996fba36e052502fc45ba7146d2670d
8650a3ce3c46e061569d4cce518519cd74ac65891bb2770cd094dd9e67bb5e90
24414f1079b161389ae16bbec96e4627d8831bd02e98d90bf7b4c2c585c56f58
17be675d92fc9475d1374871f02ad25261a17ec244abb232c2f58eb18e2f86be
019f440bc29fa6e03de42e016f0e568e2b3209eff94bc0f7819fc4f6c325b087
1c9d040f9225c0197e206c123bf496c06e0491e48958022b5a4fed6f2f8cded9
df280ce6dbe05e3c7f8e6dfa436c7ddc9eb6e754dff664b683095bdbb66f27e3
90cc9f809b82e8e9f621c3fc09cbf52407df9d3f0f3f32f5bb791a513744284a
e4c7428fe867928d377f666e461aa7215bae7089ffbaf4cf4762c88f2b5804f1
ec2c74524ec28668b17cd02589aad3d5b910cd5f97375949b2c7f5b039b639cd
d4741ce2f9ebf32617b85b77429f6c6292806e3e168b487ff9bc3620015ae21c
955656574d2da92e1a7c7a5b04de42676696597d0764cef4dbd7f7f1827022f4
95fdd914370e0ea2aec00704540d3e78e7feeffdb6ebc775ebdc75f537ee6d7f
a707c37bd45fc19db1b32cff5f39d42de89f831e10b980012bb47d3ff1a20098
20264188223d8a3c3b8ce25d10034b4b7ef3435114fabb3006cf3d87d5de34dc
f7abff001dbee56ac10f0000bd38b66b85030000
#<end update:2020/02/21 11:45:11>
#<begin attach ID:aqY6z4ijn6E>
789c010f04f0fb14000000617159367a34696a6e36452e6d61696e2e7376671d
0f0000eb03000001000000789cb5575b73e236147e0ebf429d6ed7d9892d2459
f28542763a7dde6d673afbbce3d80234313295e590f4d7f7081b4308974da103
66743ddff71d1d9f23c69f9f17257a92a656959e7814130f499d5785d2b389d7
d8699078e8f3fd605c3fcd102cd5f5c49b5bbb1c0d87abd50aaf425c99d99011
4286b0c26b978c9e4ba51f0f2da4699a0ed7b3de2e28f5d04356cb3f4d3555a5
9c78d3a62cd7b646f532cb61a090d3ac29ad8756aab0f3891711e039976a36b7
132f14c4bb1fdc0c6ec63f05019a1955a0208081f132b3561a8d5431f1be7f77
13bd01bab3dfb5bba5dfb4b2a0b0a9a5f9cb21ffa1bfd5d24360ec666c646ed1
f3c483d52febdf23a6404239f156736561e770bd7559952f205a7673bad23055
5b533d82b687b2e97b41679360069c2aa51d1b4a7c82dac7d97726c7c38eb06b
1f27467ed9a5e67a2d81c694b73fb71ef9f40344d688ceb7cda20cf232abebce
c11be48861cae168f99a4112f61418153886e0a05b1e7cdf455bf82c7fdcc7a7
1dba95cf6b241a13dceaa424c1c2436e22c8743eafccc45ba8a228c1e4b4d236
98660b55c2c2dfabc62869d057b9ea666af50fe051bab41b2a1df6bd8bcc40e9
69351e3ac3c73552765264c82f1119c5afa0c2744f666d33632f50192c028880
adc423b8825d1f172ccca43deb5d119ff26e745108eda98cc32babbceb83e816
bcecb78a3f9df576125d9b473e97f9e36d9ee9a7acf60b95ff0089f4daa176f7
20674a07ce25b72b038765ce9260f4da717727757184c2a9acc6c3108b58742f
e14e5e0d194e806f72ada426489fd484b87e526b232028329bbd150e25469a29
94ba4e7cae4c5e4a94b7b43c9403988057c41c286eef15d956077e6d7d70f108
da837d2baf904b387cb8d1bca0a9a916e843886c853eb0cd0de174613e2cab1b
28b27a9e199301db1085685baf591ce344f854c0a9a22e88da5ee792ff84bab1
ce19c122e1510826632c5e03a09d59ce5c280d0f1e7660e4df8dac6de7147eb9
53facb8a2bd07e120297b6295c93f34df312179c73fc1605f1f41a80bd613851
42d2c88f88f378ea2ca37e908bded1702b9bbf0b016ea65fc03b31e694262415
3c49639e2028879148994858c492944409fa0d51e2beee430fece0210e398939
d4b3989234dcbfb6e9caca9df39d55fa7deff2c61522c5045275eab398628efa
6ec8121c21a0805328d6ec4d9fa56e79c8fabedbbe5f993b63eb3c1112fe2615
5e5a08da5a8c160d44fe83444aa391914b9894fe81aaf48a0d8dafce6654cb72
eaa3d13233525b68d86a09bf30ad1fcfd06129c3fb79f4523a1f4bfbab7b5c6a
50462e80d3c7190cc1b3657351ec9c888613d1f1bfa40a9a72cc922e8829a42b
ee3338e2365b0cc6eecfecfde05f401c90af1d0f0000954ef95f0f040000
#<end update:2020/02/21 11:44:13>
#<begin attach ID:ashNHUE2QdW>
789c011505eafa160000006173684e485545325164572e73616d706c652e7376
67b7230000ef04000001000000789cbd9a5d6fdb361885af935fc16118b402b1
cd4f4b0aecf462f7db80a1d7856bcab610450a64b94ef7eb4752a444312d3da0
142fe21c4bf44b1efa3c212565f3f1eda5025f8bf65c36f536414b9880a2de37
bcac8fdbe4d21d1659023e3edd6fce5f8f4034adcfdbe4d475af8fabd5f57a5d
5ec9b2698f2b0c215c891649dfe4f1ad2aebe7ef3544799eafd4d9c4ee1425e0
cbee5cfcdd3687b22ab6c9e15255aad6e3f975b717077871d85daa2e01d79277
a76d42a118e7a9288fa76e9bacc59ba7fbbbfbbbcd2f8b0538b625078b8538b0
79dd755dd1d6a0e4dbe4f36779622880accf4bad9b7eaacb4e38bc9c8bf61fd9
f35ff5a773910051ec6ed316fb0ebc6d13d1fa9b7afd412961a1da26d753d989
4faed4475f9bea9b305de87375538b53e7ae6d9e85b72fd56578b7d035e1128b
3135652d4783e00304fd8fac2f4b6e567ac052ff7860f0377b68f25d3f804b5b
fdfe6b3f231ffec740548f726e0f10814720fbdbd5c7aad0d3acfa97732c4e27
7220a41f0981d6f7350e84ba7334f6bfdb3fbb034056f75df1d6e93e95145db1
be2bf94b1e5aeceafda969b7c94bc979256a1f9aba5b1c762f65255afdd15cda
b268c19fc5559f3997ff16726a5e3b33263d8827e165b392254de7dcef9d6bef
28a279349b7beebadf37752dac362d38b4cd8b0a42d7a839d1a8f913fe7d6f26
e0295cc207265e80983d2db5f39faa8b50ba84305fe307962e992c2e4a83f128
c54b364937f6a71bdbe946285ebc55a842e71bbbf9f6bae7dabdc9771631df08
ce10707c23e0b80f380e1670956d20bcb81a8ec9573a6cf41134d917c5adf0e7
6ef8893ffc6412fe75c4f06733849fb8e1f7bae7dabd093fca23a61fa319d24f
6ea49ff4e927e1d29f5989b7b47037a45fe9b0e9c7c8a45f14b7d28fa11b7fea
8f3f4dac481218e1fb4f755f7886f85337fe5ef75cbb574b9e4c248b117fcd1a
4e67883fbd117fdac79f86887f2ea32dbe451973ec6a9c33a13357a6aa051a74
0828f221fba96202a9da603cbc7691607e24d80489182b8241628e1581b94878
dd73edde204163ec060d1234fc7690bbfedf21c17a24583824320b094b533870
604b3222a174502428314888da231214bb48acfd48ac552870166f8fac96a279
f6c8c28ecb84d73e37f6cd5fee08f6b1fef3436720627d8388754fc43a04116a
4dd0970284b95a2d07183a922a498c0c0104d61b24f4402510a2b8280dc6a3c4
e521f5f3904e784031f60d0310e1f70dc28f0b84d73f37fe0d1031160943049e
6391486f2091f648a40191482d242cad10d0204c3419a9c0a1d68911004c0c17
e2c70203bf5b29323f19597f39adb70f84c620c3dc9a5ccf4046e692e1f5cfb5
7f13561265ad48adc90e4d4676838cac27230b42862240bd02b5739a689c2b02
b0ab494f061b741032c8b034f46430551c58c7df9191fbc9c82764d01897da86
0c3ac7b576ee92e1f5cfb5ff716313918c19fc73d7ff3b32f29e8c3c1c19148f
344c743ad230d1782443e9b064506cc810c52d322872c840d04b8624c22623c6
4d4843060b7f1352f871c8f0fbe7dabf218345d94d6932d80cbb29d7bf4b8698
0e4986f8158c0c66d130d1d948c344d3910c16ec22632080514306a33619ccbd
ce40fee7ce08d9b7a2688ceb6e938b192ebb91fbe4d9ef9e6bf769442cf219a9
b8f1e419f54f9e519027cf79ffb879bcf934d10a04ea4ab58d4a07198208363c
a7569ba8549506e3d1610b75bf91ff66f374ff1f80545d0fb7230000f52e758b
15050000
#<end update:2020/02/21 12:11:36>
#<begin attach ID:bxScvCXD2Yw>
789c010d03f2fc1400000062785363764358443259772e6d61696e2e737667f8
0a0000e902000001000000789cb5565d6f9b30147d6e7e85a77575aac66043f8
ea42fbb0e77d48539f2b0a0e58714c644c49faeb670369d2ac4d3a95457284ed
cb3de75c5f73efec76bde4e091ca8a952286c4c2105091961913790c6b354721
04b737a359f598036d2aaa18164aadae6dbb691aab71ad52e6b68331b6b505ec
4caed79c89c56b86248a22bbdd85fba0048287a4a2bf6439679cc6705e73defa
baae5649aa17323a4f6aae206858a68a184eb1e659509617aa9bdc8cce4667b3
4f08815cb20c20a41766ab44292a0560590cefefcdc6b303b2f7be79ee4def04
535a615d51f9db20ff14771585403b3b9b499a2ab08ea1b6deb4ff6fb8d21278
0c9b8229fda6ddbeba2af9468ba6fd9e2885deaa942c175adb03af9f67a8f789
2d47732a99306c089e60d00de3dfb89cd93d61f3fc3631fc659f9a9975046ac9
c79fbb885cbe83488b68625b2f394a7952557d80b7c8c4efb0dd1d78f8e2800e
a2b2434cd2c52124e901155db7ce1ddc39f73ccb83c0aca244a4452963b86459
c6b5bf7929149a274bc6b5ddb7b2968c4af08336fd4ec59e3418212bb5e5d103
77bb6a63728ea984b3549f752ecb7a35b30dd029dd916f858e87b1d712245ef0
2cdfc1bee54e75b60f1805ab8b03099dc103716314eaac4ff52ddc497f436674
54a6ff2199041383d50239c43d9059a944aa0fa8444b64fced14be0aebf8c3c3
1a8b13b06ef41f60f5c20958cf191eb63be35389e41cbf2fa13f5822054327d2
d5de7d19af279b8965599727021d0e9d56573955284d515b270c8b530ca2a133
ec82abaf6650a198da5ce47aa6c771162e193ae1aed282a68b719a88c7a49a64
2c552702e13a87dfcfa102d1d68e77c6c10d878e43269306b514c68dd457465e
fe5dc6722aa8d495ee2951baf90273592ec13901aa04e7ceb66d3adeadbc7ef9
b6cd4a5ba726ba145a1874cf415bb8ecbe212bfeed4eebceed7be70704187080
f467c28d9c600a886b79d1d427815e258ee507a1370d01d2962f7e24087cd7f3
43f0d47218cd4c9f7a33fa036ad7633ff80a00009279743d0d030000
#<end update:2020/02/21 11:43:59>
#<begin attach ID:bJ1lB5W4Wzu>
789c012105defa14000000624a316c42355734577a752e6d61696e2e73766727
260000fd04000001000000789cbd9a5d6fdb361486afe35fa16118b402b12d8a
d45760a517bbdf060cbd2e5c53b685285220cb75ba5f3f9287fa30d552034af2
22ce3125913cd4fb042f79b2fbf8fe5a795f8bf6523675eea34de07b457d6868
599f72ffda1dd7a9ef7d7c5eed2e5f4f1ebbb5bee4feb9ebde9eb6dbdbedb6b9
e14dd39eb66110045b76870fb73cbd5765fdf2bd1b5196655b71d59f0e8a7cef
cbfe52fcdd36c7b22a72ff78ad2ad1d7d3e56d7f600db438eeaf55e77bb79276
e7dc8f0336cf73519ece5dee13f6e579f5b07ad8fdb25e7ba7b6a4de7acd1a76
6ffbae2bdada2b69ee7ffecc2f0c1da0c9f33c96b77eaacb8e6578bd14ed3f7c
e4bfea4f97c2f758670fbbb63874de7beeb3bbbf89cf1f74c552a872ff762e3b
f6e4563cfad654df58d285bc563735bb74e9dae685e5f6a5ba0edfd6b2cf6013
b2393565cd678382c7c0831fde3fef72b79513e6f18f2716fc369d1aff0613b8
b6d5efbfc28a7cf81f131123f2b53d06c87bf2f878fbfa54157299c5f87c8dd9
659f4f04c14cd2712ae4ee75296b348ebf3fbca8134093e1bbe2bd93638a900d
856128c4f5c0dbd6fbfa706edadc7f2d29ad58e7c7a6eed6c7fd6b59b1dbfe68
ae6d59b4de9fc54d5eb994ff16fcf1b7ae9f949cc5334b66b7e55df6a3537df2
54269ff533b29f3c920b8d8d274fd5e40f4d5db34c9bd63bb6cdab1042d78825
91a8e915fefddc7a81e360133ca6ecc31311fff0b23e924bf0530324c92608b2
387cc4c926625db38ebda12d0c37d19dc643bdc643d078ea4ee4616051e5a1aa
726dfa54a61f86ee641e127b320f17641e82cc43133267afb1d7398442e86c25
0d2a3d0c40d608a4ce3ae75a1f5b6762c77ab163f1b6b143b1139b62c7aad8b5
e9d33efdd89dd8fba5b62176bc20760c62c726c44e46b1431847fcef3b564281
005b5f8308600262070258df9c80a1710600d10340840222ec0e8028b2080051
01d0a64f65fa2475074014d803802c00400000620200f61a7b002014aa276a28
0020a94900483c0580f5cd01181a6700447a00a2a9a5174ec491a71716c3b4fe
2355ffdaeca9ccbef7f4d8a1a947910500a2050022002032e6ea85d1015b8fa2
c1d78bd0a8b1479174f6acebd1da23a28a3dd68b3dbef3f64ed4de9b7b2b728f
55b96bf3a732ffc1dcbbd07befeeade83d5ed07b0c7a8fcdd97b103cc4a07830
f8c6243f7a79d03cb7f85cf493f699ea13bdea933b93ef44f5c4a6ea1355f5da
fc699f7fec50f5fd625b517db2a0fa04549f98f3f9a07a88513adafbbb381abd
be311a065f0f3070b7cf61189b672ca47a16d23bbfef8485def05b61215559d0
e64f65fe83e177c142eff8adb0902eb090020ba939cb0f2c400cfa27f3381a6d
bf3116068b0f2c70e3cf59189b672c647a16b23bebeff0381fdbd8fa662a09da
eca9cc5e5a7f1cb93ccf4f2c80902d809001089939eb3f9ee88742ee8912e264
3ce84fcc9ff4f747fdc9644380630501146811e02f64ba217079da6f03021428
10e8f3a732ff7e43e08482e1b8df02056afe2a056c393805ec97b90dc1e4c01f
c48f223506126425c0140ad352c0500b48a61b85390dfaf22e42f71b0597e500
2b34a8155e7dfeb4cf3f7648c3500fb041c34291174191171929f292090d6442
03c66a0c34c8a280291a265581a12c904c360a7316f4656014de6f145c5606ac
b0a0d681f5f953997fbf5170c2c2501ab0c1c242251841251819a904cb8dc2a4
3800fa27b3185890f501532c4c0a04438520996c144616563bfe6f5dcfabff00
064e225527260000f6ac892621050000
#<end update:2020/02/21 12:10:51>
#<begin attach ID:bRXyictetRU>
789c011505eafa1600000062525879696374657452552e73616d706c652e7376
6742260000ef04000001000000789cbd9acd8edb361485d7e3a76051146a80d8
1645523f036bb2e8be2d50641d38b6680ba3910c598e277dfa922225538c4d15
08c94566ae2599e4a1ce179c1b66f3e9fdad02df8af65c36751ec0551880a2de
35fbb23ee4c1a5a3cb34009f5e169bf3b703608fd6e73c3876dde979bdbe5eaf
ab2b5a35ed611d8561b8664f04e291e7f7aaac5fef3d08b32c5bf77703755218
80afdb73f177dbd0b22af2805eaaaa1febf97cdaeed8857d41b797aa0bc0b5dc
77c73c8823b6ce63511e8e5d1e60f6e165f1b478dafcb25c82435beec172c92e
6c4edbae2bda1a94fb3cf8f285df180780caf7792d1ffd5c971d53783917ed3f
7ce6bfeacfe722006cb0a74d5bec3af09e07ece9effdcf07433109551e5c8f65
c7beb9eebf7a6aaaef4c7421efd54dcd6e9dbbb67965dabe5697f1d3528e19ae
22b6a6a6acf96a60f83104e20f1f9f0fb959cb05f3faf1c2c2dfd4a5f14f6201
97b6fafd57b1231ffec742fa19f9deee43089e019f6f5b1faa426e733f3fdf63
763be00bc9c44ae06d29587d5dfa1edde6dfee5ef5054065faae78efe49c7dc9
a68250cc85d82f7e6db9ad77c7a6cd83b772bfafd8e0b4a9bb25ddbe95157bea
8fe6d296450bfe2caef2ceb9fcb7e02b3d75c3a2e42a5e9898cd9a0f39cc4ecd
e2a9142f17947a108f867db62e9eeae2774d5d33a54d0b68dbbcf57bd135bd1f
246a6687dfd736189c842b6e6df613b0f7a9d5fca6dc869f9a04c264453ec6d1
2acb4294f2c1d9d0008691727562f5c86cf5a87fdb51e4cfeb1176e7f548f7ba
513d95ea61eacfec51e8d0edd18cdb23e1f6c886db9965468bb357aad5b6ec1e
e189ddd9e0dcee117a687764b63bea5f388afdd91da5eeec8e74bb1bd5d341bd
47bb63977647337647c2eec886ddb162774cf43a26ac64fb3a2d6d4180d20904
6c700e014a1e4280cd10e0de0638f5070109dd418075088ceaa9544f903f0808
7108019e81000b08b0958493dc8c1f877add3b9fe8a52d08483881800dce21c0
d9430888190232c9f8c863c887c4010544a7c0289f4af972457d28f114f3fba8
691b023203011110106b31bf4f3f32daab354cace67c980a67677dd06783cba4
3f5e9f383e363b3e9e467d1f961fb2be13cbc7bae58dfaa9d43f847d2f9e1fd2
be13d3c733a68f85e9637b695f385d247cb5b6e67a11f76faee7799fbb5e04fe
fbae4fccae4fa689df87eb8780edc4f589ee7aa37e3ae8f7e97aecd2f5c98ceb
13e1fac45ee8174ec744af617a8bfa93da160d22f7df68e0c19fd32092ff7d1a
52330de934fafba061c8fe4e6848751a8cfaa9d43f847f2f340ce9df090de90c
0da9a021b597fe050122f1abb52080fc58dba2413400371a7807c069102dc07d
1a32330d99da03209f3d00720143a6c360944fa5fca107883df600a90314b219
1432814266af07e07fdb83442bb1f28ffe6a8dec760648f81df78d011a1b83e1
b24a010c8d14f0f7aff4055e3018cf001c6000430d03b37e2af58f7d810f0ec6
bec00108ba7e1d04b61d1c04f6cb5e5fd0db3fcaf41a2b27026a6d8d05d12f8c
2cf076018dedc25d16cc27bf104eba052f2c8c07042e58d00f7fcdfae9a0df27
0bd8250b33e7bf509cff422be7bf58610113bd16fe171d825a5b6341740b230b
bc594063b3709705f3d1308c26bd821716c67302172ce887c366fd54ea1f7b05
1f2c8cbd820b16664e87a1381d86564e8789128b64afa0d4c2ffe487da1a0ba2
571859e0ad021a5b85090b8b0dff1f5f2f8bff00800228234226000074ea81ac
15050000
#<end update:2020/02/21 09:54:29>
#<begin attach ID:bWohJ8hPsfR>
789c01a3025cfd1600000062576f684a3868507366522e73616d706c652e7376
67730700007d02000001000000789cbd555d6f9b30147d6e7e85a769f52615b0
81a6218354dbf3a64d9afa5c112060d5b123db94b4bfbed7867c75c936addd1e
882ef75e9f7bceb94649afd74b8eee2ba5991419a63ec1a812852c99a833dc9a
8537c1e87a364af57d8da055e80c37c6aca641d0759ddf45be547510124202e8
c07dcb74cd99b83bd6489324095c15ef0fa518cd735d7d5772c17895e145cbb9
c39aea555e40a2ac1679cb0d461d2b4d93e19800cfa6627563320cd3f16c7436
3a4bdf781eaa152b91e741225de5c6544a205666f8f6d616b60074efbc8d87d6
1bc10c286c75a57ed8c9dfc48dae3002b0b354558541eb0c43f783fb3d010512
7886bb86193819b8a32bc91f407435d4841450d246c93bd036e7edf6cd1b3089
1f0227c9846543c90541fd63f12d641a0c846d7c9a1879b74fcdbef5045ac5df
bfed1df9f00744dc44eb6dc1758ea6c8546b3397ebc1e5daf96b4bf8c0a7f1d8
1f3b4693784b0972931da5287ce6d68e495edc3da742376edaf1760025bd624a
608e4d7ab9281aa932bc6465c9016f2185f1347b04481aaecc66da003f2b78ae
f5a734b0679da9f59ed0f969a1f343a1e13f571abd8ad2cfc794b64bee1572b9
929a19f81ad142c965bf67237b1b866fe9d757f8b88aed0d8e223f86cb4b7c82
9c5b7d3cdc2cb8cacd21dfdfe1c21abe22078a7ad02f88c6633f4a483481cc95
7f693397891f4dc8d5e5919e248496c761fec6e5b0e7043e27b10dfec6e8736e
3eda27574a76da138c9fd790816767feffb3dd0abaa0740cea8738b671f4736c
7b5eb80e67320081d1ce5e1a4efc04dc4eacf37d31a67e021b19bbccd541cf66
192f121c59d08b1de8561c0a2da55de5e4e6694c5e69f5e6f9e247a9fd8b9c8d
9e002018305f7307000053fa459ea3020000
#<end update:2020/02/21 09:44:38>
#<begin attach ID:cg0iGdTVBzv>
789c012b03d4fc140000006367306947645456427a762e6d61696e2e73766752
0d00000703000001000000789cb597dd6fda3010c09fcb5fe1699d4c3512ec04
425225ec61efdba4a9cf959b386091d8c8711ad8b4ff7d76123e4a69a1823c80
b0ef72f7bb0f5f4cf86d9567e099ca82091e416c2308288f45c2f82c82a54a2d
1f826fd35e583ccf8056e54504e74a2def87c3aaaaeccab5859c0d1d84d0506b
c046e57e9531be38a688832018d652b8ef1443f0440afa4b8a94653482699965
b5adfb624962bd91d094949982a062899a47d0439a734ed96cae2238d28b69ef
a677137eb22c30932c0196a537c225518a4a0e5812c1c74723d81ac07bcf9bdf
adea03674a47581654fe369e7ff2878242a08ddd8492c60aac22a8b5d7f5f71b
a674085904ab3953fac961fde852646b1d346d655c702d2a94140b1ddb53566e
57566b13d98e66128c1b1a8c0608341f63df980c872db0f9fd3618fab28f6656
0d4029b3fee72623776780d41e4d6ecb3cb3e28c14459be08d67af718dfd9d73
ff45810eb2b2f348e2c5a14bdc3a5474551bc7a8b1eea0b13d86c06c5b84c773
212398b324c9b4c1547065a524679956fc2e4ac9a8043f68d54a0af6477bc378
a93620ade7a9a94a3834364fc5e88c903d7146815fc3f813c3d212bbd8b7c763
84c6d70a5977b4dda614bbd70e99f224277261319e8a5de8c7c3c4ce893827ee
25713aa371ed2c689c8ddc57052e1491ea8260bfe6965a2fe95f49492278b6fe
b78bf80d88b1d70584117e00c20bba80a8dbfa0314bed30585d9f80044f0fad4
5fa31e755f1ec3387e10f41beefd8380b173bd93e0e00e9a70ffdcf76ddbbe3b
957ac7e9a00be3398d17fd98f067520c1216abd318a30eda3091a4ea372fd841
7d2c064d7d0695d4c593a7a1c6d76f4b2ba1314b68add13f4de0f91d10e8b458
9b4621528aeabc4ef171c72c4a32c267193d0f2718758c9330920b9e9c45e3a2
49c7343193f1abd46cee32bab745cc88d2576d904a91835b0728016ef1e692fc
feddf4f8ecda5e4df5904403331c11d80ccca059b703ee22f38ebe7e4cdc91a7
2dea1c1e7a005b310eea11f172a2ba2f276a607b1e720e0ba153784119906d3b
9b8cf742f30f68dafb0f6f6a2450520d00009bec83e62b030000
#<end update:2020/02/21 11:43:51>
#<begin attach ID:cgEI306bxmh>
789c01a3025cfd1b0000006367454933303662786d682e32303135303432312e
30312e737667560700007802000001000000789cb555616fda3010fd5c7e85a7
69f22635891dca4a504235edf3ba49533f576ee224568d8d6ca7a1fbf53b9b40
28a2d3aa310191e33bbf7befdd25e4379b95444fdc58a15581694c30e2aad495
504d813b5747738c6e9693dc3e350852952d70ebdc7a91247ddfc7fd34d6a649
5242480219789bb2d848a11e4f25d22ccb9210c5874529460fccf21f46d742f2
02d79d94016b61d7ac848d8ad7ac930ea35e54ae2df015019e2d174deb0a0cd5
f1727231b9c8df45116a8ca85014c146be66ce71a390a80a7c7fef037b007a70
deaf87d43b251c28ec2c373f7de5efeace728c00ec2237bc74685360c87e0ed7
57a040822c70df0a0727937074ade53388e6434c690521eb8c7e046d0fb2dbdf
4503268953e0a485f26c28b92468fbf3f81e324f06c27efd3a31f2e1909abfdb
12e88cfcf87eebc8a7bf20122a7a6f1db78ea205ea56322a25b37630ba091687
287ee1d5741638cd4752f303b7ae8edd1a99b0f2f1980addb9e9f826805f6fc1
2999c5b0f2bb115365ab4d8157a2aa2400d65ab9a8662b2121f1abee8ce006dd
f27e8858f10baa51ba763b2243e565d092271e34d8ddec2ca8b51e0c80e67053
c390bc3001e25b0b4a614ac9510944a9675a06aaa0d89c1893b709a73be5537a
6edd40ff946aaf17daad4bc11c3cb3a8367a354c83d3c193e189fbf3a09f16b7
9f733a8bfd88939820fa79bf3e98bf007d864ad374ac94a6a72a1d4ff86ea0d3
f9f9277adf57a0f57f273a1d7beb4532538e6fcaf64d4ec2a47f43299da1cc7b
f80551e2bf70818fdfa6f4bc9d1b362a665b660c03ed294ad1d8d1832e223a3f
eee8bf8d65761d6719996697591acf3cbac746e33625d7be5d506992fb7fc1e5
e437e19b30d456070000234c3fdea3020000
#<end update:2020/02/28 13:27:55>
#<begin attach ID:cgEI306bxmh>
789c01970268fd1b0000006367454933303662786d682e32303135303432322e
30312e737667a00600006c02000001000000789cb5556b6f9b3014fddcfc0a4f
d3e44d1a609b3c208254d33eef214dfd5c513060d5b123634aba5fbf6b431ead
d269953ae521c3bd3ef79ce343925defb7123d70d309ad724c43821157a5ae84
6a72dcdb3a4830badeccb2eea141d0aaba1cb7d6eed651340c4338c4a1364dc4
08211174e0b165bd9742dd5f6aa4699a46be8acf87528cee8a8eff34ba1692e7
b8eea5f458eb6e579470a3e275d14b8bd1202adbe6784e8067cb45d3da1cc374
bc995dcdaeb27741801a232a14047023db15d672a390a8727c7beb0a47007ab6
dfada7d61b252c28ec3b6e7eb9c93fd44dc73102b0abccf0d2a27d8ea1fbd17f
bf000512648e875658d819f9ad3b2d1f41349f6a4a2b2875d6e87bd07627fbe3
553061929001272d946343c96782c68fc3779059341176eb9789910fe7d4dcd5
48a037f2e3fbd1914fff40c44f74de5ade598ad6a8dfcaa09445d74d4637de62
5fc54fbc8a179e537222959cb9357feed6894951de3fa7420f6e5abef7e0ab11
9c9245082b77372854d96a93e3ada82a0980b55636a88bad90d0f855f7467083
bef361aa74e2374ca374670f44a6c91baf258b1ca8b7bb3958506b3d190087c3
4d0d21796202d4470b4a614ac951b91f038a4a4f1516e6424c5e27dce339b898
beb56ea07f49b5d30bc7ad4b51587866516df4764a83d5de93e989fb7bd02f8b
3be69c2e4217711212445372589fe5cf43bfc1a4989d26b1d3d4b349cf137e08
344bde3ed1c773055aff37d1ec74b64e6461cad32f65fb2a2721e9df10234938
6784113a8f81fb7285e0d4962426ab7895323a2729435f1025eeed5ef4c20e4a
d2304e97295b32b24a162949bc29b3ccfd9f6c667f00ff66f79ea006000098ab
399d97020000
#<end update:2020/02/28 13:27:55>
#<begin attach ID:cgEI306bxmh>
789c012303dcfc1b0000006367454933303662786d682e32303135303432332e
30312e737667550b0000f802000001000000789cbd566b6fda3014fd5c7e85a7
69f2263589edbc304a98a67dde439afab94a83035643821ca7d0fdfa5d3b2150
0a7d48301182135fdf7beef1f111c9d7cdb2440f4235b2ae524c5d8291a8f27a
26ab798a5b5d38638cbe4e4749f33047105a35295e68bd9a78de7abd76d7be5b
abb9c708211e44e02e64b22965757f2c9072ce3d3b8bf78b528ceeb246fc5675
214b91e2a22d4b9b6bd2acb21c5ecc4491b5a5c6682d677a91e28000ce8590f3
854e3154c7d3d1d5e82af9e03868aee40c390ebc485699d6425548ce527c7b6b
268604746fbd19f7a13795d4d061db08f5c754fe55dd34022348769528916bb4
4931443fdafb8954d04299e2f5426a58e9d9a5abba7c84a6453f57d5154c355a
d5f7d0db5dd90e4f4e9f93b80c30d5b2326828b926a8fb9afc2665e2f580cdf8
3430f2691f9a79ea00b4aafcfcb163e4cb1b80d88a865b2d1a4d1d8a26a85d96
4e5e664dd3533db724f7f3f8095f2c74fd1004125978e10e1fe72e033df01dc6
e090be1db42cbf3fc446b7f46ab1b195e2d0ed388041889179ed6455bea8558a
9772362b21635157da29b2a52c21ee7bdd2a2914fa29d6fd4c23ff42394a577a
8ba42f3ded7b4b3c93d66ec17c4b4b51d70329b0654215209d27c4d8888e965c
aabc1428df74c245b9c10bbfea887aded7be4df768d2d073376ff11f6bddb40c
2aa873996938cca850f5729089ae7b6afae3f8f22938dee2700858e04601a825
b88e894b10e570b7c33d7ddaec6728e68366bbe488d1f0799d43f50f528f8dd6
2fa4f3619f2dba8bea9ced6fb6693853f9ce5317efe214d4ff03313276034618
a1810ff0a31845c48d884f623fe68c068433f40d51622ef3a14756c4dcf579c4
59c4483c0e39193f3326f68a31b1978c89d2ffe14cd4bf9835b153d6c45eb526
76da9aa87f5e6f8a2ee24d477b7fc19bd8d69bd899bd09e81accc98e2fe64e5d
a5ce9e0e2bbdc19f2e20f723067531b9b3fd2d3f8f43c56e88288d5d427844c7
3cf099ef07d69642736d6dc98605cce59cf8634ac099a228ecbc6894983fc1d3
d13fa27d51b5550b0000f42f889623030000
#<end update:2020/02/28 13:27:55>
#<begin attach ID:cgEI306bxmh>
789c01db0224fd1b0000006367454933303662786d682e32303135303432332e
30322e7376673e090000b002000001000000789cd5565d6f9b30147d6e7e85a7
69f22615f0b5319808524d7bde8734f5b9a28949ac1088c034d97efdae0969d2
ac995aad7da89258177c7d7cee39be90f46abb2ac99d6e5a535719059f51a2ab
693d33d53ca39d2d3c45c9d56494b6777382a9559bd185b5eb71106c361b7f23
fcba99079c31166006dda58cb7a5a9968f25429224413f4b8f37054a6ef356ff
68eac2943aa34557963dd6b85de753bc31d345de9596928d99d9454605439e0b
6de60b9b51dc9d4e4617a38bf49de791796366c4f3f046baceadd54d45cc2ca3
37376ee21e008ed6bb7848bdae8cc50abb56373fddcedfabeb565382601769a3
a7966c338ad9bffaf10c1496506674b330165706fdd2755dfec2a2f53057d515
4eb5b6a99758db6dd9dd5f790326f33972aa4de5d800bb6464f773f80e320d06
c22e3e4f8c7d38a6e6ae7604baa6fcf87ea7c8a72710e97774da5add5a3226dd
aaf4a665deb683cef35e6137491f2805d18e923a7052476285a7621d88e4d3e5
2913d88b69f5b64777b63b7460d29794b8db5e5e4d177593d19599cd4a442cea
ca7a45be3225267ea9bbc6e8867cd39b61a635bf713b80b5dd3319b69eb862d2
c061f66acff70ab8d2d115dd14783abcb69e2eb5dd9fb67f9bfc78497b8fb118
9f5d2a1cc82e942e04d8878309e8fae259f8e8cb57028cfb522948582831969c
84cc17218b4388450c2c11403e6396fbba0ffcbd02884cfc48265c2a1e7195b0
480d94f676c06087602fed4551d7072b5ed3043cafbeebb183f47dfcc2da27cf
d71ed31e8a9f9c111f04bc59f577e71ef8a107e0a809e015ba004edbe0094e9c
b4417cce08f5868de0eafe591481af221ec59752fa0ab850ff65018f050a2aa2
380913194ae11e2a4248c5421e8549cc193f710045f6918e0c99c041304142e1
c70c0122a612c920e22706f07878e7bca6fea3d4fddb998cfe002b32aec13e09
000054c25c2cdb020000
#<end update:2020/02/28 13:27:55>
#<begin attach ID:cgEI306bxmh>
789c011707e8f81b0000006367454933303662786d682e32303135303432342e
30312e737667562a0000ec06000001000000789cbd9adb6ee3361086af374fc1
a228d40236cde199819d45d1eb6e0b147bbdf0264a22c4b1035bde64fbf41dca
921273b4455ba9440eb02d91223fcee1e7d0cbf72f8f1bf6a5dc1faadd765500
17052bb7d7bb9b6a7bb72a8ef5eddc17ecfdd5c5f2f0e58ee1addbc3aab8afeb
a7cbc5e2f9f9993f2bbedbdf2da41062817714a75b2e5f36d5f661e84608212c
9aabc5db8742c13eaf0fe5effbdd6db52957c5ed71b369faba3c3cadaff1839b
f2767ddcd4057bae6eeafb55a1058ef3beaceeeeebd39bab8b7717ef96dfcde7
ec6e5fddb0f91c3f583eadebbadc6f5975b32a3e7d8a17fa0ee04dfbf8babdf5
e3b6aa7186c743b9ff233ef9b7edc7435930ececdd725f5ed7ec6555e0dd5f9b
ffdfe80aa7b05915cff7558d2d174dd3a7dde62b4eba6caf6d775bbc74a8f7bb
079cdbe7cdb17f376ffb145ce29876d5368e06c44cb0d35fec3f76b95cb4038e
afbf3d30f1c3dba1c577a7011cf79b1fbf3f11f9e91f0ca47962645b97879a5d
b2e3e3667ebd591f0e2de7bb8670bc589c91027b1a12f8d741f9b3854b68bd8e
647dfd900e053a9a75f9d2742fc5a97b290c37058b1fcfd7dbebfbdd7e553c56
37371becf176b7ade7b7ebc76a8337feb23beeab72cf3e94cfed9543f5273e0e
e0a9ee46d23efa2ace66b9887d36b8ef3a0471eeb82ce5fe16cd637ed85d3f94
75676e7fbfcac353ea161927c3c54c4afccf4eaf9516bc5b6e5cedfb7fd52dae
c7af0c82e0d88bd3e09403111453da710db81ec1681f9cf6ec670622fec61fc0
27076e4d90c64b2b7d108eb678630eff1f0bc58db446773ca4e60a843333a51c
f74e093f8a8b04cb8537d2056b03480912a769b9d7c10a63a456461b9b925186
030825b491420b2b2cb6515c071dbc504a6ba9c16661e3380ebc4783cbe3bdf4
8068801b63c348341ad06490b536e082923e5a00702f1189c03f856641d09810
39180d012d4d0ba999425a123c607ba3953359ac06108076023a34aef122093c
aea81d87c59a734f8a5394386b745510e0d18c52285e7281b75ae7d17bac314c
49c9bd924e4b678c1742656162b9f3b223e2030f41483b53d18ab495721c15ef
b832465815e30568840281035a8d0ed1bf8c720915252407a382301eac0e8011
49e008c180b66837c1d82c962215ae8411aee5d2d398f584467121731a9877c2
8570236c7370519a5b74fece5e7adf9935be348e496afd031e9230491d8c3a61
0e26bac9cba031b87a5cc82ecacefac83b0e4b1a2887a269c285c6631ab5f391
41df114689c0fadc3cebf3f5383424bd0e25e1940d49e334d96764d378d1ebeb
913c52ed46d55a4a236d411461361610240f3abaf1ab9d8033dc7a1cff482e64
cdc12b1e403b1492f81ce70201434c0bc332ba73b088ca051354c8e742e00dd7
3a8ad03eb880c17c010ec24832245280f1683291b9f612432fcd442420010eb2
e9c163f6c2e8e4b2c8dc3e15a1f99ea52250a31d294d2c101ff6d68f640a8524
2f5c1c1ef05e1c97f7d8de98acbaa585d2eb160c8a5c88e0d4485722320440e2
3ae8a06c0c199e6c8ba8d409e8ddf80e93571caab75992742b734f585e652ec6
1c87b318b7254ab59b66417164e4f13367845632f521a2dd14c38179f4362362
58d256654942fd86a8e5d26c889c4726568f3314aadd9ce3609d344e62280bc1
a6b9686007651dc61517820fe841c2879073fbdc22e9b7cfd6630c56fda6ec3f
62a1da0dd30a32f20e242626a9d3c8922ab7c030406353d374631195cd5355e8
2a2e2d97bee262d1f82506c991f6920a37c58c8d594500ca3263629e49c0a4b2
8d19856e2854d0bab15f95c75c4e09fab52a67c7661f2ada30d7e3d602a519da
809008280db2b48e9736810c2c70a5b876a8b65a1ebd7a9bc84652d186bb2db2
e4299854b469625659c0609ac155ebb874da6d9a9842149b1d0811299744b279
12867260f1387d2343e8b8a8c9d24f2ad810004926299254b0014d5959a0a828
af3b24bd6c9b46aa10b5064478245852b56688b8c901c5591ea5956ab1742ca6
92b5e9942499765abd25728da0cd1359a26842dfefeca5739e09364189f13be2
203aadc79d7b18ea6bea8659909c6d99bb103bd18e99a8351a49cfa10c84621a
b0f361e98b2c7d4a9ea8c892a6d5c1dc9ba021c99b66f86c644ea5383b4d256e
40b0518996c0a04d8810cc08a3abd9be9ac93435db74cd69f99588dbc4b29c23
9b857c5cba2a7f1f55a629f20f0409baef4b826d1a88e8d6326bfe391d08f5f9
67fc7910d56b0315827326b4c440ca1059c5ca89492f56a6393b4c94071a063d
654d245ca26ee86163465d7b62f246d74e73d29cea3552777469bd89e83547aa
9b99047fb70b6ad1a8e9be953020d9d24ab5245c52cd9696c3458eba4abf656e
a1f45be669bec542551b3dd648b0d05d363d3dc95a6469c9f4459669befa34a0
da060ec31236b43043cfdc9a515d2ce3b740af2efe02667d676e562a0000981d
6e2417070000
#<end update:2020/02/28 13:27:55>
#<begin attach ID:cgEI306bxmh>
789c014005bffa1b0000006367454933303662786d682e32303135303432372e
30312e7376672b1d00001505000001000000789cbd595d6fe246147d4e7ec554
55e5568261ee7c4f0459557dee8754edf38a0503561c13d966c9f6d7f7da8081
b96cd5cad4244106cf5cdf39f7f89c3bcef4c3fb6bcebea465956d8b59025c24
2c2d16db6556ac67c9ae5e8d7dc23e3c3f4eab2f6b86438b6a966ceafaed6932
d9eff77caff8b65c4fa41062822392c390a7f73c2b5e6e0d8410c2a43d9b5c5e
1412f6795ea57f94db5596a7b364b5cbf336d653f5365fe017cb7435dfe575c2
f6d9b2decc122d30cf4d9aad37f5e1c3f3e3c3e3c3f4bbf198adcb6cc9c663fc
62fa36afebb42c58b69c259f3e3527ba007031bf393e0efd586435ae7057a5e5
9fcd957f2f3e5669c230d8c3b44c17357b9f2538fa6bfbfe8d50b8847c96ec37
598d3327edd4b76dfe15179d1ecf15db024f5575b97dc1b57dce77dda7f131a6
e01273da6645930d88916087bf267e13723a3926dc1c7f3b31f1c3656acda743
02bb32fff1fb03223ffd8b44da2b36d8d66955b327b67bcdc78b7c5e55479cd7
2dc2cdc9e40a29b08794c09f93f257858bd03a67325fbcc4a9c009cd3a7d6fc3
4b71082f85e12661cdd7e379b1d86ccb59f29a2d9739465c6d8b7abc9abf6639
0efc65bb2bb3b464bfa5fbe3992afb0b2f07f0569f32395efab959cd74d2c46c
e15e9f2068d68e6549cb15d2635c6d172f697da2db3f57f9f6924e45c6c57031
9212dfd9e15869c14fe5c66a6ffe5358acc7af0c82e018c56970ca81088a29ed
b806ac4730da07a73dfb9981687e9b1fc02b076e4d90c64b2b7d108eceb8a0c3
ff8785e1caf8e04f7828cba5d2d68e94325cca607bc122a5e71edf8c75d628e7
0117a9b9c79753412b6585d4312e0d0a5e01082f9494d230a5423465086000b8
d14ec00918d7124502975a999ea858734d168d6b945c07642308f036400c8a97
5ce0508b10e27983a048c9bd924e4b678c17420d8189bcb87182e721e86047dd
513f4c02965d1867156801ca39cb90035c582bc08173c14b50112a3706d03043
e0a234b71a843c62d3b164d4b2a6172ea4ce37b810a1125389d26d084c74cb15
101c8b1350dc8e7232ea14a61f2c44136e0847840b551e224fc301235aa29c8f
fba141bc86ba4b0c463c8338d86058800f1c498dd4ee480256f1a624ba272ca4
e228151cc502b46a3828c1136028b1c0486ec07a1f2058e79c76836a0a16e94a
5340f5a64bac10d05cec922d324685a81080e301c7625edee37c630633a00320
6703c25570218c30fd40a16682e87313342a9637c15b296d6ccbd4b43c66851c
f2486889b1fc204d5cd7ab1ca1697b15e7b93356f743859a8d731cac93c649ad
718f69e31be84673631d37c285806d2692d7873068637bc4a46b6cade6ce09e5
7bf62bb1db586605077c492b8cb52a38c296d86d2c33269a3208321737517b6c
fb0a0a759b4632511782d006ef2223450c06dd30c55386306308d72adbf9ce9d
5812db4da0158f7189ccc6505a0d810bca98363284132eea6e8a127b8db5541f
624c62af01aa42838072be713acfb993fbdcb09ad849e27e96380d0d3244a30f
f65a684f24b9439f1215d91122e818936b26052129dd0681e4baadedb4e44e7d
2d351aaa1ad7b850d521ca34182e87ad8fbdcfcee786cf506789b0a053887f0d
0746b7413e93e43e3be4b8e48af41f82dc3d824c89ba1c3daca21c1ea7748ad2
ff690a759a1bedea3528b4df253df160de73c0e3ec3df779f4468d86ec6b6243
264643b74f8376294760d4fd9ed1deb09a78132c092cb1d7c43b6d3188ca86eb
a791e79ef62e8ff4a9d5dc786412e142ba60fa64a6cde971dafc6bf3f9f16f8a
15e6892b1d00003b437e5340050000
#<end update:2020/02/28 13:27:55>
#<begin attach ID:cgEI306bxmh>
789c013e03c1fc1b0000006367454933303662786d682e32303135303531312e
30312e737667710900001303000001000000789cb5565b6fe238147e2ebfc2ab
d1cab312313e767cab4847ab7dde8bb49ae7511a1c881a12c67106babf7eed24
7468073ab7361048ece3f35d7c7260f9eeb0add127ebbaaa6d320c8462649ba2
5d55cd3ac3bd2f138dd1bb9bd9b2fbb44621b4e932bcf17e77bd58ecf77bb2e7
a475eb05a3942e42041e43ae0f75d5dc9d0b0463cc6298c5a7a080d16dded97f
5c5b56b5cd70d9d7f590ebbadbe5451858d932ef6b8fd1be5af94d86390d3c37
b65a6f7c86033abe995dcdae96bf24095abb6a8592240c2c77b9f7d635a85a65
f8c38738f190004ed6c7eb29f47d53f9a0b0efacfb3722ffddbcef2c4621d9d5
d2d9c2a3438643f4fdf079215590506778bfa97c58b91896eedafa3e88b6d35c
d33661aaf3aebd0bda6eebfee12e997252c202a7b66a221ba0738ac633e68f29
978b8970bcbe4c8cfe7a4a2dde8d047a57bf7d333af2db37101910a3b765db02
ba46fdb64e8a3aefbac9e7f5e0709cc48f9c02395282cf9cf48959e953b33e13
c98bbba74ce068a6b787217bdcf6989d0b22308aa349de149bd665785bad5675
4858b68d4fca7c5bd521ee8fb6779575e82fbb9f66baeabf8006b0f3472213f2
4dd4b25cc49c83d9eb1303d87306b00b0688577500d4eb58c0ce59709bbb630d
84f2b4ae0c8fc9231b62c0684351b9a2b6a8388caa8bfbf1db9d794ebe4fb81e
7547775f5674e47e4134fb9a68765134b097540d025e41f6d9bd7ea43771f663
6f3b8f4ad76ec756e0dbb11ca676fb7c973b2ff1a1c9494ae83c9544c64323e0
9ce854829c0b45844c811e1bd10fc14c03abbcdbe4cee5b16d208e4ee0bf8443
da10c6a95273250908aec5cf103802194d38574ccd651ab2a7a9fa1206014d09
5029e64a13aaa9e447e0dc6fbe0b3414e69f0818278c712984119c6963241240
045542a52a1000ced0ef0133bee30b82f7942815ba0b2890902a8664e0682897
cc480d46c2e98fc2f345c2a622612f5724c1a4e06138503033ec99e073608a48
c338fc94534610ae15d7c17f2353ce831320889192a64231ce80027f62955644
f3e08c605a2a2da91a0a57a55a736e52290da763d9cc96f10fd2cdec7f9457c2
5c71090000606493b93e030000
#<end update:2020/02/28 13:27:55>
#<begin attach ID:cgEI306bxmh>
789c012a05d5fa1b0000006367454933303662786d682e32303135303531312e
30322e737667f5200000ff04000001000000789cbd9a5b6fa34614c79fe34f31
abaaa22b053c5760229355d5e76e2b55fbbc6231b65130a480d7d97efacec060
c3984b77cd54491cc3cc9ccb30e777feb1b2f9f0764cc1d7b828933c0b2ce440
0bc459946f936c1f58a76a67fb16f8f0bcda945ff7404ccdcac03a54d5ebd37a
7d3e9f9d3371f262bfc610c2b5986135539eded2247b199a8838e7eb7ad4ea3a
4516f81296f19f45be4bd238b076a734ad6d3d95af61246e6ce35d784a2b0b9c
936d75082c02459c8738d91faac0a20c5acfab87d5c3e69d6d837d916c816d8b
1b9bd7b0aae22203c936b03e7f96031703a8b35ebe57533f654925323c9571f1
97f4fc47f6a98c2d208c3d6c8a38aac05b6089d9dfead71153228534b0ce87a4
122bd7f5d2d73cfd26928ed558966762a8ac8afc45e4f6253d5dae6c65133a58
c49427998c06c147089a1f695f9adcac55c0f2fd7860f0e76e68f2aa09e054a4
bffcd4ecc8fbff1048ed51ee6d94866589c013381d53bbbe503bbdaff7b819b6
7abb45a0231e1684a40e8e5ca3f3b943c469e0b4f320f5ddbb4616462f7a68a8
dddd2a7eab5d79cc69b68031875940deb6c32c3ae445601d93ed361516777956
d9bbf098a462de6ff9a948e2027c8ccf6aa44cfe11ee107aadda4894ebe726b7
cd5a5aad1fc0bedd945d9eb75b229e575cecc4b9e96d8b9cd06c4a9414511a83
48048bc5a105910c56fc2e064ecef7e55e9b13d67cb474e232faa1b47bf9da45
fcf7292e2bb02bf2637b4caabcd91b558cd335309ce4a5041077bc47061d0810
17aff55b75307fc8b0bab10dcb435814a13c9a80808ec38b1780e9120e5bc318
7b0e84dc458fcc7358c738b88e502ccfef5a21ecf05d7ec479fb5dec91e75084
7cc819f5b9477dc0b8e3328e998f5dec73e8fae05780a0fc965f686085088c50
e851e4110f414e6e3880a73980fb1ca0accb01df240738541c40d01408f00808
f01c08f03808105c9404889840c160e27328c00a05781114102a502036ebc282
fabd7918342e9b82bddbe52d0e10bcf240b9ba8cf1e581204aba4f043e4b04ae
1101e94420d344207d22b83d65808c4a0349025516c6c4011961029963029960
c2b2ea001991078389cf3181282690459840a53c401d7d80fe1f81803a0ae16e
97034ce86804a48904644025204d2678b34c40ba4cd09940a79940fb4c10125e
e1c0a84240b89508d89844a02338a07338a0e338c0cb4a046c44220c263e8703
aa704017c1812b25025612013b843517667970f5a32af66e9fb740c01d918035
918016500902a3ae6812cc6598724801867340d057205d25e84060d340607d20
486beaac1a050269f50136a60fd80810d81c10d8041096d507d8883e184c7c0e
084c01812d02044fea03acf401777cd65c9805c2d54f5bb1cb2b04dc51085853
08f86e85207183fb40d03f487035220c2c999308ee3411dc3e11a494574830ab
1158ab1188318de08e20c19d43823b8e04b2ac46204634c260e27348701512dc
4590c0a546204d0f156756f46e625a2374fda89abddbe72d12484723104d23e0
bb35024654ebf844ff24e10609374bb02e12a8ce046f9a099ec604dcca046256
26b8ad4c20c6648237c2046f8e09de0413969509c4884c184c7c8e099e6282b7
0413a4da154c68da28a9eba7dbb17fac5e88fe2733996da1b74bf4167a532ffe
74bdf85abd90b68712b33dd46f7b2835d643fd917af1e7eac51faf17ba6c0fa5
467ae860e273f5e2ab7af117a9172c7b2885d77aa170f97aa1b3fde5b65e86fb
cb6a23ff49e179f52f7c6e978af5200000ad5766cb2a050000
#<end update:2020/02/28 13:27:55>
#<begin attach ID:cgEI306bxmh>
789c016b0d94f21b0000006367454933303662786d682e32303135303531322e
30312e737667d6500000400d000001000000789ccd5cdb6e23b9117ddef90a06
41a0049069168bd7813d8b20cfb900c13e2fbcb66c0babb127b2bc3393afcfa9
be48ad6eee8ed6a202edec0ca4be54b1291e9e3ac5625f7dffe5e34afdb258bf
2c9f9fae67a4cd4c2d9e6e9fef964f0fd7b3d7cdfd459aa9ef3fbcbb7af9e541
e1d2a797ebd9e366f3e9fde5e5e7cf9ff567d6cfeb874b6b8cb9c415b3f692f7
5f56cba79f4b1752cef9b2393b1b3aa599fae9e665f1aff5f3fd72b5b89eddbf
ae568dadf72f9f6e6e71e06e717ff3badaccd4e7e5dde6f17ae60ddaf9b8583e
3c6eda2f1fde7df7eebbab3f5c5ca887f5f24e5d5ce0c0d5a79bcd66b17e52cb
bbebd98f3fca89ad011adc2f9fbb4b7f785a6ef084af2f8bf5bfc5f33f9f7e78
59cc148c7d77b55edc6ed497eb19aefedafcfb2ba6f008abebd9e7c7e506775e
36b77e7a5e7dc5432fba734fcf4f38f5b2593fff8c67fb69f5bafd76d1d934da
a24dcfcb27690d99b951ed5fb12f26af2ebb06cbe75f6f98f9d3b069f2ad6dc0
eb7af5e73fb63df297031ad27894bebd5dddbcbca8f7eaf5e3eaa2fddc76f443
d3c5cd91d95e5f596a1b6579d7ac34e82f37eeaf5d5b6e6e7f1e3786fafedc2c
beb4e67d67de7bed674a0e5fdc3cdd3e3eafaf671f9777772b58bc7f7eda5cdc
df7c5cae70e1df9e5fd7cbc55afd63f1b93bf3b2fc2fdc117ddaf42de95c7f68
1ee7ea528c363dfed0f7027e95c5fa1ea3c3745db13db0d71dbbcbda3eb95dae
6f570b758b76b33702b4dba6e9cdc77561ecfcbebee86c8ac9d4c0b86e6f943a
62efd92fd68bffbc2e5e36ea7efdfcb11b299be7616775a0fc6d2c941fb58782
cd78c879d3678a8def3f7743f44da6bb0377372f8f37ebf50dba8515ab9dcb81
1bc5ced470b9356da3362607588cda0fadabdd296765685f76f3d9e3ef728451
f877c564b5234a267b97727449599f75f0d9fa64834dd984a0feaac8c8fff287
4ab7a06d685f74143992c93c9815b63f31f9c30041be8008d2ce5adb8122464d
31d481456f587e59935abb67860d745c3d7004a323c51c0090a0f1e496710c63
38b8785a9c8cbd6140938ec16637b7d1699f62aa851ad83309569376d150c191
624658e103e350609d13d9234164744ae462001a229bc8cac6a099989cf53625
0e7e02223fb905380f727572d9e46cc99760c407f20a1788c5792d986e61d44c
5d5540b4352b56399c21bd701d7e494e0747c66220b51c433a07f2f89e4ece33
7bae94747330d6bb399b6a7c4343936317209daca9f96e534b3fc761c6b0f6de
802e9c67fcb551d96cb51c0831815e829f6286b50532428ae433e37fc0ccef33
8f2b61c61d483dae403d982918c63bcc6cbf5580cdd696180eb6fb7266c87175
c82736e4d3a0a621226f0da8a0ff744ae414dc61283b6d5db076befd54054126
ebe8238b59044481b32db952dbb3f3ed1d47410994a16138794234e65c760097
d564414bc190b599e324869b5e30b152425238907d42817d682b6bd88374a1fa
eae0887a69c3989f3bb36786a250877f0269ef628f232182f996184e8aa17d57
9db8daf1fef1d069a67e5134cc5182b534f2d17f65b3e7f26d709970468959f6
f132a5a6297f95f0120f649e38651e9b4009deba0e32f8cd11d6465b03323bd3
5f25cb42bde533434dacc33d1e3fb74f39f5b80941278bd9782e4236a6134367
e20de30f937e7098fd8167030d50074101e1998f409037d03d2ef982234c1a8c
1036b80464050d957f5c1027b90247103989930d291be0c25a0dfa701c72a490
0c8da338d165464e59678de7067d71744b094af940eac953ea6932810d8a52a5
7c5a9f5bc4c39fa1dcc975e8c60f82b6e6b3042e2795390337bdcb5849de34a9
3280a3952e43eb8df0de9d3a0e10e34c5893abdbcf968de0304db74d6e29a6d3
cca1f93453e016029bfaec78070b5705163bbb1d38dcd981433aae063adc7e32
0071a7f62979ccacfd0c7852a44cdd298b7934b818683e88162a2007c1510c9e
41613e68eb29155d296b13ce3acbe01ba389dd9159354b59b04436924dce518b
2532a0096f11184633c112835a8c61c46841944c54cc76ff8e2294ec81d4820b
2750a2b4933591a0f0d04935a0d4d96d0234db9b3d3728d93a44839f0d0174ce
3d94a8999bf1f3235035eea430da77a528353223802b121f05e0edfa6c6bd1c5
c6e2c88182d6d6391bcec0164e0c7cbe09328d39b0085b4a0908f46db201aa06
07bc4d11781aa7022cb93d0212d0606e81a68921660ad615950df1a1fcc353fe
2174870328a9cf075871e8abe06667ba6136ee2c9f1b74b80e0bf12e46a39475
ca5ed24a18d5d0a5269c123a05778abcd3de21026884bbf3f928f06e3df924ab
742936fa3f4783613df5a4080ac8d8ec20811c691fe391fc433142ba4148f998
a295552393b4878aca8664d126c611922823de491e615f024b5aeb1a314411f7
380b1ab3d614950df943f9c717f84782e51c287750b295567506761b849ee3b2
8e745c0d10d17e8680a245148bf133b7d99f56f08c5c29443a3afae0dcf15a6b
eb8225686b4c9a4efc8cbc28725cf2fa36d420f68372b1211380ca06c094c4fb
28e136020ebadd05105474cc804a4027495b8709b72270c2a11c140a1c640c48
9f9a447753568056226ecc5584d0d0f8d7766dadb37d6e100a757888f6ab0b64
cab69006becae2fe375134f186b19575c6980bcd6aa5843ebe0a98800fef22a6
c3b9acf0678bb9a3e40b1073e0ac1c1c804da2e67771ecdb60e592505a4cc932
acc6045805a983f13967b4274a49c508559e27b720fa4c083e3dc7089196a988
aa74281da5291de561ed5a0d24e541e1daf9a1275522a05d6d17f92a5564df86
ccc0a5a95ab846641b4d93daf2b4a17935382749b7232121222a5136ce4b6182
2d64df468898de31c9be1511910fe5993ce5190ce0606dbf8e63c16b88515395
1cc1cef4d756457796cf0d25b926c770abd5793b25e639fa4022f593e265ec4c
ed287e6e410029f171a98a1d7c9c8e1110019d9820f9ac188ace0026293b4b88
1dc14a9025e1583cb1ce922600a184e8230565498494c77f317a0e7e42311873
e35b648916d134441021ec31458ac1f1c3002525e2d3c0cda2837ce8ead828d4
523c3bbb62369fa3e2918eabab78b8251d8c398e96e67472c5b3ef0a8318e191
acb88739d55aeb211bf66c4e9ce000066e7720b594948f030f822dcc11866015
b1954d924bb4e364dc988e18b04d3180aa5c724d2899f7f9a8987ab3f6403ac2
85857c412307b94bbd0dbed6c8196c8d896930bc7c3bbfc202e9c07ac9b71641
21e9906cb4f3eda793a268ea0e93316bb611b1d5f6531530b9a813051b61364a
954c8825576a7b76bebde3c8f41b882422560b9cb247a02649bfa00374b407c1
e0b981b989e4995c30355384943b94905c8190c256f464079def9dad93ca0ebd
f621ebb776cf0d4baef61a508ba766bb023990700cf928edfe4d2cedbb524d40
311f4403153014fb651e89d9ac981dbbe9bf53dc77fbc675a0fd359d001cb043
d89abc89c607846b71bc78dab47140570e30774e4ba23b78a62cfb12ca74e40f
a5235fa8449042546a2c0b7e2269365ca9ca6d67fa6b1bdd75a6cf0d41be7641
02b7aba8fd123d5948268c8693e6e00aee943588f5a0a9e33c199d83cd752add
247885b608f30c7502c4961ce190119906c865591fa2148eacecb16d690b1082
68d2e70848118235e83389ed4c8e7e528e00f9c639378b45cc20236ed2827bb7
1401150f25a3f81bb56ea172a95b3ec74a37e9aa7aa56ebcab3ba3ff4fa91b0d
4addaa55ba35e56c9daa4903e3aaad81ebcf1c5df9392a5b93dcde5e768dc678
98a4e7a6b714f1900e259854d8c063646d29f73b78026196722ed4d97ab0b32d
00b1ade9f30349aa5d48dd0245b65b38e32102fa89f0b49b1026ee94cd517651
7a9eef02871afb7864c328c44df23a661b4a7e942cf5d8e832cf13e94c86ed71
0b3c36074d525a20b9b668c06092089465250ff24a0691db845f62bbda14d0b0
9c827761bb14b5bba7bc87f4e04da4bff97a8218d03f2e5789d6766f2820137b
b3670624e9b79afb78b8dd57d91241b7247fd25da4fbae9494ce1819e50ee3e5
a8fddf5b0fae1535a63539f2d0946336db7c3057e6a1cfb76d21e5f1a61c9202
d110c1808886092aa7b0eb7a548920820ba228e724096b934d313fc087bebd80
4baf2f801acb90747dc25ab63239d97b5705373be35fdb620fb17d7ed0a9f416
83b80bd4faaac1f9a0e4ef84d89978539c84157ce2b9c43198ae11e957011198
ce18f66e2e09d560d8045f74a638321446c8b812233be7e08edc941d449e8082
c824cee4248bed32744f8ac666b00cfe19430af37676d07cd1b820c905450c90
e5e41c9452000715633a3ef83d0685171960806be09dbb988e5ca515a0815d31
1bcf710588abbfcba0055344e020ebf2144fbc00b4ef49392b5b2f11a8cca956
01820316626b32746b3b6337ca995472fb36d464799b88457c6c3c460ffe288a
fbf268b272ca881a11e200b2310375926c0bfbcb45c5fdd77ce8ab0cb8f02e03
272f1889ce74a508922444637395a59f816da945b0be377d6ef0a9f44283bc5f
8bc039eb48c9d72905f8268426de14665b6d3061cf65dd3a3b7b14176e81c4a0
3a9330472024f72e853cf5a31cb39675151c61c990253a0a4c0e8fc450408198
63c8a1dd6b24852d5288004de3c669050cbad11d94930e0c3a02691bfc486d98
f9ee4ade42f8e1ddff00a0d21543d6500000d4ba8dae6b0d0000
#<end update:2020/02/28 13:27:55>
#<begin attach ID:cgEI306bxmh>
789c01b5054afa1b0000006367454933303662786d682e32303135303531322e
30322e7376670e2400008a05000001000000789cb55a5b6fdb36147e4e7e058b
61d00ac432af9218d829863daf1b30f4b9506dd916a2489924d7c97efd488aba
8474ab75a4900b688a3c873cfabec32f87d97c78792ac0d7ac6ef2aadc062884
01c8ca5db5cfcbe33638b7875512800f0fb79be6eb1188a165b30d4e6dfb7cbf
5e5f2e97f042c2aa3eae3184702d4604dd90fb97222f1faf0d449cf3b57a1a4c
9da2007c499beccfba3ae445b60d0ee7a250b6ee9be774273af6d9213d176d00
2ef9be3d6d0306c53a4f597e3cb5dd8787db9bdb9bcdbbd50a1ceb7c0f562bd1
b1794edb36ab4b90efb7c1e7cff2c160004de6cbb61efaa9cc5bb1c37393d57f
49cf7f949f9a2c00c2d8cda6ce762d78d90662f4abfafd0d53620bc536b89cf2
56cc5caba9cf55f12a369de96765558a474d5b578f626f5f8af3f069a56dc210
8b355579295783e01d04dd8fb42f4d6ed67ac1b2fded85c19fa74b939fba059c
ebe2979fba88bcff0f0b511e656c7745da34e01e9c9f8a55d7ee027d5421563d
c19b5861d42d0a937159c9245ed48cd7b89674f7682e06f5f16cb397ce3cd3e6
190b590064f72a2d77a7aade064ff97e5f088b87aa6c5787f4292fc4c0dfaa73
9d6735f8985df49326ff47b843e8b9ed57a25d3fa8ed6cd6d2a88af8b18fc2a1
aa20d251106f28ab0f02296f22a1467491d8e5f5aec8c0ee450761f72a011b80
fa0a587e70f33ab657f69e957b878dabd55fdbf89b0dafeaecef73d6b4e05057
4f1a196da583a3f9f77dd85fdf648f7a1cc310de89988510746da69aac6f6a5c
0a229c7ec881783fbf034c71c89204714819829861406148288c298a498c2027
08fc0a1094dff20b5d99c17818318e5982239c70182513a6c830e0598c600b23
28d11841d00b4850d48104c12550825d5082bda0844d50a2da2270b24d86768f
93ffe34677ecd3e694d6752a4244000113f7a31b2090e1c3e5601ae2907348f8
1d17c093d6a56d30762318cb57ea42026c429acf91c09a2146bd650137584066
59406c16f49912f9499548a74ab448ae242e2c205e5840262ce820c92690640b
b360e20620eac5e5609a0d70a78a06541907937ee64a039458a0360f03830657
661887416cb080ceb2805a2c609a04e2f4f34102ad958850269e95925abe0b09
a81712204502893fc0cca6b360301181c57113871489039b339af0982606482c
7960cf3040c26641c2ec5409354a08f6932aa186095b0426cc0526cc234cba64
05ad76bc74ae1cdd68970479ca955227dc611e8710f2481a97a681920943b713
076c7580e3ef73c05607f6148304d12c09229b047daa247e5225d2b9922e932b
231712441e4910291432b3ed8cc859128c6e7a97912fc12065c21da13d0b98b2
0d944a18badde482250e089a6181290eec190609e25912c4767921d624a09eea
0b5c93e08a686edab46e1d5910bbb020f6289be35136d3498d81ba17192c8540
4d5110997f60d9534cb851032bc92c56120b2b4a2c28acf8293310da27cc65b0
92b86025f158688827f88063698a2e5e6818dd009537dd5d0ea6b5341016458e
94d6a56d307413a92bdc7860a9046aea028b07d61462aa0f93077c9607dce641
9f33899f9c4978af9e97e10177e101f758968d47ec133682922c5d6a98b8014a
33b8bb1c4cd31ef04cf12052b6c1d84d5d7960eb0432771e5c9932731e88a933
3c40d0e2011d6a0dc40b0f687f3123ed7817d0083ad040c4c7070df8289a29b3
daeee5061b18f605c45ba8d842c19e624065f6160bd9b758b42f38a8ab0a0f50
d105077553e11f2a2e1759c8cf45161f8b0c145a6db270c69cb8d12e55b9d647
c6a45d69a1bf9190e6a57140ba4a44dfef5877b389605d421839d3520af61483
08b35775c8beaa237dce447e7226d139132d93335deeea909fbb3a3e56650933
dbcea89c950ea39bde25f5251d547561b89390e6a571a024c3d8ef261eec13c1
be863088609f08d614b5a6db8dfcef9d87db7f01a1ea58230e240000c7bd9c68
b5050000
#<end update:2020/02/28 13:27:55>
#<begin attach ID:cgEI306bxmh>
789c01b3054cfa1b0000006367454933303662786d682e32303135303531322e
30332e737667d92300008805000001000000789cb59a6d6fdb3610c75f279f82
c330680362998f9218d82986bd5e3760e8eb42b1655ba82265925c27fbf42329
ea21a45b2d2385a6054d8977d4f9f73f5d8fd97c78792ac0d7ac6ef2aadc0628
8401c8ca5db5cfcbe33638b7875512800f0fb79be6eb11885bcb661b9cdaf6f9
7ebdbe5c2ee18584557d5c6308e15adc1174b7dcbf1479f9e5da8d8873be5657
83a9531480c7b4c9feacab435e64dbe0702e0a65ebbe794e7762629f1dd273d1
06e092efdbd3366050ecf394e5c753db7d78b8bdb9bdd9fcb05a81639defc16a
252636cf69db667509f2fd36f8fc595e180ca0c97a39d6b77e2af3563ce1b9c9
eabfa4e73fca4f4d160061ec665367bb16bc6c0371f7abfaf71ba6c42314dbe0
72ca5bb172ad963e57c5ab78e84c5f2bab525c6adabafa229eedb1380f9f56da
260cb1d8539597723708de41d0fd95f6a5c9cd5a6f588ebfbd31f8d3746bf253
b781735dfcfc6317915ffec346944719db5d91360db807e7a762d58dbb401f55
88d54cf0265618759bc264dc5632891735e3f5bdbd903e9c6df6d25967da3a63
210b809c5ea5e5ee54d5dbe029dfef0b61e25095edea903ee585b8f1b7ea5ce7
590d3e66177da5c9ff11de107a6efb8d3c16e94ed0f9a09e66b3964655c08f7d
100e5505910e82f882b2fa2040791308754717885d5eef8a0cec5e740c76af92
d700d4575879dfb3ebc85e79f4acdc3b3cb7dafcb5e77ef3bcab3afbfb9c352d
38d4d593e6a2ad746cb4fade0b3d1991c7310ce19d8858084137666ac8faa186
52a8e0f41efbe2cbf91d608a4396248843ca10c40c030a4342614c514c620439
41e05780a0fc917fd095158c8711e3982538c20987513251890c029e05045b80
a0440382a00f4250d41182e01288601744b00f44d804113516619363328c7b48
fe87173db14f9b535ad7a9081001044cbc8f5e80c0c283c7c132c421e790f03b
2ea093c6a569304e2318cbefd3817f6cd2cce7f8b75688bbde0a801b0220b302
20b600fa0c89bca448a453245a2447121701101f022013017438b2098e6c5901
4cbc00447d781c2cb38174aa1440956d3099678e0a4089c5b3f90a3014706585
f10a880d01d05901504b004cf32f5e791ef8d7d51111b588e7da48edde857fea
837fa4f897ec01660e5d6b0413072cde3171489178477346131ed3c420c4aa08
ec1506216c961066a748a81121d84b8a849a11b60823cc8511e68f912e4b416b
1c2f9c23472fda23417e72a42c0dee308f430879246d4bcb405506c3b40bfe76
4180e3efe36f1704f61283ff6896ffc8e6bf4f91c44b8a443a47d2657264e4c2
7fe48fff4811c8ccb12b8db3fc8f5e7a8f91a71a4156067784f60260ca345085
c130ed542158f50041330230eb017b85c17f3ccb7f6c371162cd3ff5d345e09a
ff2b2572d3a675eb2880d84500b1bf22391e8b643ae92450e75682551450b30e
88ccff4bd94b4cd6a8014a320b4a6281a2ea03058a976602a17da25c0694c405
94c45f3b219ec001c7ee135dba9d307a012a5f3a7b1c2ceb6a401814b9511a97
a6c1304d6429e12401ab30a066296049c05a42cc82c394009f9500b725d0e74a
e2255712ded7cacb4880bb4880fb6bbac623f6848d4092851b0a132f409509ce
1e07cbb4679d290944ca3418a7a9a304ecd280ccbd05ae2c99790b88a5331240
d092001d3a0ac48704687fe022cd782f9711745080088f0705f0b144a6cc1a3b
37156c2aec9385b79cd8b581bdc4e064f66c0ad96753b46f2ba83308774e745b
411d41f8e7c4e5780a79399ee2632b81426b4c96cd94132fdaa36ac67ac894b4
6b20f4470dd2bab40d48d76fe8e7dd1a6bb606acd30523575ac581bdc4d0c0ec
f11bb28fdf489f2b91975c4974ae44cbe44a97f337e4e5fc8d8f3d57c2ccb12b
91b3d5c2e8a5f7483d550baa87301c3648ebd2365055c238ef542fd8ef01fb7c
c1d080fd1eb096a82ddd6ee42fe23cdcfe0ba85246f4d9230000889cb58bb305
0000
#<end update:2020/02/28 13:27:55>
#<begin attach ID:cgEI306bxmh>
789c011706e8f91b0000006367454933303662786d682e32303135303531322e
30342e7376676d250000ec05000001000000789cb55a6d6fdb3610fedcfc0a0e
c3a00d8865be1cf512d829867d5e3760e8e7c2b5655ba82265925ca7fbf52325
d29249376a4baa6de23345def1cecf733c1fbb7afbf254a0cf59dde455b90e48
88039495db6a97978775706af78b24406f1fef56cde7031253cb661d1cdbf6f9
61b93c9fcfe19985557d58528cf152cc08fa290f2f455e7eba3591a469baec9e
0663a324401f374df6775dedf3225b07fb535174ba1e9ae7cd560cecb2fde654
b4013ae7bbf6b80e222cf679ccf2c3b1eddf3cdebdb97bb3fa69b140873adfa1
c5420cac9e376d9bd525ca77ebe0c307f9e0a2808cd64b594d7d5fe6adf0f0d4
64f53fd2f25fe5fb260b9050f6665567db16bdac0331fb4bf7fb2baa840bc53a
381ff356ac5c764b9fabe28b703a53cfcaaa148f9ab6ae3e09df3e16a7cbbb85
d289432af654e5a5dc0dc1f718f53f52bf54b95aaa0d4bf9eb1bc3bf8cb726df
f51b38d5c5af3ff711f9ed1b36d25994b13d3d150b11964f9b43a642ac6df3de
78145facf3f14704093302331815fa4cab44d9d4da210d53f927ea8cf0c1c598
87543ee0233fe31fb1d4662f9da5240e23100aa17747bcc8278b4db93d56f53a
78ca77bb42e8dc5765bbd86f9ef242ccfaa33ad57956a377d9593d69f2ff8441
429e5bbd1765fc51456fb5946a7558b7c5a669d04317de5eee837be890db8d04
5710a4511f6e9a0ef14ec6e13661f82d311882c070af9e511a72df11e8dc19fc
5f1e7414f65585898a82007e56ef0501af22d1cde823b1cdeb6d91a1ad0c86f4
7cfb455a13d1a86f90f0fbbcd7c12537bccfca9d83ebddfe6fb97ee5f2a2cefe
3d654d8bf675f5a4b0d1562a3c2ab1bd9e4f6e7ba9d309a338c4f7023a2146bd
2c0227657c911529448e397e9709f119fd89682ae2962424c5c009a69c2282e3
90018e81c42c26386504fd2e06e53ff997dc5a42a330e229e5098d6892e2281d
a521190a3a89146a238569a4447e90421452e23990425d9042bd20058f90d2a3
2392b2609c9635527ec48c1ad86d9ae3a6ae3732e1208606f323338882179317
d59c8a1305b3f49ef034e452bd548e46e331c8cfd48507b1056a6ef0c0a481bd
22bea6416cb0804db280592c203a5f523ff992e8c368967cc95c58c07cb0a087
61cf022593019294cccd82c10c12c8f061f2a21a6bb4532c5920d44be568344e
9d59c04c4c53f334305960afa0afb300265900360bb06201637e58a06ba628f1
5d31750eb8d000bcd02092d863b8c321b664e7b24140dba81198001f1091ae52
0e491a43620045cc326a047b8981143e89146e23856ba4247e90a2be2b019905
29dc0529dc2352fa8cc52d99cd9c304766b4c9d853c2242052d33d8b20c4388d
a476a9bb3bd78761271610306880184cb0805fb320b657182488264910d9a5b3
4e97e0275d52952e619e7419b99020f24802da550ad8925d113959350c669449
a0be4820bfacdd03512410daa5eeee581f86dd48609e058825af9380628b04e6
0a8304f12409628b04e2db724f02eea77266d09380dfa89c9b7653b78e2c885d
5810fbab9dfb5cdccb7cd46be0ce45832c41ae71c1cd5ad140ca8d15663d0a06
549249a8243654629d2ffdb41a58aaf2e58d56830fa8242e5049fc351b7aa8f4
3244438b0ae66e368ccc2016793179510d719713ef41f614a476a91b0dc3b205
e146036a821a8cc64114993cb09798dd099307e9240f528b07a05326f84999a0
5226cc943253171ea4fedab38a073d28c9089473b71b466610102f262faa530d
78d95590daa56e340c63671e4416a8cd3eb2c5037bc9c47920964ef080608b07
5cd7cfdd958d3b0fb8aa9f691ccf503f13ec4003111f1f3480a166e6d8929d2b
076e360f2271eaa446e3e91a2a6096a5602f31a032799f45ecfb2cd0fd060a7e
5226d7fdd959a0e272a145fc5c68c1d063006eca5de376ce8c3932a34d724f19
13bac6028de4f53706a95dea46d0b521f4b0130d805b34102fafd3c06c5180bd
c4a0c1e4651db12feb40674ce2276302d69775b3d0c0e5b68ef8b9ad83a1290b
d8949d31394983c18c36897dd1a06b2d5092f6b71252bd542e2a073a1e772382
7d1e50789d08cc3e0fac25dd9eee56f23f473ddefd0f3101c3c96d250000ba9d
e17d17060000
#<end update:2020/02/28 13:27:55>
#<begin attach ID:cgEI306bxmh>
789c01c3053cfa1b0000006367454933303662786d682e32303135303531322e
30352e737667831e00009805000001000000789cbd59db6ee336107dde7c058b
a2500bc4348777067616459f7b018a7d5e7863d916a248812cafd37e7d47175f
34f416dbda2be402592287c3a3333367e8d9fbb7979c7d4eab6d5616f304b848
585a3c95cbac58cf935dbd9af884bd7fbc9b6d3faf190e2db6f36453d7af0fd3
e97ebfe77bc5cb6a3d954288298e48ba210f6f79563c5f1a08218469fb34395f
1412f669b14dffa8ca5596a7f364b5cbf3d6d6c3f675f1843796e96ab1cbeb84
edb365bd992756a09f9b345b6feaeec3e3ddbbbb77b3ef2613b6aeb2259b4cf0
c6ec7551d76955b06c394f3e7e6c1e1c0dc0d9fce6ba1ffaa1c86adce16e9b56
7f362bff5e7cd8a6094363ef6655fa54b3b77982a3ff6aff7fc1146e219f27fb
4d56e3cc693bf5b5ccffc24da7fdb3a22cf0d1b6aeca67dcdba77c77fc34e96d
0a2ed1a7322b1a6f40dc0bd6fd35f61b93b369ef7073fd65c7c40fe7ae359f3a
077655fee3f71d223f7d8523ed8a0db6bb977c82b03c2fd6690ff1616dd32d6e
dd717573fe8ab4570498d3a2688fae0afd9ac4ba39ed4d9f83eefe8fed3a7d6b
6dbbde739db0e6d664513c6dca6a9ebc64cb658ec65665514f568b972cc751bf
94bb2a4b2bf65bbaef9f6cb3bf712580d7fae044bfeae3aa2c67d3c6e401bd3a
ddd6eca105f1295f6cb73d84eb969fcdc364c033693bcf643881eacf31a55cfb
9a6d9ff6ad44675e49c9cdadf7deeeefb4fbe9fa9c41c8eab45a61744db6e5d3
735a1fa2f5df83e4f29e0e3182bbe1e25e29c705ebae8d70fc102d182c9bff64
165fc8af4c06c195164e83530e4450cc80e61ac08b60b40f4e7bf63303d1fc36
3f802b076e4d90c64b2b7d10d6c65348387d1b300c57c6077f0044070ece5885
a0086ea40957e1a2347067156e49486184068dbb141cbc018bc69d07650d45c6
0aaea516167df34a7bc30c3a399c32063200dc6877c02518248af6cdbd36435d
030a258b663a48ee82920ea4700164d00414dd5014075bdc3f786b0c432f38a0
9966b01152aa313091a7d0d14a237384f4f7da407775152a5a2104164048acfc
da6230306d15320194b152390c18ca14ad2d79ae91be432363a08248588d6b1e
90b1ba63c9bd06796562d1d60edeb264181a840904146786546ab933e4db18a0
e8962ad271072ed896ae4d3ab957cd8e9a0c731d2eded32ca29c237983001354
34c578929ec643065aaa84e3f575700447aa8d9296d6170a473485f2643c3084
e5d24ba14f3491d6712fb57257e212bd7389f121958520820b3a181f0113534b
1acb8d3341d9a0a1c92aa340734c2b28eb066905d3c0b57ca14942334908e3a2
f821a94831891a26e05825c12350da8ca258da1ad44372ac41e0258215ae644b
544fc06b248bc7f8f042181447404189ab1638144ece5be4ae95360843dba26f
a9563a5c3ab50246726d0c5c094aa43cc0088e17c13b611072e7245570b1c001
1482126d48ef8214387394083a8adb1e96a3b80585cac26971a5baa54ad53190
9e7bc02045eb18155645ea96286289531499320a34a728eaae415e5b842eb434
00811bcc0d41a04814d2481a3f71e3144f19010e4c69835c2b1b8a63f5093762
0a62428b4efcda29342a90a273815d636083f5501b754046dc2eb5c80b84a179
825667c04e695073e274340e28a7f8c197d3d69edb142140e1434a0ead283a02
c5285272a2cae5ed18a8d861c2c552dad1e40692a509c4c16bf691fed0b46b06
ec95066c0a91cc190796a1c805b05d4eb991ca052cfe2495c48a954283ded039
91321e0f9bb61b421975936e08f338ad3a516f13c1114f893aa8f1e038b6cd27
aadca66f8e5ebb8c9a608a0c25978c3aed31bae6536ae90e594ea9e5fa439628
4dd80b672614169a8e4c7c32335a1dea2139d4a1db1cc8d1a28255273e5ea3a8
90e2853a273ac41b51b274b87492e53667b7547e681d1dc4d26e285239f169ef
a80ab707e5a8706f72d01f89557be1d49e02138be2f8cb81d6abbb59f395f1e3
dd3fd0dc4e8d831e000010fdb665c3050000
#<end update:2020/02/28 13:27:55>
#<begin attach ID:cgEI306bxmh>
789c01fd0302fc160000006367454933303662786d682e73616d706c652e7376
6760110000d703000001000000789cbd58db8edb36107d5e7f0583a26003ac64
52247559580e8a3e372d50e4399065da1656961c8a8a9d7e7d87127d91651b9b
442a76d7a039e4cc9933c34362671f0edb1c7d95aacaca22c6d42518c9222d97
59b18e71ad574e88d187f964567d5d23585a5431de68bd7b994ef7fbbdbb676e
a9d6538f10328515b85df272c8b3e2f5d6421a45d1b4b1e2cba014a34552c9bf
55b9ca7219e3559de78daf976a97a430b194aba4ce3546fb6ca93731f609e0dc
c86cbdd13186e8783e799a3ccdde390e5aab6c891c072666bb446ba90a942d63
fcf9b3319c1cd08bfd666c977e2a320d19d69554ff98c87f159f2a8911387b9a
29996a748831acfed67cde710529e431de6f320d3ba7cdd65d997f83a4a5b515
6501a64aabf215725be4f5e99b637d12d7034c65561834943c13d4fe19ffc6e5
6c6a019bf17d60e4d74b68e65b0ba056f96fbfb48cbc7f039026a2e156cb83b6
dc36c3439b3144f5046eac4e52a49b52c5b8d289827aadca423bab649be5b0e8
8fb2569954e8a3dc5b4b95fd0b81a9bfd347688b3c495fad756fa12fca1c2a37
afcaf455ead9d4c43923aa34452fa8dee64e9a275565e1ad9ba23756dca99edf
e215e2445378513f7e5dbf33370dac2e39f458df3319adf790b8d77c6cb3e532
976f2584f6089937b99c939fae2f29f01e52e07529a09603cac818247896042a
c4382c78b7585895a5e5000e8d542b38bc1d1ec0deb290662acd254a8f485340
10004e75e3f4fe60e2c41f3a6d407f2b69932e14bc4cb3448394a2952ab7f648
e8b2a1c40ae163fdb99ddc497e3871c973205c8268741c5e88428773a73da483
c4f54d302a88094c4e631b19f46ff35d6ea107fe4491e78a308434b8a0c4131e
32c9314e024e0316501231f43b0433bfe687f636504445e4fa22f244e8f95e18
91c0023a7641649b20a4a336c11d3966e4ffd36325bfd40a9aadafc8eca11cb1
ae1c313aa6243331ae24b37b92cc1f72c0bb1c083aaa240b31b224f35b2c2c12
f55092c1de93641e0c2ac98dbb712419d0df4afa4b5d1f1e666d16f4d3f66cda
d4546a80bcbdd154c8e0ffaebb8899bbc8f4c20077023b5d4088fb77eea29b20
b801d1d4660014705a4f371367d73753ff4e34420918ae28190a0d33b19f23c3
493b6c81b1a07765fe48143bb14caa4da25402cdc2104317d1830b2ee82021cf
c50e5c42221f3c06ae30de8d6f749ee69e51b39f780eb0207039a52189040fa3
8087fddbfdea3d7063c7f50be2ed6dc0073c19a22dbde946d48e9b53223cd13d
25a334c1390ae2211920e0d13187f757048faf67bfe980d07846a7c9f067eb2f
6870f51ef445b798f4aafefd1d21ef348c1f35882633f3ff90f9e43f3cd72c60
601100004d0be32efd030000
#<end update:2020/02/28 13:27:55>
#<begin attach ID:crW8tVg2EpC>
789c015c02a3fd1600000063725738745667324570432e73616d706c652e7376
67360600003602000001000000789cb554db8e9b30107d0e5fe1aaeaba950a18
12924d0ad94fe84ad53eafbc60c08a63236396a45fdf31972c1b255595b60f06
33333e73e60ce3f8e1b017e895e99a2b99e0c023183199aa8ccb22c18dc9dd7b
8c1eb64e5cbf160842659de0d2986ae3fb6ddb7aeddc53baf04342880f11b80f
d91c0497bb4b81c17abdf63b2f9e260d307aa1357bd42ae78225386f84e8b036
75455330642ca78d3018b53c336582170478968c17a5493064c75b67e6cce20f
ae8b0acd33e4ba60882b6a0cd312f12cc1cfcfd671020826e7ed7e087d92dc40
854dcdf40f9bf9bb7caa194600368b354b0d3a2418a28fddf30a14942012dc96
dcc049bf3b5a297184a2d9e0934a82ab365aeda0b617d19cbedc019378217052
5c5a3601f94a50bf2cbe858cfd81b0dd5f27463e4da9d9af9e40a3c5e78fbd22
5ffe804897d16a4babaa461bd4ec850beaec68c106a58b4e63ebc6efb45a441d
a755f4466a2ad7323a93eb8d0ac09f73094639cfd09764f25f4c0abe0ddcb043
071e905ecfee6d8d2e9569a97482f73ccb04e0e54a1ab7e63f0132082b33661b
e0b777c27cb30b54113ca506fef5bb024cb062df025e4e1784b7a54b856bf53f
41c77e31b6cdceeef5aed9b97d276bb824e75dbbff774d1bd1ff4fd7e67fdb35
901104b9a4a2d52f631593195c9047946bb5ef07c2a84ee1e1cef9fda85fae61
3064b42ea9d614f8cfd11c4d6e8028f2ecf0138f20d06fdc0f937953ca113a5c
ac3c42d6cb0020575e64e1c74427cf3af4a22e9713db5b7eebfc02ff2edf7236
060000e7801cb55c020000
#<end update:2020/02/21 09:43:33>
#<begin attach ID:cvVLeQtckHr>
789c01a70358fc140000006376564c655174636b48722e6d61696e2e7376678f
0e00008303000001000000789cbd574d6fdb38103dc7bf828bed562962d124f5
9db5d2c3de770b143d178c445944684920e938d95fbf43498e0d3b1182ad5a18
72247234efbd99e178b2fefcb455e8516823db26f728261e124dd196b2d9e4de
ce567eeaa1cf778bb579dc20306d4ceed5d676b7abd57ebfc7fb00b77ab36284
9015587883c9ed9392cdc36b8634cbb255bfeb9d82520fdd7323bee8b6924ae4
5eb553aaf7756b3a5ec042292abe53d6437b59da3af762023c6b2137b5cdbd00
1eee16578babf56fbe8f365a96c8f76161dd716b856e902c73effb77b7f1e280
9ebcefee47d36f8db4a0706784feea90ff69be19e1217076b5d6a2b0e829f7c0
fab9ff7ec3154850b9b7afa5853757fdab5dab9e41b418f79ab6812d6375fb00
daeed5eee5c91f7d12cc80532b1bc786922541c3e5fc3b97ebd548d8ddbf4d8c
fc714acd3d0d04765a5dff3e44e4d33b88f4882eb6bbadf20bc58d19037c4066
214ea21e3d39c2b38ce0e8881f9e87e608cb8b87735c3aa25af1d423d084e041
5f1639af6edde74d51b73af7b6b22c1578acdac6fa15df4a05767fb53b2d8546
7f8bfdb863e4bf004769670f4c46e83bc5ef85f26553b5eb95f3fcba364adf14
17ff903896bd40b0f84c9bb15cdb1f90e66ffd866fc551d72ba041363f68d71a
69e1784f02476c7e606731091a9f97cf0ca06d551961278be7ed93315bf1a473
17cfcdf1605cbb2a5a1eb2fa6932c2d9dcf57453d4a278b82e78f3c8cdb29485
9d24c0e8dc7575536abef7ef8591a5f04dcd3b716dea6eb9d7902f3dcd85cd5e
6e1b617dd516dc2562c8cd0983a9361d06018e465ed1c9ef44c0701a66593a57
b38ec8a159273fa1590f55e097dcf277ca8ec9d8e78e9a5332a3d8b199cdaf75
d8b5cf6e2692962b5980febefcdea91cfa0f63a1cb6c7f2c4e721e511c017536
7fce0170fea47f54f64f77c14424740593d9c70d2cc07579f64e98043fa1fc60
ccf587737f99835274a229617e7e46956eb7e843886c8b3e048779747a0c7c3d
cae342c921ef5a73601ba0001da7c3804698454b4ae1a726850f1a4ff9328d31
250109c644fd2ff00348c8184e6812b06516e3306261780183429a619a066093
529c26619c9d4d8e17d1897e5d7422a809048d0093e17e96a0840926248bc163
8223e7fd80f3b211325780d351887f5d1452f84319855cf58d215a324a710cc9
a3b3c4836418f21f80d708a7511ac797385025010ee2048c08c52c2543912cd6
eedfc7bbc57f16ef77218f0e00008cd6ce9aa7030000
#<end update:2020/02/21 11:43:40>
#<begin attach ID:doEay0smoGv>
789c01c5063af914000000646f45617930736d6f47762e6d61696e2e73766717
230000a106000001000000789cbd9a596fdb4610c79fe34fb14551b005c4d5de
8721b90f7dee0114790e18999688d0a44051919d4fdfd983ba4206324c56460c
8abb1aeefcf4dfd9997116bfbf3c97e86bdeec8aba5a26149304e5d5aa7e2caa
f532d9b74fa949d0ef0f778bddd73582a9d56e996cda767b3f9f1f0e077ce0b8
6ed673460899c38c244cb97f298bea4bdf446aad9dfbd1e4fca134419fb35dfe
4f533f1565be4c9ef665e96dddefb6d90a6e3ce64fd9be6c1374281edbcd3251
04d6b9c98bf5a65d264292e4e1eec3dd87c54f698ad64df188d2146e2cb659db
e64d858ac765f2e9931b381aa0679f77d771eac7aa68c1c3fd2e6ffe754ffebb
fab8cb1304c63e2c9a7cd5a2976502b35ffdef0153e042b94c0e9ba2854fcefd
47b775f90a4ee771acaa2b18dab54dfd057cfb5cee8fefd2689360066baa8bca
ad86921941e19fb3ef4c2ee671c1ee7a7861e497f3a5b9776101fba6fcf5e740
e4b71b16e29fe8d8e6555bb4afe81eed9fcb745566bb5d24bdf68cc37072418b
4985adf42be3a7a51985094841abb36ff11add6959d9eacbf5ba6887b6cd5ffc
73382138009012c3f3dcfd34ab569bba5926cfc5e36309269feaaa4d9fb2e7a2
84797fd4fba6c81bf4577e8823bbe21b3c8fd26ddb2d253e3b8cb6af4e9b459b
95c50a3411bc5dccdd93fc57b2ee3035d92175fb6588531cbf044509c34c0b6b
85f7429f60598941e2848ec68aca8e951d9fd543f4ae0fcc0a400c4181b14b20
82926b12868cc6c0058da908802b7ddebb28b0aeab410271fc4a16ec4216944d
a90bdde9828a09b044fffad0f8150c7171839750b825dfd118531b7c420ace5a
1f027f3e0c217083577195c4354eb33d9888e6a7d81fce9bdef0505715b85737
c341a29b71152a18b60cb602f76b6667aaa054600abbc76d9fb176c9f1a46153
e8e3e8626f08c9dacd70fc80c1ab7dc226150957138ac479d387206b56830460
ec4a1871856c9a4021c984420067fafcdf6db2ed70a0f0a35791625a067c4206
bd799777b18f8c23b2ceabbc8189dfb2166a0bf4d4d4cfc774acadbb04369607
3fcecafb9d3f26e55663cde44c6b389e39e72824ba3345b130c487a279ac4136
6fc30bdfe29fd11a3a5a43254a21946965ac312865583108d1c2c07d8e9952da
288328a40a9208a9d1b7b3a47d088b4bc6464502091b26336d31772f85b8e098
8c462458bb20422996843164818621929d606809b8220d75138d2e391b592406
1b78d919642a9820a6a1d685d72c245aef1248348534e9b461a4561a312c61c7
1b0b77419a54692905826f4630c188b88985dfdae34a8344c70307ce3c173b02
87ce54e0a0b1549650a2dd5eb0200ecb2f38a46f03e1fd1d150413064b4d059f
f9641b310b7a6646aa3124d1d9ea3401cc0d3580c0626b0d5371cf28c9059348
c04dc119bf2d5af8358d8a82cbcef580829380660c51445311047ce79a4a6695
42d479cda4516728384a230b79138a70028fcbc2e59433163687bf1e0382b316
082888c916ca484439965628aa9dff708a40d080430408918b17d55a710947ca
4d07c9316d07261ec118a1130ec08e080b7488c02017cddeb94b8833184dc5d0
69b980121b2e31b75a5a7f1f6628d826523a9d580eaab909864b4f01835fdc18
81530561480c726606890b14ef2321ce4838391090031196ba2b09db02b6c311
83163e9e380ed45e805815cdaa1c4e48c3f06546aa8f2d41662e7a82d4696fbc
9ea03f6c62eb718a4acdbbd69789e665596c77c350e2f855adc25da707ceacef
c8b8460fd4b066bc068799144c74af8fccbaa9f7db412e7ef4aaff15bb809c4f
52bdd0d806e4ff57d7d8bbd847a678ced6c38af1a3fdfdd189c88809c93c7877
fa1b1c4db66eb2ed8fba1c71c6954e7c0f08764958f4d9eef12da051fba4ecd8
0112536c9fa387bd7f5b007fb36afd83887b9c71d50b0a4db2413c6cbc0e9998
96cfd1c1b73401e23105477348dfc6485194af6fe1f8843c12b170524b1ecadf
7726290a8ee6ce5497a410aa0475490aa402569990a4106239b12e97234c5b76
5bb1db9d4f63d288c717e0804559a8b7a0623f2722de5bfe9f888890ad18cb38
f7d90aa7cc4a7bce237d1b90702c8d2a0edf18829f19c4675ffa33ecdeaa9917
ca7b8bff68cc0b2596ff944ac391dbe41a6085ba5758c8e3218f0346be5f745b
81138ea251c5c13aef030dce021d31068da3b148c395fbdc82ebaedaa1927223
4f30b8f44d004fe3b626c0e9481a93080381ca19375e1b46c3f518ba70868e9a
80071802653f32982a132401ae6b474423058ab15008de06e174ec8c09817bc7
0304ee818c2107672842a0d83028ecad7485bf3186b00b06e93584bb85fb6f2c
0f77ff01fd9d51cb1723000038093a79c5060000
#<end update:2020/02/21 11:37:24>
#<begin attach ID:dw2vob7TtnI>
789c01980167fe1b000000647732766f623754746e492e32303135303331322e
30312e737667840300006d01000001000000789cad93d16e82301486afe529ba
2ccbd99201ad8b711aaa8fb0258bd706a5406357485b44df7e2d650ecd4cbcf0
02687bcef9bfff9c946479f81668cf94e695a440220c88c96d95715950684c1e
be035a2e8244ef0b6453a5a6501a53cfe3b86ddba87d8b2a55c4638c716c33c0
a7cc0f82cbdd7f8964369bc55d1486500268936af6a9aa9c0b46216f84e8b4e6
ba4eb7f6206379da0803a8e59929295820a092f1a2347eb30846c12879084354
289ea130b407499d1ac394443ca3b05ebbc049800ceaddba4f5d496e6c878d66
eacb913fe44a3340566c9428b635e840c1661fbbf71529db82a0d096dcd8cab8
2bad2b71b44db33e262b6943daa86a677bdb88e6b40b7b4d1c8dada78a4be786
e0578cfce3f49d6412f786ddfaba31fc34b4e676de40a3c4f3a39fc8cb0d463a
a29bad23a5b210ac1ff02f79e2d19333f619fa622c7fc874bbbb64921b88534f
9ce2c19518de887bf308f1c0ee7b276290b87f6611fc0095e80f928403000025
84bfe798010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01c4013bfe1b000000647732766f623754746e492e32303135303331322e
30322e737667600400009901000001000000789cadd4dd6e82301400e06b798a
2ecbd22d19509c3f60401f614b16af0d4a85c6ae25a588befd5a8a58cd4c4ce6
0584b6a7e73b2d947871f8a1608f4545384b60e0210830dbf08cb03c81b5dcba
21048bb91357fb1ca8505625b090b29cf97ed3345ef3e17191fb438490af22a0
09991d2861bbbf0283288afc7614da6800c13aadf097e05b427102b735a56dae
5955a61bd591e16d5a530941433259245081101498e485348db9337006f193eb
825c900cb8aeea88cb544a2c18205902572b3dd02708acf9fab90b5d3222d50a
eb0a8b6f2d7fb265852150c906b1c01b090e0954d1c7f67e23955a024d605310
a966faedd492d3a35a34eec618676aa89282efd4dad6b4ee5b6e971379435513
274c5713a07704cca5f3eb94b1df15ac9f6f17865eecd274cb14500bfafa6c76
e4ed8e425a51efad96529653dc6df0491e1b7a7c615fd02759e0cc06d3cdee5a
0ceef026c69b9cbdd0e2c25e3b624a79f300706ac0e9199c58e0a4077381317b
80171a2f3c7b23cb1bf59efdcafec145868b9075c0ecf375f551dfe139b1fe1f
cc9d5fbc54509e600400001f5dcf6dc4010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01b70148fe1b000000647732766f623754746e492e32303135303331322e
30332e737667110300008c01000001000000789c8d926d6ba43010c75faf9f22
c751e60ecea73d0ab78bb11fe10aa5af8bd5a861b38924e3eaf6d377a269bb2d
2d14d43cccccfff79fc1e2663e2a7612d649a339e449064ce8da3452771c466c
e37fc06ecaa870a78e51aa761c7ac4619fa6d33425d3dfc4d82edd6659965206
ac29fb59497df82c31dfed76e912854b680eecb172e2d69a562ac1a11d955ab4
f66ea86aba68445b8d0a814db2c19e030181f542763dae8732da449be2471cb3
ceca86c5315d14438528ac66b2e1f0f0e003af02f945bddf87d47b2d913a1c9d
b0779efc5fdf3b018cc436851535b29903659f97ef1752d482e230f512a9325d
4a07a3ced4b408316d34851c5a73a0de1ed5f87a8a8366966cc99391dabbc9b3
3f195b5fafef258b3418f6fbaf8d655797d6fc6935305af5ebe73a91dfdf30b2
10fd6c3da9d29d1261c02fe4eb157dfd8efd0efd612c6fc8aa3e7c64e6174414
3306d8b29d83da39acfe32ae74dd1bcbe1289b46917a6b34c64e3e1120df0ef8
c20eb0127be9183dbe362952bf945154f81fb88c9e015835eed111030000fd4e
d02bb7010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01c80137fe1b000000647732766f623754746e492e32303135303331322e
30342e737667be0300009d01000001000000789c9d93614bc33010863fafbf22
22720ab64d2713379af91314c4cf12dbb40d8b4949523bfdf55eda6e4e51917d
68c8e5eedee7bd83e6b7db17455e8575d26806594281085d9852ea9a41e7abf8
06c8ed3acadd6b4db0543b068df7ed2a4dfbbe4ffaabc4d83a9d534a53ac80b1
64b555526f7e2acc96cb653a64e1109a0179e64edc5b53492518549d5283d6ca
b5bcc0875254bc531e482f4bdf3040209046c8baf163b08e66d12c3f8963525b
599238c687bce5de0bab892c193c3d85c45e203be80ff7a9f4514b8f13764ed8
8740bed38f4e0041b1596e45e1c9960156bf0de72f52388262d037d263673ab4
b646bde1d062ca69a331e5bc351b9ced5975fb289e346932474f46eae026a397
948c5fd00f92793a190ef7df8dd1b3436b211a0d74569d9f8e1bb9f887918118
761b485cd74a4c0bde9117237af185fd05fd6d2d9f485e6cbe33b30362cb2daf
2d6f9b89e8c576200e92885ca2bdf016735d34c632789165a9905019ed6327df
1192cd5bbfe34fc0b56fa4cbd3d0f9936a46af8f93fd53744e8f13ddef20d989
4779f8dbd6d107a68d25c4be030000cd69d39dc8010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01980167fe1b000000647732766f623754746e492e32303135303331322e
30352e737667570300006d01000001000000789cad93516b833010c79feba7c8
18e336981aed1e6c31ed47d860f4b9d81835344b24c6da7efb259a6da5ac50c6
1e0cb9dcddfff7bf03f3f5f143a003d31d5792401261404c5255725913e84d15
6680d6ab20ef0e35b2a5b223d018d32ee37818866898474ad7718a318e6d054c
25cba3e072ff5b61b2582ce2310be7d004d0aee8d89b5615178c40d50b316a2d
bbb6a0f6a16455d10b0368e0a569085820a086f1ba3153b00a66c12cbf0b4354
6b5ea230b40f795b18c3b444bc24b0ddbac4b74072d6efeebe7423b9b113f61d
d3ef8efc2a371d0364c566b966d4a023015b7d1acf2b527604416068b8b19df1
d8da2a71b243339f934ada5467b4dadbd976a2ff8e42af89a3d47a525c3a3709
7ec668fa9cbe93cc636fd8ddaf1bc30fe7d65c3419e8b578bc9f36f274839191
e8764bb9a682f9edfa801e476d40f4e42f9a4076b9871f4641f79790e40644e6
09d90498ff3b2049bf664827c4cb1f1041ee7e8355f0091e4f00d2570300006f
3dbca998010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01a1015efe1b000000647732766f623754746e492e32303135303331322e
30362e737667780300007601000001000000789cb593df6a833014c6afeb5364
8c7136981aed286dd1f6113618bd2e56a386668924b1dab75fa26957ca0a65b0
0b35e74fbedf770e98acfb2f860e442a2a780a518001119e8b82f22a855697fe
1cd07ae525ea5021d3ca550ab5d6cd320cbbae0bba69206415c618e3d074c0d8
b2ec19e5fbdf1aa3c562110e55b88446807699221f5294949114ca96b1416ba9
9a2c3789829459cb34a08e16ba4ec10001d58456b51e839537f126c983efa34a
d202f9be49244da635911cd12285edd616ce02d1c57d7b76ad1b4eb599b05544
7e5af23bdf2802c8884d1249728dfa144cf77178df903223b014ba9a6a73331c
ae36821dcdd0c4d5b8e0a6a4b4147b33db8eb5e7c8779a38888d2741b97513e1
578cc6c7ea5bc9247486edf9b631fc7469cd46a38156b2e7c771232f77181988
76b78431da28e2d67b8af27e5007941fdd419accdc7e4d6276bd921f5c96efaf
79d15db49983cd1d2b76ace93fb0a2f83459ec686f8e16ff81e625f63f5979df
5c760b0c78030000fd5ec0e2a1010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c019f0160fe1b000000647732766f623754746e492e32303135303331322e
30372e737667210300007401000001000000789c8d52d16e8230147d96afe8b2
2c774b048a8b891aaa9fb0258bcf06a14063d792b688fefdda824e8d2e7be0e6
967b7aceb907d2d5e19ba33d559a4941208930202a7259305111684d19ce00ad
9641aaf715b250a109d4c6348b38eeba2eeade23a9aa7882318e2d027ac8e2c0
99d8dd0326f3f93cf653b8144d006d334d3f952c19a704ca9673cfb5d04d96db
17052db3961b401d2b4c4dc00a02aa29ab6ad31f96c12818a54f61882ac50a14
86f645da64c65025102b086c366e7026482eeebb7e80ae053376c35653f5e594
3fc45a5340966c942a9a1b742060d1475f1f50d9153881ae66c6de8cfdd546f2
a35d9a0e3321851d69a3e4ceeeb6e5edf9140e9c389a584f9209e726c1638cfa
c7f13bca341e0cbbfeb131fc7269cd9d7a03ade2afcf7d226fff30e2155db64e
291315a743c027e5692f3dbdd2be92be89e55732cb77b79ac985a24f6df89a7f
87789fe837431ce1f1cc16e4ca3899b8d6d7537f4678f920753ff432f8016e0d
eee3210300000849bb9f9f010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01e80117fe1b000000647732766f623754746e492e32303135303331322e
30382e737667cb040000bd01000001000000789cad94514f833010c79fc7a7a8
31a69a08b42c596081f91134313e1b8402cd6abb9422f3db7b6dc986cb5c8cf1
8172ed5deff7bfe342feb07f17e883e99e2b59601a118c98ac54cd655be0c134
618ad1c326c8fb8f1641a8ec0bdc19b35bc7f1388ed1b88c946ee38410124304
f621ebbde0727b2e906659163b2f9e4329466f65cf9eb46ab860056e06215cae
75bf2b2b38a859530ec26034f2da74050620461de36d67fc66132c82457e1586
a8d5bc46610807f9ae34866989785de0d757eb3824a0b3fbd69e425f243750e1
d033fd6cc98ff2a5671841b245ae5965d0bec010fde9d61f524109a2c063c70d
dc8cddd59d129f50349b7c524970f546ab2dd4f62686c32e9c729228014d8a4b
ab86927b82fc63f3db94793c09b6f6cfc2c8cd5c9add79018316b7d7be2377bf
10e288b6b79aa035b2b852b6824d5d7678db620d6890b1f23a564721e9ac43e9
69878ef4b2da9ee2e91c4e2fc2a983a71e9e92d9a8cc27e5cff0e4223c71704a
3dddbdff155f292901a6346ab47ab7dfc128db9069ce2f8fd7f9dcc7e92211b9
5fc182bcb9b466f6dd4a49442ec8a14e4ef27f723227677562d2c4d9cb83ed24
05b9fdf56c822fdeb16979cb0400006316ec5ce8010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01a3015cfe1b000000647732766f623754746e492e32303135303331322e
30392e737667180300007801000001000000789c8d52cb6e8330103c87af7055
55db4a014caa484984934f68a52ae78880012bae8d6c1392bfaf8dc9538dda03
ab5def7866764dba3a7c73b4a74a33290824110644452e0b262a02ad29c319a0
d53248f5be42162a3481da986611c75dd745dd7b2455154f30c6b14580872c0e
9c89dd6fc0643e9fc77d17ae451340db4cd34f254bc62981b2e5bce75ae826cb
ed4141cbace50650c70a5313b082806acaaadaf862198c8251fa1486a852ac40
61680fd22633862a81584160b3718d33417275dfe503742d98b113b69aaa2fa7
fc21d69a02b264a354d1dca003018b3ef6f101951d8113e86a66eccdb8bfda48
7eb443d3a127a4b02d6d94dcd9d9b6bc3d57e1c089a389f52499706e123cc6c8
7f8edf51a6f160d8e58f8de1976b6baef2065ac55f9ffd46defe61a45774bb75
4a99a8381d167c529e7ae9e98df68df4dd5a2e9259bebbd74cae14dde62a294e
0f3a549eab52d9f16faacb167184c7331b900be364e2d23efabc570d52f71f2f
831f47e7ede1180300001951bec1a3010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01e2011dfe1b000000647732766f623754746e492e32303135303331322e
31302e7376671b040000b701000001000000789c9d93616f9b3010863f875fe1
699aae930698b4594684d39fd049533f57040c58716d669b42f7eb7b0692a651
5b4df98065fbeedee7bd93c96e8747499eb8b1422b064944817055e852a89a41
e7aaf01790db6d90d9a79a60aab20c1ae7da4d1cf77d1ff5d7913675bca494c6
980153ca669042eddf4b4cd2348dc7289c421320bbdcf2df46574272065527e5
a8b5b16d5ee045c9abbc930e482f4ad730402090868bba71d3611b2c8245f625
0c496d4449c2102fb236778e1b4544c9e0e1c1078e02c949bddfcfa9f74a38ec
b0b3dcfcf1e43b756f3910145b6486178e0c0c30fb795c3f90c2162483be110e
2be3b1b4d5f2199be6734c698521eb8cde636f3bd91d4fe1ac49a3257ad24279
3709fd41c9f4797d2f99c5b361bfffd818fd766acd9f26039d91575fa7897cff
0f2323d1cfd69372554b3e0ff8405e4de8d51bf61bf4d9585e9179b13f672627
44c707b7d3c3196f9d46372371bd3a126ff019e1eb4ad7afdcd545588ff490d1
3532529c80bf0b735534da307814652951add2ca8556fc43c164d9ba036b16df
565a67b12f7c4f34a13f2f53dde5e613d525bd4cf56fd70d07d920f3bff23678
01d9cd40a61b0400004bb8df5de2010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01fe0101fe1b000000647732766f623754746e492e32303135303331332e
30312e7376677f040000d301000001000000789cad94df6e9b3014c6afc35378
9a266f520143c53222a08fb04953af2b6a0c58716c649b42f6f43b06374daa56
9dd65e04d9e7cff7fb7c8e94e2663e08f4c0b4e14a96388908464c52d570d995
78b46df803a39b2a28cc4387a0549a12f7d60ebb389ea6299aae23a5bb382584
c45081d792dd2cb8dcbf5498e4791e2f597c0e4d30baaf0dfba555cb052b713b
0ab168edcc50530834acad4761319a7863fb120310a39ef1aeb7eba50a36c1a6
f81486a8d3bc4161088162a8ad655a22de94f8eece254e02c959bf3bfbd25bc9
2dbc70344cff76e49ff2d6308c406c5368462d9a4b0cd5c7e5fb8a143c419478
eab985ce78691d9438c2a399cf49252165ac567b78dbbd184fb7d06b9228054f
8a4be726215704ad3fa7ef248bd81b76e7d78d912fe7d6dc6d35306af1f5f33a
916fff606421bad93a522d3bc1fc801fc9d98ace2ed817e867637942d674ff9c
999c11c783086b6a95f644ca35053c9dbd2a05ec761b6518698864d17f81de58
cfcb9d4fdb2111b9cad32843eb31596dbc5f799b39e1ef510acae9e9fc61cac9
f5f6d2b3a72c714fb16c5e16bcccfae8269cbb9c0b87b5a4bd82a91f78d30880
b74adad0f03fc04fd2c13e2ec27ba9962d16b16bad82a0707f1755f017cc7359
fa7f040000d7c9f4b4fe010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c016e0291fd1b000000647732766f623754746e492e32303135303331362e
30312e737667c20600004302000001000000789cb595ef6eda3010c03f97a7f0
34addea4e68f1392024be8236cd2d4cf550a26b16a6c643b85eee977e7044827
e836a622ecdcd9e7fb9def1ca7b8dbad2579e6c60aad4acac29812ae167a2954
5dd2d6ad82092577f351619f6b02a6ca96b4716e338ba2ed761b6ed3509b3a4a
e2388ec0827626b39d14eae994219b4ea7919fa54328a3e4b1b2fcbbd12b2179
4957ad94ded7cc6eaa050c2cf9aa6aa5a3642b96ae29e93886381b2eeac675ca
7c7435ba2a3e0401a98d5892208081625339c78d226259d287079c38386083f5
28f7a6f74a38d8616bb9f981e46feade724ac0d95561f8c2915d49c1fac5f767
5cc1166449b78d70b032f24b375abec0a6793fa7b48229eb8c7e82bd3dcaf6a0
05bdcf384c20262d1446c3e29b98740dfda3cb22ea0346f97c60f1a76168a875
01b4467efed865e4cb5f04e289985b2455aa96bc4ff09e9c75e8ecc84e8705f2
caabb41c91d5e2e977261b1219999dc662510d98023eb9cd3c1f1fbd8f6c80cf
2ea7276fd2134f7f2f78bb9681d26e8fc533546bf56fce0e47884dc3c94d823d
e9e5099496f8feb59ca24d927b192dfb881cdff952b3c48fc186932cc3db0227
824a2d1a6d4a6a5d65e02d5d69e5022b7e72b4dfb87d06fa28e7ae1196c0df71
ebfcfab088f07186934f2fe4ace1ca10045fbcb7016386d205806be9be625be8
f59a2b775d830aed08fbafa29d28c899e2fce17e398de90796956d2a632a4844
4a5232c02771c852f8f5e72699a421aae31b96f8cabf1f9add0230cff3dbc391
cdc3dceb47f4a8c02fce7cf40b1c1a04afc20600003297352a6e020000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01ee0111fe1b000000647732766f623754746e492e32303135303331362e
30322e737667da030000c301000001000000789c9d936f6f9b3010c65f874fe1
699abc4903eca4d99608a71f6193a6beae2818b0e2d8c83e4ab24fbf33b8299d
5a69aac41fdff9fcfc9eb3a1b83d9f347994ce2b6b04e519a3449acad6cab482
0ed0a43f28b93d24857f6c09961a2f6807d0eff37c1cc76cdc64d6b5f99a3196
63059d4bf667adccf1b542bedbedf269962ea19c9287d2cb5fce364a4b419b41
eb496beffbb2c2442d9b72d040c9a86ae804dd30f4d949d5763007876495ac8a
0f694a5aa76a92a69828fa12403a43542de8fd7d98b80af0c5fa308ea5774601
763878e97e07f24f73e7252528b62a9cac809c05c5eacbf47c430a5bd0828e9d
025c994f4b7bab2fd8b48c73c61a9cf2e0ec117b7bd0c3354aa326cbd6e8c92a
13dc70f69591f90efa41b2c8a3e1307edb18fbb4b416a2d9c0e0f4e78ff38e7c
f90f231331ec6d2095a6d5326ef013793ba3b7cfecf5f280a6e0c5b63c23cbea
f82f932f88c349a7781a157e1d9129b5563d46157279205697387098f9bec537
266ede4504799efae1b1217eb3a32424d3d2549d75829e545d6b946bac81d4ab
3fa8c8d73d3cc1a2fa013ae5095e203d90e83f2bf220f52ae7dbe67d9c13fe14
8a844febaa9e14e14f3c247f0142e42deada030000810af370ee010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01ce0231fd1b000000647732766f623754746e492e32303135303331362e
30332e737667fd090000a302000001000000789cbd96c172da301086cfe129d4
e9344aa6b12dc936606a9343ef6d679a9c330a16b626c2662439267dfa48b601
8784a44d21073396b4daefdf5f2b20be5c2d04b86752f1b24820761104ac9895
292fb204567aee8c21b89c0e62759f01135aa804e65a2f279e57d7b55bfb6e29
338f20843c1301db90c94af0e2eea5401c4591d7acc23e1443704b15fb25cb39
172c81f34a8826d7442de9cc4ca46c4e2ba121a879aaf30406c8e8cc19cf72dd
0ea68393c149fcc9714026790a1cc74cc44baa359305e069026f6eecc22601ee
edb7ef5de875c1b5a9b0524cfeb6e49fc5b56210986427b164330d560934d10f
cde79e54a60491c03ae7daecf49aadcb523c98a259b756948559525a9677a6b6
5b516d464e9713b9c4682a7961d560748140fbd8fc3665ec7582edfb7e61e84b
5f9a1db5022a29ce3eb78e9cff85908668bdb5245a64827506afc9618b0eb76c
bf7f40cde0892d5b249ddded32718f582d84331354a91d22c6a11b92208a8286
8c49b42d7b3876a31021dcef90f7f0df38b597776e0e8d5881e18551e622b019
0d23171d223d19056e305aa7df8c7ae9355b354e99bbe9b6c78303df0d21b00b
0e2d66792913b8e0692a0c775e16da99d3051726f07b5949ce24f8c1ea6e45f1
3fcc9abed46b233b81d353a1bfd94733a54f33f36e9ed8b38c3d22c2e0f0222c
bc6d932d7add29241cdaef178bc6638beecc34d3a370db2204ff638b74132955
3995929afc3ef0c1aef9e3e6605abc7f84caaff0c515795ef4eef518be7a3dfc
e03dd7635d2326c8f6760b1aef56a83495fa3f0a7416c6624df1c4f4fdf3be7a
c28ec6c761938931c0fc1ebe693341fec7d84c7074e052bf2e98cecb149f9dbf
6e32f1c971c8e48ccaecfce929efb3d91f7d90cda17fe88e924c2d5dfc86c7c3
e151b09bef89416cffac4d078f42790ef6fd09000070ed5a36ce020000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01e2011dfe1b000000647732766f623754746e492e32303135303331362e
30342e73766787030000b701000001000000789c8d93c14ee3301086cfcd5318
a19541c28ddd0a89564938708795569c51709cc4aa6b47b643da7d7ac6896903
028943128f67fc7fff8c95ecfeb057e84d58278dce315b528c84e6a692bac971
ef6b7287d17d9164eead4150aa5d8e5befbb6d9a0ec3b01cd64b639b7445294d
a1024f25db83927af75d21db6c36e998c57328c3e8b574e2af35b55422c775af
d4a8b5755dc961a31275d92b8fd1202bdfe6784dc1672b64d3fa29289245b2c8
2e08418d9515220436b2aef45e588d6495e39797903809b0d9f9b08ea5cf5a7a
e8b077c2fe0be427fdec044620b6c8ace01e1d720cd5c7f1fd8314b4a0723cb4
d2c3c9743cda197584a645cc69a321e5bc353be8ed55f5a788444dba5c812723
7570c3e80d45d313f483649646c361fdb331fa676e2d449381deaaabcb6922d7
bf303212c36c03a9d48d1271c01fe4db097d7b66afe61734069fc67246967cf7
95c966c47eaf084c41d81a6e2352b9b41c2c7000b380e4c7b8b0df5cc0af485e
1cc63e586c84ade11b3649a9796b40772fab4a815c6db42775b9970aca1e4c6f
a5b0e8510c31e3e47f6031d6f90f1b915b78e1fcb9932c0dea459264e1b72992
770f1214d68703000055a5e5c0e2010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01fe0101fe1b000000647732766f623754746e492e32303135303331362e
30352e73766768040000d301000001000000789ca5945d6fdb201486afe35fc1
54ad6c5289215daa2633e9c5eeb74955af2b6a631b858005b84ef7eb77b09dc6
fd92aaf6021b3887f779cf4122bbdaef34ba97ce2b6b3866738a9134b92d94a9
386e43492e31bada2499bfaf10a41acf711d42b34ed3aeebe6ddf9dcba2a5d50
4a53c8c043ca7aaf95d9be96c856ab55da47f114ca30ba135efe75b6545a725c
b65af75a6bdf881c360a598a56078c3a55849ae3730a3e6ba9aa3a0c8b4d324b
66d9174250e5548108818dac11214867902a38bebd8d81470136391fe763ea8d
51012a6cbd74d791fcc7dc78891188cd3227f380f61c43f643ff7d430a4ad01c
77b50a7032ed8f36563f40d1728c196b20e483b35ba8ed4eb78f2b326ad2f902
3c5965a21b46cf281a46d48f92593a1a8ef3b78dd1af536b713518689dfe7632
74e4fb3b8cf4c4d8db4812a6d2726cf081bc1cd0cb237b31bda07ef1a42d47a4
c8b7cf996c426c779ac0456c45f59cc9e800658be5b4e223f562f911e80b7976
2ceac7f4a63fa41ee47e501f3bd6ffe3261126afade378a78a42835c694d20a5
d8290d69bf6ceb9474e8b7ecc68857ff8075d984838b11bb39d5e1671c5af9e6
b482398c2c8d8857f917ec337cc65e1ac8358197e0804cb2f82e6c92ff481e5a
19680400001053f1a1fe010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c010e02f1fd1b000000647732766f623754746e492e32303135303331372e
30312e737667dc040000e301000001000000789cad94c16e9c301086cfcb53b8
8a1ab7520df6a634cb063687dedb4851ce110103d67a6d649bb0e9d3770c24a0
5552556d0e06db33febfdf634c7a7d3c48f4c88d155a6598851423ae0a5d0a55
67b87315d96074bd0b52fb5823485536c38d73ed368afabe0ffb8b509b3a5a53
4a23c8c063caf62885dabf96c892248986285e4219460fb9e537465742f20c57
9d9483d6d6b679011325aff24e3a8c7a51ba26c317147c365cd48d1b07bb6015
acd20f84a0da8812110213699b3bc78d42a2ccf0fdbd0fbc08b0c57adf9f52ef
9470b0c3ce7273ebc93fd59de51881d82a35bc70e89861c87e1a9e6f48c11664
86fb463858190d4b5b2d9f60d37c8a29ad20649dd17bd8db83ec5e4664d2a4e1
1a3c69a1bc1b46bf503436afef25d36832ecfb6f1ba31f97d6fc6834d019f9e9
6cacc8e7bf3032107d6dbb832450967d5ef3a9c4cfec78846f66fa7a7944ecf2
b4303314f44ea96c62ceeae1a81fcffa1b1a6e96dfc0bfe83b7e1cf4131a7e1d
f4bfc1cb4f925c158d36193e88b294205769e548951f8484acefba33821bf483
f753c48a5fc062ac75cf3626eeee5cba2bdf1cb7eebc863eb434f28c570d5cc6
ef6da090046ee68cf4e7e8eb9aab5a9e9e224be2c10563f1e2aafd6f95ff4864
23714ddf8f18a4fe5fb40b7e0317787c28dc0400008c36fa000e020000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c019f0260fd1b000000647732766f623754746e492e32303135303331372e
30322e7376677b0700007402000001000000789cb555d16e9b30147d6ebec2d3
b47a930ad8a6242183f461efdba4a9cf150d06ac382632a6a4fbfaf91a37455d
1b5555fb6074f1bd3ee7f8dc4b925d1d7612dd71dd8956e598860423ae366d29
549de3de54c112a3abf52cebee6a644b5597e3c698fd2a8a86610887386c751d
314248642bf058b23a48a1b6cf15d2344d2397c553528ad16dd1f1dfbaad84e4
39ae7a291dd6aadb171bbb51f2aae8a5c16810a569721c13abb3e1a26eccf8b2
9e9dcdceb24f41806a2d4a14047623db17c670ad9028737c73038923009d9c87
d8975e2b61ec0dfb8eeb3fc0fc4b5d771c230b769669be31e890635b7def9e2f
40d92bc81c0f8d30f664e48eee5b796f2fcd7d4eb5caa63aa3dbadbddbadec8f
6f81c72421b39a5aa1400d2517048d0bf001328bbc60885f1646be4ca5c1db28
a0d7f2ebe7d1916faf10e218c15b4dd00a015da16ac9bdcb8e1e2cd696daca58
8c3a161321f3a945f3a71e3df2179bed5301744a4f4fd253474f1789e3a72499
8ccb745ade4ccf4ed233479f7af6c57bb3f73b19947ccf5569bfcf7b54e97607
86981674f9793f3d66cf13f88db2e89a42ebc26a8f518c26d39792d00e5e9c84
04f9189e88b2e421f62adf447fa48917619a9238bda04b1626000fe068b29f2e
c2c453197e70234f9749388e1b2373c8422228d4a669758e77a22ca5d550b5ca
0455b113d216fe687b2db8463ff9e0339df86b0552ba370fbdf162d7e7d27c87
657f0fce6b1bda954540f18aa6908f6c0a23ce7c068d6073f2344e5c1c1fe3f7
6810bb640f8db884065978004793fde4b1412f9ac33ede1c4ae1e2ce22e4e3b9
9bd8e4bf387eafe985ab5f1cad00780047ceaac77d4735cbe0af723dfb07a295
34197b07000018263efd9f020000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01d90226fd1b000000647732766f623754746e492e32303135303331372e
30332e737667b8070000ae02000001000000789cb555df6f9b30107e6efe0a4f
d3e64d1ac6c6802183f461cffb214d7dae68e204ab8e898c69d2fef53b034b59
d546ddba467274679feffbeebb038af3c356a31b695bd598123342319266d9ac
94d994b873eb20c3e87c312bda9b0d8250d396b8766e370fc3fd7e4ff69c3476
134694d21022f010323f6865ae1f0b64799e87fd299e82328caeaa56feb0cd5a
6959e275a7759f6bdeeeaa256cace4baeab4c368af56ae2e31a7c0b3966a53bb
c159ccce6667c59b20401bab56280860a3d855ce496b905a95f8f2d21f1c13b0
c97d6f8fa1174639a8b06ba5fde991bf9b8b566204c9ce0a2b970e1d4a0cd1b7
fdff13a9a0045de27dad1cdc0cfbabbb46df42d1723c338d81a3d6d9e61a6abb
d2ddd10bc69c9444c0a951c6b361f41345c3f2f97dca221c097bfb6962f4dd94
9af706029dd51fde0e8a7c7c06911ed16b6b299a230f57998d96a3ca3dbc97d8
0234d010030f3121924e254a1f6a748f5f2daf1f1260537876129ef5f04c243d
3ea3c9645ca6d3f2cff0d149f8a887cf4774f1bfd1bbad0ed476a7e5561a5739
7872d0da365b2f8a6b3cb771e64f8fdae320e3c6aa6aebcada0af873c4d16402
454260f838272c4a102cef899464beca707cd4eabf2b0c24fb8afa744322a411
8b494c9398c7288809cb188f72d80d32c2e32ccb380a7292c42cc9d0dd88eae4
a19f7c960812c53c19b54f332244c6c1f30141659675634bdcbacac22b64dd18
17acabadd210fba5e9ac92167d93fbf1a45577c09ab19dfbdda9b182c57bed3e
fb056f87f71b306115a14778668be8abb628a7be29145a83063ba6de4c1e9882
12fac29e2514090a8d4909e77924a05b8c93248f53267cbb5844529125718600
ea8f1f1322e5497adfbf93a245af2f5ade0fb2570bc5f481e9d542e268be4c33
d1cbdfab73942a38eaa79f56ea5ecc41b359e1bfb38bd92f3be83ec4b8070000
b7026484d9020000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01cc0233fd1b000000647732766f623754746e492e32303135303331372e
30342e73766770070000a102000001000000789cad556d6f9b3010fedcfc0a4f
d3ea4d1ac6e6cd9041fa619ff7224dfd5cd1c410ab8e898c69d2fefa9d81a52c
6aa26e6d244777f6f99ee79e3b20bfda6f14ba17a6958d2e30231423a197cd4a
eabac09dadbc14a3abc52c6fef6b04a1ba2df0dadaeddcf777bb1dd985a431b5
1f504a7d88c043c87cafa4be7b2e906559e6f7a7780aca30ba2d5bf1d3349554
a2c055a7549f6bde6ecb256cac445576ca62b4932bbb2e704881e75ac87a6d07
6731bb985de4ef3c0fd546ae90e7c146be2dad154623b92af0cd8d3b38246093
fbce1e43afb5b45061d70af3cb21ffd0d7adc008925de4462c2dda1718a21ffa
ff13a9a00455e0dd5a5ab8e9f757b78d7a80a2c578a61b0d47ad35cd1dd476ab
ba83e78d392909805323b563c3e8678a86e5f2bb94b93f1276f66962f4c3949a
f306029d511fdf0f8a7c7a01911ed1696b289a230757ea5a8951e51ede496c00
1a68f081079f1049a61225c71a3de197cbbb63026c0acfcec2b31e9ef1b8c767
349e8ccb745afe1b3e380b1ff4f0d988cedf1abddb28af165a9852c9c7d2c293
832ad36c9c28b671dcc6993f3f6acf831c268dc704862c0c090b6204cb793c21
a9abc61f1fa9f5bf1500d27c437dba211152884524a2711446c88b084b591864
b0eba5248cd2340d9197913862718a1e47542bf6fd84b39893200ae351e32425
9ca721782ec02bf572dd9802b7b634f0aaa81a6dbdaadc4805b15f9bce4861d0
77b11b4f5af908ac19dbda3f1d192b585c2afbc52d780b5cd660c2ca7d87f0c2
56d0376945469df8145a80063ba2ce8c8f4c4e097d656f628a38850624240cb3
8043575848e22c4a18776d610149781a472902a8bf7e8cf3248c93a73e9d1527
783b71b27e309d2a28a247a65305f183f93a6d782f73afc24112efa0933aadc8
93688336b3dc7d1f17b3df82cd272770070000b0274e53cc020000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01b4024bfd1b000000647732766f623754746e492e32303135303331372e
30352e737667410700008902000001000000789cad955d6f9b301486af9b5fe1
69dabc49c1d87c1932482f76bf4d9a7a5dd1c410abc48e8c29e97efd8e81a628
6abb6aca85a363fb709ef77c40f2ebe3be410fc2b452ab02334231126aa3b752
d505ee6ce5a5185daf1779fb502370556d8177d61e56bedff73de943a24ded07
94521f3cf0e8b23a3652ddbfe4c8b22cf3875b3c87328ceeca56fc32ba928d28
70d535cd106bd51eca0d1c6c4555768dc5a8975bbb2b704841e74ec87a67c7cd
7a71b5b8ca3f781eaa8ddc22cf8383fc505a2b8c42725be0db5b77710ac066cf
3b7b72bd51d242865d2bcc6f47fea96e5a811104bbca8dd858742c30783f0ebf
af8482149a02f73b69e1497f78f4a09b47485a4c774a2bb86aadd1f790db5dd3
9d76de149392003469a99c1a4697148dcbc57721737f12ececd785d14f73696e
370ae84cf3e5e35891afef1032105d6d0d452be470a5aa1b315579c0bb121b40
830c3eeae03321c9bc44c9798d9ef9e5e6fe5c009be3d99b7836e0198f073ea3
f16c5ce6d3f2dff8e04d7c30e0b389ce2f4deff68d57b6addec8d2c26b832aa3
f7ae22563b61d3c0bf3d672f134e63c6630213168684053182e5763c21a94bc5
bf40784a5812c4c192459c8441180384c7cfc004662d8db2044e1242c328bb08
35c8481af2285d029b243c8986d49e12432ccc0867318de0242459123f95dc8a
e3f052b198932002b1635b9394709e86b0730e5ea9363b6d0adcdad2c0d7a9d2
ca7a55b9970df87ed79d91c2a01fa29f6e5af907243376b04f4330c95f7f6eec
37b7e0c3f3b9061356ee3bc27bba4f2fd2fd8cba7e53e83a1aed883a333e33a1
8bf4228d8902122fa1b8946649e0824368e4aafd7cfacfe90f2e977f368cbb4b
1c45f4cc7489237e3207598bdcfde1ad177f01e4bb20b641070000428e496cb4
020000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c010403fbfc1b000000647732766f623754746e492e32303135303331372e
30362e7376674a080000d902000001000000789cad55df6f9b30107e6efe0a4f
d3ca2615631b8c7106e9c35ebb1fd2d4e78a260e41251019d3a4fdeb77362445
51db756b1e1c9dcfe7fbbe3b7f47d2cbddba42f74ab76553671ec5c443aa9e37
8bb22e32af334b3ff1d0e56c92b6f70582d0bacdbc95319b69106cb75bbc0d71
a38b8011420288f0fa90e9ae2aebbbe702a9943270a7de18947ae8366fd52fdd
2ccb4a65deb2ab2a976bda6ef23938166a997795f1d0b65c9855e6850478ae54
59ac4cbf994dce2667e907df47852e17c8f7c1916e726394ae51b9c8bc9b1b7b
70484047f7ad3d845ed7a5810abb56e9df16f9677ddd2a0f41b2b354abb941bb
cc83e807f7fb422a28a1cabcedaa3470337057374df50045abe1ac6e6a386a8d
6eeea0b6dbaa3becfc2127c10c3835656dd950724150bf6c7e9b320d06c2d67e
9918f934a666773d814e579f3ff61df9f206220ed1f656133445162eaf8b4a0d
5d76f0b6c51aa08186e87988119178dca2f8b8474ff8f9fcee98001dc3d357e1
a983a7823b7c4af8482e63b5fc373c7b159e397839a08b53a377ebcacf8b42ab
2237303668a99bb5ed88692cb141f0afebec798483cc04c7a0b030c4947104cb
ee448c135b4a30ccd3eadfd8435fbe23488cf669af10bc3f66492463f0c59884
91b44ece71148928010b8ec3308aad57104c63c619a291c0210b39478f7b2eef
2a95499c84007701e9712ce2c815bc2f1798492c8049049e10cb98ef1fc2a89d
1b35ca056611f0e91f3b4eb01049083b1be0e7f57cd5e8cc6b4daee19bb56c6a
e32ff3755941ecb7a6d3a5d2e887da0e276df9089429dd98bd3406fab3f3ca7c
b50b3e47e70598b0d2c022bc4513e4249a90c4aa808016506f47c49afcc88487
22ef1489845cc409440acc916498101933e7b040426242258bac2361e388c7bf
4e093b5d47a41b0bc728224726773c0fe6fb1a22b9ebc9154af675f6655fa178
df891e7b1ce15a7792110181bb9c1756ea1caab235a1276f045c1cce24b5fffc
b3c91fdc68612c4a080000c9456efe04030000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c010703f8fc1b000000647732766f623754746e492e32303135303331372e
30372e7376674a080000dc02000001000000789cad555d6f9b30147d6e7e85a7
69f32615631b8c7106e9c35ebb0f69ea73451392a012888c29697ffdae0d4969
d476d59a0747d7d79773cebd1c93e462b729d15dae9ba2ae52cc08c528afe6f5
a2a856296ecdd28b31ba984d92e66e85a0b46a52bc36663bf5fdaeeb4817905a
af7c4e29f5a102f725d35d5954b7cf1532a594ef4ef1989461749335f96f5d2f
8b324ff1b22d4b87356db6d91c128b7c99b5a5c1a82b16669de28082ce755eac
d6a6dfcc266793b3e483e7a1952e16c8f320916c3363725da16291e2eb6b7b70
0060a3e76d3c945e5585810edb26d77f2cf3afeaaac93102b0b344e773837629
86ea7bf7fb0214b450a6b85b17069ef4dda3dbbabc87a6f3e1acaa2b386a8cae
6fa1b79bb23decbc0193120e9aeaa2b26a183da7a85f16df4226fe20d8c62f0b
a39fc6d2ecae17d0eaf2cbc77e225fdf20c431dad96a8aa6c8d265d5aacc8729
3b7a3b620dd42043f63ae44848341e51743ca347fe6c7e7b2c808de9d9abf4cc
d133291c3fa3626497b15bfe9b9ebf4acf1dbd1ad8e5a9d9db4de9cdebcdb66e
0a03d7062d75bdb11331b5153618fe759f3dcf70b09914041c160484718160d9
9d8c486c5bf187fbb41ea09f80bd8c0d73f9810018ed612f11bc7fc2e3504590
8b080d42659342903094610c111c074118d9aca484455c70c44249021e08811e
f65aded52a57240e80ee1ce04924a3d035bc6f179429224149089980a848ec5f
84c977eeaa3121090f414fffb2a398481907b0b3055e56cdd7b54e7163320ddf
ac655d196f996d8a126abfd7ad2e728d7ee6dd70d2140f2099b1adc14f873bfb
5c9a6f76c1e7e8f30a4258896f19dee2097a124f286a5d40c10ba88f436a4371
14c28ba2ef3489022cea0ca22411487142a98ab84b5822a908658a873611f371
c5c33f6f093fdd4494bb164e51488f42e1741ec2f70d440937934b14effbecdb
be44d17e123df7b8c28dee2457040cee30cfadd50574657b428fd910b4389e49
62fff96793bf5eb261444a0800000b6a6d6a07030000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01b4014bfe1b000000647732766f623754746e492e32303135303430372e
30312e737667630300008901000001000000789c8d53514f8330107e1ebfe28c
31d544a0b02cba05b6571f349a98f9e0cbc2a040b35a482963fbf75e816cb838
67529abbdeddf77d771782c5ee4bc096a98a1732249e4309301917099759486a
9dda8f0416732ba8b61960aaac42926b5dce5cb7691aa7193b85ca5c9f52ea62
06e952663bc1e5e6b7446f3a9dba6d940c493d02eba8626faa48b96021496b21
5aac595546313e242c8d6aa109343cd17948c61475e68c67b9ee9cb935b246c1
956d43a67802b68d0f411969cd94049e8464b53281038037a837769fba945c63
8775c5d4bb617e95cb8a1140b051a058ac611712ccdeb7f719286c4184a4c9b9
c64ab72d2d0bb1c7a6591f9385c450a555b1c1ded6a23e78768f491d1f35155c
1a351ebda7d07d06df40066e2fd8d8e785d19ba134e375026a256eafbb89dcfd
4348cb68666b98229909d60ff81cb33f5c4febfc18ca91308a37a78cde800f9b
cc8fbbcc7b944c45fbcb20b8f3179850739e019b07afb3baa7cf8b2ca74bfa83
c59f98f304dec3043eccdd825b81f925e6d63784fd0171630300001078c41eb4
010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01bb0144fe1b000000647732766f623754746e492e32303135303430372e
30322e737667680300009001000001000000789c8d53514f8330107e1ebfe28c
31d544466121ba05b6571f349a98f9e0cbc2a08366b52ca58ceddf7b2db8e1a2
ce843677bdbbeffbee2e44b3dd87802d53152f654cfc2125c0645a665ce631a9
f5cabd27309b3a51b5cd015365159342ebcdc4f39aa61936a361a9722fa0947a
9841da94c94e70b9fe29d11f8fc79e8d923ea94f609954ec45952b2e584c56b5
10166b526d92141f32b64a6aa109343cd3454c461475168ce7856e9da9337006
d185eb42ae7806ae8b0fd126d19a29093c8bc96261020700bf576fec2e752eb9
c60eeb8aa957c3fc2ce7152380608348b154c32e2698bdb7f72f50d882884953
708d959e2ddd94628f4db32e264b89a14aab728dbd2d457df0dc0e930e03d454
7269d4f8f496427b0cbe818cbc4eb0b17f1746affad28cd70aa895b8be6c2772
f30f2196d1ccd630253217ac1bf01773d8528747eea0bf20eb7c1bcb913249d7
a79c7e8f11db2c8edb2c3a945c25fbf320b8f527c0b6ed79043fa410582be8de
decf129d6eea0fa2bbd07c0f100421bc99db823b91f92fa6ce2745b3025e6803
000006a2c8cbbb010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01af0150fe1b000000647732766f623754746e492e32303135303430372e
30332e737667630300008401000001000000789c8d53e16a833010fe5d9f2263
8c6c30355a0a6bd1f609c606a3bf8bd56842b3449258db3dfd2e2aad2beb3a88
e12e77f77ddfdd61b23a7c0ab4a7da7025531c0504232a73557059a5b8b1a5ff
82d16ae925665f21489526c5ccda7a11866ddb06ed3450ba0a6342480819b84f
591c0497bbdf12a3f97c1e76513c268d30da6686be6b557241535c364274580b
5367393c14b4cc1a61316a7961598aa7047432ca2b667b67e94dbc4972e7fba8
d2bc40be0f0f499d594bb544bc48f166e30227806854efec21752db9850e1b43
f587637e936b433102b049a2696ed121c5907decee2b50d0824871cbb885cab0
2bad953842d3748849252164ac563be86d2b9a93e70f9824884193e2d2a989c8
3341fde7f01d64120e829d7d5d1879184b735e2fa0d1e2f1be9fc8d33f84748c
6eb68e299395a0c380af31c7e3f574ce8fa19c09b37c77c9188df8a04976de25
1b502a9d1d6f83c0ce5fd18cb823dc05fdf786efacaf9b2c974bfa83259eb9c3
5004e87b7777e05ee27e89a5f70db10601fa63030000ba31c1c1af010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01b4014bfe1b000000647732766f623754746e492e32303135303430372e
30342e737667670300008901000001000000789c8d53e16a833010fe5d9f2263
8c6c3035b694adc5b44f303618fd5dac460dcd1249626df7f4bba86b5d59d781
0977b9bbeffbee0ee3e5fe43a01dd3862b497114108c984c55c66541716d73ff
19a3e5c28bcdae40902a0dc5a5b5d53c0c9ba6099a49a074118e09212164e02e
65be175c6e7f4b8c66b359d846f19034c2689318f6a655ce05a338af8568b1e6
a64a5278c8589ed4c262d4f0cc96144f08e82c192f4adb390b6fe48de21bdf47
85e619f27d7888abc45aa625e219c5ebb50b1c01a241bdb3fbd495e4163aac0d
d3ef8ef955ae0cc308c046b166a9457b8a21fbd0de17a0a005417153720b9561
5b5a297180a6591f934a42c858adb6d0db46d447cfef314930064d8a4ba72622
8f0475c7e13bc838ec053bfbb230723794e6bc4e40adc5fd6d3791877f086919
dd6c1d53220bc1fa017f334f3beae9897b3c5c50ebfc18cb893249b7e79cd180
11da2c4fdb2c7b94422787eb20b0f517046db747a0e9c0f09df57995e77c517f
f03c4ddd57a208d077ee6ec1bdd8fd160bef0b7b7f02c667030000e931c964b4
010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01a3015cfe1b000000647732766f623754746e492e32303135303430372e
30352e737667130300007801000001000000789c8d52d16e8230147d96afb8cb
b2744b06149d991aaa0f7b5eb6c4f86c100a34762d698be8dfaf053299d165c9
a5e9ed3d3de7dc5be2d5f18bc3812acda420280a30022a5299315110549bdc9f
21582dbd581f0ab050a1092a8da91661d8344dd04c02a98a708c310e2d027590
c59133b1bf068ce6f379d856d1503442b04b34fd5432679c1294d79cb75c0b5d
25a93dc8689ed4dc206858664a82ac208292b2a2345db2f446de28bef37d2814
cbc0f7ed415c25c650258065046db7aef043100deebb7d0fdd08666c87b5a66a
ed943fc4465304966c142b9a1a381264d1a776bd41655be004352533f666d85e
ad243fd9a6695f1352d892364aee6d6f3b5eff647ecf8983b1f52499706e22fc
8ca1fb1cbfa38cc3deb0dbdf36861f86d65cd619a8157fbcef26f2f40f23ada2
9bad534a44c1693fe03f947f095f0ce52c98a4fb4bc568a0679b2ccf6f59de18
df7512fbe6ef30c630c5f00613ece2a55da76dace115bb98b9ac95f462f70b2f
bd6f04dee9cf13030000d934be45a3010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01aa0155fe1b000000647732766f623754746e492e32303135303430372e
30362e7376671c0300007f01000001000000789c8d92516f823010c79fe553dc
b22cdd922145632606f461cfcb96189f0d4281c6ae905244bffdae854d349a2c
e19af6eefaffdd5d0957c76f0107a66a5eca88f8634a80c9a44cb9cc23d2e8cc
9d13582d9db03ee480a9b28e48a175b5f0bcb66dc7ed745caadc9b504a3dcc20
5dcae228b8dcdf4af48320f06c940ca13e815d5cb32f55665cb088648d10566b
515771828e94657123348196a7ba88080209148ce785ee0e4b67e48cc207d785
5cf1145c171d61156bcd94049e4664bb35813f017f70dfecfbd48de41a3b6c6a
a6d686fc293735238062a350b144c33122987db2eb1d296c4144a42db8c69b9e
bd5a95e2844db33e264b89a15aab728fbded44f377727b4d3a9e604d2597a61a
9fbe52e8cce81bc9d0eb0b36fbfb85d1a76169e6d415d028f1fcd84de4e51f85
58a299ad21c53217ac1ff02f79d6a16717ec0bf4d558cec838d95f33fd0111db
2cceaf59dc19e06d117cf50f78a38078788739355f6057e331b6067f423b9b5a
8f253ba1f99797ce0f2ab8eb861c0300000c7fc754aa010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01a1015efe1b000000647732766f623754746e492e32303135303430372e
30372e737667130300007601000001000000789c8d52616b833010fd5c7fc58d
31b2c1d46819acc5b4bf606c30fa79588d1a9a4549626dfffd2e2aad2bedd807
f52ef7eebd771793f5e15bc29e6b236ac5481450025c65752e54c9486b0bff95
c07ae525665f02429561a4b2b6598661d77541370f6a5d8631a53444041920cb
83146a770d182d168bb0af92a96844609b1afea1eb4248ce48d14ad9732d4d93
667890f3226da525d089dc568ca020818a8bb2b243b2f266de2cb9f37d28b5c8
c1f7f12069526bb956207246bebe5ce144104dfa5d3c42374a589cb0355c7f3a
e577b5319c0092cd12cd330b0746107decdf37a87004c94857098b9d61dfdad4
f28843f3b1a66a85256375bdc3d9b6b23d65fec84983183dd5423937117da630
3c8edf5126e168d8c5b78dd187a935970d065a2d1fef878d3cfdc348afe876eb
9452554a3e2ef80fe55fc2174b390ba6d9ee52319ae8e190d5f92eab1bebbb4e
8277fe063185170a1944147c8ce3e133c7558281e1c025bda497b85f78e5fd00
0a0ee9e81303000008e6bc8ea1010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01a70158fe1b000000647732766f623754746e492e32303135303430372e
30382e737667160300007c01000001000000789c8d92616f823010863fcbafb8
6559ba25030ac66c1ad05fb06cc9e2678350a0b12ba42da2ff7e57608a46937d
a0f47ad7f779ef205a1d7e04ec99d2bc9231093c4a80c9b4cab82c62d298dc7d
27b05a3a91de1780a552c7a434a65ef87edbb65e3bf52a55f821a5d4c70ad297
2c0e82cbddadc2603e9ffb5d968ca101816da2d997aa722e584cf246884e6ba1
eb24c5838ce549230c819667a68c090209948c17a5e983a5337126d183eb42a1
7806ae8b07519d18c394049ec564b3b189934030ba6ff743e95a72831d369aa9
6f4bfe946bcd08a0d824522c35708809561fbbf58e14b62062d296dce04dbfbb
5a57e2884db321272b89296d54b5c3deb6a23945eea049bd103d555c5a37017d
a5d03f56df4a46fe60d8eeef1ba34f636b36ea0d344a3c3ff61379f987918e68
676b49892c041b06fc479ef5e8d905fb027d359633324977d7cc6044c436cbf3
d72cef0cf0b6087ef50f78a3807848710537a410f6af294e1334f40736e8984e
64ffe2a5f30badd4ea831603000037b4c0eba7010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c019d0162fe1b000000647732766f623754746e492e32303135303430372e
30392e737667070300007201000001000000789c8d527f6f823010fd5b3ec52d
cbd22d19525c4cd450fd04cbb66cfe6d100a34762d2945f4dbef0a4499d16509
3faebd77efbdbb365a1dbe25ecb9a984568c84634a80ab44a742e58cd436f367
04564b2faaf6392054558c14d6968b20689a66dcbc8cb5c98309a5344004e920
8b83146a770d18cee7f3a0cd92a16848601b57fcdde84c48ce48564bd9722daa
324e7023e5595c4b4ba011a92d1841410205177961bbc5d21b79a3e8cef72137
2205dfc78da88cade546814819d96c5ce244100eea5ddc43d74a58ecb0aeb8f9
74ca6f6a5d710248368a0c4f2c1c1841f4b1fddea0c21624234d212c56066d69
a9e5119be67d4e6985a9ca1abdc3deb6b23eadfc9e938e27e8490be5dc84f499
42f73a7e471905bd6117df36461f86d6dcaa33501bf978df4de4e91f465a4537
5ba714ab5cf27ec07f28ff12be18ca59304e76978ae1400f9b2cce6759dc18df
75123cf35798509852f88097691fe2f30533f76f65bcc85ddba5f7032401e7cd
07030000b24db7849d010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01a3015cfe1b000000647732766f623754746e492e32303135303430372e
31302e7376670e0300007801000001000000789c8d92616f823010863fcbafb8
6559ba25438ac64c0de82f58b665f3b34128d0d8b5a414d17fbf2ba0a2d1641f
4aaebdebfbbc772558ee7f05ec982eb99221f187940093b14ab8cc425299d49d
12582e9ca0dc6580a5b20c496e4c31f7bcbaae87f578a874e68d28a51e5690b6
64be175c6e6f15fab3d9cc6bb2a40ff5096ca2927d6a9572c142925642345af3
b288623c48581a55c210a87962f290209040ce78969b76b37006ce2078705dc8
344fc075f1202822639896c09390acd7367112f07bf76ddc95ae2437d8615532
fd6dc91f72553202283608348b0dec4382d587e67b470a5b1021a9736ef0a6d7
5c2d943860d3accb492531551aadb6d8db4654a79ddb69d2e1083d292ead1b9f
be526897d5b79281d719b6f17d63f4a96fcdee5a039516cf8fed445efe61a421
dad95a522433c1ba011fc993163db9605fa0afc6724646f1f69ae9f788d8667e
7ecdfcce006f8be0abbfc31b05c4c3174c27c7d8ae1ff0c74dd4b09cc0febd0b
e70f62cde9220e0300009657c52da3010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c019e0161fe1b000000647732766f623754746e492e32303135303430372e
31312e737667060300007301000001000000789c8d527f6b833010fdbb7e8a1b
636483a9b1a5b016d37e82b1c1e8dfc36ad4d02c7131d6f6dbefa2d2bad28e81
3f72b977efbdbb245e1fbe24ecb9a985568c440125c055aa33a10a461a9bfb2f
04d62b2faef7052054d58c94d656cb306cdb36686781364538a5948688203d64
799042edae01a3c56211765932168d086c939abf1b9d0bc919c91b293bae655d
25296e643c4f1a6909b422b325232848a0e4a2286d1facbc893789ef7c1f0a23
32f07ddc88abc45a6e14888c91cf4f97381144a37ab71ea01b252c76d8d4dc7c
38e537b5a93901249bc486a7160e8c20fad87d6f50610b9291b614162bc3aeb4
d2f2884df321a7b4c2546d8dde616f5bd99c227fe0a4c1143d69a19c9b883e53
e85fc7ef28e37030ecd6b78dd187b13517f5061a231feffb893cfdc348a7e866
eb941255483e0cf80fe55fc21743390b26e9ee52311ae96193e5f92ccb1be3bb
4e8267fe0a530a730adf10cdc19f51c08782ed7e9d8a17bb5bbbf27e004169e7
c80603000099b6b9a29e010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01a4015bfe1b000000647732766f623754746e492e32303135303430372e
31322e737667090300007901000001000000789c8d926f6f823010c65fcba7b8
6559ba25038ac66c1ad04fb06cc9e26b8352a0b16b595b44bffdaec014174d96
f0a7ed5d9fdf73d7c6cbc397803dd3862b999028a00498dcaa8ccb2221b5cdfd
5702cb85179b7d01982a4d424a6bab7918364d13349340e9221c534a43cc205d
cafc20b8dc5d4b8c66b359d846c9101a11d8a4867d689573c11292d742b45a73
53a55b5cc8589ed6c212687866cb84209040c97851da6eb2f046de28bef37d28
34cfc0f77121ae526b9996c0b384acd72e70128806fbddb84f5d496eb1c2da30
fde9c8ef72651801141bc59a6d2d1c1282d9c7f67b430a4b1009694a6e7167d8
6ead943862d1ac8f49253164ac563bac6d23ead3ccef356930464f8a4be726a2
cf14bad7e93bc938ec0dbbf16d63f46168cdcd3a03b5168ff75d479efe61a425
bade3a522a0bc1fa06ff92a71d7a7ac1be40ff69cb19996e777f99d180886596
e7d32c6f34f0ba089efa1bbc50403c7c4334057f42011f0ab6fdb5182f761777
e1fd00dd50e86309030000ecc3bff3a4010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01a60159fe1b000000647732766f623754746e492e32303135303430372e
31332e7376670f0300007b01000001000000789c8d525d4f8330147d1ebfe21a
63aa898cb2c5645be816df359a98bdf8b2201468560b69cbd8febdb740365c9c
1a4ad3fb75ceb9b78d56fb4f093bae8d281523e19812e02a2953a172466a9bf9
3302aba517995d0e98aa0c2385b5d522089aa61937d371a9f36042290d308374
298bbd146afb5362389fcf83364a86a421818fd8f0575d66427246b25aca166b
61aa384147cab3b896964023525b308284040a2ef2c276c6d21b79a3e8caf721
d72205df474754c5d672ad40a48c6c362e70040807f5eedca7ae95b0d8616db8
7e73cc2f6a6d3801041b459a2716f68c60f6a1dd2f40610b9291a610162b83b6
b42ae5019be67d4c950a43c6ea728bbd7dc8fa68f93d261d4f505329945313d2
7b0addeff01d6414f482ddf9b2307a3394e6ac4e40ade5ed753791bb7f086919
dd6c1d53ac72c9fb01ffc2fc8df86c2827c238d99e3386033e6cb238dd65d1a3
e43a3efc0d8277fe0c0f1426141e614add0af1a330a3cefde4365cef2d9d17b9
e7bbf4be005fc5e9200f0300008d9dbbc4a6010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01ac0153fe1b000000647732766f623754746e492e32303135303430372e
31342e737667160300008101000001000000789c8d92514f833010c79fc7a738
634c3511285b16dd42b7f8aed1c4ecc59705a140b35a482963fbf65e0137b6b8
6880a6ed5dffbfff5d0997bb2f095bae2b512846028f12e02a2e12a132466a93
ba8f04960b27acb61960aaaa18c98d29e7bedf348dd74cbc4267fe9852ea6306
e952e63b29d4e6b7c460369bf96d940ca10181cfa8e26fba4885e48ca4b594ad
d6bc2aa31837129e46b534041a91989c110412c8b9c872d32d16cec8198557ae
0b991609b82e6e8465640cd70a44c2c87a6d0307816070decefbd49512062bac
2baedf2df955ad2a4e00c546a1e6b1811d2398bd6fc70b52588264a4c985c193
7e7bb42ce41e8be67d4c150a4395d1c5066bfb94f561e5f69ad41ba3a74228eb
26a0f714bacfea5bc9d0ef0ddbf96563f46668cdae3a03b596b7d75d47eefe61
a425dade5a52a432c9fb06ff90a71d7a7ac23e419fb5e5888ce2cd39331810b1
ccfc789b79af92e968ffb708defa0b201b1e283cc184da37c007473bc3c0733b
daefa3653aa1fd8b17ce37a6dbea6b16030000b1a4c765ac010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01a2015dfe1b000000647732766f623754746e492e32303135303430372e
31352e7376670f0300007701000001000000789c8d52616b833010fd5c7fc58d
31b2c1d4d832588b697fc1d860f473b11a35344b24c6daeed7efa2d2bab26e43
0d97dcbbf7de5d8c57870f097b6e6aa115235140097095ea4ca88291c6e6fe33
81d5d28beb7d0108553523a5b5d5220cdbb60dda59a04d114e29a52122480f59
1ca450bb9f80d17c3e0fbb2c198b4604b649cddf8cce85e48ce48d941dd7a2ae
92140f329e278db4045a91d99211142450725194b6df2cbd8937896f7c1f0a23
32f07d3c88abc45a6e14888c91cdc6254e04d1a8dec50374ad84c50e9b9a9b77
a7fcaad63527806493d8f0d4c28111441fbbf50a15b62019694b61b132ec4a2b
2d8fd8341f724a2b4cd5d6e81df6b695cd69e70f9c3498a2272d947313d1470a
fde7f81d651c0e865d7cdd18bd1b5b73bbde4063e4fd6d3f91877f18e914dd6c
9d52a20ac98701ffa2fc4df8622867c124dd5d2a46233d6cb23cdf6539b01426
39fe4d8277fe024f14a614129851f746f8d02196e0e34ae1b393f362f7fb2ebd
2f681be96f0f0300004959bbb8a2010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01a90156fe1b000000647732766f623754746e492e32303135303430372e
31362e737667120300007e01000001000000789c8d92614f833010863f8f5f71
c6986a2250b62cba856ebfc06862f679a9a340b35a482963f3d77b05dcd8e2a2
019ab6777d9ff7aec4cbfda7829d30952c342351400908bd2912a933466a9bfa
cf04960b2fae761960aaae18c9ad2de761d8344dd04c82c264e198521a6206e9
52e67b25f5f6b7c468369b856d940ca111810f5e893753a4520946d25aa9566b
5e957c831b894879ad2c81462636670481047221b3dc768b8537f246f18def43
666402be8f1b71c9ad1546834c1859af5de028100dcebb799fbad2d262857525
ccbb23bfea552508a0d82836626361cf08661fdaf18a1496a018697269f164d8
1e2d0b75c0a2451fd385c650654db1c5da3e547d5cf9bd260dc6e8a990dab989
e82385ee73fa4e320e7bc36e7edd18bd1b5a73abce406dd4fd6dd791877f1869
89aeb78ec475a644dfe01ff2b4434fcfd867e88bb69c907cb3bd644603229699
9f6e33ef5532c30f7f8be0adbf00b2e189028709756f840fede70a7c1c297cb5
3c2f767ff0c2fb060975ea0a1203000005e4bf49a9010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01a0015ffe1b000000647732766f623754746e492e32303135303430372e
31372e7376670a0300007501000001000000789c8d52616b833010fd5c7fc58d
31b2c1d4d8ad308b69d90f181b8c7e2e56a386664989b1b6ff7e1795d595760c
3526b9bbf7debd24591ebe24ecb9a985568c440125c055a673a14a461a5bf82f
04960b2fa9f72560aaaa19a9acddcdc3b06ddba07d0ab429c329a534c40cd2a7
cc0f52a8eda5c4288ee3b08b923169446093d6fcc3e84248ce48d148d961cdeb
5d9ae146ce8bb49196402b725b318284042a2ecacaf68b8537f126c98def4369
440ebe8f1bc92eb5961b05226764bd76811f806854efe643ea4a098b1d363537
9f8ef95dad6a4e00c12689e199850323987decc62b50d88264a4ad84c5cab02b
dd6979c4a6f910535a61a8b6466fb1b78d6c7e56fe804983296ad2423935117d
a4d07f0edf4126e120d8cdaf0ba37763696ed50b688cbcbfed1d79f887908ed1
79eb9852554a3e18fc07f32fe233534e8469b63d678c467ca9c94e47595d71ef
32061ef91bc434a03073c32b3c53f75288f099e18f06bd975ee26eeec2fb06bf
fbe7d20a030000dc8fc094a0010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dw2vob7TtnI>
789c01a70158fe1b000000647732766f623754746e492e32303135303430372e
31382e7376670f0300007c01000001000000789c8d52616f823010fd2cbfe296
65e9960c284e976940b31fb06cc9e2678350a0b16b4929a2ff7e57608a469305
687abdbbf7debd122ef73f02764c575cc988041e25c064a2522ef388d42673df
082c174e58ed72c0525945a430a69cfb7ed3345ef3e2299dfb634aa98f15a42b
99ef0597db6b85c16c36f3db2c199206043671c5beb4cab86011c96a215aac79
55c6091ea42c8b6b6108343c354544909040c1785e982e5838236714deb92ee4
9aa7e0ba781096b1314c4be06944d66b9b380204837ebbef4b57921b9cb0ae98
feb6cc9f7255310208360a354b0cec2382d58776bd0185238888340537d8e9b7
ada512071c9af539a924a62aa3d51667db88fa18b93d26f5c6a8497169d504f4
9942f7597c0b19fabd60bbbf2d8c3e0ca5d9a813506bf178df39f2f40f212da3
f5d632c53217ac37f88f79da514fcfb8cfa82f6c3951c6c9f692331830c63a39
5d6671c3bfeb1878e91f104ca8470105e0fa0e136a5f8ced4329bc52af33d409
edefbb707e012dd1e8c50f03000033d5ba6aa7010000
#<end update:2020/03/02 09:27:59>
#<begin attach ID:dQ0JEpwvWaP>
789c01fa0405fb160000006451304a457077765761502e73616d706c652e7376
67ab230000d404000001000000789cbd9a5d6f9b481885afe35f31ab55c556aa
edf9642032e945ef77575af5ba726dc6462160615ca7fdf59d2f6c98d4e3953a
7011e718f03b73e03ce13593d5c7d797127ccb9b635157598416300279b5a9b7
45b5cba2532be649043e3ecd56c76f3b200fad8e59b46fdbc3e372793e9f1767
b2a89bdd12430897f288c81cf2f85a16d5f3af0e44699a2ef5dea83f288ac0d7
f531ffb7a94551e659244e65a96b3d1e0feb8ddcb0cdc5fa54b6113817db769f
453194f3dce7c56edf6611956f9e660fb387d51ff339d835c516cce772c3eab0
6edbbca940b1cda22f5fd48e4b01d4fbbcd2f6d0cf55d14a87a763defca746fe
a7fa7ccc23208b3dac9a7cd382d72c92477fd7af374a490b65169df7452b3fb9
d41f3dd4e577693ab7fbaaba92bb8e6d533f4b6f5fcbd3e5dddcd6840b2ce754
17959a0d821f20303faabe2ab95ada092b7d7b62f05d7f6aea9d99c0a929fffa
d39c91f7ff63227a44756eb7108147a0c65b57bb32b7a7598fafceb1dc1da989
103313729d0a1d5c2ee71c5dc75f6f9edd09a0def06dfedada31b59443313394
faa536cdd7d5665f3759f4526cb7a5ac2deaaa9d8bf54b51caa33ed5a7a6c81b
f0777eb67b8ec58f5c9d9a43dbcdc94ee2497a592d55c96e70e1f72e86ded184
e65178f7c275bfa9ab4a5aad1b209afa459f8cb6d679b0a8f913fe6b6f5dc019
5cc86813f90ab4e470d1e5fcf7eaf205fb90e0459a4292c8d2b230a0b8b76d10
6dec8f36d69717a1e9b28dc878e1c66eb8bdee85759f4c186e04474c37be936e
6cd28d43a45b1ab9c4db6aa8357175a8dc233208be2cae928ff0cde8137ff489
897e3c61f493f1a24fdce87bdd8bce7d3a61f6311a31fbe44ef689c93e09917d
69e4927dab4dde135707cb7e32cc7e62b2cf6f669ffab34fed5dfd9ac7b12f3e
c1662c3e42f6a99b7daf7b61dde3aed14053649ff7400b9d7d7a27fbd4649f06
c93ed719473afb5a275aa66c2811569a60e8e8341011042b2210ec9090d5656d
4010ee6f1e30c1fc4c30c3443c2113c9784c309709af7b61dd53342113948cc8
04bbc304334cb0104c507265c2680d02856c282d070974743026128789c430c1
6f3311fb9988fb0d324e266c90f5bd293414b10b85d7beb0f6ed9d0b4fd12351
3bd6182d527c0789d82011074142e51a13937d257553c41d49d8f5ebc340e350
7d13544410a2a34f5575551ba4b8b775c003f7f3c04dd7cca604828f08047781
f0fa17d67fd7c84f4204262322c1ef20c10d123c48e744ae4c58ad49d0af036d
51e06f74302cf8100b6eb040f14d2e123f1789e99dec5f2f3245f7d0356a247c
f720fdb85c78fd8bce3fee457574ffddad227cf7285cff6fb8480c1749082e88
6141e7dc6a6cbe47b85a774b401331d42c5403a59fad92d87221ebaada80e8c7
abdde60117a99f8bd474d570422e281e918bd4e5c2eb5f38fe27e1a2f33f0a17
e91d2e52c3451aa485c2572eacd62c50ee6ac3823966a0437141f1800b595d73
41d12d2e10f472a13850972a9d900b86c6e30241870bbf7f61fd77539a840b46
c6e3c2f5ef72214f87e242fe0ab1ae46af5c58ad596089ab0d0b0cbfd1a1b860
432e98e582dde6c2bfd28ccc6a2bedad138cbfda3ada3328e4ae35fbdd0bebbe
a3824f08453a021377d69a91596b4661d69a2f2b6dc0487aa5a027cd4327065d
1dea011483c30750b2ba7a0045d3b70fa0662bf5af354fb39f763d5b84ab2300
008d40762efa040000
#<end update:2020/02/21 12:12:22>
#<begin attach ID:dVDKmkeM2PZ>
789c0172038dfc140000006456444b6d6b654d32505a2e6d61696e2e73766749
0d00004e03000001000000789cb557db729b30107d8ebf429da6913b31585c8c
2135ce43dfdbce74f29c5140369ac8c2234488dbe9bf7705f892f892b4b61ff0
20add873ceee4a5a8f6e9f67023d3155f05cc6d8b109464c2679cae534c6a59e
582146b7e3cea8789a22582a8b18675acf6ffafdaaaaeccab37335edbb84903e
acc0cd929b67c1e5e3ae854e1445fdda8a37411d8c1e68c17ea87cc2058bf1a4
14a2f67553cc690213299bd052688c2a9eea2cc601019e19e3d34cc7d887c1b8
73d1b9187db02c34553c45960513a339d59a2989781ae3fb7b6358397036be37
efedd23bc935282c0ba67e1ae4eff2ae601881b38b91628946cf3186d58bfa77
8f2b9020625c655cc397fdfad3792e16209ab536994b30155ae58fa0ed4194ab
91d5fa24b60b9c722e0d1b87f4086a1ee3dfb81cf55bc2e67d3f31f269939a19
35044a25ba1f9b887c7e07911ad1c4b69c092b11b428da002f91c3a1ed0f0784
043583c0b3072b12ae3bb0890f69dfccd7ab20ad09d0e4f13503a7c5d7ecb9c6
825ab31ba521f834b316954996ab18cf789a0af037c9a5b62674c605acfa9a97
8a3385beb1aab514fc178039ce5c2f79b4c08d552f4c09724d054f20f54c6aae
17a3be41daafd9216f891e1e233a720d5883e44406e985f04253a5ff5ff7f87a
6625543ed1622d7317b2e79e0399a7bf15a3692ec5e2cf617c7f700e7c41174c
eda2b027d3037238d36170aa4c07c1e9f536e5dcad45f760fb1f8ef8f00cb596
642c79ec36f5d64b79a2dfe0109da1ea2a0599b132c83953dd7aa00eb370c919
6aef814db984fab7a62a2fe7efe3e184e7a889f41f5978cea959ec3c7baf5345
ab6d4687ae222f0a6c02fb316c8fac8deb108eaf10b6b17faa9bc80fa032ddb6
4a07dbf571ec75346ef68895524ddf293e0cec658a9ac363497d00093be52dbc
a9dd0d9d639447dbc2af84fe621ee87f989a401f7635850978b6abf20591c83d
750aa0a9b59afadbce00c43f4f38d5d0c4a289ca67e8d2433a4797eeb2fd3cdc
f5ed8ef2b2e9f39c5a57cf5c3704adaaba19b7c9380e20f46c874401781cda83
d708686df6ebf3f7450f98b2399c19f03f61d10af78f17de4ea4b4c8a85214f2
e4210fadf9d67d5fcff5a0ac51fb1e9af7a6e69bc149e232f4c01f087723bf8e
c3da3d5adbe0626cb2d019993f3ee3ce5fd9b618d1490d00008a06b63c720300
00
#<end update:2020/02/21 11:43:29>
#<begin attach ID:e1khE5gayAy>
789c01a0035ffc1400000065316b68453567617941792e6d61696e2e737667de
1000007c03000001000000789cb5586d6fa33810fedcfc0a9f6e779dea62c040
78e986ee87fbbc2fd2693faf5c70c0aa63903125e96afffbd940dadeb63d1215
2211816798e799f1782693cda7fd8e833b2a6b568a0462cb81808ab4cc98c813
d8a82d8a20f874bdd8d47739d0aaa24e60a1547565db6ddb5aad679532b75dc7
716cad017b95ab3d67e2f625451cc7b1dd49e153500cc10da9e937596e19a709
dc369c77b6aeea8aa47a21a35bd2700541cb325524d07734cf82b2bc50fa61ed
c0ebc5c5e262f3074220972c0308e9854d4594a252009625f0c70f237830809f
bc6fee07d5ef8229ed615353f98f41fe2abed714026dec622369aac03e815afb
d07dbf624abbc013d8164ce937edeed5aae407ed341d64a2145a542b59de6adf
6e78f3f084069b8ee56a4e2513860d76560ee82f63df98dcd8036173ff3a31e7
fd536ae6a927d048befcb38fc8e509443a4413db66c751ca495d0f013e22e3a0
c7f61ec1a3a71bf47b541e11497afb3b241e0015dd77c65da737be5e5b6b08cc
2a22222d4a99c01dcb32aeed6d4ba1d096ec18d77a7f978d6454822fb41d2435
bbd7601857eac86300eea5ea60728e29c259aaf7ba2e484537b6011af33b72ad
506774dcf1c3b8233878e17abea5b3d471270c83d50702fb78e2385c5744925c
92aa78f4fb651fd7233e62ecbec5c928ecc1d63d5a889f6d79ad88546ff0f4af
1dda3f3af90a6ee4cf817b18c58dc339708dbd9f9292ac14fcf06b8c848b9d39
48e8c3958b3358b8de1c2ceecea5e10573d0e8b2ff0c167e3c078bfecc9e4123
7027a78176c8688c941d370847ca4e184e5776dc6886dc7ba8b0cbfdeab032b6
5796655d8ec63c9e210173aac5cd4d4ac41da997a31c3c67faf44329e14dda70
a228ea1aae513d818a3b7d0a7ee0eaa3b92a5956542a46eb0fb95ed1d7281bef
f94f92b7274a4fe3d0e7ea0921f1a31949f407ec0416c1f4ad5a9f8f51d870fa
4e7dcc072a1453879373219aa177a7054d6f97fd395d652c55a3fba0ebe2f434
3249da652b755d95e304f0f4c5f3b8235da13875437c7786cac96a9496bbaaac
99d2a3ebf8b1f0bd193ab729df698abaf1d07493cbe7c34a4e0595fab7ce3d31
3cc156963bf00e03558277ee7138feff99f4e5ae791c49bb6164d54d3ca0bf0f
bbe9c41ec6eee2bc66ace7f3cfbd1d103a800314589e17bba10f4c36c57e8043
bd8a5d2b08a3b51f01a435fff3d1fd3ff0d64104ee3b0e8b8df937e27af12fa7
b045b0de10000037d3d072a0030000
#<end update:2020/02/21 11:43:13>
#<begin attach ID:eoPS3MRF1gI>
789c01ee0111fe16000000656f5053334d52463167492e6172632e30312e7376
6769040000c801000001000000789cbd545d6f9b30147d4e7ec59da6ea6ed200
9b8f8444906a3f60daa4a9cf150d0e58f54c644c49fefdae1d9aa55333b52f13
60d9f7eb9c737d45717bf8a5e049985e76ba441e3204a1b75d2d7553e2607741
8e70bb9917fd530314aafb125b6bf7eb281ac7311c93b0334d1433c6228ac053
c8faa0a47e7c2d90af56abc87bf11294233c54bdf861ba9d54a2c4dda094afb5
eef7d5960cb5d85583b208a3ac6d5b220122b44236ada57c3a6ce6b3f9acf810
04d01859431090a1d857d60aa341d625dedf3bc7b9007f918f3085de696949e1
d00bf3d3217fd777bd40a062b3c288ad854389147df4eb955224419538b6d252
66e453f79d3a926831f974a7c9d55bd33d92b607359c4fc15493853171eaa476
6c38fbc2e0f4b9faae64114d84ddfe3a3176f3a24b37cfe406a33e7d3c75e4f3
1b887844d75baf61eaedbf2435a63afe5dc98fd664aaabbead0c059598420a97
5259484a4306a79d5fff2701079a39fc983d6f2fe02bb3fd335aed9b6f333f1b
3a1a2a69dd2d8509028de537e0491a2e52cef882673c592eb3052c1d81af9032
f7522bdc13fba6646192e5ab3cc9d37c11c76996bf8f9c11f5fbb85d41bd20e7
e9bd2ec1739b17eec7b099ff063220469969040000ef9cea9dee010000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c01d70128fe19000000656f5053334d52463167492e636972636c652e3031
2e73766752040000ae01000001000000789cbd94516fa3300cc79fcba7f0699a
7c270d085da7ae15e93ec24e3aed79629042d42ca0248ceedbcf4969bb4db76b
750f7b0092d8feff6c63c8efb6cf0a5e84b1b2d51cb38421085db695d435c7de
ade35b84bb5594db971ac8555b8e8d73dd324d87614886eba435753a658ca5e4
813b97e55649bdf99b63b6582cd260c5f7d00ce1a9b0e2b769d752098eeb5ea9
a0b5b45d51d24125d645af1cc2202bd7702420422364dd388aa7cd2a9a4493fc
471c436d6405714c07795738278c0659717c7cf4868340f6211e61747dd0d251
85bd15e68f27dfeb072b10486c921b513ad87224efd770ff428a4a501c87463a
8a4c4368d7aa572a5a8c36dd6a325967da0dd5f6a4fac32e1e355932a59c5aa9
7d3619bb62b0bbbcbe97ccd33161bffe3a3176f9a14b97fbe47aa37e5eec3af2
eb8c4402d1f736d430f6f65f2519517d160a93351e55856d0a630aca76063338
567ac312aa33611016f49213f68d74cf9c797a0087e53b7a294da9f6fc71536e
7dce08a5d7a2a7e1787d9880d36f393b0b90ed09f31d61fa79c68e88a2dcfc2f
633e32e681719ce32e7caba75a4b8028f77f8055f406df71493a52040000bb78
dbabd7010000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c017b0284fd1c000000656f5053334d52463167492e636f6e6e6563746f72
2e30312e737667b00700004f02000001000000789cc595516f9b3010c79f9b4f
e1699abc49016c286988702aed79d2a6ad7dae283160c5b523e394649f7eb671
12522dcd944edb0370d8e7bbffefee10f9ede6898367aa5a2605813844105051
ca051335816b5d0553086ee7a3bc7dae8171152d818dd6ab5914755d17764928
551dc508a1c878c0de65b6e14c2c7fe788b32c8bdc2e1c26c5103c162dfda664
c53825b05a73ee62cdda55519a8505ad8a35d710746ca11b021364743694d58d
26d06487f3d1d5e82a7f1704a0566c0182c02ce4ab426baa04600b021f1eecc6
3e001e9cb7b677bd174c1bc2754bd50f9bf9abb86f290426d855ae68a9c18640
e3bd75f713a10c0227b06b98362723777425f9d64053bf27a4305bad567269d8
6a556c776f818f89c2d868924c5835188d11e82f1bdf86cc232fd8daa785a10f
4369f6ad17b056fce3fbbe229ffe4088cb686b6b33613073cf42d49cfa423b05
b6cace015a31b857131fe44c0775baded789db856166021f79512e5f0ac12f64
c4e764c44ec6247532b2742f231dc848df2c23392723e9ab91f5e5981c75e7a8
396f51a2e946fbe4cedcf46826e1d480dba5a01065231581ad2e94f98e2a2974
d0b29f263a8e577a97dc679acfca328fecb95d86520a6168a40295924f7e10b4
f4adf09fdb6b537e8a6137e41314a2b1bd819b9b301d6769885e07c4d77ec22e
24bc4beef059c678c798fc0d468c628f067a33b1bc31360b43d356e10c7be2bb
8b2e63ff8ebffc7376878691692ec0a9851fda535793cccec0f47ce73dbd7b5e
849f7cfe4ff8497cc01fdad9a1fb47f67e1446b9fdbfce47bf00e5c747acb007
00001c3229bd7b020000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c0193026cfd16000000656f5053334d52463167492e6373732e30312e7376
67040700006d02000001000000789cbd55df6fda30107e267f85ab6af226353f
c86805214985d8de36ad52d7bd5455151293581807d94e039bf6bfefec24143a
a8da1722e1f8e2f3f7dd7de733e1f57ac9d0131192963cc27dc7c388f0b4cc28
cf235ca9b93dc4e83ab642f9942370e532c28552abc075ebba76eacf4e2972d7
f73ccf050fdcb8046b46f9e290637f341ab96615ef92f6319a2592dc88724e19
89f0bc62cc60057295a4f02123f3a4620aa39a66aa8830106254109a170af6fb
1e8ead9ed50bcf6c1ba55222db063b946ac308529b150028b2562e2ce1383cbb
9f7e99fc9cdc5bbd9e332b4546046a9e3f08d859c04b4ec6da964a940b12cc58
b56bdb2684c0477f35405a724e52f52ac0f9d03ce37d807e032093e58a9155a2
8ae3008264c6dc071834005f79765352aede1f419bc254b1ff005e6c3080e8c0
630026952ab720ef12b14de15b3223ac830480922b5bd2df24f0fd7163cd9325
659be0171159c213bdebe1210e5d53e1b82d7c2e68d6561ee454447044b3083f
3eea85edc9e9ef1e1c98b7ae779c2a38da9524e2561fb91ffc4e128c00ac170a
5de07584c17b63c623503af108d70555b0d3355b5725dbc06927ed9a5605b712
44586b82f7040174c78798b49252835e78a8f9697c0d19ba6dc07a7e3c30efc3
6e68da6a02a804fb78de28f2e90d81b89db69a29e139b45323f02bcccfc44398
a72c919049d367bb8c49ba7849692e9f2da591ad2de721155be4b601df02ddc9
ea7b8e7731800199991e4ec27bd9b1a1cb2e82d3f10eb6bc57a7e21d766c6878
205f73e56ddbb5e8789eef437ca4698ed142af7f878aa28187a6faedeb7cdb11
bedd4214e84ac7029689c30af57f566cfd034f631629040700002afc36579302
0000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c01e1011efe1a000000656f5053334d52463167492e656c6c697073652e30
312e73766772040000b701000001000000789cbd94dd6ea3301085afc3534cb5
aaa62b15304da23611a48fd09556bdae283860c56b906d4af2f61d3ba67f6a77
a35eec45827fc6e73b677092dfeeff4878e2da884e1598250c81abaaab856a0a
1cec36be41b8dd44b9796a804a9529b0b5b65fa7e9388ec9384f3adda4578cb1
942af058b2de4ba1769f1566abd52af5bbf8169a213c9686ffd2dd56485ee076
90d26bad4d5f56b450f36d39488b308adab6051210a1e5a2692d9da7c9269a45
b3fc2c8ea1d1a28638a685bc2fade55a81a80b7c78701b2f02d9bbf308a1f45e
094b0907c3f56f47be53f7862390d82cd7bcb2b02f90aa0ffefb0b298a200b1c
5b61e964ea8ff69d3c50681ef654a768cb58dded28dba31c5e6671d064c91579
ea84726e3276c9e0f871fa4e324f836137feda183b7fd7a5f3c9dca0e5c58f63
477e9e60c4135d6f7d86d0dbbf45d2bcfe28e46f5658aa4bd3965a97e476010b
784dba6409e54c18f801bde484fd47ba632e1cdd83fdf00d9d4b297a33199866
d5deb946a89c1a3d35cde7ee797097144f7ee1d989ac6c825d0758b60cb0e587
9bf74a2babddf771f323ee66c2856cd713adf7bfe57fb59e5051eefe2136d133
3f44534672040000f971eb21e1010000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c0160019ffe17000000656f5053334d52463167492e677269642e30312e73
7667300200003901000001000000789c8d51d16ac3300c7c6ebec263146db0c4
4ec7602d76fb091b8c3e972c711253cf0eb6d3b47f3f394dd90a2becc1c692ee
4e27996f8e5f9a1ca4f3ca1a0179c6804853da4a9946401feaf415c8669d707f
6808428d17d086d0ad281d86211b9e33eb1aba608c5144c019b23a6a65f67f01
f3e57249c72afc6e9a03f92cbc7c77b6565a0aa87bad47ad95ef8a121395ac8b
5e072083aa428b9417f4d94ad5b40103c6609dcc9219bf4b53d238559134c504
ef8a10a43344550276bb58f811b8e20399a05ba3024ed87be93e62e737b3f512
088acdb89365204701883e8df70d291c410b185a159049476a67f509879653cd
5883251f9cdde36c8d2b4e97289d3459b6404f5699e826674f8c9c4fd48f929c
4e86e3fbb63136bfdad2fc62ae77fae1febc91c77f18c18e098fffbb4ebe01a0
91ab9530020000922f9ad060010000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c018c0173fe17000000656f5053334d52463167492e677269642e30322e73
7667670300006501000001000000789cb553dd6a833014beae4f9131cad9606a
ec10d6a2ed236c307a5d6c8d1a9a2592c4dabefd4ea2652bac6537bd309ce47c
e7fb3960b63a7e097260da70257348220a84c99d2ab9ac73e86c15be01592d83
cc1c6a8250697268ac6d1771dcf77dd4bf464ad7f18c521a230206c8e228b8dc
ff054ce6f379ecbbf05b3401b22d0cfbd0aae282e550754278ae85698b1d3e94
ac2a3a6181f4bcb40d8ea4e8b361bc6e2c5e288565300926d94318925af39284
213e646d612dd392f03287cdc6357e082ee6818cd0b5e416137686e94fa7fc2e
d7860141b249a6d9ce92630e883ef9f30a15461039f40db73819fbd156891386
66634f2a892d63b5da63b65a17a7f32d1c396934434f8a4be726a12f940c9fe3
7794593c1a76f57563747ab1a5e9d95ca7c5d3e3b091e77f18f18a6eb73ec3b8
db5b91b6a2633723a534c2401125be406b11bd878c27f63a43753721479e7a9d
f45c7a992073bfc532f806778f042767030000132fb3118c010000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c8d97775013cad6c04134702521288a102482140b5d4868d22e2da11b7a94
264d4213446a00a52b424217b880d24395163ac895de4209bd89100801444140
a43d7c7f7c7f7cf3ee9bb73367cffe76e6eccc9e3de7ec2e071d1d9dbdbb81a1
a42e4a43c21129eae46ae3682f2a2e21fad4cdd1084447f75b7eb757067a9aa0
8b908b67431012a1863ad3836712c374eeac7f5a31f2e04cd13f4369fe495736
787ded0cce3baae8aad0d155e0988f6c2e9cf11f4f11e6cfe8e8583efd16fa2e
f7423b3a3ae01a524dc5c8d772334337be580e181ef0708a75a6c7ad321aea40
364e7598fc049dbfd5135c29a101e8ca085838b86b0ce208c3b3dc6b0b3bf9c9
f0f10a0f4cfc0f0448e71c8a21e105f923ff3fe3cff45cef002c161b24bc10b4
57be1cf05e154fa2fc5a4ab9e0d667325a513affc62a216d54f7c06f16bb03a8
1eb3128699f47fc1e10b243d1e6d2d0e0595a5d4413c5c8af797a48bd104aed7
4b4a2235e5abeaf259dc7dfb9e7e41074ee69283d0191ac88f9960b1e5992f48
e8d07ba924877563934b0a5c3fa671f10f55e20737aa654b379203f8b0b4430a
b48c2d88926dedc2c91fc250f63a6cbc7927f7b3bfbe7aa151cf9eb98f4bb1cf
e794bc95eddaa93b4c525c0c34f8abaa12401ef1edf366d907b9fc42c060b75a
198bb5501ac0be1e9d00ef9f9dd4bc71c5e6cac0d926c27c8a30b106be95fa08
7ed7f80ba69c973c2f9c47a3847c6a93d11d3cef5d571437780384631f5b4975
11fd6fcdafa107864b58d775ddc0169702f234d66ba51712d1188cdca33f31dd
da75b74c91eaaa8c447fc9797d4c6513b0ba08633e649cf0e13db00642092d4a
59104b795dddc251ab3d500017ead1bd78684552772f14fdbb32e3b7230e6004
e4f94f8ec657ff7e5e7bf893a921bccfd0c74f6ec8e3fda1dd450460cbb4d6b9
c0a1e0fea99ff0e376d73a5b03fcf392c0f169eba07c8f35b49812714c7e3bdd
78f3c647cb11ba5cef7345b7ddb19c276eca18c66e7958e100201720484f7889
54c6585fc643de9eff371e2b5a4df4757575517eb5d86aa952f1d3a4dd9383ef
6b8a38ca77bf2f2bd5ed70e632666991ed9de69f9bccb160b2dab3c11ebb1318
14b5444f98637717589aa5922776a0f147f5f7a1377036aaac0e843968564a41
d6c9ceb1b5e6a0cc627662f64d3f994bfcbd4933e878c1e827d756816546cf11
e097f991951b516bdb3c246ea95b7b99954df8cf2bda31dae87808777c39a68c
3c3747d591e1034ac364f9b581da8a9a0654f3d72cda1b44b6359d0335402320
a1b6638a57d266fd0338244543e7eed41e1e6fdf26fbf7e72cbeb46f68d00e4d
39a1b8d144f6251293dd741b76476c71896dbea38dc568eb75f2bab9dcb537a8
c6f077cf4c5a51b3b270454e20e92b2321c72137823d48e4a4ea43b0bf7c6f0e
51b96a3a2843018cbc388cb069a54f652ab1f816a361c832f7d232136db040e3
1c59ed885ffe2bd48af9896905838228cc4774fe11d5765655f6c132ca29fe72
aa0c3facd5f05254dd1511798b2b25de0d3d32e057750e6e1f6da40d239db54b
30c2e56618eace3d8282d8fe0641fe7230559f848839fd352ada49b1c8ed2cb6
08bcf338abcca66a5a54ce37868c991cf0ddd679dd840dd632dfd4f78cb5c03c
d23f067a04e42a14bb03cb1236f1e89b2277661a6e9a8cd19b33311314a20218
896a51e77e48f1ee25ee251d0762a0bd953ef869478fd295c3a1a6aedcb05662
9142b257a909561259b3bbcddf36aa16e4bd5ce7c22c1117342ff68ec3c9e53b
ca24cc45a899d15161540b54716dbcd7e12dd6b1e0be4eb4bdcafd9f16e02a71
fb6d9173880d886d619108ceab347f37b77c51118a9be32f97f52d05288bfd5f
80fdbf78fb8def18eae3667c56e1e708f46c41d59f4f84bb900367b3e0ff587f
c4040f3b120394514adc8de07f5af0dfd8ce43e8d15fa724b44e2f89d3223f13
ad6267f056813871b3232cf62daea7ec7800081b5772bff1f971437480dd47eb
30b299e3e2a0847e96095717b2b5ede38fcb2f02dbc91d478a04c1e52fdd86ca
ac7ec0cabb5b977646d52402ce1f4fc7a68a358f1c3ddaf2afd5b4448dda1999
6438309a7389c12a65a8896895d5c97a484fbb69079311ca7f01227782def45b
bbcee52c595854c139dc294310d040d83579f36557ef4083c46802ea7e7e1212
6618233370ec61b9b507b0df16b12c8482d861cf99fa66bf205de3ede0c88bc3
a58b254a49e8611c837446add58c998b748126337ec7f1e17d02689b48cd7aaa
1a367323a65f132a00e1afe15d001039d051960fc6343804d8a6352863a95dac
792004d0387ea1d524c1673f6fbd2a6b7d297765bb7067f62d8b32c7cd9a7e55
42eaaaab43924b54cadf85f309c5690d4c13ee2098a725665d73058065a03c02
44ace9482d72e4103ff2183f490fd589a5295cf8daf038feb0f5107482a6fbc8
fedf4ed9fa72686ebe1bbf0fe86a37e888f654b9e9d9bcb419cfa97ea92264e6
09e6c39a4d43cdc2ea627e5b4e28e78cc495769262e82ee3ad5925b07cb2a343
14d96e68e14651a6db224340bd09e35ae1b066e484e485dee3d116525fd55170
fc403e40042c1bdc26940927b892accdbad733e05456c33d465cba3bafc261ff
3a13e16ace911549938470817df5bf14de77e5a7b2aabe052aba645f5f746d39
4eef4dbdd70674e876a85e55f378944f12dab2e7e70d38edf47a83262c6e2a7b
d040178f56116d0af4066addc16c55bcc3e007a2ac9672d903485658299445f1
f7e0c4232564e9c36b3300f3eb659a1b5e958ff121ecd9700486d30bb97dd82a
623d75ac9f2b38421d57fff42e7460cfbcb4d3c0289d8a9a3951251e2c39b377
6ac7d03632d33993ea56a7ef26d576f1133ca6a86c6a76a72fe44865c43653a3
9a8514c8feaa82404c6104d2e2d88b1113423673e82d2e5f1fc9ab6f68b3c3ad
eeb5bf9550c1605f5da9e96865384e62313a8def6c09469a46c446626ace6cc4
9207a5d2202efe756e1f64a7eedbcd3d19331fe5c9f9f52021d2a8785b8602f6
2ba034cbf1593e3dcb56d03f3f047ee58e073588838ed319814539518dd2825c
46a07b3d4f26027da3db58f6d3dcda8950707a57cd1a36d4eb9a0f0c3ef6e49e
75d2f4fc68f8177592885df08dc63db3858a14673850ebe15068a6dbc8bd6ece
58e65d2fb664f54998bee34381da7e281c08cf588818e5806a2d390910341262
beb254dfad99e7f51ed013beed90212643e0e81fd34256d88f18c2dea67e0085
8cbca7c6dce38acc04b872022785fd5a327d2c44dd68a9131a0971bc28beb8fd
d6b78243b1e112d4b469f6bf904a3d42259223d96e0649ac653cc76247c36e89
91530170a6b1251ace2afb3bfb08a7d8ed5244cc79fd6b8e1ee2deed09dc710c
71456e7fd62fb3a8536bccf65f9259eb84994bbfa4ccf0f8540fefa084801a2c
e787544c751ee2a6e169903778c8ab0d4f5c784c39cd1fe32cc41e4fafe49aff
d80083cffa8a3b39f9557fccadb61bde61882ae67cf3032acc47621aeb203f99
b635622c0a5efc58cebd9f008054dc66b3b66d7e6053506bb7e1cfab5575802c
36991808a4c97c13097df995152e7a000ee48a7a7380c61b570e0a756a08377c
e23722f6b2391d697139352e7a6e3aa67d4bebc57d690c6b18e99d9bcb771d1a
beaa5acfa4a5ae7aba573a6cd72e5ce37b875da93e93bce5e46275895f8f53dd
9742de1b654f0354691842d30179a46d8e52e37e4a7a91777a4f7e5bc44e7ae1
f5087d84674e8f968f31c3678e7f4ef11f0891b98ed298bac88701dc7c27a0d0
d82fecbba26b2df61ed14d75ef9d9ad71b5c8772668eb3e15c00e653a6e26810
78ffaff24f39faa222c512856472e069b2b8764c153482de17fd4a9554b902f7
321c123fcb619f43a53f56bb23ce7faf8e151b48a75c75e2e4f77d9035e61ada
6196fa9c5ab2c88b730c135498d3c039a4f065fe7adfce07be8dcedbb33d61dc
8c111c2853d90727c48c33bd2e60b9a56e39b0f20c9e06f01b178c549bb10e19
af1aeb4e6e7b54dab9e4ae708ae81de58b5522e5ed1cc4864e60d24fdfcd598e
795e0cf5389a17ad093166bfdc7cd983e3f9e35bd26f59f362be19ac3d77b672
3519e331bed70ba64c9126656ec24cdd8f745e74b4cdfd94c8a0008c17fc7530
641ba94afbaf7a97f3547e17f14628332b040a359c9ee639a0cec97b793f50ec
5b1d21d74c53bed73599603c0f16687901c5e8016b03d75f5e85bae79ad8a6ca
e28d60087696d3e25d6224795a685617fcdc78fd523ae540337e8e39cfa4d9d7
2a61f79b2e1070580449e154d5d944cd4875837a35c61fd64cee18241203e85e
8342c3b90f2f95b780c8efc9bb8ad1ce4990bc474a51f9a72af2d2f6a638807e
3a00e64df0e837bebffb2c2455341760f6655e1cf12175f2499fddccbb1c6d27
91d07aedcef26aecd762df331f51b5c2b2246c13d36879ce1969d4ce6061b919
58376201ed5ec463431a9e9a180018b3ca03fea889e8586e511977d7dc9af2e8
26da8e3bfdc83252cd35dded936e6123ca6ed7d0bd60f8cf37f6ff84778e0e76
6efc4a8085740ecff6fdfe4b21d5f5d4cafeb40ef917ff2e7aa47c0d0000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c01d70128fe18000000656f5053334d52463167492e696d6167652e30312e
737667fe020000af01000001000000789c8d524d6f9c30103d2fbfc251154d23
15b0d9242d2b4c6e917aa81235ca3962c18015af8d6c1336fdf51d0359eda191
2a6134f63cbf0fdbc5ddf1a0c89bb04e1acd81251488d0b569a4ee388cbe8d7f
00b92ba3c2bd7504a1da71e8bd1f76693a4d53326d1363bb34a394a6888005b2
3b2aa95fff0564799ea77317ce4519907de5c4a335ad5482433b2a3573eddc50
d5b8d088b61a950732c9c6f71cb6147df64276bde780ea50469b68535cc431e9
ac6c481ce3423154de0bab896c38bcbc84c689809ded0ff50a7dd6d263c2d109
fb14941ff4b31340906c5358517b72e480e8f7f9ff091546501ca65e7adc99ce
5b07a3de31b4587bda686c396fcd2b66dbabf1348b574e9a64e8c9481ddc30fa
8d926504fe4059a4abe1507f6e8c5e9e5b0bb3c5c068d5d72fcb895cfd879159
319cad3c549d580f77a951f6fafbac9be5c90dde59b8db5d6f45cb214985797c
dafefa7dcfba9fc98c4f284b06dd9d2c66f4f6cce1355bb5bc38ce89d8cd9289
e559200fcb71a5ebde580e07d9340afdb646fbd8c93f18806583ff88b857558d
8facf4bd74043f55ed852ad240514651115e6b19fd054c4fe845fe020000ba19
e129d7010000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c01fd0102fe17000000656f5053334d52463167492e6c696e652e30312e73
76676d040000d601000001000000789c9554ef6e9b3010ff1c9ec2d554799582
314e082182f405366dd2d4cf150d0e58f14c644c49fbf43b3b6e43aa666da504
9dcf77bf7f48e4b787bf123d72dd89561538261423ae366d25545de0de6cc325
46b7eb20ef1e6b04a3aa2b7063cc7e1545c3309061465a5d478c521ac1043e8e
ac0e52a8dd7b8371966591bbc563d218a387b2e3bf75bb15921778db4be9b056
ddbedc40a3e2dbb29706a34154a68115063a1b2eeac61438a3781d4c82497e15
86a8d6a24261088d7c5f1ac3b542a22af0fdbdbd38ed8fd66ded47ef943060b0
efb8fe63897fa9bb8e630460935cf38d418702c3f4937b5e800207b2c043230c
6c466e75dfca27f0ccfd9d6a155c7546b73bb0f620fbd753e8312961a0a915ca
aa89e994a2e3dfe25bc83cf2826d7d5918bd1e4bb3a7a3805ecbefdf8e89dc7c
428863b4d93a0f3edbff5b2a37bbb750f1c911a3844eed03a5e7d5dc56a0d497
9e1abc369ee70cf93211bcf09f8851fbfb81668c64199d2d114b4902e77942b2
254d170c39e2d140cc60e0d9b3bec49a41d3253b73c50b4942c6efdd9d3e52f5
e51c35afde81f18daaec9a52eb12948113f426ddc45a4bceabf4946e3a4af7eb
0a5e999664b1a02c994f21539b3690a15333493c4990db8fc33af80746834878
6d040000f1c4f1e9fd010000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c012103defc1c000000656f5053334d52463167492e706172616772617068
2e30312e737667d2070000f502000001000000789cc5954b6b1b311080cff6af
5028452d645f761eb6bbeb10da735bdae414429077e55d11595a2439b65b0ac5
f911bd9442a1bd84fe2b43e8cfe848bb769c9098f6d2801f2b691edf8c6666e3
83e988a30baa349322c1911f6244452a3326f2048fcdd0eb6074d06fc6fa2247
202a74820b63ca5e104c26137fd2f6a5ca835618860148e04aa437e54c9cdf27
1875bbddc09de275a7114603a2e95b25878cd3040fc79c3b5b3d5d921436323a
24636e309ab0cc1409de0981b3a02c2f4c82c13bee371bcd46bce57988931955
602e3dcf951c8b0c791e1cc6396259826fb631ca982e4138c14c0010b5262a0b
a9d6955223d666c62932b312180c9d9a00ce703fde3a79f9eaf0e8f004441a3e
2703cad1473494c2789a7da0bd68ef45b51a9211e3b3de111b518d5ed3097a27
4744a04fa0777ada8f03677ee537572c5b3a2e89315409077d76664f56b1476b
a1dbe75af45830039733d654bdb7497b238e35c5c85a6bc48aa6064d130ce233
f7fb802d483f4ff0a4600654834ab7947c6613541f0a09b942da28790e4919f0
f16ae5d54643bf05549209cb1385db21aabed681b3190735b35b3ccc163e5da7
b3ab0a61acf8b32755569eff058af5190779ff5681e8829454df2a8e6a6b4361
58522272a888fa9696e8ed96df861608db2e84f6fe2a865677d7dfb909a2b377
27c54b7645b3bbe8ae15ef45b785780bdc6e6cc03620de8332512457a42c96f0
b52ea856f7eccc423051a7ba89dd2e76ae3c22d242aa048f589671805e2bed04
bf9463c5000aaa7b7b71f97d31ffb1b8bc5accaff04d3f80c95669969103c3ac
369cd1542a62dc108096a4ca71a3fe51c134820f4129d8a05047480e9d8a1f07
f6ef7ee0fdfdc7021ec16c62c83509605341069c661b59bbbb8fc56aeae48ea4
a20ed947d75f7e5e7ffdf5fbeadb623e5f7c9e6fe28ea2f663811398e55a2229
d6125bf7c65a87d83ba87ae39fe796ebb87a2b23300d94b2edd4422db436cf3a
a10fe3cc0f51f5042f9f55a3fe1700ebd47a463be1f2d1b96fc6f60ddc6ffe01
89167f41d2070000458a731321030000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c011903e6fc1c000000656f5053334d52463167492e706172616772617068
2e30322e737667cb0b0000ed02000001000000789cc596cd8eda3010c7cff014
aeaacaadb4214e424a41097be8bdad54ed79658849ac3576e4380bf4b8fb2495
7adad7e2453ace07b0294b5ba9854390638f677efecf644c74bd5e0a74cf74c1
958cb13720183139570997698c4bb3703e60743ded47c57d8ac0541631ce8cc9
27aebb5aad06ab60a074eafa8410172c706d32590b2eef8e197ae3f1d8ad56f1
61500fa3192dd817ad165cb0182f4a212a5f9322a7739848d88296c260b4e289
c9623c24c099319e6626c6101d4ffbbd7e2f7ae53848d00dd3e06e7e976a55ca
04390e2c4629e2498cf7d31825bcc8c138c65c0210b32e6a0fa9e6cdae5e9453
639896d5e6db5bbbb263f00e10ecb831bd91dc804865c1f4570bff59de140c23
ebad17693637681d6330df54bf2ff80219448c571937b0d5adf7e64a6c2c68b3
281530a3c268750702cd44b97b731aa764e00395e2d2f278e48aa0fab1012a9f
91db30572f2fb391378774f6ad4628b578fbba56e5dd1fa0d898919b4e9f25aa
c868ce8a6749aaa74e24c89252990ad666a9451f92414def1fe007a3c181ba61
57dd165bb3a44b5d7d0deeefc37abe3f08abb8a3701f370cff775c9f84cd79bd
80fcd3c0bfa4c9b0b57996243b712245666d3c34816f42d354d33c6bd19bcdb0
8aebaaae1caf6b4cf033843ab1530e95f34c6928064335045a28699c055d7201
461f55a939407d62ababede3f7edc38fede3d3f6e1a9312bf8376693929bf6e4
80b069fc266cae343555e38136c074c58da6132a782a119a08b630916b6d8f02
be279702bcaf092746e57bbe3a513bcdfd939afb1dcd6de3b4671a8f3a675af2
2411ec9caacf998446744cf716d2f3c28b51b6d277293bea0727d50f3aea074d
457961b7e699bd9ecea7bdb68de298f43bc251b7e8cf44d8ea3e53c6a86557f7
c32665efc5ba3dfdf5355935bd662aa170f9686d3b9a8f7cb4bf3e43b859aee0
41d5006a72d729cf12de060d6cf8216987e70c5f9db73a7e3dbac8f93db217c0
3b3740b02b80e0721500dfe15e81510bd08fec5fef69ff270467adcfcb0b0000
3a017d3919030000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c01da0125fe17000000656f5053334d52463167492e706174682e30312e73
766736040000b301000001000000789cad534d4fe330103d37bf62d00acd2235
8993948a564939ec79b52b21ce28246e62619cca7648f9f73b76530aab5680e0
107fcc8cdf7bf31ce7d7db47094f5c1bd1a902938821705575b5504d81bd5d87
5708d7ab20374f0d50a93205b6d66e96713c0c43346451a79b38658cc55481bb
92e5560af570ac30592c16b1cfe26bd204e1be34fcafeed642f202d7bd941e6b
69366545819aafcb5e5a8441d4b6a52397a4b3e5a2692d6d18c355300926f959
1842a3450d6148817c535acbb50251177877e712078037e711c6d25b252c75d8
1bae6f1cf31f756b3802814d72cd2b0bdb02a9fad98f27a0a80559e0d00a4b27
637f74d3c9676a9a8f39d5294a19abbb07eaed5ef62fbb70c464514a9a3aa19c
9a844d19ec3e87ef20f37814ecd6a785b1f3372e9defc5f55afefcb173e4e203
423ca3f3d6f7307afbd996924343198bd8744603f8d59c45ecfb49128f9d3a96
243d4253095dc93dd1b8a9b64e1c42453ece68d6b4dd7bf69aee24f9bbe8c91e
3efd123cdd7e7bf8c9dba3fe685eff0f91bd04ead2b4a5d62529c92003047a22
bfe93a60cee0979b67641b4da9778fa29e3cc8dd2b5f05ff0092663eb2360400
000d12db1eda010000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c011b02e4fd1a000000656f5053334d52463167492e706f6c79676f6e2e30
312e737667fc030000f101000001000000789c8d53d16e9b30147d0e5fe1a99a
bc49c1d81048822055d5be6fd2d4e78826c678f1ecc89892fcfd6c4318add669
0fa063df738fcfb986e2fef24b8057aa5bae640909c210507950472e59093b53
871b08ee7741d1be3260a9b22d6163cc398fa2beef519f20a55914638c23cb80
0325bf082e4f7f2392ed761bf92a9c1f4a2078a95afa5dab9a0b5ac2ba13c26b
e5edb93ad88d23adab4e18087a7e344d0957d8fa6c28678d29a13d1dee8245b0
283e8521609a1f4118da8de25c1943b504fc58c2fdde15260132eb7778a43e4b
6e6cc2aea5fa873bf99b7c6e2904566c51687a30e05242cbbefaf70752368228
61df70633b23df7a56e26a43d3b12695b4a5d66875b2d95e4437adc25113a3d8
7a525c3a37042f31181ea7ef248b6834ecf0c7c6f0e7b935b71a0c745a7cb91b
26f2f53f8cf813dd6c5d0ea66448407ec3e3a8991ff254873e7605fc55e78da6
f59baf8129c5044507857e9e23084ca519b516f72d15b56f1d46e6e407c34c57
d79951ad7af9de693a1f18467899ac510a0859a174b9c10ea6db09c68985047b
4692399cfa7ddf48e214619025d3f63a9bd82b7cd3d8a423ba5d7254f98b61ef
8675fb16dfe4b97b7c7c78787a9acfbe3a9cfe1129f91329495716661bb4be61
921014dbc5e03e8b2d295e65632119b16ff05e83c2fdabbbe03723b82322fc03
00000621f85d1b020000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c011702e8fd1a000000656f5053334d52463167492e7261772d7376672e30
312e73766744040000ed01000001000000789cc593d16edb201486af93a7609a
2a3a69b671da4e4b04e9236cd2d6eb8a186ca310b000d7c99e7e0770da465aa6
dd4d4ae270f8cfcfc739c7f4f178d0e8453aafac61b82e0946d2345628d3313c
86b6f88ad1e37649fd4b87406a3cc37d08c3a6aaa6692aa7bbd2baae5a11422a
50e02cd91cb532fb3f09ebf57a5da55dfcfed01aa31df7f2bbb3add292e176d4
3a796dfcc01b0808d9f251078c262542cff0ea01387ba9ba3e403e2178bb5c2c
17f4435120cd4fd2815db3ef9c1d8d4045019bb4434a30fc16c648283f809861
650048468becd03935672de8c04390cea4e4e7e7b8f3ca505f2060344b9f8c0a
50a4d14bf723c27f334f5e6214dd16d4c926a023c3203fa5df2b5e5006cdf0d4
ab00a955ce1dac3e45d079d35860463e38bb8702edf4f8ba2a665352ae80ca2a
13796af299a0fc8d07244f5acdcc69719d8ddc5c14fbe6cc373a7dfb3157e5d3
3fa0c43369d56d2f1ae57b3e487fd1a41cfa4b831c9f8a388f738f62082ed29f
d7411ed345ead54349f26deef3bf8c9d01a3aa10b2b18e8734863014d2a58350
6b4d287c38c55954816bd5ccb169aec2ce6a7196a95fa0aaef87307b72d3f4d6
317c504268a0fed92b8fe0c351037a09dd40b64dd29256f1710dfacb7f843ec0
dba6501a37409786efb4146fbca98d4b1adff9edf23732b4531c44040000ec6b
021917020000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c01f90106fe1c000000656f5053334d52463167492e72656374616e676c65
2e30312e737667b8040000cd01000001000000789ca594d16edb201486afe3a7
609a2a3a698ec189d52432e9236cd2d4eb8ac6c44661d8025cc76fdf03f65227
6dda69bbb00d9cc3f9bff3239cdf1f7f2bf42c8c95b56698ce094642efea42ea
92e1d6ede31546f7db28b7cf2582546d19ae9c6b3649d275ddbc5bcc6b532629
2124810c3ca46c8e4aeac37b8974bd5e27218aa7a214a3276ec54f53efa5120c
ef5ba542ad8d6df80e160ab1e7ad721875b27015c30b029c959065e5180675bc
8d66d12cff12c7a834b240710c0b79c39d1346235930fcf8e803a70274b2df8f
c7d4072d1d74d85a617e79e51ffac10a8ca0d82c3762e7d09161c8eec3fb4a29
684131dc55d2c1ce246c6d6ad543d3628ce95a43c83a531fa0b727d59e66f158
93cc5360aaa5f634947c2768787c7d5f324f46603fbe0e466ea6687e3600b446
dd7e1d1cf9f6172041d17beb9528da842fd7a512a3d181c0bb1c12b08749079a
f4156735f1690963731cfc32fdd437e5134ac3fb2917df1d2ec1e805d61b1ca8
7e970586757662c8260cd9e5597de4c3e2b450705b710380d0055aa20b8cf433
77d2e00e5d0df66467a775765857e1fed10c7f4bbce4ddab647a7689fe0836e1
76febfde72d0a3f433417be8a7967fa819e5fe3fb38d5e001a946b2cb8040000
dbacef20f9010000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c01f0010ffe1a000000656f5053334d52463167492e74657874626f782e30
312e73766755040000c601000001000000789ca5545b6f9b30147e0ebfc2d354
9d4d1a1793cb4604e94fd8a4a9cf150103561c1bd9a6a4fbf53b268486b691a6
ee0164fb9cf3dd044eef4f47419e98365cc90c68100161b250259775069dadfc
1f40ee775e6a9e6a82add264d058db6ec3b0effba05f064ad7611c4551881d70
6ed99e049787f71a699224e150856b520a649f1bf64bab8a0b9641d50931606d
4d9b177850b22aef8405d2f3d2361920219086f1bab1388f9b9db7f016e927df
27b5e625f17d3c48dbdc5aa625e165068f8fae3001d0d93c90b1f541728b0e3b
c3f46fc7fc533e180604c116a9668525a70cb0fb7978df80420b2283bee11627
c361b455e2194db3b12695c492b15a1dd0db5e74d3ce1f31a320464d8a4ba786
46df22727e1cbe834cc351b05bdf1616ddcd52babb88ebb4f8f2f99cc8d77f10
3230ba6cf7ea44c9965876b2b81c53ae877c5d096639c551b01e142d5793a475
125ca5b58c5fa5f5a2242f0eafa5d04b9a8ede11accf86d71b1814f9b92c1aa5
3338f2b214885629697dc3ff20208d5b7be11ac17785c88d4943373a245a5fb9
8c6fbb8ce72ee96433fe7ec3e66af35f36e9e873957ccce7117f1c3ef97c8bbb
597e0cd77dd0f3f8bcd45d023bef2ff92a4ed255040000bf17e739f0010000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c01790286fd22000000656f5053334d52463167492e756d6c2d6167677265
676174696f6e2e30312e737667a50600004702000001000000789cbd956f6f9b
3010c65f279fc2d3b47a930a1892ac2183f40b64daa4a9af2b1a0c5871ecc898
92f6d3ef0edc1065c9fea8db5e400efb7cf7bbe7b194e476bf95e4919b5a6895
d2d0679470b5d6b950654a1b5b78734a6e97e3a47e2c09a4aa3aa595b5bb4510
b46debb7135f9b328818630164d03e65b197426dce2586711c07dd2e3d6e1a52
f290d5fcabd185903ca5452365576b51efb2352ce4bcc81a692969456eab944e
1970565c94954d2974a7cbf1683c4ade781e298dc889e7c142b2cbace5461191
a7f4fe1e370e05c2a3f318bbd43b252c4cd8d4dc7cc3ce5fd45dcd298162a3c4
f0b525fb9442f653f7be500a4690296d2b61e164d01ddd69f9044373b7a7b482
adda1abd81d91e6473f8f25c4de647c0a485429a905d33d23f581f4b268103c6
f832187b778c865f3d4063e4fbb7bd221f7e03a4eb88da62a7902cbadf4c9592
3ba13b0254b94ba00833ef69e6ecc8b301667aaad3c090ad37a710e10942f42b
84a84388fe1543b3955e5696869799851b4c0aa3b74e1bab1da1bb813f37fe7c
9f83ef11f3d172781398e52576207001aa3fe307713e13284afa922b124e223f
8ed92486951b7f862bd3991fcfd9cdc73339710429cfaebbe5fbeece453d11a8
1c4f31c0752f53eb4a9b946e459e4b002bb4b25e2d9e39ceb4b32fb23bcee595
b49ff0c98cd16ded2921af4a58812709b0deff969d7552a3f8c4c5338c273fc6
d1ebed60acb364d5cb3ba8bd720e0c8eac9c4b43ce8b19af1a778245af87a230
1a0e4622041ad62ffa1e4eff96f1f6d4f671827f2acbf1775c52f3f1a5060000
0bf22f8b79020000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c0173028cfd22000000656f5053334d52463167492e756d6c2d6173736f63
696174696f6e2e30312e737667880700004102000001000000789cc5555d6f9b
30147d6e7e85a769f526053026694306e94fd8a4a9cf150503561c3bb24d49f7
eb671be7632cd9262ddb1e0cd7f6f539e71e5f44f6b0db30f042a4a282e7300e
11048497a2a2bcc961a7eb6001c1c36a92a997069854ae72d86abd5d4651dff7
619f8442361146084526030e29cb1da37c7d2e314ed33472bbf0943486e0b950
e4b3143565248775c798c35aaa6d519a858ad445c734043dad749bc319323a5b
429b56e7d0b0c3d5e4667293bd0902d0485a8120300bd9b6d09a480e6895c3a7
27bb7100884fcedbd8a73e72aa4d859d22f28b65fec41f1581c080dd6492941a
ec7268b25fddf302942981e5b06fa936272377742bd8ab299af83d2eb8d9525a
8ab5a9ed99758759e03151888d2641b95513a32902c3b0f816328bbc601b5f16
86de9d4ab3b3414027d9fbb783231f7e438863b4de5aa6182cddbbe00d23de68
a7c0baec12a015b318d42cd0c99d1dc5ccc63e1d3514e57a2c221e49c0bf9280
9d04fcb734741b16144a899216da7430a8a5d8786fb4f00a7d07fefce2cff31c
ef1d8568ba300f3084731b26e3d02678719aec5c2760e4d64cedb3990dec7a50
f0b21532871b5a55ccc8a805d781a25f8d92186ff5de0caf6a75cbf4473b0a29
45af0274db98b9195964d1feb515d856ea5c007871887dd97f048defee4384d2
3b83781fce2dfa9e67bf91e2707ed1e0f45a06c7ffd760d74ace66df6cf1498b
7d17e32b19effc9ec6090ed31425a9a5b5e0c0da7d5cbe065332624a3c133e4b
f5e31dc757fb8af0f8922799fd6fae26df001aaf3e6588070000831426627302
0000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c011e02e1fd19000000656f5053334d52463167492e756d6c2d636c617373
2e737667ac040000f501000001000000789cad54d16e9b30147d0e5fe1696add
6a056c12d49241fab0f76ed2d4e78a82012bc646b629e9be7ed74092356ab449
dd832ddbf7de73ce3db69cdeef5a815e98365cc90cd38060c464a14a2eeb0cf7
b6f2ef30badf78a979a911a44a93e1c6da6e1d86c33004c33250ba0e23424808
19784a59ef0497dbf712699224e118c57f92528c9e73c37e685571c1325cf542
8c586bd3e5051c94acca7b61311a78699b0c2f09e86c18af1b0bf5b0d9780b6f
917ef27d546b5e22df8783b4cbad655a225e66f8e9c9050e00f44d3d4673eaa3
e4163aec0dd33f1df377f968184600b648352b2cda6518b25fc7f90c14b42032
3c34dc42653896764abc42d36c8e49252164ac565be8ed59f4879d3f63922002
4d8a4ba786921b82a6e1f01d641ace82ddfabc3072f1c6a58bbdb85e8babcf93
23d7ff20646474def6adf00b911b331bbc67a6ab80c0cd2674544093203e8888
6e697007cf233e2a599d9a74149017db530574e6b76c3771c524003c128d5ccb
15462ee2e7b26894ce70cbcb520066a5a4f5abbce502b2bea95e73a6d1031be6
88e1bf8090d2ceeeb5cce49b4b61bfba6199b19735ac61a4a1e338af6215ff6f
158e7db2fac8fdbedbf15fdc8ee887dc4e26ae91ea360e4e1b3536d7f6037d7e
29956f54cb6c031fce55ae6b7a035374bd86a7bfefdc4bdddfb2f17e0391c86f
0dac0400002d5603c01e020000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c016e0291fd20000000656f5053334d52463167492e756d6c2d636f6d706f
6e656e742e30312e737667b40700003e02000001000000789cb5554d8f9b3014
3c27bfc25555b995ca8721091041f6d07b5ba9daf38a0403561c1b19b364fbeb
6b631368d455576d72488479cff366e68d92f4e17ca2e0198b96709641e4fa10
6076e0056155063b593a31040fbb65da3e5740b5b23683b594cdd6f3fabe77fb
d0e5a2f202dff73dd5014dcbf64c093bfea9112549e20d55381f8a20d8e72dfe
2e784928ce60d9513a606ddb263fa817052ef38e4a087a52c83a83a1af78d698
54b53487dd72b15ca4ef1c07548214c071d48bb4c9a5c482015264f0e949172e
0068765f3fdbd64746a452d8b558fcd093bfb1c71643a0c016a9c00709ce1954
dd2fc3f72b504a02cd605f13a96e7ac3d586d317251adb1ae34c955a29f85169
dbd3ee72722ca6ef068a13274cb341fe671f988fc6d790a96709ebe7d789f91f
e6d4f4c910e804fdf8de38f2e90d448689dadbe658812de84ed451e61cf30a5b
a3abc1625585bf391518466174a1146c666605abf0caad898982bfa682463727
78d70c08669ad1ca8d55c892d54c79f44f63243e0f63a2c85dad8d1005aadf3a
393bd45c64f0448a822ac09233e994f98950d5f58577826001bee2de565af213
6b6a8d1c89d8c9bb927360ad4c3d0d3decb61afdd64e1ff8a9517961d27a3daa
5f19ed5134dff7247a739dc4b788be80236414c7c1b4baf9e6fe0fdc8fece2e2
b5bb9ee86fdcd988f56d2624e16d278ca1480c3c4281c6bf7928a630fc2d0628
b44c36770942e09b20a0e82e4948c63da1e85e519846c477ca028ac79fa13b84
619f8b310ccb54ffc7ee96bf00a8e85514b40700009f6e2c026e020000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c015304acfb20000000656f5053334d52463167492e756d6c2d636f6d706f
6e656e742e30322e7376678f2500002304000001000000789cbd9a5d739b3814
86afe35fa19ddd56bb330bd69110c659482f7adfdd994ea7971dc7c636138c3c
80e3a4bfbe0204c849daad531f5dd811469c0ff9d181f738f1bb875d4eeed3b2
ca549150f0192569b154abacd824f450afbd8892773793b8badf103db5a812ba
adebfdf5747a3c1efda3f055b99972c6d854cfa0dd94eb873c2bee5e9a08f3f9
7cda9ea5b653a0e47651a5ff956a9de56942d7873c6f6d5d57fbc5527fb04ad7
8b435e5372cc56f536a121d3716ed36cb3adbb839bc9d5e42afecdf3c8a6cc56
c4f3f407f17e51d76959906c95d02f5f9a138301b0ae6fc666eaa722ab758687
2a2d3f369eff2d3e552925dad8555ca6cb9a3c2454cf7e6cdfbf634aa79027f4
b8cd6a7de5b4bd74aff2479d746ace15aad0a7aaba54773ab7dbfc301c79c626
f3b98e496545130db0bf19e95e8dfdc6643c350137e3ef07c6ded8a135475d00
8732fff3f76e45fefa89405a8fcdda56e53db926875dee2dd56eafb3286ab3d4
9b7691f5797ab2569c7541b57f8d496e7f77edc1c98a8dd12c96774fc3817e45
7b0722340e6074202cfbe217cd0791df3b903e976312816f7999f9f2526ef8ec
f26eeaf4a173d37f1b1052d27ce82d8ae5569509dd65ab55aeedad55517bebc5
2ecbf5b4f7ea506669493ea44773a6cabe6a6700fbba8fc338be799bd7ff342f
bd71f4be7ebbd147fa154f1b2f2fc7c067978ee1737a4b3aff83df78bae9d96d
a9cd175565881d10ed098a4682226bd183d710f42c5dc164f3e55d36e1b55263
a6438e4f76669f27f02e92d94981b0ab686fbeba7bb44bc1ff643ad89fcbcebe
45efc946ff45f3d1cc6c9159e48f2e20b43788bc948f28bcb48f1e0898751e00
0388fd92b1532296aa287476aa24eb52edc81f406ad596717387fcf18de9e57c
86fbd25cfafa962498cf881987fa9d70c99e8c7595f799751ff911a7fa0a544e
0547e554003ea7a30f3c4efbc285c529b8e354303670da8dcfe15144b83c0612
95c720c0e771f481c763207a1e19d6b38bbe9d3e7b7079ee1f0061377077bb21
6063d536e3b6520bab6a8bb3ab7660aab69048db449ab22d24ce3e91434d1512
6da3584e42b49d22fb47ce08a7724b87acb61c6a8dd7b2da8e83f399e458a5bb
679223d5ee11178e57bc2d2778d55b62ca20cd64e09c496631f98a3a09736426
5b3986ca24cc5d30c9d099e41c8749e19a491e8c4cf2f0e799ec3b0301766b20
40ef0d042e9a03017e774022d5c9c875774033357407023176044ec6afe80ea0
b1dab707b0581db53b22ab9613fc0e0116ab33d71d828e55337e4587008dc9be
4580c5e4a8df1199b49ce07709b0980c5debf48e493316a3363f199fc12ab64c
0764990e2e643ab890e9802cd3e70e6ff5964ce767cb746c950ec82a1d5ca874
70a1d20157a583cbdfa62c95cecf56e9d8221d90453ab810e9e042a403ae4807
873f438125d2f913913e899b7f9fba997c037cde4fe88f250000d75a2c245304
0000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c017b0284fd22000000656f5053334d52463167492e756d6c2d636f6d706f
736974696f6e2e30312e737667a50600004902000001000000789cbd55616f9b
3010fddcfc0a4fd3ea4d2a6048b2860cd23f906a93a67eae683060c5b123634a
da5fbf3b70439a25dba46efb6038cee777efdeb34472b3db48f2c84d2db44a69
e8334ab85ae95ca832a58d2dbc1925378b51523f96044a559dd2cadaed3c08da
b6f5dbb1af4d19448cb1002a685f32df49a1d6a70ac3388e836e971e360d2979
c86afecde842489ed2a291b2c39ad7db6c05899c1759232d25adc86d95d20903
9e15176565530adde9627431ba48de791e298dc889e74122d966d672a388c853
7a7f8f1b7b80f0e03cc6aef44e090b13363537dfb1f3577557734a00ec22317c
65c92ea550fdd43dcf40c10832a56d252c9c0cbaa35b2d9f6068eef69456b055
5ba3d730db836cf65f9ec3647e049cb450c82664578cf40bf11132091c618ccf
13631f0ea9e1574fa031f2e3fb5e914f7f40a4eb88da62a790ccbb77a64ac99d
d01d0354b92ba04866d6b399b103cf063293639d060ed96a7d4c223ca210fd8e
42d45188fe15876623bd95de6c752d2cdc605218bd71da58ed18ba1bf86be34f
f7d9fb1e311f2d872781595e6247042e40e5605f019dc705716e0980921e7249
c271e4c7311bc790b9f6a798994cfd78c6ae3f9fa88923287976dd2ddf75772e
ea1981caf10403cc7b995a55daa47423f25cc2c08556d6abc533c799b696bea6
bdb894f60baecc18ddd69e12f2b2840cac2440bcff2d3beba446f1898ba7188f
7f8ea3b7dbc15867c9b29777507be91c181c593a97869a1733de34ee1841af06
50180d072311121af2677d0f277fcb787b6cfb28c19fca62f403b124f401a506
00001cdc28257b020000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c012d02d2fd21000000656f5053334d52463167492e756d6c2d646570656e
64656e63792e30312e737667ad040000fc01000001000000789cb594d16e9b30
1486afc353789a566fd20043d23664401f6195a65e57140c58716c649b90ece9
770ca64551bb5693766162fb1cffff770e26e9dde9c0d1912acda4c87014108c
a82865c54493e1ded4fe16a3bbdc4bf5b141902a74865b63ba5d180ec3100ceb
40aa268c09212164e0296577e24cec5f4b8c922409c7285e9a46183d159ade2b
59334e335cf79c8f5a3bdd15256c54b42e7a6e301a5865da0c6f0870b69435ad
c930b8e3dc5b79abf493efa346b10af93e6ca45d610c5502b12ac38f8f36f02c
102dcedbb94b7d10cc4085bda6ea9775fe291e34c508c456a9a2a541a70c43f6
797cbe210525f00c0f2d3370321c8f76929fa168ea62420a0869a3e41e6a7be2
fdf3ca779a2488814932616922f29da069587d2b99860ed8cedf06235f966876
3501f48a7ffd3c75e4db07404647db5beb14a1ddf85b888653d7e891c076794c
c016663bd16cc9e29dbdc06c2efbf4c25094fb4b88e802217e0f211e11e2ffc5
d01fb85fd18e8a0a3e9533aa953cb8d618e900dd05fcfb7b7fddc66d54856e0b
a50a28608dd668711d6212d89b004f0425ce73c7f74f96b3747c731b1092dc80
e26d706dd5679f3990c4c1b57332f4345ebb787207ce64632776df2f44d94a95
e103ab2a0e04b514c6d7ec37b5fc9d993bef80f22b6e7ed8c1c411c8ae1a58c1
4843ab957b5e6aff5c72ef0f5e9769d0ad040000250a01142d020000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c010b02f4fd25000000656f5053334d52463167492e756d6c2d67656e6572
616c697a6174696f6e2e30312e73766748040000d601000001000000789cb593
6d6f9b3010c75f874fe1699abc49036c203c44907e826993a6beae683060c5b1
23634ada4fbfb3616916b55bfb624818db77fedfefee4c79733a08f4c0f4c095
ac300d08464cee54c36557e1d1b47e8ed1cdd62b87870e81ab1c2adc1b73dc84
e1344dc114074a7761440809c103cf2e9b93e072ff92232d8a2274567c199462
745f0fec87562d17acc2ed2884d3da0cc77a071b0d6beb51188c26de98bec209
01ce9ef1ae371586e878ebadbc55f9c1f751a779837c1f36ca636d0cd312f1a6
c27777d67016a017e7ed7c71bd95dc4086e3c0f44f1bf9bbbc1d184620b62a35
db1974aa30783fbaf1152948415478eab98193a13b7a54e21192668b4d2a09a6
c168b587dceec5785ef98b26092260525c5a1a4abe1234bf56df4a96e1026ce7
af83914f97687635038c5a7cfe3857e4cb1b405c445b5b1b89a28dfbd6b2136c
29b423b055760ed8c2e4334d4e2e7af60c935cd7e999a1deedaf21e81542f42f
84c82144ff8b613c08bf6392e95af0a7dac02546ad5687a53c462d90cb25fc7b
ef5f0e756e7d4402db751811a4f37bbeb0c01de8df9702d4e79b1542b3a4403e
8d837591a434437e1ac4711165096c83f18f8766591aafd31cd12848b37c9de4
e8c94178a5fdefb7de2fa54a45a8480400001770f2df0b020000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c011702e8fd25000000656f5053334d52463167492e756d6c2d696d706c65
6d656e746174696f6e2e30312e73766760040000e201000001000000789cb594
db6e9c301086af97a798aaaadc4a056c6039ac60f304552b55b98ec862c05a63
56c6844d9fbe6320c97695f47051248ced19fff3cd78447e73ee243c703d885e
15847994005787be12aa29c8686a372570b377f2e1a101745543415a634e3bdf
9fa6c99b42afd78d1f504a7df4208bcbee2c853abee6c8b22cf3672bb90cca08
dc9703ffa6fb5a485e907a9472d6da0da7f2801b15afcb511a0293a84c5b9088
2267cb45d39a826074b27736ce267fe7bad0685181ebe2467e2a8de15a81a80a
7277670dcf02ece2bc9dafaeb74a18cc701cb8fe6e237f55b7032780629b5cf3
83817341d0fb711edf90c2146441a656183ce9cf474fbd7cc4a4f96a53bd42d3
60747fc4dceee5f8bc72574dea05c8d40b656918fd4c6179adbe95ccfd15d8ce
df06a31f2ed1ec6a0118b5fcf87ea9c8a7bf009923dadada480c76f3b7548de4
6ba167025be5d981589874a149e9c59dbdc044d7757a61280fc76b08768510fc
0921981182ffc53076d215dd49f28e2b531a6c62a875dfade531fd0ab936e1ef
effef550eb46550e6da97589498410c2454b04d4b3dd8023609a4ff395117ba3
fdb7d4b06e5fac102c92125c167adb2c8a59026eec85611624116ea3f1978725
491c6ee31458e0c549ba8d52f8314338b9fd1fec9d9ffd2f4d8760040000b2d2
010117020000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c010404fbfb1d000000656f5053334d52463167492e756d6c2d696e746572
666163652e73766760110000d703000001000000789cbd58db8edb36107d5e7f
0583a26003ac6452247559580e8a3e372d50e4399065da1656961c8a8a9d7e7d
87127d91651b9b442a76d7a039e4cc9933c34362671f0edb1c7d95aacaca22c6
d42518c9222d9759b18e71ad574e88d187f964567d5d23585a5431de68bd7b99
4ef7fbbdbb676ea9d6538f10328515b85df272c8b3e2f5d6421a45d1b4b1e2cb
a014a34552c9bf55b9ca7219e3559de78daf976a97a430b194aba4ce3546fb6c
a93731f609e0dcc86cbdd13186e8783e799a3ccdde390e5aab6c891c072666bb
446ba90a942d63fcf9b3319c1cd08bfd666c977e2a320d19d69554ff98c87f15
9f2a8911387b9a29996a748831acfed67cde710529e431de6f320d3ba7cdd65d
997f83a4a5b5156501a64aabf215725be4f5e99b637d12d7034c65561834943c
13d4fe19ffc6e56c6a019bf17d60e4d74b68e65b0ba056f96fbfb48cbc7f0390
26a2e156cb83b6dc36c3439b3144f5046eac4e52a49b52c5b8d289827aadca42
3bab649be5b0e88fb2569954e8a3dc5b4b95fd0b81a9bfd347688b3c495fad75
6fa12fca1c2a37afcaf455ead9d4c43923aa34452fa8dee64e9a275565e1ad9b
a23756dca99edfe215e2445378513f7e5dbf33370dac2e39f458df3319adf790
b8d77c6cb3e532976f2584f6089937b99c939fae2f29f01e52e07529a09603ca
c818247896042ac4382c78b7585895a5e5000e8d542b38bc1d1ec0deb290662a
cd254a8f48534010004e75e3f4fe60e2c41f3a6d407f2b69932e14bc4cb34483
94a2952ab7f648e8b2a1c40ae163fdb99ddc497e3871c973205c8268741c5e88
428773a73da483c4f54d302a88094c4e631b19f46ff35d6ea107fe4491e78a30
8434b8a0c4131e32c9314e024e0316501231f43b0433bfe687f636504445e4fa
22f244e8f95e1891c0023a7641649b20a4a336c11d3966e4ffd36325bfd40a9a
adafc8eca11cb1ae1c313aa6243331ae24b37b92cc1f72c0bb1c083aaa240b31
b224f35b2c2c12f55092c1de93641e0c2ac98dbb712419d0df4afa4b5d1f1e66
6d16f4d3f66cdad4546a80bcbdd154c8e0ffaebb8899bbc8f4c20077023b5d40
88fb77eea29b20b801d1d4660014705a4f371367d73753ff4e34420918ae2819
0a0d33b19f23c3493b6c81b1a07765fe48143bb14caa4da25402cdc2104317d1
830b2ee82021cfc50e5c42221f3c06ae30de8d6f749ee69e51b39f780eb02070
39a52189040fa38087fddbfdea3d7063c7f50be2ed6dc0073c19a22dbde946d4
8e9b53223cd13d25a334c1390ae2211920e0d13187f757048faf67bfe980d078
46a7c9f067eb2f6870f51ef445b798f4aafefd1d21ef348c1f35882633f3ff90
f9e43f3cd72c606011000048bfe5af04040000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c01c80437fb1b000000656f5053334d52463167492e756d6c2d6e6f64652e
30312e737667592100009d04000001000000789cbd9adf8f9b4610c79fcf7fc5
564943239dedfd89cdc55c1efade56aaa23e463e1bdbe8306b013edff5afcffe
0076708fe494b23cd81a60d9999df930cbd7f2eaf3f331434f4951a6328f0332
c3014af28ddca6f93e0eced56eba0cd0e7fbc9aa7cda2335342fe3e05055a7bb
f9fc72b9cc2e6c268bfd9c628ce76a446087dc3d6769fef8da401245d1dc5c0d
a05312a0877599fc55c85d9a2571b03b679999ebae3cad37eac436d9adcf5915
a04bbaad0e71106215e72149f787ca1edc4f6e2637ab5fa653b42fd22d9a4ed5
89d5695d554991a3741b075fbfea0bed0404dcafed7ae8973cadd40acf6552fc
ad3dff997f299300a9c96e5645b2a9d0731ca8d12fe6bb672ab5842c0e2e87b4
5277cecdad2799bda84527f5b55ce6ea525915f251aded213bb747d37a4e3ca3
2a2699e63a1a826f31b21f3dbf9e7235af03d6767f60f857189a3eb2019c8bec
b77736231fdf1088f1a8735b164fe80e9d8fd93497dba4cef2dee4575d0adab5
ee65de4d8373b1de3c5efb206ea90aa419bea5447d234ab54d226d73726db3a5
b6993e73cbf55d6fccf5f7fd433f766e134b337793698a6dae2901d98e2007d1
35083f8ac03aa89267eb2012d6010d03a44f4ed7f9e6208b3838a6db6da6e6db
c9bc9aeed6c73453c37e97e7224d0af44772a9af94e9bfca1921a7aa89a3767c
ff21ab3ee98f425c3d811ff6ea487d5673ede5f518d862e818fe491e90f5dffa
5dcdf70d659aaf4db62ecb1ab036eba1cd3ac32eeb4b9074fe33396f97cbea9a
322a6662e805efa4742b6dd6089ea1ee43533ebec067f1c7d812a6510d85a296
706d0a6d5222baa619862836366fb9fe7f8f0cf46266d661d4133795538e4d6e
43d1166e215ce1b46d5d67fac4dbd6de291e0917334b2bc16ce8e29d361877ab
b79179ae96260bb42be411bd27a892a639ba6afe743e4df3b1e541b5bd306513
d736756dcf0353ea696b98a28b9629c645d7b44c31362853d00beb61aae906de
98a2915fa6c8784c31ec98b2b65f76ecd669d8317bb32d255f88ae69d9e1e1a0
ec402f610f3b2cf2cc0ea70d3b16223f5bb8da55feb37fbf1202c1cbe1635000
d3f100aedfcb387817348d90896bdb2fd8dc3445d39e14c3c6d6fd0909d3b0a0
6da244c2742f4e0762bbe3c64c6d42b9a29b37ef49dc1bde6d6b644b1fad518c
4896ad68c8db5ec5b87f8268e808a2c251036dc63028f3a004d56eccd4f495fe
d81044fd3548479097cd958f4e10c68ea0117a10593a82c8c251036df39ad896
7950826a37f6b56fd94f90bae69d204a7d10c4c62688b2b0250856cb975ce440
2f72a012a12d806214c32a460e2423ff8e66e4238846e1a5072dc7168d86a35a
3472e68462c71e413472a01a39d08ad01640370e4656c70deb23ab518efec872
d2d10f598bb1a5a325abb647908e1c68470e1423b405508f8311d47113f611d4
e8477f0439f5e687a0706ced6609aa6de6f45ac7f64a16906e40b91120a90850
6e6458e5d671d3abdcbc0b37cfba2d1a71c7e34eb7d111741b906d40b51120a7
08506d6458d5d671d3abdabc8b36bf9a8d8cf9233b779a8d8ea0d98064038a8d
002945806223c32ab68e9b5ec5e65db0f9d56b64c49fd32d3d56afd12bbd3659
e93f42dc4fbe01c3e4d373592100008b6c5abbc8040000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c010403fbfc1b000000656f5053334d52463167492e756d6c2d6e6f74652e
30312e737667e6080000d902000001000000789cb556516fda30107e2ebfc2d3
b47a931ac709841096b01fb0874e9afa5ca58949ac1a1b39a6d0fdfa9d9d0452
046a473b89c0d93edff7dd7d6787f4c76e25d013d30d5732c301a1183159a892
cb2ac31bb3f46618fd588cd2e6a942e02a9b0cd7c6ace7bebfdd6ec9764c94ae
fc9052ea83076e5de63bc1e5e329c7204912dfade2216880d143deb05f5a2db9
60195e6e8470b1e6cd3a2f60a264cb7c230c465b5e9a3ac3630a3c6bc6abda64
18d0f1627435ba4a3f791eaa342f91e7c144bace8d615a225e66f8fede2eec03
0483fdd6ee5cef243790e1a661fab745be95770dc308825da59a1506ed320cde
cfeefb4c28484164785b73033b7db775adc43324cdba35a9242c3546ab47c8ed
416cf623af8b4949089c1497964d406f286a1f1bdf864cfd8eb0b5cf13a35f86
d4eca825b0d1e2ebe7b622dfde40c421dadae685511acdd16625bcd66e0b5db9
12bb19ec122eb82e044305b08a805001bc82302611461aac881c97e940212f1e
8f39046f2ce3e9ad7d15234aa07e939044a835a78ec607440e2317794ac208c5
07fb0363cfe217ac3b94992b680b62d8cef540d436414813bb6667bd5c16b582
b2af78590a805e2a69bc86ff615693b5e995e8982c9c8aa96fb7ba46ab7af1e1
501470483bf9fbd1b001bab9b60598107cddb43d108efb26b0fc34cc4cedefb3
3dc81775429fae0bece24e2fcbb6a37c2adf4249c95c932fb55a75bd6f147a99
f9bbd46d75b4c2a220a6bd3d3870b6d252992158a5e4bf556c0f362631dcd334
ba0912324387e10c0e390a43e859b89d93e3e1d83a87b41fdabd1dc15e84591f
c949114d88754c8e05694caecdab7a989a37083e7de2e4a0cc69b869620b7601
d20ade271c39e900eff6e7ab4893c0667e01d2b530dfed53a8d58a49735dc110
9e03debb643dabd479e12eead96ea2cc9b3ad73ab767178dd1e02d6501dae669
db3adcdfafff09309e9060dab52b8d490c77630cb021092651ec9047a9fd57b2
18fd05de65a670e6080000b462706604030000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c01760289fd1e000000656f5053334d52463167492e756d6c2d7061636b61
67652e30312e7376677d0600004802000001000000789cb555df6fda30107e86
bfc2d3d47a9348e204028525f461efdda4a9cf959b388985b123c769607ffdce
c15060304d55fbe0fcb83b7ff7dd773927b9dfac057a61bae14aa638f409464c
662ae7b24c716b0aef0ea3fbe530695e4a04a1b24971654cbd0882aeebfc6eec
2b5d061121248008bc0b596c0497ab4b81e17c3e0f7a2f3e4e1a62f44c1bf653
ab820b96e2a215a2c75a3435cdc090b382b6c260d4f1dc54299e10e059315e56
06f6c3cb7238180e924f9e874acd73e47960486a6a0cd312f13cc54f4fd67100
084ff663e4421f25375061db30fdcb66fe211f1b8611800d12cd3283362986e8
6d7fbd0205258814771537b033e8b7d64a6ca168e67c5249703546ab15d4f62c
dac39be730891f0127c5a56513921141bb65f12d641238c2f6f93a317273a2d2
cd9e5cabc597cf3b45befe07913ea3d596d6758316a85d0b0fd459d19239a5cb
5e63ebc6275a8d779ca2f895d4e448ae697c26d72b15803fe712eee53c430fc9
d1777154f0dbc00ddbf4e0f6abb2e831dcaccda332ab944ef19ae7b900b84249
e31574cd05447d57ade64ca307d6394fc37f43ae30aacd9e86cbbbbc15e69b5d
2097e019353004b725986025814d7591c7347a6f1e99f06cc70e3993a0dc37da
4efbf53edb493f694434fdabcf77efd7e63dfac7f479fc617d067d41a94bf25a
6173563399c359bb458556ebdd6c19d54bef8eaf7f9f1a978b73869c3615d59a
02e5311aa3a3c364467c328ae1824057f7e846fc4d09f7c0d164e613329f86a3
78e6c716dc6539d827911ff7998689fd592c877f001a1ff9b47d060000a7142c
2c76020000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c015b02a4fd1e000000656f5053334d52463167492e756d6c2d7061636b61
67652e30322e737667090700002d02000001000000789cb5555d6f9b30147d4e
7e85a769f5260db0211f9041f2b0f76ed2d4e78a0403561c3b33a6a4fbf5bb06
92a0aed1aaa68de4087cafcf39f75c5f11af0e3b811e98aeb89209a62ec188c9
8dcab82c125c9bdc09315a2dc771f55020489555824b63f60bcf6b9ac66d0257
e9c2f309211e64e02e6571105c6e9f4ba45114796d140f492946ebb4623fb5ca
b96009ce6b215aac45b54f37b091b13cad85c1a8e19929133c21a0b364bc284d
828309c1cbf1683c8a3f380e2a34cf90e3c046bc4f8d615a229e25f8fede064e
007470de3ef7a977921ba8b0ae98fe65997fc8bb8a610460a358b38d41870443
f663fb7f010a4a10096e4a6ee0a4d71edd2bf10845b33e2695845065b4da426d
6b519fde9c1e93b83e68525c5a35947c25a85b16df42c65e2fd83e5f16463e0d
a5d9b74e40adc5e78f9d235f5e20a465b4ded63be1802ddbb460bdc547ee6947
1e8427f660d8223ff49f18732605bca7acb4e77c82ee93c105185416be06dbb0
438b3def954f31b25b4e2a37a5d209def12c1300962b699c3cdd710159df55ad
39d3e896357da4e27f8089fa7b7314d1b32e73a562cf42fedf3dea7722227a2a
d01fda4767f36beca3347223fb6b49a6e71ed180b8e16090826b8ca4e1d49db4
0cf3e0adbdbc11e69b5d1b484b6190f44d011bb0ce0eff2b237c8f96ae53fde2
aef6d79686b3e14c9efd9e4dafeaea117e4e9f1f8b57a11f6d6cef9f9d394adf
ab99e0e6ea721f4f02fc37bf4dbfebfa70241cc7f6c3b51cff0537472bba0907
0000b5e819a25b020000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c017e0281fd1c000000656f5053334d52463167492e756d6c2d7374617465
2e30312e7376671c0700005202000001000000789cbd555d6f9b30147d6e7e85
a775f22605b021841041fab0f775d2d4a769aa289860c5b123634ab25fbf6b20
1fab92add2d23d605d7cafcf3de7d898e46ebb16e899e99a2b9962ea128c98cc
55c1e532c58d299d1946778b51523f2f1194ca3ac595319bb9e7b56debb681ab
f4d2f309211e54e0be64be155caece15d2388ebd2e8b4f9b528c9eb29a7dd5aa
e482a5b86c84e8b0e6f526cb61a26065d6088351cb0b53a53820c0b3627c5919
581f12bc18dd8c6e92778e83969a17c8716022d964c6302d112f52fcf8681307
007aba1ee2a1f44172030a9b9ae96fb6f3bd7ca8194600769368961bb44d3154
efbaf102144810296e2b6e60a5d72ddd28b103d16cc8492521551bad56a0ed49
34873767c024ae0f9c1497960d256382fac7e25bc8c41b08dbf83231f2e1949a
7deb09345a7c7cdf3bf2e91544ba8ed6db662d9cda64860d06ef3b07c4851d21
24e81804470ab3d80d60cbe3c991c704b27adb5ba577672c3bd2c9f2d54b3e74
6063d8b6eb1c856e2f3b0cdd10233bed6432af944ef19a178500c05249e394d9
9a0ba8fbac1acd99465f583b646afe13ba51ba317b2243e7452795269e45fd9b
0574061efc77f9beffe6fafd0bfa1da333894aadd6e8d64746a15bbaffecfe7c
dacfcb3a1c761abbd138242e419da55d38a8fe37e0690487349efae33072c313
7074cc4c7c6be26f0ed3be3f3837995cdfe15cf07cf56a83836b18dc1d997164
85f7215c0c10472fc2e84ab6cfc0d2310c714c82d91e1a81e3c7d98b8e533a7d
03cb018989efa5cae1962f7e78b9503548537abddf875162ff658bd12f044223
e11c07000019552d0d7e020000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c01cb0334fc1c000000656f5053334d52463167492e756d6c2d7374617465
2e30322e737667ab0f00009f03000001000000789cbd57db8e9b48107d1e7f45
479ba8b312347de5323213adf29e5d299ae788d8d84683c16adab167bf7eab1b
0cd899f1241a661f0c45575355e7d485f6fcd3715ba21fb96e8aba4a312314a3
bc5ad4cba25aa7786f567e8cd1a7bbd9bcf9b146b0b56a52bc3166771b0487c3
811c04a9f53ae094d20076e076cbedb12caa87a736b2244902a7c563a70ca3ef
5993ffa3eb5551e6295eedcbd2d9ba6d76d9021696f92adb9706a343b1349b14
8714e2dce4c57a63522ce1e16e7633bb99bff37db4d6c512f93e2ccc779931b9
ae50b14cf1b76f56d11b60a3f7addc6dbdaf0a0308f74daebf5acf7f57f74d8e
1118bb99eb7c61d031c5b0fbd15d9f310510ca141f3685813703f7eaae2e1f01
74dee9aaba02556374fd00d8be97fbfec9ef6c52c221a6baa86c348c7a14b53f
6bdf9a9c075dc0567e3e30fa611c9a7d6a03d8ebf2e31f2d237ffe4220cea3e5
b63199c919ba45fb6de9bb878ee9b5e3b855e333b6942202aa830a179c527d74
714204544322c789c4481f5b16f5e3136c0e91668b87cb50d9896d931f9d6b40
4c5a4e624ac0b15df7b36ab1a9758ab7c5725982c9555d197f956d8b12f67dae
f7bac835fa921f3a4d53fc0bfe18db9953289defbb16ec3cb0565d46d6672cf1
eb2cf1739624572472a18a78c89f8c89b2140d0c4572528654cf90926fc20fef
f979b1099e8ef7d4038e204f2584221549229c7809470adab1185da61ba2d1e6
1568f20aba2da82bdf0923543ffb4ed8c4be9775f0d7c2c0a8bcea96d1686acc
c7c238c8707fb6cec5f53a17e775ce545b6eeede65598c6739a7d3ce0067dc9a
09c3372970315581032304e67b045f602407f934ee7bd22fb9ee994d14910eaa
a3b0ff04247680bf3c609b87c7f1f8bf4e6fcf2e57a7f9c1a13fdf66c40a7f34
64af31c00706c2ff8d01313010bf1d03fc19067ca3b30aad74bd45ef3932357a
cf4e479fd7d4a2a092841ee7000d3980e77248fbba7c9d1bc989f2b88c08a549
c806f3204563cde8047205ba9802ba2b228fc7162e6fe319cb7222e8bc05a838
49122a92c13ce22d2927cd0bd0bb0319c0ef0e1d1350c0a4844f6da4ec20725f
5d2b4e015a324e22c8a7f062c038328e064d18d9267a1933ef314f92767710f2
188401e70b27bb8c7493b81b73133010bab4428149c78072b6d1b0ac7e11bee8
e14fd2f06c808918bd949389f20f2714286d7bb5a51df7d651c2c7ebbf877f9a
ae8752a49e9b3fa8935dd78be82779aa5210b6073cd165de5ab7b691b00dd02f
3b47b3b9fd6b7d37fb0f1df9a6edab0f00009667d517cb030000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c01f70308fc1c000000656f5053334d52463167492e756d6c2d7374617465
2e30332e737667b9100000cb03000001000000789cbd585d6fdb36147d8e7f05
8b75500758b4488afa08ecf461efdb80a1cf856c53b610993424bab6f7eb7749
ca11e3ca9dd1280b109b14a973ef39bcf748c9fcf36957a36fa2692b251701c1
5180845ca97525378be0a0cb300bd0e7a7c9bcfdb641b055b68b60abf5fe7136
3b1e8ff8c8b06a36331a45d10c76046ecbe3a9aee4f3d04692e7f9ccae067e50
12a065d18abf1a5556b55804e5a1ae2dd663bb2f5670612dcae250eb001dabb5
de2e8224823cb7a2da6cf5228861f23479983ccc3f8421da34d51a85215c98ef
0bad452351b55e045fbf9a851700e2dd6fc6ddd62fb2d2c0f0d08ae66f13f94f
f9a5150102b0877923561a9d1601ec3edbcf1b5040a15e04c76da5e1ce99bd75
afea339016dd9a5412965adda867e0b6ac0f2fb3b0c38c30859c54254d36249a
46c8fd1a7c03399f75099bf1edc4a25ffdd4cccc257068ea4fbf38457ebb2311
1bd1687bd8d561ab0b2dc2a5d854b293795535ab5aa015a4c021faeaecbe1b5f
8e655dac9efd50def4128b0c4612723d10e73a10c5fc4af9bb42fd0032c194ff
6cf6aa2cd163cfa1cb7f630b11d68257f544e308c7dc9e1df30e8fe4a62dfa1a
87a44e4ed1e63c5068f7e4f630d7e26463b228c2ae5c3837ca99eb6121575b05
cc77d57a5d0364a9a40ecb6257d5b0ef7775682ad1a03fc4b15b69ab7f84c973
afaf647adaaba36842203a9f19605baf9bef4f5637854465a376e823435aa18f
e4d2b73f6e976182976e4980d994c30772c2da7177366f02a63405b83c21539e
62eea3a37e29b6853850c61e596ac9b231c8329e63de25c119a4351a5b4e63cc
a33c891ddb1e1cf52b576495bc5df4f275cd93c8551f49fb8a8f7d4fa7d1e805
ef0266c93b55bb7c29f6372a4f4c6f4e494e8cd6fdf862fc038d74c38cc9c5d1
683c9a1d77515ebc0bec83596129ed4f32cb3183077d1e8fec5f03f645e377f0
af9d5a8bb0e8cdeb3e056c89fdff0a30fa5e0a2c6f28f0bd71d331bc8c58e736
b60a866a5475e351ac1b9c8a81655180b4deddc3236f8ddd61de2312a6698a13
3ea5894dc34dba731d81721a6102e0598a2360e7e1239a717fe93ec6f1288f2b
0a5a77245137b1f4c760cc688e33c04b29cef328f6f01123b1bf34c8785bb55a
35e7011b659d8db28b8dfee4cbe6dbba03da3c63f0934c99ad5bc2624c922449
dd7cec188ce194a35751dd1bf10861faccbb281e152fc8ad8a346fd750924a8e
d384f0270ee5d3d435a19b106a67eee1eb8fd3b194cea186a684bb0e2406de80
c377ea5fff2f21a4d501e4184188b86788628fb969ab34e557b3b18460f05e49
012fb39dc9322f806d607fcdc69bcccd3f1a9e26ff023277e293b91000007587
f4e4f7030000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eoPS3MRF1gI>
789c01d70228fd1e000000656f5053334d52463167492e756d6c2d7573656361
73652e30312e737667c0070000a902000001000000789cad555d6f9b30147d6e
7e85a769f2261563cc578820fb05d3264d7dae283860d53191314dda5fbf6b03
4ddab5ddd6e521706d5f8eef393ed7c9bf1eb612dd71dd8b4e1538201423aeaa
ae16aa29f06036de12a3afeb45dedf350852555fe0d698ddcaf7f7fb3dd987a4
d38dcf28a53e64e03165759042ddbe94186459e6bb557cba6980d14dd9f31fba
db08c90bbc19a47458ab7e57563051f34d394883d15ed4a62d7044a1ce968ba6
350586ddf17a71b1b8c83f781e6ab4a891e7c144be2b8de15a215117f8fada2e
3c020427dfdb784abd52c200c3a1e7faa7ddf9bbbaea39460076916b5e197428
3064dfbbe72b5040411678df0a035ffaeed35d27ef81349fd654a760a937babb
056e3772781c791326250c6aea84b2d504f492a2f167f12d64ee4f05dbf8f5c2
e8a7d3d2ec682c60d0f2f3c751912f7f5188dbd16a0bba54704e015aa1612bbd
6938a9dd389de714ec887329c50e32aac3784ca8820a63786b9848ec1bc6e173
d18e0595d5edf38a825954c30f8eb6c3b5b0094676ce2b55d576bac05b51d712
e0369d325e2f1e0031603b336f36a1afadf36666b96f119cc0cd33d2eccfa4d9
efa4c39974109e977538b10ec277d2aeb91677bc7e9339d06db8e2ba94e2a134
d0ac68a3bbed5111d31d2d31b5dcdb4e7f99d96c74962c89bd4a52f07944e284
d218b1302029dc1ad1651a9328ccb278f2233440fb6f02c2417d3be2a1190f49
9490248e631484248a5812063095928c51c6e2047919c92865cb103d9cb44259
994e4f9618e35343b899d10d95d0951ccd90c69317684a2084b30a62f23e1bfc
97cec01cae12c6488cc63072659c0139a60e39210cd4a4c7c119c193f449d9f3
368993f4698f58bdaddccbccaebda749dc39bed41a55a71477c7ee3a6274c0b1
1dd839da616216c213b1e831762c17b9fdbf5d2f7e01f52d4ec7c00700007b7e
5f42d7020000
#<end update:2020/03/23 12:56:08>
#<begin attach ID:eFOeoIHnmFb>
789c013804c7fb1800000065464f656f49486e6d46622e32303135303332372e
7376677a1a00001004000001000000789cbd99d16e9b301486af9ba7f0344dde
a426c136865085ee62f7dba469d753162041a51081b3747bfa1d1b03b1bbd149
335c343901737c7efbff926375fbfee9b1403fd2bac9ab32c664e5619496fb2a
c9cb438ccf225b6e307a7fbfd8363f0e0886964d8c8f429ceed6ebcbe5b2bab0
55551fd6d4f3bc358cc0ed90bba7222f1ffe34904451b45677f1f5a404a3efbb
26fd5c57595ea431cece45a172dd35a7dd1e2e2469b63b1702a34b9e88638c03
0fea3ca6f9e12862ecc387fbc5cde266fb6ab944873a4fd0720917b6a79d1069
5da23c89f1b76ff2469f805c3d2f633df46b990b50786ed2fa8b9cf953f9b549
31826437db3add0bf4146318fd53bdfe25154828627c39e6029e5cab474f55f1
1344a7fa5e599570ab1175f500dabe17e7fed352e7f456146aaaf2525643bc5b
0fb57f32bf4cb95deb8265fcf7c2bc37d7a5c94f6d01e7ba78fbba5d9177ff50
889a51ae6de6717487e47cbbf250a47a99d5fc728de136968550d696c2865a7c
63bfac451a0ad8ed1fec0ac8d5fc227d127a5215cab9783b977c93d796bb727f
acea183fe6495240f2ac2ac532db3de6058cfa509deb3cadd1c7f4a2ef34f9af
542ece497445e92aee41cd762d5376b327e3ea13ad9e91b6229f4faf9ee9950e
b86bf589ad7e5f952548ad6a94d5d5a3b282a8d49a68d8c63dfe676d9dc5c131
2bef96c30b82ef12330c3984b0a83ad40bf27fd345e1caf3a2e07643575ce686
cca8bf18842b6e983e18377d60989ed0195d4ffc096c1fd8b61fd59f68fd9ded
c99cbe2753183f78c1f8416bfcc09df1611b7bbb1b71a4e2e859cc072654ec14
0a12745440ee010be2db5c84e35c840617d49f910b1a4cc045687331aa3fd1fa
3b2e2899910bca26e0227c818bb0e52274c7056c63cf821193810523f6072e54
ec940bca3b2e20f7c0056536179b712e366693346797c4a66893363617a3fa13
adbfe382cdc9059b828bcd0b5c6c5a2e36eeb86057ed9111d3c1ff2a76ea7fc6
3aff43eec1ff8c98fe4fbc687cff23b5ff7e67c919ecef87531d12408db9fbd9
b8fa4cabe76cbe4302e7531d12325bfd33ef47adf72317dee7ac3f0ef8d40a15
043eef4217bef7993638077fcbdc9019f5177d6a9a9e78a3a6975f7657a62774
867def5caf3a72c7b6279e65fb71fd99d6dfd99ef019a8ef7c4f42f73f7ab67e
dbf8b01cd2f8f0e6ccf84435409c3c8ba301032356cd50cb0471d50cf5fe27aa
19925440ee010b6235430921e35c10830bd5b7cec505e51370416c2e46f5675a
7fc705253372a13a50d75c9017b8202d17c41d17d41f5830626f60c188f9c005
757578ee01a041c705e41eb8a0becd051de7829a4dd29c5dd2048704d0637331
aa3fd3fa3b2e663924f07eb1dd374ab6fe675cd0960bea8e8bf630d07ade88af
7a25e6bc59627db7c4aedb25d6f74b8badfc4fd1fde2370a98b5207a1a000014
0a1c6b38040000
#<end update:2020/02/21 12:22:08>
#<begin attach ID:eFOeoIHnmFb>
789c010705f8fa1600000065464f656f49486e6d46622e73616d706c652e7376
6762230000e104000001000000789cbd9a5d8fe2361486af875fe1aaaad29506
88ed381f2398bde87d5ba9daeb154b12882693a01016b6bfbec78e9d0fb36b2a
ade38b8143128efdfa3c6f744c66f3f1f65ea2af59732eea6aebe195efa1acda
d769511db6dea5cd97b1873ebe2e36e7af07049756e7ad776cdbd3cb7a7dbd5e
5757baaa9bc39af8bebf862bbcee92975b59546fdfbb102749b21667bdf1a0d8
435f76e7ecefa6ce8b32db7af9a52c45ae97f369b787036996ef2e65eba16b91
b6c7ad17fa30cf63561c8eedd60be0c3ebe269f1b4f965b94487a648d1720907
36a75ddb664d858a74eb7dfecc4ff409f0e8fb3c96977eaa8a16145ece59f30f
1ff9afead339f310247bda34d9be45b7ad07577f13af3f480512caad773d162d
7c732dbe7aaacb6f203a93e7aaba8253e7b6a9df40db97f2d27f5aca9cfe8ac0
9ceaa2e2b3c1feb38fba3f9e9fa7dcace58479fce389f9bf8da7c63f7513b834
e5efbf762bf2e17f4c448cc8d736f7317a417cbc5d752833b9cc627cbec670da
e31389bb99d0612ac1a45cda1a0de3eff66ffa04f068f836bbb5724c11de842a
311683377e6cb9abf6c7bad97aef459a96903cafab7699efde8b12aefaa3be34
45d6a03fb3ab3c732efecd789653ab262567f10a62366b9e528d9e9ac5a753f1
b143f1e2ddaefa5457bfafab0aa4d60dca9bfa5d90d0d6624da4d7cc887f5f9c
223cf657fe338317c4a611288330ee43b91e3f355818ad7c3f0909648c560c92
f3d4a83f9a90151b2d7bea1373d5c9b8ead825f3d83ef420675af6dc2c3fd7e4
bba49ed8a73ed7e5df514f3aea8935ea89dfc33e0a311bb867d6b9678a7b36e2
1e0753f0739f9a2b4f45e543598c70a87c3caa7c3c47e5e91c95a7faddde283f
95f2319653c22ec8a772303a83f1e903f269473eb5417ec8c1a60277aa87fc15
c1b2aad806fa89829c528e3e64e7b9d17098e8ec3333fb4c149fa87a38a83d61
f3353a4c47dfa83e95eaa9443f74a09ed2a1abb20d3e7b003eebc06736c027b4
ef6fc4dd7e1cc6c203588536b82792f0e798630fb92133ea0f463af4a119fa70
023d260ea9c7c10cd8873af646fda9d4afb077d2ea29ee6769f5c207e0871df8
a13df0a18c3dee933811717217b3c113d6faa09effae0fe2aee08dd070f8ae11
8accbe8826be2081435f88b6cbb62f22dd1746fda9d4af7c415cfa82cce18be8
812fa2ce17913d5f9070f0c224c6831726f1c817c4ba2f48ef0b32f605b9f345
6cf6453c6d925c7649748e3629d67d61d49f4afdca1762d3e2ca1794cce08bf8
812fe2ce17b13d5fd0517b3489c9c0bf88adf24f89e21f720ffc53acff329498
eb9f88fa070a4907e50fa2b93609a046ff61c8a83e97ea1975b749606cae4d42
aeabbf633fe9d84f6cb0cf68bf1d0888160a1304fdafa436b80fa8045cdcf621
376446fd41eda69f62df083dbfd98da077b24950d4cfb049003d1af666fdb9d4
afb077b24950dccfb049c875fd3af8b01c1c7c78b3067ed7f4337c1727830d26
71307842c4564d8103e50ac83dd80253dd17e68743184f7ce16493a07c31c326
01f4e8be303f1994fa952f9c6c12942f66d824e4bafe3b5f748fc7b095c7639d
2fc8c80b93180f5e98c4e1e00b115bf50509952f20f7e00bc2745f981f9f6132
6d925c7649336c12408fee0bf3f333a99ff5bf243bf4c50c9b845cd77fe78bee
011ab6f200adf345b719e8989fc4a35e895a6f9668df2dd171bb44fb7e69b1e1
ff11f3baf80f39864d8862230000e17d9d5b07050000
#<end update:2020/02/21 12:22:08>
#<begin attach ID:eGxPmN7aPNW>
789c013004cffb18000000654778506d4e3761504e572e32303135303332382e
7376677a1a00000804000001000000789cbd995d8fa3361486af27bfc25555b9
2b4d127f603e4661f6a2f76da56aaf57d900091a06224236b3fdf53d36361fce
2e53690d17931cb0393eaf791fe558b3fbf8f65aa0af697dc9ab32c67443304a
cb4395e4e531c6d7265b87187d7c5eed2e5f8f08a69697189f9ae6fcb4ddde6e
b7cd8d6faafab86584902dccc0ed94a7b7222f5fbe37914651b455a378b828c5
e8cbfe92fe5d57595ea431ceae45a1723d5dcefb03dc48d26c7f2d1a8c6e79d2
9c62ec13a8f394e6c75313630f2e9e570fab87dd2feb353ad67982d66bb8b13b
ef9b26ad4b942731fefc590e7409e8e07919eba99fcabc0185d74b5aff2357fe
abfc74493182640fbb3a3d34e82dc630fb9bfafc412a9050c4f876ca1b7872ab
1e3d57c537109deab1b22a61e8d2d4d50b68fb525cbbabb5ce49360c6aaaf252
5643c92341ed9fcc2f53eeb6ba6019ffb830f2dbb03479d51670ad8bdf7f6d77
e4c3ff2844ad28f73623023d21b9debe3c16a9de66b5bedc6318c6b21046da52
785f8b377a5fd626f505ec0f2f760574b07e93be357a5115cab558bb96802f79
6fbd2f0fa7aa8ef16b9e240524cfaab25967fbd7bc80597f54d73a4f6bf4677a
d32397fcdf546eceb93145e92a9e41cd6e2b539ad59369f589511fb61579627e
f55cefb42f5cab4f6cf587aa2c416a55a3acae5e95159a4aed89866ddae3dfd7
662cce3cb2218ff203716185be902133a1de909f5a8e73b68922e23d8a602364
6ec88cba9b01db8891e9fd69d3fb23d353b6a0eba93783ed7ddbf693fa13a33f
34252de87b3a87f1fd778cefb7c6f7dd199f4aa323e6dfc55474188ce20113d4
3914b4a3820eb1a0775c04d35c04232e98b72017b07deeb9086c2e26f52746bf
e682d105b9607c062e8277b8085a2e02775cb0010ba338ec5918c5bce742c54e
b960cc7001b97b2e986773114e73118e9ba425bb243e479b14da5c4cea4f8c7e
cd055f920b3e0717e13b5c842d17a13b2eb8dfb747a378e07feedcffbcf33f1f
fa9f5bfe4f4834fdfe23f5fe3d63c905ecef79731d1240cdf8ed67d3ea33ad5e
90e50e0982cd7548c86cf577de8f5aef472ebc2fbcee3820022b54e705cf37a1
0bdf7b41e77bb03de486cca8bbe90563d35332697a79701f989eb205debb71bd
eac81ddb9e12cbf6d3fa33addfd89e8a05a837bea781fb1f3d5bbf6d7cd80e69
7cf872667c2a8daeed3e8a99f27e78170bd131a162a750500980a20272f75850
dffa31a0749a0b3ae242f5ad4b71c1c40c5c509b8b49fd99d66fb86074412e18
9f810bfa0e17b4e582bae30264742c8ce2b06761147b3d172a76ca05e3860bc8
dd73c184cd059be6828d9ba425bba4190e09a0c7e662527fa6f51b2e16392488
6eb3dd374ab6fe3b2e58cb0573c7457b18685918c57edf2ba9d86db3244cb704
b97bff73dff44bab9dfc4fd1f3ea3f3ebbb5807a1a0000939e0f5c30040000
#<end update:2020/02/21 12:20:48>
#<begin attach ID:eGxPmN7aPNW>
789c011205edfa16000000654778506d4e3761504e572e73616d706c652e7376
6765230000ec04000001000000789cbd9a5b8fa33614c79f279fc25555d19572
f105731925b30f7d6f2b55fbbcca0648d0301011b299eda7efb18db938bb4ea5
353c0c390172ecbffdfb27c778b61fdfdf0af435ad2f7955ee3cb2c61e4acb43
95e4e571e75d9b6c1579e8e3cb627bf97a44706b79d979a7a6393f6f36b7db6d
7d63ebaa3e6e28c678037778ea96e7f7222f5fbf772389e37823af7ac3468987
beec2fe9df7595e545baf3b26b51c85ccf97f3fe00279234db5f8bc643b73c69
4e3b2fc0d0cf539a1f4fcdcef3e1cdcbe269f1b4fd65b542c73a4fd06a0527b6
e77dd3a47589f264e77dfe2c2e7409c8e0f3226e6ffd54e60d28bc5ed2fa1fd1
f25fe5a74bea2148f6b4add34383de771edcfd4d1e7f900a24143bef76ca1bf8
e4467ef45c15df4074da5e2bab122e5d9aba7a056d5f8a6bf76ed5e6c46b0a7d
aaf252f486e02546ea4fe41729b79bb6c322fe71c7f06fc3ae8977aa03d7baf8
fd5735221ffe4747648b626c334cd03312ededcb6391b6c32cdb17630c973dd1
11a67ac2faaef8a3e932c6a86f7f7f78353b4006cd37e97bd3b62943688aaba6
c48b38b5da97875355efbcb73c490ac89d5565b3caf66f790177fd515deb3cad
d19fe9adbd72c9ff4dc5d09c1bdda7b6132fa065bb112975e3895d7b32d61ecd
a79d60e7e21353fca12a4b505ad528abab37c94153c921699d6607fcfbda34df
215ee32587030229e3501e51d885ed80fc5473115dc73166d132a66b0eb94566
d49d24385cf3c1b82798daa79d0ea79dccc83c710f3da819cf7b66579f19ea67
a49ebaa73e33d5df514f15f5d419f514f7ac0f63c27beeb96bee89afc1e743f0
f918fc0c33fbd4b3e1d4d3a09ffa6830f591cba90ff5efca0453cfcc6f7babfa
a4551fb53d2233802fbfe745636c02dfb307e433453e73413e21826ba670e777
319331ed6217ec13a6308f978c0af821bd488e06e799893fb7e3cf2500544fca
0c00503a5db1c34dfcadea13adbee53f98413dc37d65e59a7efe807eaee8e72e
e8a77e57e3306e84910ca90e5d90cf14e1fe3214dc436ec88cba9391097d6087
3e18414ffc19a927c104d80726f656fd89d61f0d2ab0b9b827e104e0070fc00f
14f8813bf0611a81711adcc5b4b7c1280e7b4fc8d8a92948a05d01b97b5b90d0
f44568f74538f28544762e5f507f025f84a62facfa13adbff5059da31cd2bea0
539443e1035f84ca17a13b5fc863eb85511cf55e18c5acf7057555267506a054
fb0272f7bea077455264f745342e92e6ac92d814655264fac2aa3fd1faf53201
cfe80b4627f045f4c01791f245e4ce176c501e8d62daf32f8f4ef96744f30f7f
3dff8c9a0f8762fbfcc772fe7d8de40cd3effb532d12408df970c8aa3e6bd573
3cdf2281d3a9160999a9fe8efd58b11fbb609ffbdd72808746284de0073a74c1
bd1fb680cb2743901b32a3eea4f1602821d80abdf8f11f403fcb2241533fc122
01f418d8dbf567ad7e8dfd2c8b04cdfd048b84ccd46f820fc321c0871767e0ab
a25fe13e8ae597be1fddc541ef09193b3505e1da1590bbb705094c5fd8378808
19f962964582f6c5048b04d063fac2be39d8ead7be986591a07d31c1222133f5
dff942ed9111277b64ca17aae8575e18c551ef8551ecf7be90b1535f50a67d01
b97b5f50dff4857d078dd0719134679534c12201f498beb0efa1b5fa79f72479
465f4cb048c84cfd77be50bb68c4c92e9af2855a0c282f8ce241adc49c174bac
ab96d8b05c625dbdb4d88a7f8a7959fc077c1f4e9265230000cc749370120500
00
#<end update:2020/02/21 12:20:48>
#<begin attach ID:flrZtAh7JWC>
789c016b0294fd18000000666c725a744168374a57432e32303135303430372e
737667af0500004302000001000000789cb5545d8f9b30107c4e7e85abaae756
2a1f0642480a39b5ef552b55f77c2260c08a632363925c7e7dd740b8244aaab6
6a918cd6f67a7666d6103f1eb61ceda86a98140926b68b111599cc992813dcea
c28a307a5c4de366572248154d822badeba5e3ecf77b7befdb52958ee7baae03
19b84f591e38139b5b8964b15838dd2e3e2f4a305aa70dfdae64c1384d70d172
de612d9b3acd6021a745da728dd19ee5ba4a70e002cf8ab2b2d20986ea78359d
4c27f11bcb42a56239b22c5888eb546baa046279829f9fcdc60840cece9b7848
7d124c83c2b6a1ea87a9fc4d3c351423009bc48a661a1d120cd92fddfb0e1448
e009de574cc349a73b5a4bfe02a2e9b027a480ad462bb9016d6bde8e336bc074
6d0f3849260c1be27e74513f0cbe818c9d81b089ef1373df9d5333b39e40abf8
fbb7bd231f7e834857d1789bf126454ba4e941afe56170b9ecfc355bf8c22742
423bec2845c1c8290cede89593ef5dd9f54a25cd36d75cc8c94e53bfab30eb25
1317ea98452b1559255582b72ccf39e0155268ab614780245ead4fd506f855c6
d3a6f91c3be66ce76a79a6747d5fe9fa52a9f7df957aff44e9975b4adb2db74a
2aa84a393ba61abe485428b9ed7bad65efc4f03dfdfa1adf1632de6263125c60
d77651741d0621843ef1ede032ee52bc688c87bb0897bffa333ba16f5f7b2004
408823c09f2d8290cc5168fbfec29b07b06841898b87cce7a13f0b236411cf0e
e7d12c88d0712031f6a62766ba1374d1dff4e781eb4f66d48aed524d1f4a98c2
38356c1a9bdfeb6afa136677ac5caf050000abef21466b020000
#<end update:2020/02/21 12:34:37>
#<begin attach ID:flrZtAh7JWC>
789c014002bffd16000000666c725a744168374a57432e73616d706c652e7376
67140500001a02000001000000789cb554d18e9b30107cbe7c85abaa722b15b0
811012414eed7bd54ad53d9f0818b0e2d8916d8e5cbebe6be072c929a95aa945
0299ddf5ecccb026bb3fec047a62da7025734c7d821193a5aab86c72dcd9da4b
31ba5fcf32f3d420289526c7adb5fb5510f47deff791af7413848490002af058
b23a082eb7d70ae972b90c862c3e6f4a31da1486fdd0aae682e5b8ee8418b056
665f9410a8585d74c262d4f3cab6398e09f06c196f5a9b63e88ed7b3bbd95df6
cef350a379853c0f02d9beb09669897895e3c747973801d0b3fd6e3d953e486e
41616798fee93a7f970f86610460779966a545871c43f5f3f0bc010512448efb
965bd8190c5bf74a3c836836e5a492903256ab2d68db88eef4e64d98c40f8193
e2d2b1a1e43341e3edf01d64164c84ddfa3631f2e19c9a7b1b09745a7c7c3f3a
f2e90f880c1d9db7a530055a21cb0e76a30e93cbcde0af4be10b9f92c44f0646
697ca204b1f4955214be71eb9549516edf52a12f6ebaf6ae0125a3624aa08f0b
7a852c5ba573bce3552500af56d27a861f0192867bfbd26d825f97a230e64b16
b8bd83a9cd99d0cd6da19b4ba1e17f571afd13a55faf29ed76c26b9864ba10fc
58583890a8d66a377e6aab4627a6e3f4fb29be2ee434c451e4c730bfc4276830
6c5c4fc305d3dcfe9d41f025be8d40680415c8a3913f5fc6095d202ff1a36819
2e620843f2e2a28b4512cd9314d1d04f16e93c4ed171a031cbdc3f6c3dfb0523
a38191140500005116150d40020000
#<end update:2020/02/21 12:34:37>
#<begin attach ID:fnplAByF7Sp>
789c010a03f5fc14000000666e706c414279463753702e6d61696e2e737667dd
0b0000e602000001000000789cad96dd6fda3010c09fcb5fe1699d4cd5c6b1f3
9d2aa10f7bde8734f5b94a13432c8c831ca781fef5b3935068570adb8204f2c7
f97e77e73b7cc9dd66c5c1139535ab440a09c21050915705138b14366a6e4510
dccd2649fdb4005a54d4292c955adfda76dbb6a875512517b68331b6b504ec45
6e379c89e57b82248e63bbdb85875002c16356d39fb29a334e53386f38ef74dd
d6eb2cd70b059d670d5710b4ac50650a3daced2c295b94aa9fcc2617938be493
6581856405b02cbd90ac33a5a8148015297c78301b2f0ac8c179331e44ef0553
dac3a6a6f29721ff10f73585402bbb4824cd15d8a4504b6fbbdf23aab40b3c85
6dc9943e697747d715df6aa7e9b0272aa1b76a25aba5f6ed91372f336bd08991
a36daa9830d6107c8341ff35fa8dcac41e0c36e3e386e12f87a699596f4023f9
f4731f91ab330ce98826b6cd8a5b39cfea7a08f08e4cfc00c57e8777f7fc2840
1a8a717078556fe2b36767f9f22d9c0c6845371d46a719ea9df47da47166ddca
445e5632852b56145c6b9c574259f36cc5b896fb5a35925109bed376d8a9d9b3
c611b2563b4b0674bfabb626ff98ca38cbf5bd53a198da26b6219d0c02d6fe86
5e1c771612cfdb5f4414a2c0c7d8193f102488478fc4cc68dbfb7cc4bfe843ff
8cd4bffb4708e9517d4e39a6da5fb958ab4caafff0f07a656df61e1ec312777c
ecf634d609c6c7bebed26364371e9fac2b69214ea37d6764b4b5eaabf4343a78
5b4023a08dc46972188d4f368feba9e27522f7a3e20ddd318b371e3da98cb629
42e8ea64845d32765a5daf65b5a6526dadcdf40cbe33766eedf9db73f8eed819
769d97345f4ef34c3c65f54dc1727586153e19db8a4266edb4953a3be5d59fcf
f3820a2af51fcf73a6748709e6b25a814b0254052e9d5d6ff8714bf67e9eef3a
b2eefdbdd14f3cc2a01f87dd836c0f5d67f977e5a3dbd36fbd1e1062c0811520
d78d9dd003c4457eec0524d4abc4414118f95e042c2df9ea43c23070fd2002cf
9d0d93c434e3b3c96f3253a4e8dd0b00009e837c000a030000
#<end update:2020/02/21 11:42:55>
#<begin attach ID:fQSbv6osQPt>
789c013002cffd1b0000006651536276366f735150742e32303135303530312e
30312e7376673d0600000502000001000000789cad54d16ea330107c0e5fe1ea
74722b15b01de57244907ec29d74ea7345c001ab8e8d8c29705f7f6b2029adda
2ab9f60164efae6766c70bf15d7790e8899b5a6895601a108cb8ca742e5491e0
c6eefd9f18dd6dbdb87e2a1094aa3ac1a5b5d5260cdbb60dda65a04d11324248
0815782cd97452a8c7b70a691445e190c573528ad12eadf96fa3f742f204ef1b
2907ac4d5da5190472be4f1b69316a456ecb042f09e82cb9284a9b6060c75b6f
e12de22bdf47851139f27d08c4556a2d370a893cc10f0f2e7102a0b3f36e3d95
de2b61a1c3a6e6e68f63fea5ee6b8e11802d62c3338bba0443753fbcdf818216
6482db525838190e472b2d7b689a4f39a515a46a6bf423f4b693cd69e74f9824
60a0490be5d450724bd0f8387c0719879360b77e5f18f93e97e676a380c6c8eb
6fa32337670819189db7cd41fa6966b5990cce84c924475937c0639401ff7a1d
ac3032105905afddf888e9c873b1572f9c2201b98d58b042e3928e223e0dbc5e
39dc1f010360765a7f15305dae5f2a9e4886f8446279375cf2e073efdc8d5cce
85fd5465a506c70f22cf25b0edb5b27e2dfe023d65953d5ec24ea6197c77db5e
37340eddc933ee957d78af8549fbe75e0dcf5fb74a4f813cadcbd4403d041145
e7787719ded152f63c04ecb221f83f3e3a1b0e76d9707c86701c9a598713f95b
43c3be6468d87168bcd8fdecb7de3fbba1df4e3d0600000ab5fb7230020000
#<end update:2020/02/26 16:25:24>
#<begin attach ID:fQSbv6osQPt>
789c01e0011ffe1b0000006651536276366f735150742e32303135303530312e
30322e737667d9030000b501000001000000789cad53dd6adb3014be8e9f42a5
0cad30c5b273b3042bbdd8036c307a5d1459b64514c94872edece977a438c11d
0df462069ba3f3f3fd1cacea793a69f4269d57d6305cac2946d2085b2bd3323c
84867cc7e8799f55fead45d06a3cc35d08fd2ecfc7715c8f9bb5756d5e524a73
e8c09796dda495397ed4586cb7db3c55f192b4c0e8c0bdfce56ca3b464b819b4
4e583bdf7301895a367cd001a351d5a163784341672755db0586811defb355b6
aa1e0841ad533522041255cf4390ce205533fcfa1a0b378062311fe3b9f5c5a8
000e072fddefc8fcd3bc78891180ad2a27454013c3d07d4edf3b506041333c76
2ac0649e467babcf605ace35630d947c70f608de0e7ab89dc88c49d72568b2ca
443505fd46d1e58df811b2ca67c131be2f8c7e594a8ba78b80c1e9af8f978d3c
7d4248628cbb1d4e9a8026e91ad8cdbc64a19cd0128929516024ce73e096ebf0
c7f312fe63b22b55905332946022dc062a3149b8119d05e093aa6b0df38d3581
78f507008bb20f57b683e602feb0fd4d6b51e571fe933ecafb3e1e7fa467e923
51bd3752dc1235f71d778e0358894af48fc1f2bf192caf06b32a5ec47df61762
3b2d28d9030000d062de34e0010000
#<end update:2020/02/26 16:25:24>
#<begin attach ID:fQSbv6osQPt>
789c015402abfd1b0000006651536276366f735150742e32303135303530312e
30332e7376674a0500002902000001000000789cad545d8f9430147ddef91535
c6ad26cb4741641961f6c17735d17dde3050a0994e3b69cb32e3aff7b63048cc
8c71a30985dededb734e4f5bf287e39ea367aa3493a2c0c40f31a2a29235136d
817bd378f7183d6c56b97e6e11940a5de0ce98c33a088661f087d897aa0da230
0c03a8c063c9fac899d85d2a245996052e8b97a404a36da9e957251bc669819b
9e7387b5d687b282819a3665cf0d4603ab4d57e038049d1d656d670a0cec78b3
ba59dde4af3c0fb58ad5c8f360203f94c6502510ab0bfcf46413330059ccb7fd
a9f45130032bec3555df2cf317f1a829460076932b5a19742c30549fdcfb0a14
2c811778e8988199819b7a90fc048ba6534e4801296d94dcc1dab6bc9f236fc2
0cfd08344926ac1a12de85686c16df42e6c124d8f6af0b0bdf2ca5d96814d02b
fef6f5e8c8bbbf10e218adb78e69ed3ea568399d7c76c3d664dbc1564a9a382d
244a6635c9c2a664b649ef4e4bdacb22c83c5097ba2b952a013b46315a48ebf7
dc13d29c2559c75b295ec8323b1e657e14257749e467e81c64a94f5094867e9a
fe16a4b62c4ac6c0ce9974197a741b436287e02cb9ff60af98cd78a5a83aa940
9d2915d8d64861bca6dc330e659f64af1855e8331da68c663f4038210773f66e
cbcb0aeed1e67bc73482c7506dfc3cb0d8d7d8d3d88afbafecb7dc7cb4ad92fb
3d15e6b68510da2f1dffb615173dbe66f88befd91f4ed67c16404012c7f1fb71
cfe148fb700f63e25b4b817595db3fdf66f513308f98c04a0500001667192254
020000
#<end update:2020/02/26 16:25:24>
#<begin attach ID:fQSbv6osQPt>
789c01fa0105fe1b0000006651536276366f735150742e32303135303530312e
30342e7376672e040000cf01000001000000789cb553dd6adb3014be8e9f42a3
0c7550db52ba8e24582963d0cb6d507a5d145bb64514c94872edece977643bad
29292d83196ca4738ebe3facecb63f28f424ac9346334c138291d0b929a4ae18
6e7d19af30badd46997baa108c6ac770ed7db349d3aeeb92ee3a31b64a978490
1426f038b2e995d4fb738374bd5ea74317cf4929463beec46f6b4aa904c365ab
d480b5710dcfa1508892b7ca63d4c9c2d70c5f13d0590b59d59e6160c7db6811
2db24f718c2a2b0b14c750c81aeebdb01ac982e1c7c7d07806a0b3f3613d8d3e
68e9c161eb84bd0fccbff483131801d822b322f7a86718a68fc3f70d28b0a018
ee6ae9e1643a1c6d8c3a826931f5b4d1d072de9a3d78dba9f679174f98245982
2623755043c91541e31bf00364964e82c3fa6d61e4f35c5ad88d025aab2e2fc6
44be7c40c8c018b26d0f2a769e7b31057c62fe3652af5eb857b350bec2daf663
38f6380fc9ed8f73d2f312e824c08b7e20a36464a3e426b9c1289463aef3da58
860fb22814209446fbb8e407a960f08769ad1416fd14ddd471f20f9051daf893
929de239fc93dbd2982c0d90ef59a6ffeaf9e2eeee3b3c2f9ead28ce589e0a05
7735b796070844d1ab2896ff338a1db7a728a22cdcee6df417608345e92e0400
009143f18dfa010000
#<end update:2020/02/26 16:25:24>
#<begin attach ID:fQSbv6osQPt>
789c01fb0104fe1b0000006651536276366f735150742e32303135303530372e
30312e73766715040000d001000001000000789cb5535b6bdb30147e8e7f854a
19a783fa22778526582965d0c76d30fa5c145bb64514c94872edecd7efc871ba
3052c84b0db6a5733e7d97e3a4781c778abc09eba4d10c68920111ba3495d40d
83ded7f10390c77554b8b78620543b06adf7dd2a4d87614886bbc4d826cdb32c
4b110107c86a54526fcf01e972b94ca72e9c8a52201beec42f6b6aa90483ba57
6ae25ab98e9758a844cd7be5810cb2f22d83bb0c7db64236ad6780eab08e16d1
a2b88a63d258599138c642d171ef85d544560c5e5f43e39d809e9c0feb19faa2
a5c784bd13f67750fea95f9c0082648bc28ad2939101a2f7d3f3032a8ca0180c
adf478329d8e7646ed31b4987bda686c396fcd16b36d54ffbe8b67ce2cc9d193
913ab8a1d96d460e77e00f94453a1b0eeb8f8d655f4ead85ddc1406fd5cdf561
225f2f30322986d9f63b15e36c4afc56f3888552b2c35d394e0a40cafdbcb058
f916de58c8ef8fca6ebb3f95392f4a67492fc629d8c437f1de27c814ca31d765
6b2c839dac2a850cb5d13eaef94e2a047e37bd95c2921f62983b4efe41314a3b
7f74b251bcc45fe1da0be7699106d2cb62e617c4bc7e7e7ec2eb5f4c2baa3329
e742c55dcbade5819350f25ffafcb3d3e7c7f45111fec4ebe82f217740031504
00004081f1c9fb010000
#<end update:2020/02/26 16:25:24>
#<begin attach ID:fQSbv6osQPt>
789c010702f8fd1b0000006651536276366f735150742e32303135303530372e
30322e737667e5040000dc01000001000000789cb554db6adb3018be8e9f42a3
0c6d30c796b31e12ac9431e8653718bd2e4a24db228a6424b94ef6f4fbe54363
4a4acbd80c36f27ff84e18e7b787bd424fc23a6934c5649e6224f4d670a94b8a
1b5fc43718ddaea3dc3d950846b5a3b8f2be5e2549dbb6f3763137b64cb2344d
1398c0fdc8eaa0a4de9d1b24cbe532e9ba784a4a30da30277e5a534825282e1a
a53aac95abd9160a5c14ac511ea356725f51bc484167256459798a811dafa359
34cb3fc4312aade4288ea190d7cc7b6135929ce2c7c7d078062093fd701e461f
b4f4e0b071c2fe0acc3ff483131801d82cb762ebd18162983e76cf57a0c082a2
b8ada487cda45bad8d3a826931f4b4d1d072de9a1d78dba8e6f92d1e30d37906
9a8cd4410d49bfa4a8bf037e80cc93417038bf2e2cfd389516de7a018d559f2e
fa443ebf4348c718b26df62a865876ac1443c423f7a227bfbe9cb29fc8af2e47
6ab73b4e79ceb39281f305fad5c9dbd769e87f07eec5a103bfe9c13bbda11633
bdad8ca5782f3957b05e18ede382eda582b1efa6b15258742fdaa1e3e46f6022
a4f6a38c8d828ce0abf1c279922701f4ed04c9f57b23bcb8bbfb06d7c9a515fc
8cc9a1c099ab98b52c584404bd4876647d33da7f413a269e65ff35f26c8c3cca
c34f691dfd01eefb7f2be5040000d59cfcd807020000
#<end update:2020/02/26 16:25:24>
#<begin attach ID:fQSbv6osQPt>
789c01b1024efd1b0000006651536276366f735150742e32303135303530372e
30332e737667b40b00008602000001000000789cbd965d6fda301486afcbaff0
544d6eb525b19dd02628a19a26f5729bb4f5ba7213432c8c836ca7a1fbf5b543
ca4747076c142450621f9ff73c3ef62bd29bf9548047a634af6406b18f206032
af0a2ec719accdc88b21b819f652fd38063654ea0c96c6cc0641d0348ddf847e
a5c60141080536022e420673c1e5645b204e92246867e1ba2886e0816af64355
232e580647b5106dae819ed1dc0e146c446b6120687861ca0c86c8d659323e2e
4d06ad3a1cf6ce7a67e907cf0363c50be07976209d51639892801719bcbf7713
cb04786dbd7bee42ef243796b0d64cfd74cadfe59d6610d86467a962b901f30c
dae8a7f6f78d54164164b029b9b12b8376e9ac124f169a7573b292764a1b554d
2cdb83a8976f5e9713f9c4d65471e9aac1e833028bafcbef52a64157b07b7ebb
30f471bd34f7b628a056e2e27cb123977b14d22ababdada7c2cb05d5badbe017
651cfbb1ed6c12b51544b1df5f154188ef8e075e55122d37494f9ed645b79780
bb020c9bb76231f217a4d756ce0d7a54e665a53238e54521ecfa51258d37a253
2e6cd4d7aa569c29f08d35dd8ce6bfad14c633f352c783a0b93d9143c3b4c169
e0926ee085d88f48bf150de3155ae287fdb563880fc5ea060aaa4baa1475d941
085ee1e2a8bd1f76b27f74de5f5b58375a19ef68e5e1cc1b6c245c88c5ad1846
9153db40d4862af31f84ded46eafa1bb38314a4e094afa4707fdc4e62caf0dbb
b8dcc91aa253b24657c76faae72e2a689d6845fb5783eac77e72a0399ddfde7e
b19f15bc62c55e971803fcfa1213f2bea645fe6c3ab96e4d0b91bd6deb9f81b7
b816894feb5acbfeeeef58c7ec2fbe0a3bfdd39ad812fb00037b27ee537bda0a
7d7f3f7b27f413595c2f75ffb187bd6773868ee0b40b00002b644946b1020000

#<end update:2020/02/26 16:25:24>
#<begin attach ID:gff4ouzBmey>
789c016f0390fc14000000676666346f757a426d65792e6d61696e2e737667a4
0f00004b03000001000000789cb55759739b30107e8e7f853a3de44ccc216e52
933cf4b9c74ca7cf1d023268220b8f10c1ceafef0a70e2e6c29d62cfe001edb2
dfb7072bedf27abbe6e88eca9a5522c1c4b431a222ab72268a04376a6544185d
5fcd96f55d814055d4092e95da5c5a56dbb666eb9a952c2cc7b66d0b3470af72
b9e54cdcbea448e238b63a293e042518dda435fd21ab15e334c1ab86f3ced665
bd493358c8e92a6db8c2a865b92a13ecd9c0b3a4ac28153cf836be9a9dcdce96
ef0c031592e5c8306061b94995a252209627f8f76f2d7830400eded7f783ea2f
c11478d8d454fed4c8dfc5af9a6204c6ce9692660a6d130cdabbeeff1553e002
4f705b32056f5addab9b8aefc0693ac8442540542b59dd826f37bc797832069b
b6e900a78a09cd86d80b1bf597b6af4d2ead81b0be7f9d98fdf1909a7eea0934
92cfdff711393f824887a863dbacb991f1b4ae8700ef9149d063bb8fe0d16182
9e46e51131cd6e9f42920150d16d67dcb17be3be6ffa18e95523155959c904af
599e73b0b7aa843256e99a71d0fb5235925189bed17690d4ec1ec008d9a83d8f
01b897aa9dae39a652ce32c8755da61bbab434d098df9e6fba50d1b1d711244e
a4190e6eb876ac6337590ccc3e0ac4f7260ec295f62615053f70fa150783371c
24c4f91f0f7dfb2fa4c87b96ec5aa552fd879bc6dac8a8808fc6d83e3afa0a7c
1c9e107e3706ef10fb14f05de447b11df714d87d958c82bbc129c0e568c21d2f
3e09f078aa03e714c07a61143a7cde502780ee3ff3b156e244f61badc427d3b5
12279ebea62e1e5ae67cbbd82d3a1e8b9efdc234cdf3b1d06b7f27e754501037
37592aeed27a3ecec199bef23e71f5595f1b596da8548cd69f0a58816b948d3b
7d315e0c34767da11c11122f3a2189be3e8e601190c95940518ec286d36fb9fb
7a807d8fa9ddd1b5104dbffb5e6425cd6ee7fdc7b1c859a646f30033c6f43472
99b6f356425393e304c8f45bf13e23dd21f7d88478ce095aa86e57596674438e
eea2e7cf8fdc051554c2a9fc3e553028a295acd6e80341aa421f9cfd88f7f664
f5f26eb11facba53f5a23bb6a3fe3eec8ed9d6303c96ffb609c194f9b5b78342
1b716404a6ebc64ee8219dc8d80b4808abc4318330f2bd0819a0f9d78f8461e0
fa4184ee3b0eb3a59ea9af667f007f29dbeca40f0000ad1db7e16f030000
#<end update:2020/02/21 11:42:42>
#<begin attach ID:gfDBGxxfNqg>
789c01cf0230fd1600000067664442477878664e71672e73616d706c652e7376
67c0070000a902000001000000789cad555d6f9b30147d6e7e85a769f2261563
cc578820fb05d3264d7dae283860d53191314dda5fbf6b034ddab5ddd6e52170
6d5f8eef393ed7c9bf1eb612dd71dd8b4e1538201423aeaaae16aa29f06036de
12a3afeb45dedf350852555fe0d698ddcaf7f7fb3dd987a4d38dcf28a53e64e0
3165759042ddbe94186459e6bb557cba6980d14dd9f31fbadb08c90bbc19a474
58ab7e57563051f34d394883d15ed4a62d7044a1ce968ba6350586ddf17a71b1
b8c83f781e6ab4a891e7c144be2b8de15a215117f8fada2e3c020427dfdb784a
bd52c200c3a1e7faa7ddf9bbbaea39460076916b5e1974283064dfbbe72b5040
411678df0a035ffaeed35d27ef81349fd654a760a937babb056e3772781c7913
26250c6aea84b2d504f492a2f167f12d64ee4f05dbf8f5c2e8a7d3d2ec682c60
d0f2f3c751912f7f5188dbd16a0bba54704e015aa1612bbd6938a9dd389de714
ec887329c50e32aac3784ca8820a63786b9848ec1bc6e173d18e0595d5edf38a
825954c30f8eb6c3b5b0094676ce2b55d576bac05b51d712e0369d325e2f1e00
31603b336f36a1afadf36666b96f119cc0cd33d2eccfa4d9efa4c39974109e97
7538b10ec277d2aeb91677bc7e9339d06db8e2ba94e2a134d0ac68a3bbed5111
d31d2d31b5dcdb4e7f99d96c74962c89bd4a52f07944e284d218b1302029dc1a
d1651a9328ccb278f2233440fb6f02c2417d3be2a1190f499490248e63148424
8a5812063095928c51c6e2047919c92865cb103d9cb44259994e4f9618e35343
b899d10d95d0951ccd90c69317684a2084b30a62f23e1bfc97cec01cae12c648
8cc63072659c0139a60e39210cd4a4c7c119c193f449d9f3368993f4698f58bd
addccbccaebda749dc39bed41a55a71477c7ee3a6274c0b11dd839da616216c2
13b1e831762c17b9fdbf5d2f7e01f52d4ec7c00700004c035d6fcf020000
#<end update:2020/02/21 09:34:06>
#<begin attach ID:gqTg0mi7qli>
789c011d02e2fd1600000067715467306d6937716c692e73616d706c652e7376
67f5040000f701000001000000789c9d54d16e9b30147d0e5fe1699abc49030c
59ba25c2e9276cd2d4e78a82012b8e8d8c29c9be7ed7c61016a55adb07c0bef7
fadc738e6db2fbd351a067a63bae24c549443062b250259735c5bda9c21f18dd
ef83ac7bae1194ca8ee2c6987617c7c33044c33a52ba8e5342480c15782cd99d
0497875b85c976bb8d5d162f9b26183de51dfba555c505a3b8ea857058bbaecd
0b0894acca7b61301a78691a8abf11e0d9305e378662e88ef7c12a58651fc210
d59a97280c2190b5b9314c4bc44b8a1f1f6d62064816ebedd8973e486e4061df
31fddb76fe291f3a861180ad32cd0a834e1443f5d9bd5f80020982e2a1e10656
c66e69abc41944339f934a42aa335a1d40db93e8e759e83149940227c5a56593
90af048d8fc5b79059ec09dbf1cbc4c8a725353b1b09f45a7cfe383af2e51544
5c47eb2d5872c86b8676a83f8a709a8d66d7ce661fc3ff38b619997ddf2ca95d
98dd6dae4cbb1002b46b46c964ea15fa1d599c8e85ecf7811b7672e08ee8d97f
6d30cc65d1284df19197a500bc4a491376fc0f4026696ba66e1e7eef0dc962bb
d8ed5c3db909bbcb7405a7ccfb79992f1d9da3a3a705d78560a8006e6bcba998
c8e91ba7ef6d5ad793d675fa3ead33d55b6a0b2525ec98d2a8d2ea381f25a3d0
b5eeffdc96db52e6cbb22191bd27f046e9761e3bad41667f52fbe02f52e88173
f5040000abd603f31d020000
#<end update:2020/02/21 09:35:21>
#<begin attach ID:gQhjguYxDdZ>
789c01ee0211fd140000006751686a6775597844645a2e6d61696e2e7376678a
090000ca02000001000000789cb5565b4fdb30147ea6bfc2d3182e5a9dc44973
294be061cfbb4813cf28246e63d5b52bdb212dd3fefbec24a5054a3744a9e4ca
97e373beef9c2fb6d3abd582813b2215153c83d8f12020bc1025e5b30cd67a8a
1208ae2e07a9ba9b0163ca55062bad9717aedb348dd3048e9033d7f73ccf3516
b033b95831cae7fb0cf1643271db55b81b1443709b2bf2538a29652483d39ab1
d6d7855ae6859928c934af9986a0a1a5ae3238f60cce8ad059a5bbc1e5e06470
927e4008cc242d014266225de65a13c9012d33787363171e1ce09dfdb6df9b5e
73aa0dc35a11f9cb46fec1af1581c0383b492529345865d058afdbff175c190a
2c834d45b5d9e9b65b9782ad0d69d2af71c1cd92d252cc0db75b563f8c50efd3
737c8349506ed1606fe481ae59ffd665eaf6806dff6560dea75d6876d401a825
1b7eec3272fe1f40da8836b7f582a182e54af509de44c651173bd8064f1e15e8
4956b611f362fe3424ee036ab26a9dfb5ee73c0c9d10023b8b725e5442667041
cb92197f53c1359ae60bca8cdd57514b4a24f84e9a7e45d17b130ce3a5dee0e8
035fdaa2a4aef5f92f8a71e2603f6c81e038b2487ab8fe3870e2f088649d8eae
eff9c7665b08ce0d1d21b794f7d0f3f1417af15be825c1364ce03faba7d2b9d4
6f20f87981a6522c102d7f4b929782b3f59f2dd77d20c6cf457504102551fa15
20c2e43d40586d23a5d78cecc3b1aff05170a0f0d19b74bd4b379e1c9fee83b4
875600235b8091e338e787133f39be04cf98fe621be19aeaf5d9cc8c4c3b0823
f0de418445458af9b0c8f95dae46252df4e15404f81d34d84823145419f11139
6c07f2fcf9693b239cc89cd1fb5c9be700b0f503a71868014efdcd457ef8fedc
afbfcdf5d91ea9a3f6d0065d3f6ecf58b77f2254af93b5794b7cebfc80d8030c
a0c80982891f8f01369fcf641ce1d8cc62df89e2241c270019cb473f1cc75110
4609b86f310c52fb72ba1cfc055648f1f78a090000b49e6cb6ee020000
#<end update:2020/02/21 11:42:17>
#<begin attach ID:gYyyed0UlLM>
789c015d02a2fd1600000067597979656430556c4c4d2e73616d706c652e7376
67320600003702000001000000789cb5944d8f9b301086cfe157b8aaba6ea502
867c2d296455f5d04ba5468ab6d7151b0c58716c644c48f6d777cc47ca464955
45dd03c4f6d8efbcf38471f870d871b4a7aa645244d8730846546c64c24416e1
4aa7f63d460f4b2b2cf71982ada28c70ae75b170ddbaae9d7aec4895b93e21c4
851db8ddb2387026b697367a4110b84d140f937a183dc7255d2999324e239c56
9c375a8bb28837b090d034aeb8c6a86689ce233c21e033a72ccb7584213b5e5a
236b14beb36d94299620db8685b088b5a64a209644f8e9c9044e02dee0bc1977
5b1f05d350615552b536997f8ac792620462a350d18d468708c3ee63f3be2205
25f008d739d370d26d8e16921fa168dac58414102ab5925ba8ed9957a799dd69
12c7074f9209e3c6239f096a1fa36f2443b7336cc6d78d910f436b66d61aa814
fff8be25f2e91f8c34190ddbb8284ab440d58edb40671b67b4239d358c4d18bf
62356b3dcda72753f7035ab3e919ad3f4e40fddc8ad7d33c139f91c16731a8f7
36714d0f8db8475af5e6d72cdab1d8e4524578c79284835e2a85b64bf602929e
5fe83e5b27bffcf6c3feba5aad43d71c6efeb2acc7687ae93a45d347afeaf4df
94a2ffa618c7ff01e3fad7f74b140dbf8416542470611d51aae4aefd40b56c08
7777c0df5bef720ddd42129779ac540cfec7688c061d39218e69467823e0d78f
bb4eb929652fed4fe60e21c1cc03c9b93335f27da25324f09d6997abe7ecb7f9
c16930716e447dc7f517f330b1076f7719cce0e9d15ba1b9e197d66f94bddc61
32060000ab31216e5d020000
#<end update:2020/02/21 09:29:46>
#<begin attach ID:gYO7DjnOQXy>
789c01790286fd1800000067594f37446a6e4f5158792e32303135303232302e
737667000600005102000001000000789cad54cb6edb30103cdb5fc1a028d802
d18bb2acd8901cb4451f87020d1aa4d740916889304d1a141529fdfa2e292976
52074ddb1c6c2c97bbb333c3b593f36ecbd12d55359322c581eb6344452e0b26
ca14377aed9c6174be9a26f56d89a054d429aeb4de2d3daf6d5bb70d5da94a8f
f8beef4105ee4b961d676273ac30582c169ebdc58743038c6eb29a5e28b9669c
a678dd706eb196f52ecb2151d075d6708d51cb0a5da578e603cf8ab2b2d22986
e978359d4c27c989e3a052b102390e24925da6355502b122c5d7d7e6e21e2038
e837f1507a259806854d4dd5a599fc4d5cd51423009b248ae61a752986ea3bfb
fd041448e0296e2ba6a1d3b3ad3bc9ef40341dee841470556b2537a0ed8637f7
2767c0f45d029c2413864de09ffaa8ff187c0399780361133f4dcc7f7d48cd9c
7a028de26f5ef58ebc7d06113bd1789be55a2ab444cd963b7ddc1b5d5a8b6d06
5bc1395339a728efec5c8c7220b688dd08230599c87d6cd39e42966f1e73089e
69e3f1d6bd8bbe0b0606c48dd0108796c80b60c791859ebb04b0c9fef082e051
fc90f73827b2aef66334edec2258cbc1f1205e984b937632915712ccdfb2a2e0
307d2d85766af613080464a7c7f718c8ac3e7c752e7f7c4e3cd36bf7ad1c77c0
bcbd909a8ebf3190564af177cf394a232476e7a7e10ce4f4e17c0e6118137776
1846a6208c4c686a87851cd592103aadde686e2e1fc8ad75a6f41fd57ea19c4b
049a2fbe7ffcf4eefdc95ef77fc9fb8dfd7121ffb41d43a2c8ea2a532a03f521
0ad181b5308b9c4571efe3b894c1b894d3c4fc5fafa6bf002acec57c00060000
7102294179020000
#<end update:2020/02/21 12:33:07>
#<begin attach ID:gYO7DjnOQXy>
789c0170028ffd1800000067594f37446a6e4f5158792e32303135303232372e
737667050600004802000001000000789cad545d6fd330147d6e7f8511420669
f95edaa64aba071e784102691aaf9397b88955d7ae6c67e9f8f55c3bc99a8d4e
0cd843abebfb79cef18df3abe39ea37baa3493a2c0911f624445292b26ea02b7
da23ba640ca3abcd3cd7f735826ca10bdc1873580741d7757e97f852d5411c86
610019b84f591f3913bb7389519665818be2e9dc08a33ba2e97725b78cd3026f
5bce5dafb53e90121c15dd92961b8c3a5699a6c09721406d28ab1b5360988e37
f3d97c96bff33c542b5621cf03477e20c6502510ab0a7c7b6b038f0da249bdb5
87d41bc18cb6d4a9bab693bf891b4d318266b35cd1d2a0638121fbc1fdbfd00a
28f002770d335019b8d283e40f409a0e31210584b4517207dcee78fb78f2869e
a11f0326c9844513851721ea7fb6bf6d990703606bbf0c2cfc3085664f3d8056
f18fef7b453ebd02889b68b525a5910aad51bbe75e6ff742d74e62e7c18e70c9
54c9292a8f6e2e462500cb967e8a91024fea3f97e9048194bbe718a257ca78be
f4a462e8838051eca768b01307e40d7a2f53d77ae1c7d03b3e1ddeb079ba7c8a
7b9c933a55fb31861edd2238c941f16899d9a0757b44948d04f1f7acaa384cdf
4a613ccd7e0280283e98f13e06309bcf5fbdeb1f5ff2c0d6ba7dabc71db0772f
a4a1e33706d46a29feee3a476a7194f9ab8be412e8f4e6620166b282ad9b9aa9
4d4816d6b4b9c3428e6ce3182a1ddf7461834fe86a4394f923dbf1d1434c23f7
e6f927e6ff45f037fce7a9fcd37e0c8e8ae8862845807f821234111766c5ab74
d92b39ae6534aee53cb72ff666fe0b75aac8d6050600004365269670020000
#<end update:2020/02/21 12:33:07>
#<begin attach ID:gZR5e7SFM3q>
789c012d04d2fb18000000675a5235653753464d33712e32303135303332362e
737667d71a00000504000001000000789cbd995d6f9b301486af9b5fe1699abc
490bf1079f55e82e76bf4d9a7a5da50112540a11384bb65f3f9b8fc4805d4d9a
9d8bb6c7d81c9ff7951f99a3aebf9c5f0bf02bad9bbc2a63881d04415a6eab24
2f77313cb26c1942f0e561b16e7eed005f5a3631dc3376b85fad4ea79373a24e
55ef560421b4e22b60b7e4fe5ce4e58b6a218ea268d5ce4279530cc1f3a6497f
d4559617690cb36351b4b9ee9bc366cb1f2469b639160c82539eb07d0c3dc4eb
dca7f96ecf62e8f2c1c3e26e71b77eb75c825d9d2760b9e40fd6870d63695d82
3c89e1d39398b824c0d2fb22ee973e9639e30a8f4d5aff143b7f2f1f9b14029e
ec6e5da75b06ce31e4ab7fb7bf35a9b8842286a77dcef89babf6d54355fce6a2
d37eaeac4a3ed5b0ba7ae1da9e8be365b4ec732287f09aaabc14d560f41981ee
47e41729d7abbe6011eb0b431fe4d2c4a82be058171fdf778e7cfa8742da1d85
b719f2c03d60e9993d57e7dee45d6b2f9f812397bcc0215e5b10f52e15b99ee3
5d2ba253b3ae856cb62fd34af060a6d85eec10767a3d9e513c5a6ecaedbeaa63
f89a2749c1b36555c996d9e6352ff8aaafd5b1ced31a7c4b4ffd4c93ff49852b
073654d16ffbc0b5ac5722656bf46e109f68c52753f1e1453c4696d463dcc9c7
c4b8fe44ad7f5b9525d757d520ababd7f62cb0aa75a5a7eded43ae16359cf108
3b34f03efb9e83401f87226e8f911ce2760957efa0714c3d6780e3bf2ac13870
f8366ee04411a2d1353dc088c833232e7c2d17fef86860df3a1838b24786af26
43273f99c9bf011ac4261a4a036668f81d1abe093470103a3ee9d91806ddd127
1206c42c066482c1253d206f6010683108c6e78044d631a0c41e06811a039dfc
64263fb08f01451631501a30c320e830084c6040a974450c83eee873a5170cfa
d81406148d31b8a40724d263106a3108c7e7c045d63170a93d0c4235063af9c9
543ebd0106ae4d0c9406cc30083b0c421318b858ba0d8641fb7de47ac409c671
87842be1e19ac5c39de071490fa8168f0445daf311e99a0862b98b20e6f1e06a
54a723d3cacfa6f2afdf4ad4761b41cdd391a9f5cfe8883a3a2223df4aed570a
a5d7be80fad7de418e4928b51ae3816f088e287442912f681970a5fc20a4a329
990e8c747460a46d25ace131f41236f8c048c987d6806c66c00d00211601511b
300584fb2100e17f0c004224408804c8d0578c47c650c0a1ef6022b120edc063
3c9a1cd180b534606d47618d86a1a5b0420356d3a033209b1910d8a761e829ac
d0a034604603ee68c0467a0a74a5a18f47edc578648c064a273783b403a0e48d
bb81686920dac6c21a0d4367618506a2a6416740363580de8006d7260d4a0366
34908e0662a4b5906870251afa666234e8be9886fe633232c5894b26b786b403
8f15b7c6622dfe0df5b0f80b1884b89cd71a00007f10f4df2d040000
#<end update:2020/02/21 12:25:51>
#<begin attach ID:gZR5e7SFM3q>
789c01ea0115fe1b000000675a5235653753464d33712e32303135303332372e
30312e73766749040000bf01000001000000789cad93516f9b3010c79fc3a770
554deea4007652921041fa113669ea7345c18015d78e6c53d26fbfb3cd3214b5
d5a4ee01ebce77fedfefcea67838bf08f4cab4e14a9698260423266bd570d995
78b06dbcc3e8e11015e6b543902a4d897b6b4ffb341dc73119d789d25dba2284
a4908143cafe2cb83cbe9748f33c4f7d14cf8b528c9e2bc37e6ad572c14adc0e
4278adbd3955356c34acad0661311a7963fb1243418c7ac6bbde06e7102da245
7113c7a8d3bc41710c1bc5a9b29669897853e2a72717b808d0d979674fa98f92
5be870304cff72957fc847c33002b145a1596dd1b9c490fde6d70fa4a00551e2
b1e7164ea6fee8498937689a4d31a924848cd5ea08bd3d8be1e2c593264956c0
a4b87434942c090a9fd37792453a013bfb6330f26d8ee6bc00306871771b26f2
fd1f407c4537db56ab17b447ae60253bc1a6397b00376417c70ee53eb06cb239
ccfcc6aec6f417a1aa8fd70c7446d030633f2370714fb0090494fe77845a4909
e5940ee3f08b55816c7a779f5ff7fbfa97dba65942963b585030011bec35b932
372e63975d99eb2cf9f344be4491af926c49efb7499e93750ee24e1a6db7f35d
5f272adc8f7f887e03416c456449040000e85be25eea010000
#<end update:2020/02/21 12:25:51>
#<begin attach ID:gZR5e7SFM3q>
789c01e90116fe1b000000675a5235653753464d33712e32303135303332372e
30322e73766749040000be01000001000000789cad93516f9b3010c79fc3a770
354d5ea5007618498820fd089b34f5b9a260c08a6b47b629e9b7dfd9662d8ada
6ad2f68075e73bffef776753de5d9e047a66da70252b4c138211938d6ab9ec2b
3cda2ede6374778c4af3dc234895a6c283b5e7439a4ed3944c59a2749f6e0821
2964e09072b8082e4fef25d2a228521fc5cba214a3c7dab09f5a755cb00a77a3
105eeb60ce75031b2debea51588c26dedaa1c25010a381f17eb0c13946ab6855
dec431ea356f511cc34679aead655a22de56f8e1c1055e05e8e2bcb3e7d47bc9
2d74381aa67fb9ca3fe4bd611881d8aad4acb1e85261c87ef1eb0752d082a8f0
34700b27537ff4acc40b34cde698541242c66a7582de1ec5f8eac5b3264936c0
a4b8743494ac090a9fd37792653a033bfb6330f27589e6bc00306af1ed4b98c8
ed5f80f88a6eb69d564fe8805cc15af682cd73f6006ec82e8e1d4a1658b6f912
66796357637a43a89bd335035d10b4ccd8cf085cdc136c0301a5ff1da1515242
39a5c338fc6255209bdfdde7d7fdbefedb6de70959ef6141c1046cb03372656e
5dc63ebf32b33cf9f344fe89a2d824f99a7edf254541b202c49d34daed96bbbe
4e54ba1fff18fd063e194561490400006f0dea7fe9010000
#<end update:2020/02/21 12:25:51>
#<begin attach ID:gZR5e7SFM3q>
789c01ea0115fe1b000000675a5235653753464d33712e32303135303332372e
30332e73766749040000bf01000001000000789cad93516f9b3010c79fc3a770
554deea4007652921041fa113669ea7345c18015d78e6c53d26fbfb3cd3214b5
d5a4ee01ebce77fedfefcea67838bf08f4cab4e14a9698260423266bd570d995
78b06dbcc3e8e11015e6b543902a4d897b6b4ffb341dc73119d789d25dba2284
a4908143cafe2cb83cbe9748f33c4f7d14cf8b528c9e2bc37e6ad572c14adc0e
4278adbd3955356c34acad0661311a7963fb1243418c7ac6bbde06e7102da245
7113c7a8d3bc41710c1bc5a9b29669897853e2a72717b808d0d979674fa98f92
5be870304cff72957fc847c33002b145a1596dd1b9c490fde6d70fa4a00551e2
b1e7164ea6fee8498937689a4d31a924848cd5ea08bd3d8be1e2c593264956c0
a4b87434942c090a9fd37792453a013bfb6330f26d8ee6bc00306871771b26f2
fd1f407c4537db56ab17b447ae60253bc1a6397b00376417c70ee53eb06cb239
ccfcc6aec6f417a1aa8fd70c7446d030633f2370714fb0090494fe77845a4909
e5940ee3f08b55816c7a779f5ff7fbfa97dba65942963b585030011bec35b932
372e63975d99eb2cf9f344be4491af926c49efb7499e93750ee24e1a6db7f35d
5f272adc8f7f887e03416c456449040000ebfbe260ea010000
#<end update:2020/02/21 12:25:51>
#<begin attach ID:gZR5e7SFM3q>
789c01e90116fe1b000000675a5235653753464d33712e32303135303332372e
30342e73766749040000be01000001000000789cad93516f9b3010c79fc3a770
354d5ea5007618498820fd089b34f5b9a260c08a6b47b629e9b7dfd9662d8ada
6ad2f68075e73bffef776753de5d9e047a66da70252b4c138211938d6ab9ec2b
3cda2ede6374778c4af3dc234895a6c283b5e7439a4ed3944c59a2749f6e0821
2964e09072b8082e4fef25d2a228521fc5cba214a3c7dab09f5a755cb00a77a3
105eeb60ce75031b2debea51588c26dedaa1c25010a381f17eb0c13946ab6855
dec431ea356f511cc34679aead655a22de56f8e1c1055e05e8e2bcb3e7d47bc9
2d74381aa67fb9ca3fe4bd611881d8aad4acb1e85261c87ef1eb0752d082a8f0
34700b27537ff4acc40b34cde698541242c66a7582de1ec5f8eac5b3264936c0
a4b8743494ac090a9fd37792653a033bfb6330f27589e6bc00306af1ed4b98c8
ed5f80f88a6eb69d564fe8805cc15af682cd73f6006ec82e8e1d4a1658b6f912
66796357637a43a89bd335035d10b4ccd8cf085cdc136c0301a5ff1da1515242
39a5c338fc6255209bdfdde7d7fdbefedb6de70959ef6141c1046cb03372656e
5dc63ebf32b33cf9f344fe89a2d824f99a7edf254541b202c49d34daed96bbbe
4e54ba1fff18fd063e1945614904000072abea81e9010000
#<end update:2020/02/21 12:25:51>
#<begin attach ID:gZR5e7SFM3q>
789c012205ddfa16000000675a5235653753464d33712e73616d706c652e7376
679f230000fc04000001000000789cbd9a5b8fa33614c79f279fc25555d19526
c417cc6514661ffade56aaf679950990a0612002b2c9f6d3d7172ee6e26ab46b
cfc3640e981cfb1cff7f8683b3ff7c7f2bc0b7b46ef2aa8c1de44207a4e5b14a
f2f2143bd736db860ef8fcbcd937df4e805d5a36b1736edbcbd36e77bbdddc1b
71abfab4c310c21dbbc291973cdd8bbc7c5dbb104551b413ad8eda2972c0cba1
49ffaeab2c2fd2d8c9ae45217c3d3597c3919d48d2ec702d5a07dcf2a43dc78e
0fd938cf697e3ab7b1e3b183e7cdc3e661ffcb760b4e759e80ed969dd85f0e6d
9bd625c893d8f9fa95370c0e90f27d6e77977e29f39645786dd2fa1fdef35fe5
9726750073f6b0afd3630beeb1c3aefe2e3e35ae580845ecdcce79cbbeb9135f
bd54c5771674dab59555c99a9ab6ae5e596c2fc57538da763ea18bd998aabce4
a341f01102f9c7fd7397fb5d37606eeb07067f5387c68fe400ae75f1fbaf3223
9fde3110d123cf6d061178026d7a6f5faa7b97e493482f6b712659c2818ba918
10a1c3883cead27144649eac712087e3eb7c24a84f26ef9ef74065bc9479e4a7
b687f278aeead879cb93a460deb2aa6cb7d9e12d2fd8557f54d73a4f6bf0677a
eb5a9afcdf9467e5d2f6a3e8ba7d66b1ec77dca548f4a90f3ed1069fcc830fac
078fa0ade893f5e88f5559b2e8aa1a6475f52694d05622271d6bff2ff1f5987a
8553e8c2479fba10082be2168b706af2f64e8b3fd51982814b1fd914451124e1
e01c445839ad883e81583bef58277a6459f5c8c6c4e3b589cfb4e167f3f003fb
e1f7bab7107fb61eff42f8580a1f9b10be141ff24795a368c040354d899f72ed
a34ee5d1e01c78583d3f59f2099b7e3ec387f254a45dd062c6a50688c3e785c8
69c1fe78fb0995fb62f823b32efa17132f3bed35e0757d71a7130934eda16e7f
4a01645480449f68d1273aed63cfb2f6b16f817df22eed13a97d6242fb01d71e
f1d8279026ffec28506d1c185df8712844ee8ddee5cadf9f9f689f6a973e3a9d
7e44eddff2437b0f3c74fd8147177eb2083f1c977e68297e8cbaa51f5b90ff6a
0216f2a752fed4c8d21f0e0f3dd294770116e5dc2686f48f9158fcbd7ef11fdc
030cb1da3241c0d722e0cf1f7eac2340ac3df5b268d611d0859f2cc2ff000488
4d045613b040c09708f8261020c3733d906628542f96d2892d71200a1ac42c1a
6486c6e09e0d4c8f46a04523986a8384d6d1f0903d3482753474e1278bf003fb
6878d0221aab0958a0114834021368786840439a02078f6237a0135be2e02975
44679b42c383533406f780447a34422d1ae1541b14da7f5144eca111aea3a10b
3f9987ef7d001ad4261aab0958a0114a3442232f8bc8f8b6888cb2a770619b42
80ce1018dc034f8b400223ad06226ded806d170fd8c67ba368fdbd912e01d922
01caedd176f540cc4390ad276001412421884c40209fdd0919cb04a29412aa8d
8dbd370d45f91cf4e573ef1da0002b0d2a0308ea1840505b3c5863a0af1e6c30
80e02a03da04648b047c0003c42203eb099833c0f2c11960ff4c940f0a034461
a02b1a2607381cab8c896d8a0e0227740cde018eb47468f79310d2d60fd6e8e8
0b082b74ac6e2965da04648b0404f6e9e82b082b74bc6b4f0dc93d3564644f4d
3ea74b3a3adb57ea86c9812442161a13db141d1e9ad031786723d3d2a1dd7543
585b4258a3a3af21acd0b1beefa64d40364f80f70174509b74bc6be30dc98d37
6464e38d2a7450850e5951a8b63106289930307807142f18d8ecf9cf699e37ff
01375245879f230000e857789122050000
#<end update:2020/02/21 12:25:51>
#<begin attach ID:hnqwiNWDyF8>
789c019a0165fe18000000686e7177694e57447946382e32303135303431372e
737667270300007201000001000000789c9d52d16e8230147d96afe8b2986ec9
8022219b86ea276cc9e2b3a950a0b12ba42da27fbf5b44a74613b3071a7aefb9
e79c7bd274b1fb9168cbb511b5a2380a08465c65752e5449716b0bff03a3c5dc
4bcdb644005586e2cada6616865dd7055d1cd4ba0c2784901010f80099eda450
9b5bc0683a9d867d179f8b4618ad99e15fba2e84e41417ad943dd7cc342c8342
ce0bd64a8b5127725b511c13f05971515616e6e132f746de287df27d546a9123
df8742da306bb95648e414af56ae7122882ee6311aa04b252c6cd81aaebf9df2
a75a1a8e11908d52cd338b7614037adf9f77a86005497157090b93613fdad472
0f4bf3a1a76a052d6375bd81ddd6b23dddfc81930413f0540be5dc44e48da0c3
e7f81d651a0e86ddff7d63647c91d2f868aed5f2e5f990c8eb03467a4597ad53
62aa947c08f8a8fc9ef4d293e4a49d9c85925c87f227c8b2cdb5627c2ae4cc54
4c6b06cc318ad1033ea27f1ad13cbf6103e4bcd43debb9f70bb4b7f514270300
00f968be659a010000
#<end update:2020/02/21 12:07:42>
#<begin attach ID:hoLfEiOKRdj>
789c01f60309fc14000000686f4c6645694f4b52646a2e6d61696e2e7376673c
120000d203000001000000789cb558db6edb38107d8ebf828bed562e6cd1a4ee
cadac9c33e6fbbc0a2cf852ad136618914283a8e53f4df3b94e44bd3a47260c9
806c89a4e69c3933bc8ce7f78f458e1e98aab8140b8b62622126529971b15a58
5bbdb4230bdddf8de6d5c30ac150512dacb5d6e5ed6cb6dbedf0cec552ad660e
21640623ac66c8ed63cec5e6a581348ee359dd6b9d83520b7d4d2af69f924b9e
b385b5dce6796debb62a93141a32b64cb6b9b6d08e677abdb07c023cd78cafd6
ba79b81bdd8c6ee67fd8365a299e21db8686799968cd94403c5b585fbe988ea3
017af6beb96f877e165c8387db8aa9ff0df227f1b9621602633773c5528d1e17
168cded7dfaf980217f285b55b730d6fceea574b99efc169d6f60929a0abd24a
6ec0b7aff9f6f864b73609768093e4c2b0a1644a507319fbc6e47cd61236f7af
13237f9d53334f0d81adcac77f368a7cb880488d68b4dd16b99de64955b5021f
90290970ecd7f0ee093f0a308012129c4878cff5396127e9e639386da1357b6c
607c821b277d1f039c69b71391aea55a5805cfb21c2c2ea5d0f63229780ee3fe
915bc599421fd9aeeda9f813c0515aea039316bae9d57b937f5c27394f21ee4c
68aef7f39941ea12c17330f520bfbd9a21f52243b1f5c4a13e0e410adabf1434
f47a56e2cea4eac9e757fc8b3afc0bdd6bfcf3c273308778bfc4bbd289d25738
69177633c14e9ebe024ec321c0eb14eac476c910d84c64b413da730782763aa1
fda077e849613719f74db1249322df7fef4a7127a0bf4f711a5f35879f391df6
9f66133393c74d9a4f31c61f3a958ffbcfb7c98ae976aa8d3b09b8a4ffac9b54
2702cd4f370d3a40061a1d20fd5b267a5fb26e1e4e3c0c0f9318760adb1b5317
0405e645ef2c965215c99be3f2c2c67f2d93f7b9fedb5ca59225539ab3eafd0a
5ae0ea641344fdebd2d2d8371bc405c189e8609234c79f8be588fbdfa527e99a
a59b719a8887a49a663cd59d82786480859457762a8b52565c43cdd21d15cf19
60212d15b33395ecc63b05bb8dea26e10eb0988206fa6d2cbc01d6d297091c8e
e72b26988223fc5362a285964a16e81d455aa277cea136fc7d49f6f2f67dacc8
cce97b5a1ff151731fd6c7f1595b75aedf762a80f2f4dfc60e0a09ca911d60d7
8d9dd0431402187b010da1953a380823df8b900d237ffad0300c5c3f88d0d305
c59aeb44386e76fbe8ac588435dee9b342f1c8a1427149ffd51a54665991a88d
cdc552fe9a00e0b54cf979f4dd3afab48fe83b7e88237fea1a0751ad66737f88
ff35b65d3865c6240ec022ac62e7d6d1b1cb89ebedf827b55dc76d83ead21807
01719e2b0e825d2137c1f8786c1fcdcd7f3d77a31fe8cea42f3c120000598ff9
11f6030000
#<end update:2020/02/21 11:42:05>
#<begin attach ID:hN9YHKIsE3A>
789ced7a7934d46fff37c248d610912114f1b52564cb92b224842163df8b98c2
4443a489a85089ecdb946586111afb9e7d9bb28d7d2766ec8c7d78667cbfbfdf
fd7cef737ecfb9cf7d9efb9fe73c73ce673e9f392eafebf57e5fefedba3e6f3e
2a2aaa07864a96ba77f47c6ec9694a5d95919597b97655464a4656eab1979bf2
152a2aca45f944181bea3033f232921f99f574b54da8a8a883c8cfdd0c34e4ef
12ba2377f28ddac744478b0add7d6191fc83d64df3ae26155561f49943073af2
efd38f752d7da8a8587e502eea16488e33159518564f5bd3ccdf763925f81da8
05dab257db9589441af7b71efed28f03b7e9922e266ad3ec1be50ac5c62636ea
9e76cd1f96f7eafba6106f3ff5cde30f445361d780267314d7607306587130af
706f8ac838403b7329ccbf5e7dd05ea6437ad591a972eef36701873139bff931
153fd795b1cdf92e17ac0b560791ed37b1d3352ab7d399e4b3327a309eb48542
4b9f0f73f0925525ca30c9b188981a051c2c04acbac4751b6e7255ffb4e0fee3
41d06448963f07231d6a693a5f0b50bb536d0688d4fae92ae61faba64bb971a5
a2ca2f0b25c0344cb1d64c4c39a286f7fb1d40af4129117941fb8baf92618949
494989897db769e9508faa400b9399b7725978d9be9faf432d69be5438e50f7d
69a8a608193f24ad0617280889dd7799214f6394a20ffdf922bd8bcad685f52c
652c872fdeb2d0b169265a1dfddf83b8a50dff3e28992876f227ef012763e5d8
62a022a741693dea82dce961a649d0b6a066127555bb65f4cb97208571713735
faafa64a842737eb7df9aada6563fe2718e8b4ab5a4a0a62ad26af67c4a32693
7b1f2f1c1dfefe2c442bc33ed686220f9c354bf901e74b859bf52702916fb7bd
7f584627f5e42613793e19a69459b21610173e19ce6180f09edcaa8199b0978b
0afeb14e974fe800451ec8bdb05022dc33fed6de6c3597d792ee4ba6e62516ef
05b750723dfb0f3591c5a13bd160378c493fdbfbdf8591f7c14f5526104d9463
575d15f417cd6a928698fb3a436afeae81aa0144ba7d6c6469bb07454bcff25b
98e97a3dd7c45b0c4e9850d69daac0fbbfc658466b2e9a75c3468d65c6e80bbc
3b4f980cc1693de9d7c8141819cd87fc51279a20b3faf760dce7fb7ef8c911be
fa8a4f743dfad4931ba858cc979370eaf9df857f96afa3592fce0789c55114b4
018ee663cc1a990445259c3009784f116f2eefaf31c594b548269665d85730db
cec5eb519814014eeca41bc6c99957b46eae4490154b21b3faf760fa3b735faf
ba0edc39d1b0d857d33d2f57456339c0fedf8527b3fcd31a0b4e1484f9bf62b1
ffbee12798b24e74e57d3ed1f03db20ec73abdd25d59b6fe4978cc5f86687ba2
208fffa0b1fe2b3072d9c09a244be9130d23c83aac4c18d3e8bab0f04fc27bfc
658855270ac2fd078df52f18b3af512fb11595b71e7a2ea7ca13220bba5e8ae2
639d5afa92c4d90a8704ed4879c53df5250a0b829f7ecdbbfa4ba9e8f6ba42fa
8509f70080283d9fcda6a6e97bd5342e0f74abaf385ac36817f0da0930afd1b2
42c8441b42277a65a8d8edf8886455ea15dae23952c2afe44d9b9aace2b7b2bb
ee81cf9762d866a0827e47387d2f7ce23bdf292d7ab75d1a1123fa63a4f1f1d2
c27ba88f606603e0b62fdb23f2f56641f042640e9c5e1be69c8e92d1364a3560
fea538aecbfccb0367729313dff04a22f3ce73d2425f6e73c6b733556edf3334
ab8eab77bcee463ff225479172e615d7b0400cc269274e32e022ecf077f0d1ce
c74bd8eadde9382841a15ee278437a73a5fcb7a6fff8d0de0808957adc246d5b
7b7c24906fb9d991465a0a9e801184e3c3b69ea6b32ddeb3ee2e58dd757c5a2d
5bb236e73a36eb733c4a15c9d3d5ec327aa0d2376c7e0790616dddc7a978c665
3460f68f839decb0050ea32f610ba5b529bc99ac6a9f987e995606fb118d5a52
bd8a18fbaa7d836712aa8540df3bf295786f7bfb2439ab7d96b201977bbb5858
e02aa0842801f5a0ed254bff7b0504eb2b658fa71a6a9e1fd8062c63dcd29e97
e4e7336bbdefa1b19cfb220e72a666c35cd51a5de0f77bd71d2fabecd6fdc0b4
b76baee37835636ecdd9f728707d9adf8f0712774bbba144a1bfa2b98cb8636c
0b801c5af6698add036484b348598bd99613a466ba6a8f70c19716ea7994b4ed
6057e4b5a1c91e6afb6cd56b3ac1793b7edfd152db3738e39f71ac62e3336a4d
a5855887cb4d31b65303172247965f9d5155868c57f5661bd51eac54e2fb1961
63b238d8fefefed3e56162ab7074b27a3050c1e3bb38a04afc9c7c1e562470b6
d10df2db70c679dcf60a5befb92ae63004f10a4634fdc9a2f4e0e319d479fed1
efa7977004655586de73be6ce34c203c3ea8d44f5a9e557feb62a2a95f272675
6627e8b859e0b01e107cf4fbf3405e888f18d19daed2a590b30c86897f87c777
c29938de97f0f294d42a57c00e0cd4b20d53c0dfec6593cfb2b2b0203ff72c40
3fe074ba9395e464641e1f9376820fd76f113fbe7d09a3d50531253eec3571a2
d3b236e510e9fc557961d64e20e4c9d3c59ad06636ce339762d9ad7da39946f9
5fb1eaed737cc575edd8abb273aca7d3862d4c37e592b9294ec0a90c306b3c7e
6bd34d66001f70185cee3bac5a98465eb143f115be20123d7ed9d4c8ad31e4d4
8a9e4e268e5f8ef04be9c974e3cad86bbbc0f55b18cf7bdad122e90da775dd03
eb2cfbf78985894df1b2a6df999eb1896836d37246d6f27a76d79b77b1347c31
5d4c0fb12dd5067e6abde8ded8945cc1c3daac0160153084b239c5deff9a2a27
0a5dcbbe5be98263bca34e7cf7eedd350585a0dda9d76b17ecb813888d2ff6bb
55560f775bd4c3c6723f5f5b3bc0b4dd7370fff919ec9285f81e9e5ce1d4d2a9
6fa344dd14c0ae822cf8cc2effd698c4558936cabff496ebcd560222cab69413
48abd1ff3a47d3d0a60ae0b4c532ed79ce2d174c7f4df9d9c61e34e9d33ccd44
51243a2e00bfb8bcfc9cacdda9594baf698239971c75ae6db9f7dc643d7c7272
01437b18e45964b65ed8d7add9e8e820bf336f461ec04e85696a2504cb332bd1
0d0a82dc00eb92bd3be95f5012f2daccde787382a6de68bdbbe7b90e0df05152
ac3f4d7f491e02752915f67469b0d0e1073d863da480c02ee7941ab4ff909847
53838e3495578f4359485cbc6bd80194e5e0b1299319ba323b7ebed86899c4f5
56254654f420515dfd2cea414219e0928c362e4f8ff91e3cb92208f8490330f1
ec77cef0e3a93c89e44cec0d66667ddd99e7d7a86c24097d3e7b1b739f6d617a
9e6675a54bdc724e935f6023259eee88f60afa12245645b1d644b1e28adc41d7
c32169579a69b089cba14bd70df96d0b5fe34ab36cc0fdc08e4f6a621f6ef655
ba4058f5530356b8059e6f7d18fed68a94b046a4057e355abb34ae46e38bf964
8ab58254133bec8eaec22ed2d5cc811db3bea0501237020a4ad05119f84d1603
ea346822f75da837187dc9556b0b7ec5686832f1b93b7e35835cf426e9af49c6
10d3458099e392b8694d2ab36a38fd1eb420d0adc6f7fdda07e8fcdc98b00625
1d15f9c905ef4e958f55b2f21574bc8428b54a1f780d15edd48568fa4fdf5394
0ae32d90f8f15a609e7f35cee3d065a266db79bbdcdb0f9e01b3a273f1372f42
ab924d3b63daea3241536c9f8de8a5d40a916be1bfa61f3406af0c431fbb7c3c
a8bbde075a056afe02099767a4120fb74bb3adc0e0be30b23cc34e59b353af05
6e40f19fec6c22d0788bc4d967717e1d981603f61547a79eb777c7cdbf2a2f80
5b1b4b0d7ae1758bbdb917f163decb6473674146323a0df463ab1a4b8fbf7772
97db8956808b38d0731d6947d36fa54fb0792d181dd1b6d5154f666ed7567cbc
cf558a6d12e868572af1eb904773eacaa75e699cec5d59d92cd6b7d646fd21d9
4268a7df8d3b0d33ded8fa731636569a22b83b82260bbd6651852f7decf085e1
fd013413e5924889682c40558482f5a4150b975cc8cdd72cd55b267339e51a25
c9792f3ae3336c91f5486359b99a69a94ed4a41be870d987dd50aeaed4e0279c
8ae9979c9bc9cdbe11a43190361d6e6393cb224478135bd6ead2e0110b5222fb
822fe69aa991911116117d831739672c6bba31e864f47cad1ee0fe83a6d71bbf
74b9b1f4a15653a7d9022a59e8d9fd4bdd02332c60bbeb6fea4b0dbae02f2e64
ba235e96823254c59ee173cd00ebd09991949941d3fe20660a2c6be7280e1d31
51d44a5d40ff2ea12e820367947c3d43e10f19c916eea4c88e847173ba77096d
0fb979ce4f39800291d0c51a1168e9df80a9d518ac6b53f18235e8fb5b114e46
d7aea3860b42d0714ef8a142a7967db1d93077a5479db4d0b9f6d8244588f9c8
c3e63c89734fbe7aac96ddac06d78f20bfc9ca1d7531978f5be7839e1802965f
edbfa1bfc24ab3ce26bf56229e07a0ae8683faef36bb710620c70aa24e50bf39
c0abb8d4cc3a1c9c2ee7b0818a5626798bbd3e6edc77c29d6025a854d1db15bd
c3d85adfc552177cdc106463bd770a826a80b1fd54b9ef3926b2fd68d8ccd386
df46b2be8f239f06c9f7f926e682aa2b0d5675f31d49585323c8661da4b66826
31475d95cf08948bc9ab6cafe7b62be75064cb0af669a12fe85917ccd93fe156
06082983f70fdc35ac70ebde1a84bc43c7d9e31f7a7810088418ec9f9869e49d
e3ca582582db641617b97a41defc9908599bd1096d934972d9c88a69e58a3c1e
1be382a7e434a4df024fc7dfecab1b414e0269a759ccad2c46711c4aecfadd05
dad4bb71646f14f2934bbbfe84547b44089eee32960494732b4815eeaffde840
916cdcc61061b44d2348c19d06fc2da6b2d6ee24680c0ae9e1fb6d9884bf65b1
e8bf36e6677ab34f8c3cf74efa1f457020748647694d03af5310f91232a4ebd5
eaa216b0bdb4b7870d462b3460acb53b694b3c479eeeae3960ee5dccf60a6c53
22987343506fc213d697f377277c22204c112a0b942011e1cf3658a5440ebf55
f9e20df0174be93a63fe79b6a483d91a39bec08e3ea332960bd71fef6f3dc4b0
a3e784cc195f900e762045350f524d158f3e30fe1e3a37e9096297a02bc4ec9e
996d7b089e7b7a7f15485da1df08d7b0b0700fe7f5b702bd02500f694657ec2b
7d86b5d1d5b8e04d8d7cf91c364c72e2cebc49f8dd9d6255f9347f38e7bda962
b9c5e0be0555442928d4592d96935e60e7238bf90d2c2556c68603428e77a3fb
282b864ccfd379fab3c06b231ffd6e8a71d2eab21ab1eed7eaca8a391f7b0658
4acc9506659e8f9c16665732f9c444964884b01e1e10bbf3b682fd2f2087f09a
43ef3f89190f9cd200902e6364637ca9205c8bb90043fdcf9256590a425a186b
e34edaa08d98b4c0fdc56c776121147ab7e195af73f8eab5f39c9c7231072a6c
7661ba52280ffead15f67414a72a431d1ba99ed5e464e95faa3290734b8074bf
263cafa2ad673659097fe94c15e84b766a464686d18d3d6d4fed57eee565f1e5
2e1d71081dd3dabb092045cb97fd35d2ee644d6acafa74ca690ba2094be97ed1
54365f2735a9c21e1819fdc9d77ae014ffd6ee9e99e052f8253562d53e1ea54e
5a34eabfad9d13f7f66d029fa2d768a55fc170782b32a9916d99fb34457c7142
04a4e7c9f3871a677192bef88c13b83b77fe01375a74e98427c703fc791e9eba
ec1a2a5b4929d795618cc744cd738ae05ede44d1c68462cd7b9646f20aa276b5
3fe7cd4fd6b79e1cefeed5c670eb45814f706ad44e70d61dd376af3ea6f7475d
cd4ea53bd36857afb73a1cbd916edf279aeaefe8ebcb99fa031158e31ce1ff09
bbac63431a28ad219243ba6beeb6b02d5d007953f1e1eb70b43f713c60950ee7
9abb3f6355ec7a4547417e0819b855c27895664d2b8e313a48d2c2cdc725f525
98a59f186e71c59f0da8f86870ad0b12247127540782fa0288348a3b5ac85f19
2df759190d2836f3ff0485064c42f7ac9539dfa0f1d1bb4752964534db67630c
d436e7e57f7062fc0b0fd82f5ffeb2df2a2c619856731a3b75efc6f14e3077f4
4639290775bc0d615d1ef2b9760723b08ec7d51eb1be3d27ef46619ba2e4b3fd
862bdf127934b8274fecb5e406da7aa1367e8d88f3a8051f941ebfffda80b0eb
000d31ad7e8084814bf0818d14238956536ba9d9a97e5d64e6bf55a20ffbb9eb
bc18bd8b4d5f1fecdb5a22831b598aabb65754a8ad55044af133deb220ea0406
0b041a1b3c96fd6e5866fb6c8e6bc6ea19d9c4bdbe522586369357dd7c0c6968
9b3c9b732b9ff85e692a93b2b60bc39815e9287df2c2b7c2a97cd96eecb9ffb8
653e36fb0a8536ac760e297db305360a0eae5d87004f70d2cbcbcf2bd928ab27
d08f9b7361063826869e1cd84e3504b0bdb8383cb67cf4e33cd9179bf289641f
c9ea38fdbdb3ca6f755cde63202732dc58929b5baec0ae36ea5d8203ff4363e3
4eceac9e7898983ff91ff76763722f9e58322509a65a621b136052d665f6876a
4f4fac74f3375631684e916c572d29db6f09949963898db5eeae24ea40036bdc
90e67f5bd72f9caddc71bd4dcb0872ba08b830d99d92a0aecdecdc9fa251ca69
5b0d23860080c6272e2fe5fab20b6f195a55f14138545a62424e861c2372e22d
65ef7b56fc245c569739b7ff96535b950192aa28fd67909322502791f097b347
2e9a8bea19a9d5859c02dcbe7dbbef761925200990370a55cf36fb6e8792abe4
d45ab29b6877bedbf464b413b834ad997e52a69221c4081ff8b75049873f25a7
7d4722d0266930b095d544e0e65d4a907ce9388ff1c02d058b75e626bdfaf02e
d6f524ec16623883aec1c981ac45c0889992cb18db61ce00357cf3e752ed36fa
89abc45cb7070f5a578d541ff962d2e34f7b7a8d55803ccd5a73939255ddfed8
21f3d01d303d0dbba1ce65be78121ac874267f66fc6f2111e1a56a2eda6e146a
5313b8573941420f33e0bc3565398a867edddb2c9bc3c5ae700a18e21af24b41
f54eae876a0162fdfd77fd28b965419c9f15a8f4913793b2169f88ad2cb0bec8
da1abf27f7e6b5585f40947cf01737463a8d05918dea9ff990733a8cbb2e135d
4913414b85d95b3897b60215555352a5b07fdffb747f2b3a7ea6838e9a691189
a2cd76bf790b90e2d15d3b7f47d4ed7a94af2a03f28676e4b427e831ab5684ca
7de8d8cdb6a181d75617d48580dc811db7bd6f925745594565e63886b9df9b5d
d6871c7e9a8f3def6c102e0787cdeceba79682a68a53db275e37289981a03177
966244a3c30ee42e280369410227cc3f101bf9f34abc8a5c159dc25a829c7c63
f74f7f9e5df8852047c517a21960961a93c7e498209a1668e2997dbed86be3c0
8a0027d1d90fc6be9c6d262c601b9018f13d87aec7c1d4baed700d55ca2a33d6
0c20c81aaa68235973e0a5a942d06834b7ad3f75ea2b7725ffce51f2eebd1e0e
e87f9a284be00dfe0335e309aa8b3f9dfb66fd38a71f1cdb696d9a1db63fe364
422e034ebc612d4f67d51e048d549f47530a0570542e60b0ecc9cc5c07a57091
717de96478380d9531f2b4b2071b9e4ddbea029f146c32c4d1dd66c5e90f00ff
fb5c1356e1b5321004caa138f5c76be9be054d0d967b987b94cacb121b7a2697
659af0a68e23cd43075e8c24f12eb83fcc4a3d3a3adadede36967cfd26611d9a
d611bce337dd0ce08e8f8ba9b2df7026997c4e03690cc693776bed4e041ccedb
ca3ef0a1f916fb7a65b7a1affca381cd058444a4b43841d02aeea699a7d949a5
44244f1235809328083d12c5f418a86958598da00a948f3e2bd04f78e7c42b29
9b9282ee2edbe5dc39a79ddec518644e4ded34fff3e7cfb618d1fedbafd2406d
295de71565c985d02957b59ff5a40353fe6b75a54c37fb7609ce109498bf0c97
8cb89fcccc8e07825287bfe0571957744c61a999132457db9516d7b3e6755924
4526fc5f161318585122198e97df0ddf7a7b2e37923c91a6c267df6f199ad589
141e27e501bad17822585d5ebbda0ae8c7fa86fa7c9afb43bf11e11d82b6c51d
05e2d6360b4f7034020e29df8e3f9f26a4791a1a03aa4a05344134152f9b7506
4e8572932356ba82b8bf15971d2252e501d90bcc068455162c2c1c734e9da2ec
20367661c67fac374e0c2251bddc1c277b874b49308d650221606fee73ff53de
c00ef9e64e338d78e9954f1d19157133b581f1aae7b7a7c7bcdfc797071f1fd5
d7d72f84728e9b53db1d222a424db67e253e5f9304b4c1a629ce57087a1e0e2b
554d05aa7eea5469b8bbf86ebc52e705dad550cd77c575e0ad19eb059ec099c8
093c653b571e17e0a04e085c754d49f4431fcfd94c8a06da54c6e3332e3e3055
600958f4e02e36326f7b58be1de09006c3bb2d2f43780b3a4c6ca27be626d166
00f509312fe37767c83bb555d70172556d537dbddf9f327314507507cbdca369
1c66fed6aa706b7a4c58acc25d44f1522b4c242525a5ff48b2160d6b3160e8d3
abf1c1d95c656f5ac5359bdf425b597a87b1ba05dab45dce9ee3759a4782b028
3729f7a58205fb39579a273c9851c08477a42576139bad7c1f6403ff03c4726f
35aea509beff2ceef15d97ae7b2d1429e3565fddf99de0967a0f2bb406259933
de4e4ae228309be7a7aab5e3cb46626f38da4546eaebc6f47a4b4ad0416af62e
6bdfc14c656e1fe13df099f058905b6007268f9caf22d3caeb7098368ba44472
492698bd92bf935ef34e3099e6f79194bb126f057825d70d9baac6a7f0283cd8
9cc5ae7438fe99eb6ae1ae72c5da1b85552ad0d0a3f75f138bb19d09fba41b1f
93e3488ef3bfd3828fda250a92559f158503f51cfb8734033b822c8d46ebff3c
e3d8e8c7d9de393957281d8423f2f3739fb540d9354c3c3b942953017880c095
8585c1229733aadc1d4ee77788d4b031a4e3651195f5e9a8b5f6c3bd66db866d
31faed4ce9f63736d91c93c91540d9cda5a1e289e3a31d699b0a5aec193cb9c6
74dc4e88c14f363575ddf267a302ada6538fbb26c9920d8577b6afda057861ac
5c0efa1164f1fa58ed325f15783f57a70846c4cfb444db1d2615449cb9d9b532
85c2dd6aeefc5552b24bb8d323119a4a1a7e81b47b7fa4fabc38d890cc66bedc
e7f7409ee5669b685ace7222e5088a68c598cec0dae0c03aaba9b7d5d5660660
6ed8d615359f63e3d7ad55c95e915c4b2feb457a171729efbeefb68809189eec
1f71c653a31f8d255ed0e4a9898c54e2a6db74ca7a7cbad30e7c7465f85d55e6
f887ac7420b50997e8949c2b25ac056d210496070b4f653e1099ef27739373eb
ae226d8f60d58f0f5b04822f54e7e58ccdff918c5cb2c73f8003f8780fd5ee27
944fb3d4909e22e1f4f5019c08d4fbe8575bf65bb7ac59591beacfbb7bf6caf1
3fa9bb98675ea3ce83ac553839124424298ced16cf564428a7f76645e87da9e4
6329b5c5b1cb4d39338fd373980f5fcafca0b2c2034e79863f339a78d41edd9b
71f3f500daa6929c7bc91e4a2e009a3b23f9fcb4d86c8b9cdb3e08ebf4dde12d
cdd2a1471070956a0c868b0b32994f6a000ef3c39867c5e3f54f16d9ed5119aa
bb53a5bf27f2500793d2478e8ffbc59da2e897e29a0ec787191f46b19b3669a6
aadbb1a21c0e50085429b6efd40b71a9200f6e2fa2f70ccab4097cb9b1677e7e
c5b2383ddcf2b42ab5b4bb1b081692350b1bb9beddda46ae51b657c65420e3a7
4824ca617bf5d3e5c4b3e2d79d2ed336a32c0aa4ac4a96da6325d477eb11dd20
d6b6ebdbdcddb5cd6b829c6370195c99ea2e0a1264ba3a4986d15b267b369707
7dc80cd5ccf9283d9fe2fbf27051996184b06b959c94634fe191ed34e5b0d713
ff41835e242af7e95e0952e82356c9678bcfbdb95ac7304aa0f6e9d1e19e5bda
f3edc14227bf89e73b94c71f02476b1b731d58b59dd1d033dca930fc5eb11bb6
a4a424f5c673d85443a8a86172d96acdc1646f4edcacdeb6987928a057e2677f
9cb1ba3a0d67362c80ede3a7dd6e83689aa1b98586d019cc0bc1b66498d84457
32e811f1b0e22e37b7bc0de9e0bc62edd5e66b5b07ea79f0529b0ac8453359de
10ad6c1dd8affe18514832793f6d513bfc6b22184ac4432323a3bb1241c7bf74
7ee30a8289ad1feed41e1157eb7ad793328cbf0d4965c11e30ac6a8a7174c1dd
b68107b52d16c1ebd13e4b1ca0ca3a33e89ccae614290d5ae3e70173e6b691ff
983422427822b4d235546efa89488048d9b1dc9addde88b5c22021a6efc1fd44
76be44f14057035605f908d347dbf6af94af3f36484cb4af3967342b61dc63c1
d4f2951ccec65345adc9e9f4783ffcee625f6141f4cfe2bfbd698e2208d352de
ee413af274fe232f7efe8f30e48c52da32d64956e370f09085342de586f3bf25
cd6946794f953109122ebf984464dac9b331567f8e17b16f4f29e61b39b8fd69
6d4ed72e606649375e9910b40c3d53ede2d679e1fc8aad727e8dcd317570e1c8
909f6104386dfc5b89056920a4cea356e121f44b417e90c99de8e1b378dde3ed
b8b02f33fc247df6adea7165c5ab5eed293e5601d746d664e566ca1841047bfc
0b0b1c82514d32f32b67ec4dfe06f8e3f8b8b1e51b0624fec89e505337e90712
3fe12b85427d53e3989ed0c9ecb86507b578a87528ef009c4b2bd745698aa6b4
84c814c500757e1c30f3fd617ef52f82f0d89d6c03c86254b2c2e146d1a269dc
5337e68bd52e1e5fd3dd2c6731b39b828b362383e32aaa42f886dddcb4be9f19
61af7f07793a42bf55db26bc4f84d1ab80c19507881253fed7d1662379ea0923
403d61d2b24f76a7572fbdfcd3af1afc16eb661060966a357c4c329745286056
3b57782cd294fb1177feeb75c10b595cd22a2cbd6bdb74a6bfdf9c06e0597630
0f75ae9401249ce87e36b7d76940085b8b774a3b9c54cb9ee796200481061c02
b806b5786a5bc9df60236c8f5eec9391ebb9b237324fb59824d1c33abaf34419
2f2ee6666b7d79d3a679f74ccd0146d6cc5380a618ed6a1f3cd25980b97c934b
c1cd5d983b89f825221a35248ca8eddf6a1534d18181b372b196f6acfad33fae
0dcafaf5f42c3cd6e78afa98f88971335d647ba62e49d2143fc2d1124e6a77b2
7e01c0cc80bf01e4ea51979261610123f3dd8f1623a384fceffbe0eaa8cab06a
7e54b00ef301e1fed15c40b2e22d66de55d2308ffb515fef84824a37ac6ee0c0
cef08684e383875c6a8e5941d600962fca3ccfa53eb298f70b9fca78e3f57d4b
77e454808c909241db9499b801dabb5286f5b68893cb24d4c980588a432d4f02
fba23d0a819df405711ef80fd9b77af954f6679904594ae62daeab3d2c3072c9
6794a591d05e2db8410879e52f2ed2e2ce573e118edc4f0a3417f2e5d21ade5a
8cfdc0c5dce752d0f19bddbef2dcacb86c2ffe59685f5086543a3f2e6482cc06
13e3fb0d093ccfc414ee93dece091c85cf3be0ad549eebcfbd3ad3ed0e034bbc
2e9561a5d9bf7f7e61a4c65e3fb041feea28ee57ce00071cc6a62b801352cb49
bd5e8f72519d3a3bf50ca9fa2474e6fc5557d7bb6a24c26a8252e95dabeccdb1
82c88c3721f38964d559b961adc58d462fd97b0cc6e70ae0a61de70b719fcdbb
4f0b35c07ede30b063d9f9de2e3f9edbcb071e8e1b10dd3396052eadde4f8fe6
3246f4db16c6abce750f9d1928912a33bdcba6a976bd27e6063a99789d215dab
47bc5a64f46b4afd4085c964222cf35720f6f881216de08e87534e77aecebbf9
a1fc0d3331fa3093354cea6ed9b912939f95d305333e2fc35f000f230932a070
7c4377168a63404b952732962ed7e3beab4d6b89384e5c0bf6ad140adb2f3b37
5f6fefae97057c92e2a692cccc00d5ae35780f6e0e7edef4a89620acf125d114
ab1b1cf0638b9ec1210e944ab13f0f3cc5fb039e2a474998e07494cf7d71042a
b89a47a134d4d1cdc40fa903660014fe03cbd68ad14a04f6b488832ac3eb8703
7ffc763061ba4058f54a5093dbf30fdbb65735cfcce7c95f697d0c5171d66e4b
f46160bd5df724f2f3452eba676c0c5fe39cf1112b5e09e727ae654cd0b04fa3
d9e27dc5b97197dc69ce728468aacad3d548340e7feebc416faf702d223b6b78
95b14d19adc51c64c1403b7ea5d82a18517256cb5fe6408658a25d7d80b753fc
de78c7f2e33760278f44fa9b8e471abe15fd29ddb9a74613be46a16e789c7ec5
3b0a67cfe8fb1f7a2690b1c4f7944e81a61603d1adbfdee883bb5de699d6dc9b
c14697bf9aa22caf3cd6b0fb47a7d0d47fa0a1e35f81e94a86ed7ab9569f7421
449eb4d83c3d25ef93fe4f79a2e0af668d0d302597d8fe271b3afe05984425e2
1a39235d4969f793e33b69b159a2779fd7b0fbbbf0b6ffd5acf1ff9b98fedf6c
62e250242c2e5da09344d5353a5765729b131b90b6f7fb3bb4cda7ca133d843e
e6be76e0998fab3765fd21334365a4c6f4e3dd294ac7a04fc7de46c731207f3e
f651ec6b4d7b4ac7a4de2d436db496fdcbff051bc2024e65290000
#<end update:2020/02/21 12:06:31>
#<begin attach ID:hN9YHKIsE3A>
789ca5bc75541b51f7360ac55d0b14b7e25a68b0e20e85e25228040856821477
77a7458a172f0ec18bbb7b91d0e24e7177bee17defef8fbbeefaeeba92b50233
993373ceecb3f7b39fe7ec4928101010ac5485f41594159d64f924b9def0f0be
e5e17fc3c3c5f386cbc1ce32591201e1f9fdfc8a505395c7c124c70436711415
643410105e0800dbd7e82f80bfd9366ad5c03f44270d7929848a31ca5d6007d9
52520538b73a0eebde0405d8c77050d0774240c0ed7e7e23f6dbff84202048b2
2bca486ab91b1d64da4219e1fa47cc5604ec8978516fd4992009a8d5f1216503
4a7046760b19543d8540545e96a07905f6da1f381f277c1dc0b272a68cf13a56
bafb6f6237f5a84ad38dd65d5a6c857d7cca634563e6cec90c927939d76de2be
70c455f3cdcdedd92cccd97850c6c5c08befc45d547533353f2d4edb5f3cde6b
f15538edfd2e4e39131f77ca2ad92be1f3bbd02557e19f942152e1bf7188ece5
df2a400fa445ef0a6b790079b03e6f55c6a7d0031fdd63fd77b7fdffe5aea7a0
bcbcfcdddd9d9b8b8eae6e4a7232090949a14b5f5f9f9cbc3c3313138f381f5f
902cd8cc0ce975542ffdacb0a8e8cb3a7c822088347fe7eaeaead21275cae8d0
106630afb8f8b839d2a88c2668a38058ec7a25687171b1aeae0e0ed747cf6d6f
6fafa9e12389c2d98b8e8ea675f2f6ce880a2d0d3653d710ce94f3285b9a9909
99090b0dfdc19908fffb3718b3b72fbc0a019ea8f43a0aba762298a2024a972d
ec6d7428190c2d8d8510d941e0128c3e3e3eb68938a132c746abf1381eac072b
2b08387878c83e3f52bf0d326ee52044fbb9b9ba7ea4c902bf6f055e8d8ddfc7
b77398a19b7d31146a8c89c15f2606072358e49131b13f4d161a825a2479f19c
90e01de7b5b220030383aab78ce93c88f01f2a9fe2719c5fc0cf2f2fbb0a4dd8
d50820441360f65c23cc4c6f1f1f2a7582dac04979ae1469071cb7d72422d834
d2928aa9ef0b9b9b29d669a39356067b4cbb2a25406437529cf138b7e2166043
438a0a47389812074e2bc70c470e595f37db41fe1c60f183724442b66210350b
23ef402a07a108059eafc12a28bb11de2b49fbd1081329a6a9a9292000b19624
94e798886c21dc9c1a711a491ac909290f292ea435f04ea650effd358234a825
005fea4606147e4d47c165f13566d99f46aafdf0e8e868775712899393f34612
145e4b4b11feca2b69d482001c612ec6c46684698b94f3c304ffe6d695b293a1
6575d524d84d8d7031f238e3c700aa995374a222486cf570b179a7377e746323
ffc93c081d6f3229db9cc8913b44cfcbd7572c41e1fce2c28483287118868686
a6a9a9a926544b1ddea93a80fe13caa315a62fd3210f3b41e64a777f17ab606e
6efe5a0f1650d7e98ffda8bd711b31e1c9ca62616a9a5b53e3048596e97144fe
95404c92fef7f0f040b60f96db20549582d1a5f90f179696b2a70c2729bd4ea0
60c186770cd3f711363dd266186116514823eda0ee11e84ba26e11ee29166834
3737d34739f8570d59d8db7f8010e056b5b48c701f6606af752a73a53b0b1fdc
7ce20faaf2609dffe2ac2cf317916af237f8cb976a60ba32e95874095fc8349a
2351009ead02b31689c7e1271a5a6548191d1989a68110517387d40c1e6daedc
47964d04f08af965cdd8d379384404426363638118a1a5f8a53fc3850f326921
8bea95f2569911876144a408bf7b2793282c2c4c1e6bf3b64e5261696e2e4c55
ea0375037a0ace2f5362484d6b2b555c3f815604ff240760ba41c89becf1b075
4263db7bda741ef7628d62e4b0f6aa2ada290284453308843153553e275b1039
c3a751faa7d28fe49c9c9cf74cd2306b723ddb60b5e1e1617a2ac446280c5ea6
dbbdd6e1555c5e5e7e7878383aaa92104b48444484848404f902581295443e9f
01097bf4fa5a70b050889e2b1d98ef0f94da55adc4a4388fa4bb3b92b125180a
2043d0f93b59e978282d05700ccbe8b3a8efea486a6c8b42d3f8e4248194bddf
23f6a88a63d3df818170856b1abf01a6a1fa50243842c2b1b8d1f0d6ca0aed1a
57249fb0f05e1b34ed4a235e459ef2e923816adbba94f7a791b940db525391d4
f7a1762848d8b6d7ec84320bcbd792a0102949467a6cc8b7f74c41a7553fd361
c51c614e6f0505156088cccccc11325de670fe83824694f87d048bce571d8ea7
54505c3d72c331dd21b00b2bcac86d0f0d389258eed5af930dfa623cf8f272bf
04373ab7838d2aa850504d81d58c7168c13f82a06477a72a09a7255141264ba3
f8f7f43451f036c5a7c4181368feaf6baf1d59fad346ee748b562d7d9e4287ef
7643079804e1862f6bf8fbed9c358d742bc661d4199af6f6f655466247fce8ec
001cca743524524c41d59a524b07fbd88828e06433032e7a10274f4ff2b8fe5d
59ec3713ef11b8141ad92994850650e552210ceb3068dab986d527de3584160f
1594c11a9d21f6e43a933d4461d6bc4a0e5dd3620773f3905010094fada4a08b
b333e3545bfedf5be116d982c2ba5ad87b7d4aef26468ae23e25457db69e7077
67672d4674aa9ee5f898719a3c077dd0e93b5ab8d61ad0c399068c67e8ccd1a8
6e32268005bad769f8a742cc83ba43767298944dd2f8f46a5c703f4d6bcceb27
34d8e83d5c6b2c55e825ec152565bea52ddb898fbda3c17f2e34bf56084d3bd5
f87c44cafab6e65d6442e5e19ef96fa851f4eb115950b59607ebb03fd2d1dede
e9cdce38116d1ae03f09c7742552324aa3b529310906f57285d01159d397bd3d
0a30c9c488499ac5813288b5b53514fa9ed13bfc0ec63b9c002d79eec0d7b38b
cfd5d51515155526305e828c3aaa572650add3413049290299aebaa1616e6e8e
99301813c2c7cfcf48181c9c0ec3c84a59989f479f1a0ffafb8ce0a6b16afa46
4685cd58f5c74548c0a901d058b14bde837b8f83dda23ae594daedac6923ef04
95b90aebaa74fbb6621c3c9b06fb75c6c897f441e9b0939414612121c99fb530
d81b3e3e3e21218c9a173cc8d49494ef99bea1133b182d4d4892c542e8133ae8
e3472dd4bf8a7b04aa397b7989601ee19533a655ff96363f137f3cff902276f6
ea7d9ef15d1a07851110b9d2a02af95e53de34986418a193fa0b98649434c8ca
c7ca3f2a004bba1eb490cae7a2f241acf8535b59eb2d9b700e48b43ce4908827
a9918982bbf5f7e4e4e4d6d6d6fdfdbb16acaecf56b9a5a551ed799e7676b863
a8b46ba8051ad67e7ed94fd4e8a5c7cddc7a54a900c6b56097610f9162869c9c
7cd16369e4fd8ddab9e92804a9a8aca4a1a4dc49c7e1b36fbd48fe8ec56de5d6
331d8f43be103fdad181606f6585a0b4f2d51ff4033f71ce51c844e971e30335
1b053e2bbc43af19c472891f056df4710f879ef747e8735cece4150a94f8052e
7b6ebe24812e36f75fd1bd6f64a56868258ec5f9d83980b2ae4f0911ceecbbef
eaea9a9d2549e9950ee82f396b23a66197f42633eeaeee5dff121d473b343333
a3869b2aed6d1c398c9af76a293cf53d2a4cdfd0b04cc0aacd499e2cb6545756
d5259789826cb36a29454ad33403b1e1773e94e3aa60050a12484db65b349d6e
3efa7c22889555613899e5a9e4b541302daecfc4e179a9ef1a826f13b2b9f023
1df665505992a4a6a6862cd7f4fe45395826288878983c587c1ded21c299016c
182da9094aef55c094fcf3fb37b116591a9a3bcf61774e840c8b3fd4c2c2021b
0ee69fce871e2ecf89dd9b5870537b9561f00524bc85f0bd7943a804eff87c77
fbaa1d55b25902343d3d4d362c0522b39400a93c3191baa226fdfe33eb00def1
cfcc5c18e6e66b601461330bc435f654c47a1c4efe9b18536384b94881a4116d
0ab6fa41f1b388d387a29e0cc920c18aa407127e7ef39a21ba3e9e18eb05962a
16659202f22b7dd0b1c641024e2e8b1dd392d7870dfedeb1b1b1bf7f29db21c4
b8f0fce95d07ef6b5406b260a5fb40cebe9ef818bd09f262ad92c133248a99e5
71ae5b9f43a7c294b5e9b8fbf04b83f6029fbb3f1fc1c6c6ff0aa194271a55ac
e8b55fc878f8e3b1dab37fcba90905b3107206ad12ca1944c8bce886e8ddf83f
12463d91b734e14f333bc08fbf48df9913c561217dd9fd3a601db3bebe7e7373
e3fe8eda0a4e3bd001b71b9e9f64af3a23ab91025581c8247e7bacfff04d4e49
f973cc2713ac5f4d46c1a66ff7255374989a147b81a5d31c5e0b57ee8475b449
70e18f2e2ca4398525bc673aaabf435b25f38e898e5ed93793993d7ffda212bd
0f0b5ee2e0e0e09fd99feaa606ba3ab2d91ec39876f8973c0045bbff428d4d10
c8920e848614b852ec0bbc63012cd1525d4de7f807e7f7fc584368db53dbece2
2875190fe5cb42796a9314c420a294668ef47a0fd6dad7f7df6c98a8830edbda
c498475eb9d50ae2cf3ffcf8cbc99da454f555b2a5210e1f6261d1f79a6879e6
75741769db8fba3be9d3781cb75ac4af381cdcefbdf1f324b828320e0607071f
1e7c12fe9129db3ebd407ad1e6fcf12e48dcfd78328ebc6daf93fb91beb90845
60cb3eb2377718661d97b2b0b0a0c4480887d68fea5a7f7ee1873bcd4478b0b5
b1814c85b08870d23670ca1e8f45afecd71e394a2d4377e2fe5714fec358f42c
9a0753b7227ca4fec513327788d8fe1345b09ae02d14ff48810e2ae5c00702cd
5e4679bd1d80bc216b8994a16025a9fb370797163537eea56e3efee28c055fd9
00ee57a795781fab0c1b1a73675cdd73d3e56ae0179d8b0a40c47d7f8e8a78c2
ce8b9d8aaa687a027cdaf48404023c081fef4947e3fca9a55fe803fe8d2d4a8e
ad9fdfd3c444bc3d37023d07193535eedfd76b414148fbaec6c6c6cd59d13f69
a2c5c1997f7c5324118c2fbab00af33c37082e137f3cf99aa3c03b0c9ab9d393
5b7eafadd1e7e260f366349eeae03950cf23ca53bdec6824cb33ab8dd10dd347
ba663e37a039d4c379973c2a72f47deb479e344418417c2435f555c2258ee0c1
c4fb15089fb878dc595355d5ca8c5df74287ba90600539e56fdf7581f75f7c6f
8677964c13f08ed5402a9eacfb5662d9fd3fface8cb79ad77fe23798ec67ab16
f132c05a505578c4c4a8390cbaaf5e7d09ed8779fc2b47137f5cef22b95fa5f9
1cfbe9772f02659a24c58d12e85731c6772840d550d1d0165b7a2cb1dcb4708d
8e8445678cfc3eddd7e34dc36bf6cd95c53a0ce0fceb05139b1357e03a9fa9ab
cbcbcbb59346ac209d604d80868c7ad9cf74a4d290930f59d420c2dece6f6bb1
bd05784ed49f8bcccc2e7cb0e7a9e2f621f28f80c2c2c2af83f93490201f3232
3209226465d0f187630d31f83640e8e443e255f33357b646d1da6f4b0d33f07c
6f8bea8ebce537bc905354b852ce4a30c82f35f0712ee7ed05a478ac425082d7
9d1748883151dc65ec39c700a0bd8dc0e37e3de33fdcd754f4292da7e1aa93e8
03bac1f1bcd9c25c7b05276784ec411f1e4c1219013e323a1ae18c7f9c071dd2
a1309341336bd6506c764f88fa16a2b324ab65083a3b3ba33f4089f160bdd688
b6b9f7a8a4be4335c08fea3d6ecf13cb36a0fc900592bb92589678b7fd58c356
be620c07cbdc5f0306050b7b25bba05bfa43271c789ae90fe801ca4ad6e1713a
21c92e0112a3c47752fdf0e1e6489bb2e5437db5c93b8d93959aec99c74d6399
36836b7910d057f4f2f46eadc235a1dbbea01f5eb14263a08dd83c062dc5c027
c6fbbe56affdfea7d35229de50972d4f5cc8fa42e9b8607ce47adf6fde95ec7b
760a2abb7e409746f5e60e7ce6c62f225017bda26cb6d9c43404a0482c4105c9
08d395e6eee00667c4b3a3a24bbdf39390730a3567987a56cd5ce16b7ce7b3ee
93cbafea4e0e7077424f50c768fac2d143d6eacff99a97ed77cd654ef7db7e91
2f0e10608a4cdf54c577cdaaaaab037e2c6f2ebfacc37acc63f920352eb7bac8
97322c3425bafa84bfe664eeea16f59eb933753b6c3d5bec8f7f8a149ad3f16a
b22b525447101eb2a86a8ba8b99fdff2ee9ce88fa8b1f17169de622d36bd946b
c80b86749a47b5bbd986da71efbe636de8edbe251c8df4f1c258363579352e5f
f8f61e9ddf7a8009688a3de1b19a9b81a9468920f24e4000cd2668a2e4e1d3db
f4979fdfb9c5b6ee0cbfc28663e3e0dc1c8cccfd2b989d9d45fd7315a83be7ef
59b52d7844a6d5655d3757fc5ef072efdd3c0ce005dff9eee33c122824009036
6197a5c76f7912bb338de7f5dc9c6688abba0aeed2abed96a36dfcb23398a251
1c4ce7800ea9a9ad4d1c84c8d00b762cd0aa85ae98fc2325215978856ed4449f
3f0f67755c08a3a31058d29825bef064cdf064a6279c93280ad1943c0fba6cf4
bab23340ad413f56cf51a80dcacb63b09bfd53e918e770fcb5350f2cf8f74fe9
c3a5bd8df86d5e6165d7f937f1e287b1a32ae3da8d332b5ff546495a0a3de404
2bb49ff8b0576464e831507c3f340d9039f88a57cdff4bc7d3c10d31bc2b506d
85e8437846322f647a6eaea1b171276a394c2b878b3b041fd9b205677bc16682
d02ace597871662604c1c6d5b5be57972a2fc600fbd84473e511900f937c66b7
0226415e5fc65f64d8798d56a3fd6d1b6dc383dc0f69648d659ac5817390169b
1830e77020d3b92fb7609d1d5859ac109890a0207a0bd479420e88942abebf0b
c49821c965a3950f69f84be24f3503d694fb53b7b7c2292af6f6dc10a2709b2e
170fd6e06ab8830f320935a959c6eeae35f6654e0e00b8d85239397268c44e4e
4e0e3cf4ea023ccb55ac7c7bba563e77630d8501509e64e20809a723eabb7733
67e3ecf6284945f234e6cbc4ed9e49ad42e78b6ef081862de5795a0a5a421722
0278072c4c06b08c36d816cc825f076ec4b301262cd8bd94d706c9fa4b75eb4d
e14031de80859313513dae1943f76cd331fd0d48232545aa1f819e40189fb5a2
bcdc440f11c7c5d5d5141209c6eac6a97d5d1b0222d9dcefe8d8c879a47045ee
05275561701163bfe4ad0fb4033b4be1e7e820a5755eab334a75ef737865adad
c96eaebafcd9bdf7b8ec957def60cfdd3660faa62c7cf7a0e1e988c2fe6f205f
e9e0e12157cae8fc3c198db2ac0ca86acb410be8186caba3a33351580512b0fb
1bdebf5e05baf1a69e453551e1b4f9a68af5e9e1263b8a5204f0013e69108f95
2168271ad12711f5f766014f6dc01969449593bb3bfa36f26487baa4447854d3
bf2e04126c3cbcb8d8d8aee50e3d876ba757df53d3d2bae811547e306a85d781
0dbf0e32f671b320b8d01b6275da0609633441f13971f0f89691e2cc3d167263
77b704dad4a541f18610f3204d829ef1097eb4329c1754eee67a14e8fe06d806
3667eda6bc1519539bc30a5d29ff4a5ea9ecd2d8ae5c6175b1a5ff6a2156fdf6
245eb341893e42408b146db2da311102f6262525a50bf1bbeff70b16e4e11311
897a8f309a837d1e708afbf0919d454619247e8de8954f9f30f1b8c65d5be9ab
7d77bffd7617c92d49f330eee93bc44c19942e8bcf4a3889e42b2b00a47a54b1
dd3fcb8f200b7cb62ff01f12c410cd9494b5454546f48898189c146329025ada
747ce35fc551d39ab64edf5476c41aecaa2de193ab4bbe774f3e0fff6e201a89
745ad79bdc09b48cf8d49dea1132893f87954d64de6d1da67f0a0cf472f33ca3
225d43a4004b817cbd3efcfce00f35fc35492101a75503f45e57166e783e74ef
5423c703547b00204c0429fb86c858c61798399295dde5d5d5fa49a3023e61fc
e8a7c719ddaf2a2800bb60a430885e6e2debe7ce109a5efdc18c979bf24250b2
d347a6872e362eaef9d7afebf5fc32fd7555902dc2288e7f13c672de14679779
37cd14037c7eeacf1f655835ed0319a56a0943acdf5853b1bf677101b8ada647
bdb0a888b9c712c5bd54c9360a8e4576741c00133b9fac468f8ac92ff04e24b2
495db7c90bcf93b62b6221c69c6cf96a14440ee345e9409684d1bdfff18a256c
34a775f2f8de8f4a1b24376d6020d6082b9e5336d909431c53b5b1ff8c4e74ef
4349b65225031ffb7e893aca6933503f38fac654b4265f3fa740a143e2478443
24c4ac43be071f4f596b402e59a9c73ca846663511118264d36d1eb4354bd170
af9b140971d70ae448f76c25d6fbf44985e95bcc8391704b7474f47b1595138f
da8a8082d5197d949f3265dde0531e174bcc620ea1ecdd425fdaf4b6b636fc27
cc3aba37a9238637e54449b0840591bd672d444946460b77080d0d1d82a92f64
0bd4fc5e9a2a8b847d9c804cfba7bc6832acf0aea69fe2e0e454fca4603775da
9218d6d7607f8ac9aab583eae723fccb1a7da030e24a21242e2404e53b4582da
47ad1165d74048376ae01ab96e2d2b316621948370727bf35dcd2e27b2fe7312
46d600a8bfa54a3ec3e0ecac8ebd7de50d85709dacacd26030753e6f74b050da
acb2ee9edcc71963dd480a40c112c7fe50ca67c08010c5f58feaaecc0fca8104
18d3bf7d23d24b0f1f460da3f9d6266a90839facc187e3a2f76c6eeb11e580ee
6e69e7fa0161b6c3dc170f27d4809fe542bf28804609bec0573abc3c3d154038
5eac1d5449caeddc6744363636109b3426d87a7a52d2cbaf2ad30e7099635b62
6565e58d5cc15177567ff0bb2425f31af8cedfa5605d39fb9cedd88fab3b3b56
805e7076e6a787759aa8aaa8d091cfe3fd0e23bc47a59ce9e890e04a898a855e
5b8a39acd0b32ff0ef1620a86ef6f4206337b8df48b9b32629ed30ee3a0b0b1f
15b8c6ee0c14ea71008e1d171d1d0ffd8806eb5c417dcc6af7a6eb8987b2592f
297fa96f68583dfba22a7d2367848ec254d7d020209c4de810e630bc757d4d86
e4e7be060465826c2d52238b6009146470576a8f1802d18c01b878078fa58909
1d49d4e8d898a9d1062a8daf88c9e7cf91bef45bc88620515151ba6fa30061c6
fd6c61110a59478e57ca51f3af0b709762a2b093520425d5762a7fb9964060c8
dcdcdcfc91bd737171d1d9d9999343f70b6b939f8c382e26c6e49ecc19de614a
bf727874340e79e34c3a648d8b8747a0fefa9b22f66ba483526c78f0c52f2903
abf494b5fdfdfd0e5d138ed4f16da4395d13deedad2d7c711c3cbc285d1da20a
350e1279797924360abdf732aa64e8dfa086a8b080caaed4ecb434cc8c080108
d213f16dba2de7940577afa461efa88f70266e8fa540434383c96b24b6ab890e
790cab901f03a87d284ca863499075baf8d1fd7d0e9ad7c86bb1b174e940f6f3
8caca406e4272a3e0e072e323f2f2f62f37a69910ec00f794f437c00a6858484
24d9ee8ccf44fb527c1848594e8e8e6f1214e2a1f748edce207efee04e5e7a47
3d6ae0908b4b1244537ccc93153734352a2a8a4cccd9c525278427d0dfebb824
c1d5d595e734300d002313ccedededdd2d805b24e24819d99b7f532aa8e263a4
100f72d5d7d303e4d3ce4a5050d0d2106a7a28b48a82315dc7a15b7990384a36
0fbec2c6d3a867642457288d44836da2544028c7c5c7c7d7dddd3d6fe5e727be
c68cb7c83889bc7360253950585343848ace194e8b9a150491d642e204049072
132b8556ac0a386f9e320567aba1be5e0154be529ff246228a9e2d3b3d7d78d3
918c354f96f7b253cfc5db9b92019723b0ebd265cf1a6c44b884eb8accc01a7c
4fd6447b19267c777b0b837318ae2f2c903f49601118828d67e7e6e8d2abab79
bf230c009088d69d191181f19cdb6b3ec12437f3f2f218d31d56e2a155f49020
25356d0e929a813e3a6332c977671a491d2412ec4000a157f11076a2a32f61d9
e22d79fee36441e0aba21d403b71a754fc7960ffb8657f4ecfbb837453f5061f
271fa959da8d29af6372920052d3d8884e331d09ad1286049970b3116b13adca
26e37ca421a7855f93d0781487055663d0f43a58052bff461a0cb57af135c60f
fdeb7faa48b9a8ffdb1a538bc5f3ea71883bc252f86fb29b583e4a4a8af4a381
28141903f45da1d7702d29a3c8e334354fd6998e4633bbf9080e22df751225a2
c310e8bc0eb2d841e846017a25465e8a693f239c546024a60567d158c87ef95d
2f15d121d7e1b0dcae37d4cb773fe2b955f10e0b9305e9cb90a1a8de178be4e9
03a2ef4b76e8a82a435416d2f15d2af55ee9c83795fdfa0db3df6bd32a5ec6ad
aea12fb0e3cd6091ff992570d6f1cfaa9bc95cb3eed58d6f12690a294bef0185
5c794252025ef5de25d9deaa2ed0de03cbdf36ffd2c4eb85076b974d6245c211
8f17c63fa96423ae2b71d1e181aadff49c09a5d579212aae5aa5b353779b8c7b
f19fe3ff69bafdd6e895ae4ad6519567518f9df78183650b08cd64ebb3cc55fe
31f93050e824c08a70ca0fc8ff3b7c365468c40e5f52080795121b6d79a1a60f
52123f6c905c4f49c7984039bf3559a0a8ac9bd0958c5d0b9a73cb242d758104
cdc7297831f55938e99f0e5a5d7294cea1ee838a09abbe8fac93d76cabd6ac09
86c810bb16a52943ff3ef5730fd5e7d8c989f8cad40bd9f9b59f9637a2125f5b
3cd983bf81e4ba2b347a75e6995e5f132aa7463adbb22909d47b22545382916c
592c15ac75725eb629e89bda4dc302f5d4beacf970a4876551fb4900d3465e6c
59a55ffc4d3f59eb9cb949400985fcf0a78a1d0c157429cb082fd32a6f42761a
9ae5d07e876cb31b9989473545d03011aa1110aa2ac8ce31c3516ea01ee3f2ed
6d55994df18cabd7774ddc090d595b36d50fd236cda8cf26d692a67323b75694
f58359fc6633884205c12568ea13f9bf956934613a45d439be1e054c7167b9a8
6f63bb2a2d2c3532fb277436faa3b94dc7908e75d9109fb19f819e52dae0de9f
1a9d8a7cfd2edc751e4e1b01474cc3e016e2d5b71a73e0ccbe9dd71ccb0a3a97
343ed50b34c328d7691647d21f0f073063a05fed7b7f96a4fe5901797d525dd8
8fd0ea954e1028b67b9da1d06fe3b455529fa3829488a5372e34353396a3c279
3aa6a7339d42e1d1f615c7a053cfa07848fed9e5e576595ad2770dc3b7475f2b
e5bcd1588d6d2c40381a34ff7cf12714543c6b50f75147e9e34fc60272e1d3cf
924e9321ee86e5b9b8f948d60ea3b4b9194da10b6a6c7f03a1256ff360c6a84a
addaa57565a540db05768ae235a5a6bb17a71a3282e0c2a2eaa55d27f03befcf
fc5dc8834c0840af8198d8d1c219d8bfea12fccecd2890f16dfd21448203ca04
9221170adff0b1c30b94b9db5aaf09bd154001412dc492f8c8abc6c0516449fc
c790ffedae8ccb085ad73573d0cea0482eae02c8f6f99096f45b1eae548add4e
d33776013d44709eae3dfc41a0e9db159e7cd5a3501cb5face7b6db218d5f92f
c6a0a909a6e8403a6e5977bc7f03a82de9ac241f77773e570a341715f80db97c
5c7e0be6d29c538fffbcb5c976d9d5a31103fbccd04eb9d9cc4c382bfd9a83a5
28351b945c509be02365a42ddae9d82c4c4b615eac4db627f56f4a582d8ef7dd
b3a543d311122422aff858530cc21cafba5f58cf1a7e7b3d8495785852c91559
2df5b99abcaf636ab73c899cbd6466e0ce04de1b66020707d9c8635d18be1aa5
cbe46dd58f7ea3473bba2090a251d4f68ba50fb34e1634d3e66d9f52d216f259
af9e921c3002b566814d2afcfbb4f1c588a6c593f9eb8d2c6845c01ba5982de1
d925e36972bdcb91af89bc02569cf950ffd7fb2c956ad521e4e9d1c2da1fc7de
997d3f6b82e68b56937c15e848866b54a3cd08bc8402573432bb942a084b6aa6
7c8489770557194e8ae87fa8cf9d03ebb074eac2d2524ee538ea4ee8b7a4a894
a77ef9dce1e84dbfadb6cb7913c4c3f3a1ddd177b808db0f4e934858ecc8ab5c
b3bbb3fd3da9b8a34d7bd455fdf3baec4888304811a3bae717a2cd2f318e744c
1c20ecfdc0974b8ee2eba22f6fde21299e1bdc5772cd596a7f76d6f927fcf6ae
ce3c270372a1303cf2b9e061baf8d73757ad7d15691b79c2563ae7a1ed886cbe
0c255fa6841ec27b6e81cc03a1f21c14e09cc8d9af38e9496c5f9315ee8a345d
986d349c1a5e600301ab3bb0f8cd653136f694f6bb4b672c6eb180eed1b799bb
461745151b30dc3ff1f7556f7d5a1a051843243a466fb6c2373838d031d781d0
878da2de722a79e6b5b64047e47f0c84c7390fcceb3b54aaa97d3b2571a2c5e9
298399aee45a852a55ae2bddf5c2bacf387a2572953aae728a7b06a0bdc9061d
5536978f57c7392ce9de0387b2e4192cbbbf5946873efc4aa86764a740b14e98
a0d028d6614cbca599e52af3b5ae4ed4d2d96856575de07823a0c79dcc19867a
aa113cb753df297198ee69af3da228bb5cfeebcdd1ae39c48c56bd59d940b835
2df173e4025a9b4f80cfdd9e9eb3a9e2de4f61870f208d8ba194a357e5037db0
20c73a3aff166282d77af67623d6b5e82032ae28024505501690d7c209b9bea7
1ffbad8878c643df853c3732e415582bc10a82aab0d0c2dd31ffbf3da601ec1e
bfeacd75bdab77fd4752333153e89cf69285b87654a55c8b903d9480921d6869
255e545474272c2222e2e60208f064e74297adad2d77471f9f4cd2f93f7fa46f
828290d451083c0f17cdec502dae6774eb8653ea8ab27d8f233e58598ef10b89
3e365efe755a18e6b6b16f1bf49eef7a512a7e0df41c0e7270776f6c6a121217
17e7e5e5e5e7278eeafdf5ebd7f1534747c7ca0a982d897ce6150dcd36d790ff
36c0ac7f90293012ea95d6d4f0a5bea7274259f9b3b2adaaaada931c2e81d4f0
e5acd0f580fc4c717bdc60319a687afa830d776b7eeffa88350ad1a906f224b6
03456969a99999998f8fcf7f570e00e69e3dcecdc101b5b7a7a1a28a701c8535
374791619d9080269797f1b2e7a6a7919ed0da436e65e9e8f1c9b276e19675f2
d4d59e04c3e7ab787c472e27f44e66dc6d3f3fb557744a9cb19298a1a67f585c
e428ca0b4a6a72946d7656f4da633d98942fafd367d28afd5ad95ab8d8c470c9
89fe7cc7a8fe61df53532583911b02f42cbf7ca9d662cbccca8aec557d31de50
5787c26d0ef5b1b6c6e0cdd07b7f1d737755b76a72b037533286248614307636
6e53d93ec635b1d8565ec7956faa9e9e35bbe4117653456a04ae1886a99b7515
ae5604e28313804ec28e3bd16868a14316358b8b8bc7f8bee116ee8c29c39ba6
d57af409df3332826b8887d1c79b5ca23e4144bc66f7c878e854a5ce919aff7d
e43f7bbce3f81a94f4349552db4f5d738857c89c05beaa561b797e1228bc64ff
e8a81bf1fcfc1c1b0fafb2bcfce66c6b6269c908501c957b4747f2ce9baa60f9
79ff15c01a72cb6ba8f87c5fc66b9b58953c15723a2ae875faf4d0af8d3c64ef
1eaf6479c5258d2269cb68dd3f1a1b7f289a3efe109e11e8a86dfb2cde20c888
c662d9cb8b8b2f9b82b1fe3617b9b87ede1e63757d4a909fa7ca735b365f1a0e
a3fdeef5e0e28af47ec9f23d7a133ed62d0630bd262f9e821b91c70045565e51
41cf4a828c76fd1b0ed7f7453fcf0859a775f43978fb2fa9f6835f9ae8227ea2
4d55837d4dd81ca7c03897f1e538110980685208e9590a8c6f52dfa3bf20f0e5
e624898a8989a1a2a18932cc6df5be6ae638e5e1b80b13cbf7d9645f58f941d2
43d4d63222556a7cfb7add81dafb7e7d41a0adf3b43514c86355fddbe0512f2f
2f011048468745505434332d4dcab0aeb69611165eef7044dd1cc520aee3bb89
e9d5c8b543cb1fdd9fb42dc693ad1a55400d98235c18902355eb555b263e8708
392680e39391fdd846f8d3dd15781af49739fbfc4f4c868ec793cfa532071ccd
b87936b46823fd19003e010130b5cbcf71bdb4943580c9cdceceeed0e73048af
c2df3f9abe9f2a6ad76cd25f697cb5db4d50ee74577f0aed751af770298a014e
54c7d7eb59ff12ac464f85888b8bfb7570637e5e0f3f1bf304e5a4f195096d30
e6be48d81eca09d1dfaad59ff8929e270a281eacf491fb8787f4557a9f3ebddc
1df03fe6fd3608f8c1b7bccfdf0596f90fde0646abb50cd471c1f4cfe8e4ae2d
e618d8005ab1115e16b5d621dea99c90f7393a5d6094656f4f1bcf7ecabd7bab
f0c666138bd4b06d40d128d221e5e23a84cf52f8947e530c9d69edc41df28918
ed118360c6d93f4bf14c07949e8e27764a609267ecab0f918b39f25b8efe99e5
6704f9f5cc9cb5c1b6c26bd77391ad836e86e19551371fab6cb5a1cc29c32aaa
aa9132c1010d8707078b0b0b84d67eeb85d0b24d7c817767d15563a4dc725c91
5f9b5c86b159c2c2640bcf00dffe1b2c823be80326c940e4605eeedcf2ffccac
a6b09117afd1a790d80fe7e16df985454535a5140808e88000c45f53bd015181
79985d67575c43a14f264e9bbf4c794d52c633cdec29e304376b4e562c7dfbde
86a900b79600cbe43dc0e113307742f843e7a85d1664902e59ad1e6318d6f492
4ab008f2a6a9a686612ab830263696041325e198f370a8efe35823cdd992173d
f3dabb875a41bac545fa7e1320c51f22e6d1a296f81ba04c1f0fd4e80c9919b7
19be61d0883177324b23530e191e1e4e7d2fc7889ed9dada9a95459d8d96c235
2c77a2d1dddd45dfcd4f9461d0d02324e9b08b0938fb5cfc81a287d158298805
847fd9cdcf90e4048ba89eafccc9c9896f4528e6ccd7285611f756cf65b31b96
cbb21437df24b9c97493c1458c6e20fd751ac50b6437839faad2f9bf474e5774
5b3bc11bc9e504e360f311595090a98e9041d7acb090d0eede5eae3db736acaa
8a474c8c8b50acc707fe7d93ff44eb0fbc26c1d72af7eb98ea6a01cffabb8d82
700587abc3c5ce4ec9045a465737b7bbbb3bd9c0f89bb827fcfaeb39bf4f1bf8
94ebb9d9ec71f9df52e8a524ab07c4a4d2466196f115c696d972bdc15ccebb84
e9591e5bed6227119393eaeadfe325125f752b32b0a566beac1784b52794208a
f36d8f47e57f0366f7c5c02c4973398ebdf3cd9b7fcca7c3e9a51f801cb0f3ef
9fb40c0a20943366e7e7e76bc7fefefd7b7beb892ec63e4369df7212fa3d8a0c
88652bb75ab114c473046d090a43c6a7b3caa75be3b6fb4d38b72fafdb01f938
1dfcfbb1dde690f46be05e681d3c87c496900a8cdaa06d283f3aadddddddfdfc
68409b15630b0b0b5fc7f6f73938c60606d0bdf52c2d999ff0d7363618496ced
edc31e890281cc2a2a2a4a4f603411db6bfac5c3e31527d6eb1f4993b38310c2
334d4d4d3e3e3e436c207919521768607c6625c6c40f2d875661eaf468680522
aad542ceba6922ed2e42b8c3299901627cfd7d54c515e5684ffbcc00a39ea8ab
388a147ed1aa6b6cdee0346dedba486984537ab6bb243a9fa2c5f6baa47cb0b3
b3b3afafeffefefefa5a500798b7c0ab4051299c9c7b219e350cca1f0ac1b882
d8d892a8a8a813b1d7e229c39d27b4082567069c56e7393974093f31debd8204
0d5563c87c7208787878983f9f9dd54137d7648ba870dbfd3af08510f0952716
12787f79b6f7d4b9f4e9f94ede7eccdbca962eb1bcaa2ab5ed6e5d797979203b
8dc2a33233a97a0cfe9a99ecb45655217c634c46a1897ee8efeb93a127066704
044925768b1219a2786b3ba92c4742f17f49828ef57ed2416192c7a322eb7536
f4fd8a4074b4213e32a59b27686efa30f568a470d72cff9a3b48660b68ed98d0
634c038c8dbcbe191111e1fe0ec07980b7807b7b601d5f0721b3b3b332f40394
34340c2fe49acf2f2fe97f744ae6b4f6c04868e1f3c74995e1b1bb43f664c0d5
c5561e7d5c0b0e4ffa551a7a8a8ab22d82ea0c1ad22edfbfe131b1f51eb17773
13c81e37fb1ecd2b12ba472f6045494dbd861ff8c8f74686d341393ca3afbfff
cfe38c7718244838882dbd9c532c165279ea840218a748e2c4bef5a2c37dbb56
4cf4fa77d13c556104867aa14a0749bf69f5a5ef3b6a172e2eaecb8b0b93686c
279246af2db2950f683b77546c8237cacaca80bd056fb0b0b06c2332d8563fa4
0832a643deecfecd12e9dd1cce2d356ae772a40432d22a0159bbb4cff638c558
844a0a97f551dbbfbf02b3e0dfa199376b08a167645466d1862cc4818e0d94c9
a42294134593c92929abeff0077e1d9f10d4164fc3022a3143a16d372a4bdae2
d77fb72732650abb9f1512c297af5fac29a69f33e245e9c240b8de1ea3b4b474
153afde4f3ca3e5f2a36eac063fb77a4f4f0eafba1a14805b4308d627e1e9e78
a502d7c5db1cc2b197f53bb5507ce22eeb080e3f7a3f74def497a963d2005292
46ff1511a1b9df1f4fe3da1b7a59de66d9f3a76b723261daf8e9cffc7c78af69
93e1d8b809a62b5eb88c84a090d0e0f69960c3a1c81c403b83ed548743c5af56
35e17f7ff572b91c8bfd3b1c7e96a95c1a6ca9a475e3191ec7d571d5cba0265c
a88a9b9bdb1ffb9ae18cac2c551595ce0a4e6eee288e67de19b08220c23a2509
b6b5c579b476749c2a6d164c48c6c9fde9b42dd3f0b0c1ac2fef4af00c7c2363
69dcf7fde77595d66767a609ff3ad6c07ff7ce49096ef02cfafbfb7d5c86039a
7f8217abb381ab3312567c5a2b0d4d8749f2ddc8824848376fcd15812bb08f8c
895daf91864cf8ad92ce73673fdeb5f7d2c7357a5d71f56d29e32e23f6edb843
a1500787093c23c4bbf8418846b196bf2131c7db4ba14cd53b48361d458fb0aa
b163f0f33399579c17c64f053e67e978be87db32e30f9bc616730f8661c09cbf
fb1a3595e5a3d3eca1b9e185835a4e96d31d25e8c3fc438dc59dba0de0baebe0
0792f919d466e177efa27f4ae53f204afd02a2627c3bd34e2d2e6f492362916f
6b9164fadb875f34b25f0023e23a790ef9660c87f81e52367bae30835f80b10c
1b8978848422c28788f01069328637f1052b2a2a22cbfc1148dfae0d7dcb8e71
7476eef9503c5d79e02f281a1ff3c89e80967d1dbc9b5b6134b3e467cce14205
d8a1fb7ed31833c7eff1ec312297a3f1cce16c6787c53b49a111e5e95342181e
153f8e9f5b6e3643bb69f5fcf272b66a11958fa4b19cdfcc2f05c1d193ead939
e665718bb9edf60b4e99ba5c7f52c0253336bc96ef24da8f6e57987da5ee0edd
640b8d0324fb77dc3f7f1eca095b5e61f6f4f232f066357ce858ef1a1239f0a4
7a818b3076717cac96ef33b2b646effa526c860e4e4becaa083a6aede71a4879
204ae7fa649a4d7c4c0e0cd56c60ee565858a6b03d40f6fbf7ef3b8787d43434
6e5d8df6f6f6dd6b82e4343f4e676666003484b2848b2f6c327e1b7c5ec73f16
8dc74146324e1adffe73c7f53ab60676d3e067964d7bdd45fa7e3b7857c04ff3
eeaedd3227098f965b56b06f225eedbef23ed2753b7600fb058f7088141d751c
1e2e6ed744835bf488f81a2da1ed26a0843c3dc957c1c299b8f1119510c04b2d
8d180391207c0202686e81742f50310f5cd852df178e8ee749cdd467d3baaf61
7cf0edd5437a1e7ecbf9d7890791a3f08c1f880678fffc2730cd365c1f9450cd
6c050913acd098999979fe1dbf9f1f1f1c1cc4f7eeb10283c1d368a46969163e
3e8b56b1ae0f988d7a1cf46dc4113a1d1121f71586d537b09d9a7158c5de88cb
b0cef3e8bb2febaf537b3f3c10f7f5d1f37da7954b4d4b536224ac12814349a4
17488e52ce2f2eea7c85082ca2fc209535354441579b9be66187518d2340cad6
d54d51407e854dcad32829830b8f8e8dcd0df89888935bcbc4cdbcd436fa779c
bd72de4fffbcba7f9e3ef1841d202e960316b2341d3f39393a863a643bd53b0f
c1e0a88437a1f72aef4404f8f8345988657209ae75ad3845f071b721558d8d64
307bb4ee4f3933d70d41060938de4bdea29536ac246f7f62d915e74937bb4f32
59ac113dc158def903536345fadc0178684a44fa1d976357c87daac735b60cdf
fafa3a0f3d0505051ed59bca8a8adc2a052dc4b6222db61c4643726ccaae4a0a
013b30782959bd295b727e21030b0fb97c00b5c20e446266ef27b1bda6695984
7ae6739076d985b5efd172b66ddbe6649b8aafda7acbe695317e35360888fc55
eccda309ab88e0010c6e2019fef9f307fd05cfc228e4cdf1ebcccccc63f6a0a0
200736849be9e9699e0f3cfc603bbb4391e51b804e906f559390041872857ded
eeeed62b6d68207d7b7e75c5806693c3f82e39db4fe8b79cc340c0ddc517277e
baf4ccec278fe9e5df4274165232218d98ebbde0a5030660e690b47a45301849
4457d401e675b4477b1e1021e98d101524b19aede585277e3b1914e7bde1e777
1275fcfe57585a68b1d42b7786c4e58585c007c297b2715010c50e1ab10122ac
d3a14707e4f011bde531ee7e307d082380b88b15591bbd1c1f5c30dde9595fff
bc126de97ef076d269e1f69d0119193589e5d68cae2c2e1d80ba88d99c84c1c8
522333a4c6900fc21d10b3bd7dc825852668d84ee6e61e2b925302c80aa8dd24
4f9334119481675be96b23e7979194db03ff65fafe3c222222bbb75ef92f3a01
e6363212ad2018390e79ce24a15e573d317fcfb665713b3d1e3d560b2c2c4d70
c732be4cd1224f281fecefd76e8749e63024292dce2c7faba56e77d87a2f9fb5
2d8c08e81b36b22364a72d6dac808d31aad596f1ac99c365cb59dac37c59f41f
292f008a868686462fb9434945e5e2e6f6efc34487a24bcfc9b890802c20df30
fb0acab7b388847ad82bc39dba3ca904500b15fd6f102d116a246ec3f5fb4de3
f4109836d36d524d52d57b261546599f0bd3de972aace3bce3184e1a1e27edb1
6c1479bbe59c34867000d028d71f7dd6a57f6779af4dbbd1c67b9eabbb828efd
aad1d33b6c03560bbfafb218a079182126cb7c67aeced29f2a9bd060043f7318
3bf413fb2e7259313a2bbbd62fc37edac5df55ece90660002914c4984e392c10
3b7be55ac436b4729ceda99411936224851a1d88288059b85a6cc7a22657d60d
ee1dad7b7fa759d167b955e80bb0a4d0d05019fad3e76fd6244f59265d6e8f72
d435f097e69691f0c3ff03bae789ada6a9e95bdb5967ab511c8bebbda4bd1e82
7e593ea506d5c849ae81a37f0c2231b1344cec8ee78a82d642150a346a6a6ae8
094c4848486eefee7aed7f713e17925bc8abb51ccc9f67edfb9f86518188d6e3
c08168f2ca76aeb18eb807b23b6b2c351cc40f835b72020c5313ba5dd85de76c
6ca331b525ed763cfc3dcfdf34f8f04166495a3de63f5f4eb05b17bd7a8969c2
fa765a2dac6e33889d02c0bfb3bfbfccdb8cf60b52725faaaf826398997872ba
095c6a9a9b29a27ac1c5b2c2a60ea42fe1dd0200963576351fa525dfc22da5ef
453c42bcaee675b7a291da5d5536885cbaa9b491194a00647754a77ce6013deb
16322e8794772a368dfa7a3ce23fe3908a0464df0e2f2d19d127b0888be16300
c603646c73db0f32e76722728af774fce35e73f9e9f1ba5f1f7a72f4c4451212
41732fd1ecfb1014e7134db31bc49c35f17878d4439fcb0ae8f937a9231d1d12
3b3802868e4acc43f694f5cf8190629ad05a932a4f56b54273838ef5a6cbb968
6fb61c2dfb3eff8bffbe93d8eac3c7afc365e5e5179797c005402718924f4e9e
9e91eebc2451ff213952cfcc40f85871ae326ab9e174b7b868fe8f75d058b901
0cc942f7c6e17be7cdac21adbf5f604a6065603fa17e0ed8c9898f3aeec3fbf7
805b4571e43e2fc7323cee66d72e3ff94c179a05463cfd69eff5d72746c79497
dfffb7a85bc1d21fb871d5c68c897f600190e124a582e9dd8303db84977a91bd
6b03030a7e7e4f6363b103f45a8031b2be8ea689df6d4e9bc5551f45fa3edde5
fa673739c97b1dd4a165df26c29e0429cf4b589e7ce19c3ababa68a8a884113d
5d5d522b1588595959ff65c39de293afdb169e79e816c0c96d86dcbde279451f
f8bd5e97e22d17b5d5f58a4958b69c7c5a3241d6dec8fe5ba0c5b6e9d85451c1
751fd728b3714bb67f7c7dedeee676b5b36345eb3aeff4ac1b565bafe643deac
5bbb9809fb65c9eaeaedada62354efa60bc0a52392c630a60b944d1a2b4920b1
7171582152efa8e59ddff0f1ad77b30700d803b87378064051fefea514edd215
07802ebbba69302360f3cd0f5e3a238f1b732683226e0c7ac62ea615af46cb92
f3ccef620fd6977b0cb78b05d9c049191919ef99be0138cfc0c0101515d5f72f
e4eff6f1b183b5356bfa28bd2390456fbca99b999706e47fe300e6affcdb56de
7a997639c2a7b30c7e1f27da976cd43a44a9c8d117582ee2d6f30be7e4f10eda
6bd0308ff546ed259bf71eab17205498b32178472657e834416073e0e5ec4c5c
8d655a7672f2c59da3472f564c260cd06eee851111188daf7df5ed3d3c52dba4
a69e57089683c005cde9adc524879d6b3c5066c1ef67dbfafcaebb5f2f0bb8ab
53127455752bac48b961a6a748276f99a0e4bc947fc91615d0699b9b9bcfcece
1cb48ab530b3f24a4b6dc060da94e1979821171717adadad4c6238d1da556b7d
7da86c92da405efbf90a1c3a171d13992b63f3accf51d6b2d205f4a35d6e6097
d7eb3ac6537d18761859d839dac22a59ac10c052c451b2321f012d0ce43b744f
7cfb8bf3f396933e20fdfeed7807c8f8a076de95ab6f1280b08eeca430a16637
bd181c549451fe19efbbb781ff2ccd9d9ec49a4f9347616187461e21b2aae3ef
bae9f36b2ccb8dfa5da56843bad04b56e28d3c234435c2adac4d027c2329cc71
f1f0aeaeae940ba63e4500da14022270242807300a9dfbeab0da92b744855a8c
57015f66f17fbbb0de6533bb4e3af69ca6b4ac06dc325657e6e7bde58d386817
a414c659070b9f95f15cf09472316a9fac13d1ab619221a40b25d0e361d0ffb9
368df3279fd6b9ef4f2c8f272b1ea4bbbe130072fc19b59644b835d9ff94a507
dff06df832699fc71fce75311da884ffd22dc32ecd33d4f9f4192ee0625cf2db
98c84333474e48eda225b5df589e02c49a5e323a7055dad2d822c16ab72cf639
a62cda3b5cbba15f0daf5de9a10e5c372766c4fd5c5d8b99923ea502f2a6cff8
d4f0e66391e5ab57c91ff35f3bbe75adad1a8cfd3cc326f283493d4c2bc830fb
575e32db5ec1e04c6098e38fc3e1c2cf7cb00b0e9b8f02bbe2f02a721bcab2fe
e7402df4c4335196892be580ecc66a205abfcddca3f8999fa032dba101bb8dd4
a33fa86b1132a74aaeca3bad2ab1678368894fc82da8fda75edd64e7a266d364
b5e93bb3cc98fc754697bfc17251f93f4dd7aac88574aefe33d282b0aa7c99a4
31bd04ba82835b26e37c0ede3b3fa4f45a5e72d724b6fa2e106b678ade9056fe
bffce7316e4a5058490b492b197c940de3d648fefea7b68c96448b5f021fa2f9
25cb1be579e2f2a9bb2c0a542df4739d1992e9aee48a25a4a9ea4280b1f6b585
33a62795bc4d01abc2d30a223dad1deb56e8a8acb06c595e5aed8c5477d58fea
e9ff5feacf995a19ccc692cf85ed19b5011fd98f1a933165afea866673035440
60448ed7a38ca55a155d86a6e5868a35c1544961d6e54cb50a689170cf3f1369
eaa5501c3d385b8c361ce14220a2203fb5ac4dd4665329edf5fe4fc111b9d845
9fe7b21fc305fe6c69f458d7690cc45c608ab4f4a1dad0bfd2faf253fe666cd9
c400d38d4e74495a138e5dcddc66fe689682f6ef28f3e1555961b5743edd3a1c
5bf21f861d9e630915ae4cb69f13dcfa60696d7f07cef2a0f39e7b1ea744cfae
a8ee897e64214cbae6e114612bf015d3ad8713c5fd039766e932a856b16ea964
26ed52565e51e9adf3c64ce0562ed649e3c75ee904dca0e98121441921279cba
1cad4614b8968d9c793b76a267a98e8dbe2ed0b85613a451279c147945fd7f94
9d139676bdc062f756bc52a8ffcfcace4951dc1bb99481fffdf0ffbedafc3fbb
5afddeb4d17e6fc2b35a18f6fc21d33acf85e8b75a48eb5f9b12a83998d64914
de25e03094e1263c3745c295de3bb79b4730a718310e99dc09a6ba3267c0b1ed
62210382f6aa2a16dad19c6a9a93145b71e959e3f5f1b6c8b0e8e213d2d61b17
2a94620ba30a53eef71c332ca5a0d361f5362f7a1351adae40c7b41b6b337d25
0a38f386f60c11474329124c3df963480e572d5739d2055937d2b3d73562e063
e4bb8b7f736c72617113e788b7187dab9fdb22b15b71bb974bc69e4f526a82cd
91b9f4b1b83af7634c0b4df2276fb2641c50a36badda78d224e5d4abe9f45e96
2094a9321f275697bdd228d332350388e6c1f0956bf19ec1cf50f3e19c0020fd
f36aff4a4e8d117ad01e7f677e69ac237538b845ce92f7dbaac2ece0e16d7980
f93887e22ba7a059a92154bdaed853cc97063fab077f6a166c8ef0850a650fcb
2d10d9d079204153395f7aa9f968763e2f2fbdb5e0d6f2d46b1a5ee5be63788f
3efcb2f5db0584dd13c72284d0fb75a907ab7d8f0605b729d7ef6ac6f23f0dcb
fe6f3f11fd2361e343473a3b67df6ef01e3a4e7990644d6023ade14f8ff58dd5
4fc5dc3798819216808c7a0c7f9a7d4bc4572ea3a82afcd70d2b9e787e3404cd
e288f38a6f4933619c2f5ea6bdf769cfd147a740ceb2ae42b3c6d88064485127
ae76a44c67413cb344c45abe7789bfd695719242aac83beb5aa8bb78c3925091
a3f3c9711a9e354dfeb1aa4233cf8a135ea55f4c6f1d51eb27aced06637aebc6
de01f89e77c85f51fdb9831d16bc407dd2fd9d784fa70b31fdd6388394dfb5a8
c9380a8a3ec6d0d2e226c4e4aaeef970f3833d79051616664ce6c92298891793
adfe270d17a4b2efcf067a98087cceda661374a38785e77c93a29cadda9c50c5
28e47f1b8e7e6fed3e96cefa177c3eff6c6e9998df669e47ed63b399af51e482
4713091b0cdb37caef8cf8aa1a3355769f4f61ad0c83a9c79360b4d2257d9695
2a7e3239e8da4b21515634976da300629ade29e8c214ee6845fb8c847614d81b
6dc5573abd195ae78b25ec675946722054c2bae6da82e952c5e24257df158362
c16892a24ff30d95b1b2ccc9f9b12548571006ed4aef9bacc9482887088b2ec5
0b2034d4032fb6fa32e4a2c041ab30b28460c83a2b90435956039b309ed0daf2
d006fb349f1b75bd7462a8f8c533301bfce26b4cd1ff9f1f0ae0e1beb8fdb78f
f73fbf4460e76970f714613ef967fa156adff3af3128caaaca54488103ff1737
aa3dddc1410000
#<end update:2020/02/21 12:06:31>
#<begin attach ID:hN9YHKIsE3A>
789c01bb0244fd1b000000684e3959484b49734533412e32303135303432302e
30332e737667980a00009002000001000000789cc556eb6eda3014fe5d9ec2d3
34799396c47620265542b507985669eaef2a4d0cb1481de498027bfa1d3be152
a074128c02894e6c9ff35d7c6291dc2d9f2bf42274236b9562ea138c84caeb42
aa498ae766ec0d31ba1bf592e6658260a96a525c1a33bb0d82c562e12f42bfd6
93801142025881db25b7cb4aaae9b185348ee3c0cde25d508ad153d6887b5d8f
6525523c9e5795ab75dbccb21c060a31cee695c168210b53a638e4038c4a2127
a54931a0e351efa677937cf23c34d1b2409e0703c92c334668856491e2c7473b
b12940c936dfc6ddd207250d289c3742ffb6c8bfd44323308262378916b941cb
14c3ea95bbbf510a2454295e94d24066e0526775b502d1a29b53b582a9c6e87a
0ada9eaaf9e6c9eb6a129f01a75a2acb8692ef04b597ad6f4b264147d8c66f13
235f76a9d9a796c05c575f3fb78e7cfb07220ed17aeb3474de9e9694e5d3fd52
743350644d99699d015b8a28da2a25be950877041bbc8eaf88ef402dbc0bd895
d1e98074f06d746d7cc6d6f2dbe8daf82159eb6fa37dfc5ceabc5a33e81ef2a5
dd358cf295eb708cb4ad832fc2eb5d60d8a60f42860dfa20e490fc6fcd99ceb7
e77779b4b616c57ee5102338e57f227b64c443c22346693808431a214aa19bd1
0fe82afbb35f8a2268addd0f70809e7f9db8c3c988a5e948b9b0ebba55d70376
cccb545ed660c8b32c8a0ac88e6b65bc46fe01be94cdccdaa5ce971150f10094
2481cdbe90f8d02a3d54b223de9a4df9c102e7d169c14ee9398a412c480e2faa
988162169188f4591c734ec810e40f7d1a13ce8711cc72cefa7bf28fe470ea0f
49cc180d79d4678cbfb3f7eef53bc70a6e9d60f145ad082979258b1eaada7b09
0e330ebd3b6d843b0dce31023c0027f8c6885e62ff478e7a7f01feae00d9980a
00000a8c4f6bbb020000
#<end update:2020/02/21 12:06:31>
#<begin attach ID:i116pu14Jga>
789c010405fbfa1600000069313136707531344a67612e73616d706c652e7376
672b260000de04000001000000789cbd9a5d6fdb361885afe35fa16118b402b1
4d8aa43e022bbdd8fd3660e875e1daa22d44910259aed3fdfa9122294b8c4d0d
28c98ba6af6599e4a1cf131ceacde6f3fb6b157c2fda53d9d4790857200c8a7a
d7eccbfa9087e78e2ed330f8fcbcd89cbe1f02766b7dcac363d7bd3dadd797cb
657541aba63dac2300c09add118a5b9edeabb27eb97523ccb26cddbf1b8e2785
61f06d7b2afe6e1b5a56451ed27355f5633d9ddeb63b76615fd0edb9eac2e052
eebb631ec680adf358948763978798bd785e3c2c1e36bf2c97c1a12df7c172c9
2e6cdeb65d57b47550eef3f0eb57fec630001c7d9ed7f2d62f75d93185e753d1
fec367feabfe722ac2800df6b0698b5d17bce721bbfb47fff3ce504c42958797
63d9b14faefb8fbe35d50f26ba90efd54dcdde3a756df3c2b47dabcec3aba51c
13ac22b6a6a6acf96a20780481f8c7c7e7436ed672c1bcbebf30f0db7869fc95
58c0b9ad7eff55ecc8a7ffb1907e46beb77b0083a780cfb7ad0f5521b7b99f9f
ef317b3be40b816225e9752978f275697b749d7fbb7bd1170047d377c57b27e7
ec4b3615125341ee077e6db9ad77c7a6cdc3d772bfafd8e0b4a9bb25ddbe9615
bbed8fe6dc96451bfc595ce43ba7f2df827ffcad538b92ab786662366b3ea49a
9d9ac553293e532b722f1eca8d46d6c5535dfcaea96ba6b46903da36affd5e74
4def07899ad9e1b7b529836760051e11fb11a06995829532fc4f4d10452bf218
272b00b2386243b38103948cae4d3c1e993d1e098fa7fe4c1e01872e8f74971b
e553293f8afcd93cc2ee6c1ecdd83c12368f6cd89ced997237fb46a7a52da7c3
6c62753638f77a04ee9a1d99cd8efa6f1b79343b766976a49bdd289f2af9b13f
b3abad76617634637624cc8e6c989dedd9f0ab1c69654c58898156da42004d11
c002017c1f016c4600f71e20c81f0284384400eb0818e553291fa7fe1020c01d
027806012c10c03610c0e9e07b4cb4b2f73dd14b5b08103c41800dce1120e42e
02c48c0019c7fa3e8d78caf57dccb04d00d10930aaa752bdcaf5c863b087c401
02640601221020d6923d2443a01f957deeb116ee612a6c0d79ba67438b783f5c
9d983d369b3d9ee47b2f6e5701df89dd63ddee46fd54ea1f02be0fbfab84efc4
eff18cdf63e1f7d85ec4172e17c17e5c5bb3bc48f957cff398cf4d2f72fe6dd7
2766d72793a0efc5f5d8a5eb13ddf546fd54e98f3dba5e6db613d72733ae4f84
eb137b595ffe6e471feaf49af1c7b5351a904603963460030da999867492f9bd
d0a042bf131a529d06a37e2af50fa1df070d2af53ba1219da1211534a4f662bf
204084fd499d5ee3feb8b64683c8fe571a78f8e73488f47f9b86cc4c433689ff
1e1feb231707e04c67c1a89e4af532fe23e2f3b97ee200856c06854ca090d97b
b09f70f7275a198d4e02a3d2ea13ff489e75fb33817ae4af2e8e0180c00800ff
3ac647029fcffc5d2000818680593f95fad591c00b03c3437f070ce8fa7506d8
767006d87ff69efaf7ce8744afa3f1f1605cdb6d080c24f42785a12370930573
8b17c2e941c1674bc0090b7a97d7ac9f2afdb14716869e800b16661abd50347a
a19546af6c0a24a3aec0a816fec7e0436db73330b080250bf83e0be656308ca6
c7049fbd01272ce8bd60b37e2af5ab6382171686e6800b1666bac1507483a195
6eb0ec0e24a3f6c0a816fe271f6bbb2d828185fe9430f408262c2c36fc4fbb9e
17ff01af07231e2b2600000af27bf504050000
#<end update:2020/02/21 12:16:29>
#<begin attach ID:inKYyRYNxUM>
789c015403abfc17000000696e4b597952594e78554d2e73616d706c65312e73
7667080d00002d03000001000000789cc597516f9b3010c79f9b4fe1699abc4d
016c030944903eec7d9b34f5b9a28993a012888c69d27dfadd19480869ab4a61
db439be36cee7777fee7ac44b7876d469ea42ad3228f29b71925325f14cb345f
c7b4d22b2ba0e4763e8acaa73581ad7919d38dd6bb99e3ecf77b7befda855a3b
8231e6c00e5a6f991db2347f7c69230fc3d031abb40be5943c24a5fca98a559a
c998aeaa2c33b166e52e59806329574995694af6e9526f62ea31c87323d3f546
d70ff3d1cde826fa605964add225b12c7044bb446ba972922e637a7f8f0bc700
bcf33edacdd6bb3cd55061554af50bc93ff2bb525202c16e2225179a1c620abb
9fcdff57424109594cf79b54c39b8e79755764cf50b46cd6f22287a552abe211
6a7bc8aae393d5c464b6809c8a34c76c381b3352ff617c0c19394dc268bf9e18
fbd44d0d9fea042a957dfe5877e4cb3b123144ecad6264461097e4eb4c365d36
786cb10234a411f8260ffc688208b7d322f370d6a3133f593cf613e05d3c7f13
cf0d5ef8751fb83875a2cbbf022fdec40b8337d8e7268d41f1d536b392b22c16
69a2e17b4356aad8624b7481e7d228fe6da1bd4c68752626be0d1213cc66a4b6
7d1f4dc6cecdc0b75b195ec7f3a7b60f929eda8c8513814ca41331155dff1028
1e624888db901856011fd38eb7e16879d0b58e26b6eb86d35acd9c9ba271d14a
f2c5a650319539cc9355916b6b956cd30c767d2b2a954a45becb7db352a6bf25
bebdd3edb137a9ce79e460b42e9287bc830cd8c04461db5f4fd07f23292c62cc
5d148febf93ddbc889b8fc680fa22a38ea30641e48094e974006c82427b70752
1802e442fc3a228a0bcbc022c8d16dd4d51755fddd31e3a99697e7f7ceb8d489
d2579cb27ba92b57b0967a52d8a050ef9dd212c349cbcca9b19953c4f77ba611
5630a8ae8ef3686ce613013e2249c7ef4f8751563b916a09411d465847afd15b
4f58cd7cc28b27f0ecc98489fe115f373bfc4b5505ada8040fff0271f21f24e5
1ac56061a4b6cd9c6aaebd339b0f74079a69346e871352914fccec3aba07198b
e6ae6b8793b901a108525f8cadbb2f2acf6d0f168f399c5c5c48d7ce8de9a5ac
040b3a50d7e58343838eb24611fe6e998ffe008273d67e080d0000a8df98d654
030000
#<end update:2020/02/21 12:27:44>
#<begin attach ID:inKYyRYNxUM>
789c01bb0444fb17000000696e4b597952594e78554d2e73616d706c65322e73
76673a1900009404000001000000789cb5995d8fa3361486af27bfc25555d1ad
12c71f80cd2899bde87d5ba9daeb159b90040d031190cd4c7f7ded6363489641
d18e733111d88edf73ec97c787cceaf3eb4b81be67759357e53aa09804282b37
d5362ff7ebe0d4ee1632409f9f66abe6fb1ea9a165b30e0e6d7b7c5c2ecfe733
3e735cd5fb2523842cd588c00c797c2df2f2796c204d926409bdc1509406e85b
da64ffd4d52e2fb275b03b1505ccf5d81cd38d6ad866bbf454b4013ae7dbf6b0
0e42a2e23c64f9fed09a9ba7d9c3ec61f5cb6281f675be458b856a581dd3b6cd
ea12e5db75f0f5abee7013d0c1f7f5b51dfaa5cc5b95e1a9c9ea7fb5f2dfe597
260b909aec6155679b16bdae0335fa0d3edf994aa550ac83f3216fd53797f0d5
6355bca9a433db5756a5ea6adaba7a56b97d2b4eee6e61e72498a998aabcd4d1
503227c8fce9f9f594aba50d585fbf1f18f96d189abe33019ceae2f75fcd8a7c
ba211050d46b5b13f488b45c5aee8bccae32c8eb25ae95b40a839938581f088f
074b0437176bd4eba79be7eb00e8509e4eca5390a7dce88b5e9f0de4d9cfabb3
497566928feea5ce27d539a8736ad4610dfcca8793f2e1853c2c825ff968523e
ba587b08c3af7c3c291f5f18ef0ef262525e80bcb8dbdacb49753954f76fbcd3
4bb1489ba6dae469ab4e0bb4abab170d82b6d20fa4e5fc345ec7151c5d2382c9
5caa0fc4dca50de06313c70c2709e1c95c301c21a56354fa762970e443897181
0949620a33ea346c3eae5d476095daec154e0b1a45d8b28a62ce1311aa11ba73
91969b4355af83a64d6b75e4eeaab25decd297bc5063ffac4e759ed5e8afec6c
7b9afc3f1522a5c7b6db621bee13c5f88fd5524f39d46561a79b24388e098bae
75b372fb015576a1fabe85185888fbb01013da37895e72f5f0ab4bf518f8f110
93210ea54ce609c752322663a4c48c1413d0c655510083a40cbd4826118e28a5
73ca624ca91034d459999c1027a6714ea91946e32b5f31a1b6354a98803d5686
0c2995d4b3b5d8a8b5382198874470c3a290e3482d905777f11bddc5c15da10f
777106968a60f9e11a38e563af3953bc983b202127a5769c0d7bbc88c1948e49
7d2ec884e17aae0cc599349c30bb1ac73a77af6ee2e36ea2868b46d762cba395
c21bad148295222f56023a01ae908116b478d9dd0e0c1db2001a56aa434a872c
2f9ceaf0d7cd0e64847c90c36617d5b5a5b415010d7a67154d2db0bcba2a1c3f
fe624344532af6c0f268ace846634560acd8cb090895133cd188f6d77e8b1bc0
0454374668d043999f4aaaafcd604a28da6c567d0f133f14537d51a388d1d1ea
6e5bfa6309376095570fc7375a29062b092ff538775c4289c39597cd75258be3
02526a56ab2f771c51bc88bae2ccd14fa565c1e8aa3a47cdeb229d194084a1d9
66768792261ef55662aab828368c74d4f26a2f71a3bd04d84bfab09774051492
aeaef2b1d1e2b2bae974901cab6d3e96c265d1d6a581c458c9d6ede7e025ef2e
d58c18759194ee15ef4eb59bbcd142122c447d582871af78c8c02af164a11e07
3daa342cac564f929e555e10d593afd70032c27be6009b2ec02b73f56f796f97
ccf26830397e04f24125472971d0badb2f19b395fe4fc7d3ec7f27f16b533a19
0000b0cd57e8bb040000
#<end update:2020/02/21 12:27:44>
#<begin attach ID:inXMgfPKHja>
789c012005dffa16000000696e584d6766504b486a612e73616d706c652e7376
6743260000fa04000001000000789cbd9a5f6fdb3614c59f9b4fa16118b401b1
2dfe91440576fab0f76dc0d0e7c235655b882205b25ca7fbf423752989a65b7a
c0483e34b9a66492473abfe05cb0eb8fefaf75f4b5ec4e55db6c62b44ce2a86c
762daf9ac3263ef7fb058ba38fcf0febd3d743246e6d4e9bf8d8f76f4fabd5e5
72595ec8b2ed0e2b9c24c94adc11c32d4fef75d5bc7cef465414c56ab81aeb8b
a238fab23d957f75edbeaacb4dbc3fd7f530d7d3e96dbb1303bcdc6fcf751f47
978af7c74d9c25629fc7b23a1cfb4d4cc587e7870f0f1fd63f2d16d1a1ab78b4
588881f5dbb6efcbae892abe893f7f9617a60990f67d59ab5b3f35552f149e4f
65f7b75cf9cfe6d3a98c2331d9877557eefae87d138bbbbf0d3f7f309590506f
e2cbb1eac53757c357dfdafa9b105daa6b4ddb884ba7be6b5f84b62ff579fab4
5073264b2cf6d4568ddc0d4a1e9308fec9f9e594eb95dab0ac7fbcb1e4177d6b
f2136ce0dcd5bffe0c4fe4b7ffb0916145f96cf7098a9e22b9deb639d4a57acc
c3faf2198bcbb1dc48013b41f356e8d5eb329ed1bcfe76f7626e0069cbf7e57b
afd61c4ab11442b01611bfe4d862dbec8e6db7895f2bce6b31f9be6dfac57efb
5ad5e2aedfdb7357955df4477951574ed53fa5dce95b3f6e4aede2598859afe4
94e3eadc2e9e2bf16a432c8078323e67e7e2b9297ed7368d50da76d1be6b5f07
23f4edf048146a76877f5fdb6470942c93c754fc88a0148a449d4ea57a0cff6b
910c2f8b2221ecb1c0cb54cc2d678ea64194e4cbf4cae9d8ee743cbc6c8cc359
1d537f56c7a6d5adeab9528f5838afe3c4a3d9f11db363303b766176f11a47b3
430966174e72e9764cc0d905d85dcc3ef87d1ebe353cb11b9e0caf9c64e10c4f
983fc313d3f056f57c541fd0f0d4a7e1c91dc313303c716178f1d046c34399a5
a2a4a9510206d42d0614fc4e8102aa2898466f21a07608e86003cac2419026fe
20a0260456f55ca94f493808d2d42304f40e041420a02e20489309022807e767
66a9824fee148294c11ffd4c459f1c2898876f3148ed18a457319f04ccf928f5
c0416a726095cf957cb5a32198044afa43dc748d417a0783143048dd257d94cf
517fc83d10f587d269d4c748657d31f59cf53136ed9ed9ed9e5d67fd107e1fc3
be17bf67a6dfadfab9d23fa6fd20861fe3be17c767771c9f81e33377711f1c0f
35381ef2be33cbcfc11e3c2f03bf34bd367ee3fadceefafc3af08770fd98afbd
b83e375d6fd5cf47fd215d4f7dba3ebfe3fa1c5c9fbbcbfce07a55332dea6b35
d040ddd230057c80812a18e6e11b16989d05769dfb43b030067f2f2c309305ab
7eaef48fc93f080b63f4f7c202bbc302031698bbe80f2ca89a69895fab5516ca
9db230c77c95867280411bbfa1a1b0d350e8f19f848cffc4070c850983553e57
f2c7f89f058cffcc030ac51d140a40a17017ff8916ffe9d0f0e64689d9dc1430
e74d413e36054c6f0a9801014aac10c8d7af35054128984e003c5080128302bb
7eaef44f4d41080ca6a6c00307a67e9303f1382407e297b3a680684d01981f17
660d24a866c1150a5a53904fcd02bb6a166e68b01ffc2274d52c04a1613a1ef0
418379f66bd7cf47fd2169a03e69b873fc8be0f8173939fe85068168cd021000
0d825e030dd42d0d7357904fcd02d39b851b16ec47c3085f350b4158984e097c
b0601e0edbf573a57f6a1642b030350b3e58b8733a8ce0741839391d86068168
cd02f83fbba95546ca9db2a03505f9d42cb0ab6661a2e1612dffcbd7f3c3bf44
89281343260000ae1e88ce20050000
#<end update:2020/02/21 12:17:11>
#<begin attach ID:itJNaq7qdbB>
789c01e4021bfd1800000069744a4e617137716462422e32303135303432342e
737667f5070000bc02000001000000789cad55db6edb300c7d6ebe42c3b06a03
ea9b72719cd9e9c33e6003863e17aead3842152993e526ddd78f94edd46953ac
cbfae084a228f2f01cca4eaff71b491eb8a98556198dfc9012ae0a5d0a5565b4
b12b6f4ec9f57294d60f1581505567746ded761104bbddcedf8d7d6daa808561
1840046d43167b29d4fda9c0284992c0edd261d18892bbbce63f8c5e09c933ba
6aa474b916f5362fc051f255de484bc94e94769dd1490838d75c546b9bd1312c
96a38bd145fac1f3486544493c0f1ce936b7961b454499d1db5bdc38248806e7
d1ee426f94b0d0615373f3132b7f573735a704925da4861796ec330ad18feef7
9554d082cce86e2d2c9c0cdcd1ad968fd034eff69456b0555ba3efa1b73bd91c
565e9733f41960d242219a28bc0a49fb607e4c99061d60b45f07167e1a42c355
0ba031f2f3c796912f6f00e22a22b77961b5210bd26ca4d7da2dd195a3d879a8
6bb810a6909c14802a9e525200ae288e7d300d5853ff394d4f10f2e2fe3986e8
8d349e3edab31843d5ab2861fe943893b530de21f3347499673e9b1260f9b078
bfe46c1c1fc1eeca38775fc5f2bd9b02e41be866d304f7d0ebe5aa586b207e23
ca5242ed9556d6abc56f281fb1adedb5e8a02c9d8e698047dda855bdfc702d0a
b8a6dd00f4abe10874be7608b894625bb7538077d48d0143c3806786ff8fb873
d62cf4edbac42eefecbc6e3bc8a7fa75a22d48a195e26eda57466fba4b603539
26e0a032f280063d4bef4e59fc256c72b0079710b957da0eeb565afd1b87876a
11830ad3c89f93d64ce63e236c3e3f36630c60b37917db81e9258818f35b11e6
311a472ad43637f6af227ccb554f33328bf45d3f29f2b2503c46146714ba94f6
2b3ebf1a5e5bf8fa5c56b086e7a9d87ff1f982aed3cc9df546e81c655eaf7363
72bc3a644c065a26137f3266ad6e510c4313460c5e45899f24ed5b6294e2477a
39fa03cbff60cdf5070000423e6312e4020000
#<end update:2020/02/21 12:39:13>
#<begin attach ID:itJNaq7qdbB>
789c01b0024ffd1b00000069744a4e617137716462422e32303135303531322e
30312e7376673a0700008502000001000000789cad556d6f9b3010fedcfc0a4f
d3e44e2a2fa6a58408d29fb049533f57d418b0e2d8916d9a74bf7e67436812a5
5294f50370beb3ef9e7beece144fbbb5406f4c1bae6489491863c4245535976d
897bdb04738c9e96b3c2bcb508b64a53e2cedacd228ab6db6db8bd0f956ea324
8ee30876e061cb6227b85c9ddb48f23c8fbc151f062518bd5686fdd6aae18295
b8e985f0be1666535150d4aca97a6131daf2da76257e880167c778dbd912dfc3
6239bb99dd14df8200b59ad7280840516c2a6b999688d7257e797186c9013938
efe471ebb3e41632ec0dd37f5ce45ff2d9308cc0d94da119b5685762d8fdeedf
9fb882144489b71db77032f247374abc43d26cb44925c164ac562bc8ed55f4d3
2a187dc661029814970e0d89ef62343ccebf7359442360277f0e2cfe7108cdad
0600bd16b7df07467e5e00c44774dc56d42a8d16a85f8b609007a25b4fb1d760
9f30e59a0a8628a0ca528c28e022591682a8414ac3539a3e205474758a815c48
e3f9a37b1633887a47f2244c91179301c617784e63eff9314c52042c4f8baf73
9edc6747b0c7305ebd8f62d9ce7781e31be84ed2dcd99c36a824ed1410bfe675
2d2076a3a40d0cff0be149b2b1fb5a8c5096be8e45e48efa566bf7e587b1a030
a66303ec57872d30ea86266042f08d19bac0cda86f83c4091a348feefbee2c57
f5c23e5defd8fb7dbc2edb11f2b97c7dd116882a2999eff646abf5380456a163
02a62a3b1e9c80afaaf75859f746c9c3241f0c61a3d458012a2a638ef8071b3e
baac1232d093a6d3b5303fb8af1efe8ffc241dbccfc975dc03dc73bc9f10ee12
06ba3db9275c5f7a9f92495157a6abb4aedc8d8408fa201e9802b2333f5dd989
08bfad30cf87519b15ee4fb79cfd036b6229513a070000048c4539b0020000
#<end update:2020/02/21 12:39:13>
#<begin attach ID:itJNaq7qdbB>
789c010802f7fd1b00000069744a4e617137716462422e32303135303531322e
30322e7376672b050000dd01000001000000789cb594d16e9b301486afc353b8
9a2aafd200db146d41903ec2264dbdae2818b0e2da9131257dfb1e1b92b22ca9
ba49bd001de3e3f3fde7e7407eb77f92e8999b5e6855601a118cb8aa742d545b
e0c136e10f8cee3641de3fb70852555fe0ceda5d16c7e33846631269d3c68c10
1243069e52b2bd146a7b2e91aed7ebd8efe2259462f458f6fc97d18d90bcc0cd
20a5af95f5bbb28207356fca415a8c4651dbaec0b70474765cb49d9d169b6015
acf2ab3044ad11350a437890ef4a6bb95148d4057e78701bc7027471dec573ea
bd12163a1c7a6e7e3bf24f75df738ca0d82a37bcb2685f60c87ef1f70ba5a005
59e0b113164ec6fee84ecb17689acf7b4a2bd8eaadd15be8ed510ec75538d724
11034d5a28a786926f044d97abef4ae6f12cd8c5978591eba534b79a040c467e
fd323972f301219ee8bc75a452b592cf061fc8e9844edfd8c9f205f9c51fb6bc
21cb6a7bcaa44b2245d979ac7ba9065201ff3df578cad2233f5de0d3ffa7b377
e9ccd3d9a7e1fdc864a8d24a01531bd418fde42cb1da499b87fc305b4e920bf0
85293b0f3b0e194b2398af944404414787786946f2ae19893783ce66b07f37e3
efe15b7a716a42e24cf07d9fd8f0d14f6cd13bfcbea05fe61c4053ec7b27a9e7
07b9fbb56d8257f3018a7b2b0500009cdffb7d08020000
#<end update:2020/02/21 12:39:13>
#<begin attach ID:iO5Nf6CpUFe>
789c017d0382fc14000000694f354e663643705546652e6d61696e2e737667e1
0a00005903000001000000789cb556db6ee336107d8ebf8245d3308b5a94a8bb
b29677813eefb640b14f451130126511a12583a4e278bfbe234a8ee5dc90aeb3
0664889cd19c3387430e179feed712dd71a545dbe498120f23de146d299a558e
3b533929469f96b385be5b21706d748e6b633657aebbdd6ec93620ad5ab9bee7
792e78e0c1e5ea5e8ae6f639479a65996bad780a4a31ba619affa5da4a489ee3
aa93d2c6bad21b56c044c92bd64983d15694a6ce71e401cf9a8b556d721cc060
393b9b9d2d7e711cb452a2448e03138b0d3386ab068932c7d7d7bde121009d7c
dfbf8faedf1a6120c34e73f5778ffc67f34d738c20d8d942f1c2a0fb1c83f7ce
febf100a529039ded6c2c097aefd74d3ca1d24cd475bd33660d246b5b790db8d
ec1e46ce18d3233e706a45d3b3a1dedc43c3d3c7ef432edc9170fffe3231efb7
29b57e3410e894bcfc7550e4c31b8858c45edb6e2d9d4232ad478119b26b7955
2b5ee598b8e79f5b281958c24bf4cfe0c71b23cceedf3932aae308c00c532b0e
74ae3597153e12368a4916428124368ff490481a1360ef79f1219bf0b1d08724
5871fb380bba5f08c3ef2d148423835cd48b4804b4c0e0b0a6a85b95e3b5284b
0931abb6314ec5d64282e31f6da70457e82bdf8e162dbe0320a51bb3e732820f
56b3eb4b5918264501253428b1707b24bb82ec2555f77af85140324b329a2c6a
92121f44ca4ed4e2418a200c88175998383c4d8aec8912cb0b693ef60f543257
15eca88b154cc07310e21922c9fbafc9128e2767ab401f75807eaa74f6aad2f1
494afb513aa2d0be948fd2d3b02fcc09d9fd6e53bbbc60ebcd47c5b541b0cdf4
87a7224f38d0ecbd3988a6508ee4775c5ebe0e1df8ef0d5df23742878f0beb64
e842b69a4f517feca4ecebf3a6ab2aaec6327ddba1e987298992304b6d7a7e30
a9df1492864649dfedd49cec503ffa495bf44882974ecb926f7853c23d65872a
d5aed179804c8bcefd7ddf7fbddd3e9fea3851325d33a518500f5080265dd826
3fb79d03d903633e7611f78731f7b1fdd0239997c5103121d1343a7a30657e2f
f8512b16eb8de46b682cccc0456a94c2b752043f538aa10ee6506c40701cd068
a20533f5ffab33b8a07d19232188842472621204999f84880624cac29826304b
7d12276914a6c801b8a31f4d923888e2147db72c668bfe42ba9cfd0738635264
e10a00005375abe17d030000
#<end update:2020/02/21 11:41:42>
#<begin attach ID:j8kVn5rZMZR>
789c01660299fd180000006a386b566e35725a4d5a522e32303135303432302e
7376672b0700003e02000001000000789cb5955d6f9b301486af9b5fe1a95abd
2fc0867c91417ab1fb6dd2d4abaaaa283860c531916d4ab269fbed3b069a6469
b34c4a766164738ecff39e17cb44d7ab85408f4c695eca18539760c4645a665c
e631aecccc1963743ded45fa3147902a758c0b639613cfabebdaad03b754b9e7
13423cc8c06dca6425b89cbf9448c330f49a28de85528c1e12cdbeaa72c6058b
f1ac12a2a935d1cb248517199b25953018d53c33458cfb0474168ce7858931d0
f1b477d1bb885e390eca15cf90e3c08b689918c394443c8bf1fdbd0d6c0ad09d
fd76dea5de486ea0c34a33f5cd92bfc81bcd308262179162a941ab1843f6ba79
1e28052d8818d70537b0d36bb62e4bb186a6591793a5849036aa9c436f0fa2da
ac9cae26717dd0547269d550f281a076d8fab664e47582edfcb030f27a579a5d
b5022a25de5cb68ebcfd07210dd17a5b2d84938a44ebcee027723074c900ce40
d02808461b09813f724308f85b1dfd7d8bb6f8249deff36947376cd590e05bbb
a42d08a401750718d99893c8b428558c173ccb04549d95d238b364c105e47d2a
2bc599429f59dd4534ff0e484a97e6494d879f5e09f3d10ec3b4b9ca610e23f2
2ce3b08ea17f7e1d96df9abda5bfecf7e8af7e8f87a7f8dda7bba430d8eb529b
4499139a74164e9698843e37f84f3025c333932f5bb23f81fee1ae3b2a808667
16f0be1510dcbebb3b0a0ffc33c37fb5f03e8a11394aefef9fed53e95e4b1ffc
502cc94a29d63f8f6a188cffcfc91b4ee08ebdf55db77f075e482e9e6bea45f6
d736edfd0674e9397b2b0700003c4b26c566020000
#<end update:2020/02/21 12:08:46>
#<begin attach ID:jzNIuyE99IV>
789c01d80227fd1b0000006a7a4e49757945393949562e32303135303431342e
30312e73766757090000ad02000001000000789cbd965d6f9b301486af9b5fe1
a95add6ae1c310484821bdd8fd3669ed75e58203560d44b669d2fdfa1d03f96a
1b6555d34901618e7dcef3befe08f1cdaa14e88949c5eb2ac1c4763162555a67
bcca13dce8b935c1e8663688d5538ea06ba5125c68bd983ace72b9b497be5dcb
dcf15cd775a007eeba4c5782578f6f75245114396d14ef1625183d50c57ec97a
ce054bf0bc11a2cd35550b9ac28b8ccd692334464b9ee922c12317380bc6f342
2718aae3d9e06c70167fb12c944b9e21cb8217f1826acd64857896e0fb7b13d8
24203be3cd73dff5aee21a14368ac9dfa6f2cfea4e318c20d9592c59aad12ac1
d0fbb9bd1f48051244829705d730d269872e6af10ca2591fabea0a424acbfa11
b43d8866d3b2fa9caeed0153cd2b4343dca18bbacbe4372963a70736cf87c1dc
afbb68a6d50134525c9e778e5cfd03485bd178db94c24a0555aa37785d39086d
981197b4007e60071b066f32b6cda4075b90d14b8fb6f569faf81280f4e58f58
f8f6c8b58361cf37346c68d31ab7a41f4feffbbe1d80c849977fdbdc29a0d9aa
b50accb023136cbd0ac00b13b1689516b54c70c9b34c40e9795d696b4e4b2ea0
d7f7ba919c49f4832dfb88e27f808b90855e7bd933ce2e84be3697664a5fe4f0
0c57ec981a87294272628a2eaa9fcd5ee69a0a9e029921ea56cf9667bd807c77
624f80276c79bcedfa0923db37a0a39ded4edeb97efa1719550595929a258a7c
f4625efc513f692dc1e8d48ecc6ec910dd7aaf95ef6d9df191adf36ee97b1243
b2532a22a6d49e46a5a9d41f906895e0b1a6e488c828fc6f2209f14eaef25b56
5baa2e992ee02ff292ca9c0ce1e65d4de12c38a29c90f191a3717c3ae9e6103a
f5042310ad10fccc5e46ed5eb65f1f2efb1ca3f013384af818e0c81cd847eb07
d1a7f840f5c5f9ca1b5f2b4485d8400c62f319341bfc051883dbf35709000068
cd63cad8020000
#<end update:2020/03/03 08:43:12>
#<begin attach ID:jzNIuyE99IV>
789c011b03e4fc1b0000006a7a4e49757945393949562e32303135303431342e
30322e737667670c0000f002000001000000789cc597db52db301086afc953a8
c314c1101f64278e13ec70d1fbb633856b46d84aaca25819492681a7efca710e
50a8696bda99386379a5dd6fff5d294e72b95e0874cf94e6b24c31717d8c5899
c99c97f3145766e6c4185d4e7b89be9f23985aea1417c62c279eb75aaddc55e8
4a35f702dff73d98813753266bc1cbbb972692f178ecd5567c189460744b35fb
aae48c0b96e2592544ed6ba297348307399bd14a188c563c37458a073e70168c
cf0b93e21006d3de51ef28f9e03868ae788e1c071e244b6a0c5325e2798a6f6e
ac61e7801cacb7f7cdd4eb921bc8b0d24c7db391bf94d79a6104ce8e12c53283
d62986d90ff5f72bae200591e255c10dacf4eaa54b291e2069d6d84a5982491b
25ef20b75b51ed464ee3d377036092bcb434c4effb687359ffd665e235c0f6fe
7530ffe3219a1d6d002a254e8f378a9cbd01a48e68b5ad16c2c904d5ba11781b
7918b950119fd40083c81dee188278e4daa20ff72083e71aede3d3ecee390069
c2b748f8f2caad8251c3d7b76c68378a6bd2bf771f86a13b8424e38dfffdf020
8061eb5a2a10c31d5b63ad55045eacc5a165564895e205cf7301a167b234ce8c
2eb880599f64a53853e8335b3516cd1f818b90a5d96ad9304e4f84b9b09761da
9ccce11eaec4b3315ea718051d536cace6c1ee656ea8e0199059a24df7ec79b6
0d14fab11b034f54f384d1ae7fa2b11b5ad0c1be7f02f29bfdd33cc8a92ea852
d40640217a569770d014ad261876adc8f48af4d155f073e64fb64edcb675467f
b275b62946e42014f1031beb4992da5065debdf79e629061e718ce026a6d2869
0b1dc49d87765db7a5c4c41e0ebfaaf128ecaec683f1bbd538932590549991ea
ada58ebaefb8f3fda1722a6fbf9fb5218cbaefb6ad200b660a99ebb78a1177df
7ce7b974b4b41cf0f2764ad59cf4e12b389bc0af540b4ee093ffb01702ffdf9d
7741d07df73908a4d6083eb60d51dd866e9bd2e13b1c7868012fc71cd91798d6
f883ee1bcfea40cdc9f13a185d684485d841f412fbb760dafb01f10ad3dd670c
0000f6dc8a231b030000
#<end update:2020/03/03 08:43:12>
#<begin attach ID:jzNIuyE99IV>
789c018f0270fd1b0000006a7a4e49757945393949562e32303135303431352e
30312e737667d00600006402000001000000789cad554d739b30103dc7bf429d
4eab646a8404d8312e3887dedbce3439671410a0890c1e4904a7bfbe2bc0b1eb
24fdf4411ea15dbdf7f669779c5c6dd70a3d086d6453a798118a91a8b3269775
99e2d616de02a3abd524310f2582d4daa4b8b276b3f4fdaeeb48179246977e40
29f521030f29cbad92f5fd4b892c8e63bf8fe2435286d11d37e2ab6e0aa9448a
8b56a91e6b69363c83835c14bc5516a34ee6b64a71484167256459d914033b5e
4dce2667c91bcf43a59639f23c384836dc5aa16b24f314dfdebac013003bb8ef
f663ea4d2d2d54d81aa1bf39e62ff58d111801d859a24566d136c590fdd8ffbe
020525a8147795b470d3efaf6e1af508458b31563735848cd5cd3dd476a7daa7
2f6fc4a424004d8dac9d1a46a7140dcbe13bc8c41f05bbfdebc2e8bb4369ee6b
10d06a75fe7670e4e20f84f48ccedb76adbc4c7163468377ccb31959c0cbc651
af601eee252c16c43507dbeb888e2ddad3f3ecfe989f8decbf71f0e59b3b03e7
33124fe721a1a8df311a127a0adc208c081b8087ed21b215dbde1b36a3647899
cb4b32c3c89d7bbcceaa46a7782df35c0163d1d4d62bf85a2ac8fbd4b45a0a8d
3e8b6e8c18f91de430b6b13bef4669abf7ca7e74cb0a63df97b08795f88ee365
0df01ea7d63044eda31b5c69b99219e8727a8656d9abd9754b4063120d4d014c
b3c0291acd9dc7241c1be969bad95ff6cb7890735371ad395084284447af1244
1119f8e7a7776475cda6e83a785ef9cf7302ddf2ab4109a37f19945d81734ae2
8185c547e519cbb5fd8fea3e144d73ce75c9a684908b25ccc2f38edbd387c1a9
e9efb83e3f669e24eeff6735f901700c171ed00600004b69396a8f020000
#<end update:2020/03/03 08:43:12>
#<begin attach ID:jzNIuyE99IV>
789c011b02e4fd160000006a7a4e49757945393949562e73616d706c652e7376
67ac040000f501000001000000789cad54d16e9b30147d0e5fe1696add6a056c
12d49241fab0f76ed2d4e78a82012bc646b629e9be7ed74092356ab449dd832d
dbf7de73ce3db69cdeef5a815e98365cc90cd38060c464a14a2eeb0cf7b6f2ef
30badf78a979a911a44a93e1c6da6e1d86c33004c33250ba0e2342480819784a
59ef0497dbf712699224e118c57f92528c9e73c37e685571c1325cf5428c586b
d3e5051c94acca7b61311a78699b0c2f09e86c18af1b0bf5b0d9780b6f917ef2
7d546b5e22df8783b4cbad655a225e66f8e9c9050e00f44d3d4673eaa3e4163a
ec0dd33f1df377f968184600b648352b2cda6518b25fc7f90c14b420323c34dc
42653896764abc42d36c8e49252164ac565be8ed59f4879d3f639220024d8a4b
a786921b82a6e1f01d641ace82ddfabc3072f1c6a58bbdb85e8babcf9323d7ff
20646474def6adf00b911b331bbc67a6ab80c0cd2674544093203e88886e6970
07cf233e2a599d9a74149017db530574e6b76c3771c524003c128d5ccb15462e
e2e7b26894ce70cbcb520066a5a4f5abbce502b2bea95e73a6d1031be688e1bf
8090d2ceeeb5cce49b4b61bfba6199b19735ac61a4a1e338af6215ff6f158e7d
b2fac8fdbedbf15fdc8ee887dc4e26ae91ea360e4e1b3536d7f6037d7e29956f
54cb6c031fce55ae6b7a035374bd86a7bfefdc4bdddfb2f17e0391c86f0dac04
000093eb02fd1b020000
#<end update:2020/03/03 08:43:12>
#<begin attach ID:jYEoCkSP6CI>
789c01f1030efc160000006a59456f436b53503643492e73616d706c652e7376
67b9100000cb03000001000000789cbd585d6fdb36147d8e7f058b75500758b4
488afa08ecf461efdb80a1cf856c53b610993424bab6f7eb7749ca11e3ca9dd1
280b109b14a973ef39bcf748c9fcf36957a36fa2692b251701c15180845ca975
25378be0a0cb300bd0e7a7c9bcfdb641b055b68b60abf5fe71363b1e8ff8c8b0
6a36331a45d10c76046ecbe3a9aee4f3d04692e7f9ccae067e5012a065d18abf
1a5556b55804e5a1ae2dd663bb2f5670612dcae250eb001dabb5de2e8224823c
b7a2da6cf5228861f23479983ccc3f8421da34d51a85215c98ef0bad452351b5
5e045fbf9a851700e2dd6fc6ddd62fb2d2c0f0d08ae66f13f94ff9a5150102b0
877923561a9d1601ec3edbcf1b5040a15e04c76da5e1ce99bd75afea339016dd
9a5412965adda867e0b6ac0f2fb3b0c38c30859c54254d36249a46c8fd1a7c03
399f75099bf1edc4a25ffdd4cccc257068ea4fbf38457ebb23111bd1687bd8d5
61ab0b2dc2a5d854b293795535ab5aa015a4c021faeaecbe1b5f8e655dac9efd
50def4128b0c4612723d10e73a10c5fc4af9bb42fd0032c194ff6cf6aa2cd163
cfa1cb7f630b11d68257f544e308c7dc9e1df30e8fe4a62dfa1a87a44e4ed1e6
3c5068f7e4f630d7e26463b228c2ae5c3837ca99eb6121575b05cc77d57a5d03
64a9a40ecb6257d5b0ef7775682ad1a03fc4b15b69ab7f84c973afaf647adaab
a36842203a9f19605baf9bef4f5637854465a376e823435aa18fe4d2b73f6e97
6182976e4980d994c30772c2da7177366f02a63405b83c21539e62eea3a37e29
b6853850c61e596ac9b231c8329e63de25c119a4351a5b4e63cca33c891ddb1e
1cf52b576495bc5df4f275cd93c8551f49fb8a8f7d4fa7d1e805ef0266c93b55
bb7c29f6372a4f4c6f4e494e8cd6fdf862fc038d74c38cc9c5d1683c9a1d7751
5ebc0bec83596129ed4f32cb3183077d1e8fec5f03f645e377f0af9d5a8bb0e8
cdeb3e056c89fdff0a30fa5e0a2c6f28f0bd71d331bc8c58e736b60a866a5475
e351ac1b9c8a81655180b4deddc3236f8ddd61de2312a6698a133ea5894dc34d
ba731d81721a6102e0598a2360e7e1239a717fe93ec6f1288f2b0a5a77245137
b1f4c760cc688e33c04b29cef328f6f01123b1bf34c8785bb55a35e7011b659d
8db28b8dfee4cbe6dbba03da3c63f0934c99ad5bc2624c922449dd7cec188ce1
94a35751dd1bf10861faccbb281e152fc8ad8a346fd750924a8ed384f0270ee5
d3d435a19b106a67eee1eb8fd3b194cea186a684bb0e2406de80c377ea5fff2f
21a4d501e4184188b86788628fb969ab34e557b3b18460f05e49012fb39dc932
2f806d607fcdc69bcccd3f1a9e26ff023277e293b910000029a1f34df1030000

#<end update:2020/02/21 12:09:33>
#<begin attach ID:kyvrYILL7c6>
789c01870278fd180000006b79767259494c4c3763362e32303135303431362e
737667a00600005f02000001000000789cad555b6f9b30147e6e7e85a7a9f226
056343684b04e9c3deb749539f2b0a8658714c644c49f6eb778c211725e936b5
0fb9d83efece773924c9e3762dd12bd78da8558a19a1187195d78550558a5b53
7a0f183d2e2649f35a2128554d8a97c66ce6bedf751de94252ebca0f28a53e54
605732df4aa156970a591cc77e7f8a8f9b328c5eb286ffd47529244f71d94ad9
63cd9b4d96c346c1cbac9506a34e146699e29002cf2517d5d2c07d582c263793
9be493e7a14a8b02791e6c249bcc18ae1512458a9f9fedc11e809ddcc768287d
52c280c2b6e1fa97edfc433d351c2300bb4934cf0ddaa618aa77fdfb15289020
53dc2d85819b7e7f7553cb1d88e6c399aa151c3546d72bd0f622dbfdca1b3029
0980532d9465c3e89422f7b2f81632f107c2f6fb7562f4f6c4a5db915cabe597
cfce91afff40a4ef68bd6d4c66384573d4aea5d72fbc175e0935f85df54ebb22
dc0bcf85ce254739b08b8058be739f1ae8442399e3b69749f453e964572754d8
319573120c9f04c76844c2dea3f060d2434c4218ca7876706a66196e5d987a77
21d403d72c5f9d911d43377cebda4694b868a288806abbef652a5fd660c35a14
8504c8b256c62bb3b59050f7ad6eb5e01a7de7dd70d288dfd08fb18d39b8d6f7
5e38a1896f512f38149f84c55571ee527c16557035ab66b5fb8fb8de049d9177
4ec04196d19942a5aed7e3809a7a9c8fe187e0ede7ef728ae3e37717113ab519
a27e80a62e4effddb87140421adf05d3e89e4447d8687f300bac47fe5f05b3bd
e0f82304b37846ee1d95201cc57f84e22008080565cc4906f0a1cb7e7faf7892
d8ff93c5e40f0acaf7fba0060000e5a1371e87020000
#<end update:2020/02/21 09:27:25>
#<begin attach ID:kyvrYILL7c6>
789c0182027dfd160000006b79767259494c4c3763362e73616d706c652e7376
67a20600005c02000001000000789cad555d6f9b30147d4e7e85a7a9f2260563
43684b04e9c3deb74a539f2b02865875ecc89892ecd7ef1ac8579376d5da877c
d8f7fadc73cebd86e46eb392e8999b5a6895624628465ce5ba10aa4a71634bef
16a3bbf938a99f2b04a9aa4ef1d2daf5ccf7dbb6256d48b4a9fc8052ea4306ee
53661b29d4d3a54416c7b1df45f1715186d122abf9bdd1a5903cc56523658735
abd7590e1b052fb3465a8c5a51d8658a430a3c975c544b0be761311f8fc6a3e4
8be7a1ca8802791e6c24ebcc5a6e1412458a1f1f5d600fc04ece6334a43e2861
41615373f3db55fea51e6a8e11808d12c3738b362986ec6df7fd0a144890296e
97c2c249bf3bbad6720ba2f910535a41a8b6463f81b6856cf62b6fc0a424004e
5a28c786d10945fdc7e13bc8c41f08bbffaf13a357272e5dedc835467efbda3b
f2fd1d44ba8acedbda6696533443cd4a7addc25bf04aa8c1efaa73ba4fc29df0
5c985c729403bb0888e5dbfed71c3bb59059fe74cce268b9a3c176b2ab132aec
98ca3909864f1ac76844c2cea3f060d26d4c4218ca787a706aea186e7a8a667b
a1a9efa13a4a2cdff465234afad64411893072fb5ea6f2a5061b56a228244096
5a59afcc564242de0fdd18c10dfac9db21528b3f508fb1b57de1dabc179af80e
f58243f149b3b82ace5d8acf5a15bcec55e078ff87056f605e9320fad8041c64
599329541abdda0da8d5bbf9181e046fdfbfcbe576d7ef1ada37713d44dd004d
fa76fa1fc68d0312d2f83a984437243ac246fbc0b4f3ddffa760b6171c7f8660
164fc94d4f250881dba7290e8229894019eb251fc0d121b2d73c4edc1b653efe
0bd5abf8b0a2060000b956387782020000
#<end update:2020/02/21 09:27:25>
#<begin attach ID:kIbztPia0yq>
789c012605d9fa160000006b49627a745069613079712e73616d706c652e7376
67372600000005000001000000789cbd9a5f6fdb3614c59f934fa16118b401b5
2d92fa430576fab0f76dc0d0e7c235655b882205b25ca7fbf42379294aa65b7a
c0483e24b9966492873ebff4dc32eb8fefaf4df4b5ea4f75d76e62b44ce2a86a
771dabdbc3263e0ffb058da38fcf8febd3d743c41f6d4f9bf8380c6f4fabd5e5
72595ec8b2eb0f2b9c24c98a3f11c3234fef4dddbe7cef415496e54ade8de793
a238fab23d557ff5ddbe6eaa4dbc3f378d1cebe9f4b6ddf10bacda6fcfcd1047
979a0dc74d9c277c9dc7aa3e1c874d9cf217cf8f0f8f0feb9f168be8d0d72c5a
2cf885f5db7618aabe8d6ab6893f7f1637f40068f67e51ab473fb5f5c0159e4f
55ffb798f9cff6d3a98a233ed8c3baaf7643f4be89f9d3dfe4f71f0cc525349b
f872ac07fece957ceb5bd77ce3a22b75afed5a7eeb34f4dd0bd7f6a539eb570b
3566b2c47c4d5ddd8ad5a0e44312c197185f0cb95ea9058bfac70b4b7e992f4d
bc82059cfbe6d79f61477efb0f0b91338abddd27287a8ac47cdbf6d0546a9be5
fc628ff9ed582c04c14ad0b494f4eae332f6689a7fbb7b31178066d30fd5fba0
e694259f8ac054e287b8b4d8b6bb63d76fe2d79ab1868fbdefda61b1dfbed60d
7feaf7eedcd7551ffd515dd49d53fd4f2516fa368c6b528b78e65ad62b31e438
39b36b674a7b090ba201b423bdcfced53353fdae6b5b2eb5eba37ddfbd4a230c
9ddc13859adde1df17371a9c24cbe443c6bf45b2e27a7859ea52edc2ff9aa228
964952e6988f582c333eb8183ad2574bbcccae7c8eed3ec7e0731acee838f1e7
746c3addaa9e29f51887b33a4e3d5a1ddfb13a06ab631756c789f63a946076be
972edd8e1330365276e7c34bbf4fd76f0c4fec8627f22327010d9f7a343c310d
6f55cf46f57938c34f3bedc1f0e48ee109189eb8307c3a191eca3c13bfe78951
02067c875d624052b0bba2808f2e29d0976f2048ed10a4d2061909074196f983
203521b0aa674a7d4ac34190251e2148ef40900204a90b08b24c4300a5747e6a
960001df619710a4f915047c740981be7c0341668720bb8af8245cc647990708
321302ab7aa6d4ab902f3359a8942fe3966b08b23b10640041e62ce5a342c77c
997920e6cbd269ccc758c57c3ef414f33132cd9edbcd9e5fe7fc106e1f83be17
bbe7a6ddadfa99d23f26fd207e1fa3be17bfe777fc9e83df7377511f0c0f3538
1eb2be33cb4f991e3c2fb2be30fdecfa8deb0bbbeb8bebb01fc2f5a94fd717a6
ebadfad9a83f0fe8fa71b3bdb8beb8e3fa025c5fb8cbfbe07a55d359cc9fd540
03447e6734e86c0f3088c82f60982edfb040ed2cd0ebcc1f828531f47b61819a
2c58f533a57f4cfd41581863bf1716e81d1628b040ddc57e6041d57496f66735
b000c9df190b3ae2030b22f90b16a6cb372c947616ca79f42701a33ff1414269
926055cf94fa31fae721a33ff500427907841240289d457f32457ff90f435418
25a65343409d3704746c08e8bc21280c04506245407c20b386200803fa7ffe3d
4080120302bb7ea6f4eb86200405ba21f04081a9dfa4806f87a080ff70d61090
594300e64799590309aa517085c2ac21a0ba51a0578dc20d0df6e35e84ae1a85
2034a43e69308f7cedfad9a83f0f48836e147cd070e7d017c1a12f7272e89bce
684867341062d640836a145cd130750454370a74de28dcb0603f1246f8aa5108
c2823e1df0c18279286cd7cf947edd28846041370a3e58b8732a8ce054183939
1586e680cc1a05f07f7a53030baa5170c5c2d41150dd28d079a3a059785c8b3f
f37a7efc17f1462521372600009717853f26050000
#<end update:2020/02/21 12:17:48>
#<begin attach ID:lv1wH6ms6l0>
789c0191026efd160000006c76317748366d73366c302e73616d706c652e7376
67560800006b02000001000000789cc556db8ed330107dde7e8511620d5293d8
491a9a9274053f0012dae7559aab55d7ae6c67d3e5ebb19d34bdd02204051e5c
8d3de333e71c4fa4260fbb0d05cfa59084b31462174150b29c1784d5296c55e5
cc2178584e12f95c035dca640a1ba5b60bcfebbaceed02978bdaf311429eae80
7dc96247095b5f2ac4711c7b360b8f9b620856992cbf085e115aa6b06a29b558
0bb9cd727d509455d6520541470ad5a430449a675392ba5129d4dde1727237b9
4b5e390ea8052980e3e883649b29550a064891c2a727931801f0d17d130fa58f
8c28adb095a5f86a3a7f668fb2844083dd25a2cc15d8a55057bfd8df2b505a02
4d61d710a56f7af6ea96d3172dba1c728c339d924af0b5d6b6a2edb873064ce4
fa9a1327ccb0c1688a40bf0cbe814cbc81b089af13436f8ea9995d4fa015f4ed
ebde9177bf40c47634dee65466600154b9532bbe1b5caeadbf26054f7c8a2237
b28ce6e148499fcd0f9402ffccad03932c5f9f53c17b374d7bd300a35e3146ba
8f39743296375ca470438a826abc8a33e548f24d43627fabf6dd06f8654e3329
3f269eb96b4dad8f84aeae0b5d9d0af5ffbad2e0264a3f5d52da6ea8a3733c27
99d25f23a804dff4efac786fc3f02dfd7c842fab384c3072d1741eba08f4e1cc
84c179680a8669db2bf74dc26a0fe726f81df1f7547d302b138277d241f7b5de
eb75b0e3df1911046e38b51e003b367d3c88fe23687f16b8118a235f43be7767
c7f0e0908b7d7776d5e238bc91c5f87f5a6c4709e3681c361c46e3889dc4a6e6
16d65bc3a7d89fbb718c82188c1480b1fb90b845afe0acd72805f8179bfdf8ca
3844377a66fffc992789f917b09c7c07b8807ac2560800006e15336c91020000

#<end update:2020/02/21 09:32:44>
#<begin attach ID:lPDgpmFIGvg>
789c013604c9fb180000006c504467706d46494776672e32303135303332362e
737667d91a00000e04000001000000789cbd99df6fa33810c79f9bbfc2a7d3c9
77d286f8073fabd07dd8f7dd934efbbc4a0324a81422209becfdf53bc6406dc0
ab930ef7a1ed189bf17c87f96046dd7fbcbf16e87b5a377955c6983a04a3b43c
56495e9e627c6db36d88d1c7a7cdbef97e42b0b46c627c6edbcbe36e77bbdd9c
1b77aafab46384901dacc072c9e3bdc8cb97a585348aa25d378bd54d2946cf87
26fdbbaeb2bc48639c5d8ba2f3f5d85c0e47b890a4d9e15ab418ddf2a43dc7d8
2310e739cd4fe736c62e0c9e360f9b87fd6fdb2d3ad57982b65bb8b0bf1cda36
ad4b942731fef64d4c8c0ea872bfb0fba55fcbbc0585d726adff113b7f29bf36
2946e0ec615fa7c716dd630cab7f74bf0dae404211e3db396fe1ce5d77eba52a
7e80e8b49f2bab12a69ab6ae5e40db73711d47dbde277118c454e5a58886920f
04c91fe15fb8dceffa80856d0e8cfca186264632806b5dfcf9bbccc85fff2190
6e4791db8c78e811b5e9bd7daeee7d924f5d7a61066b59f20287795d40be3746
e47a8ef716119f26eb2d90c3f1651a091d9229b6173b84526f081ec5a5eda13c
9eab3ac6af799214e02dabca769b1d5ef302567daaae759ed6e8737aeb679afc
df5464e5d20e51f4db3e8196fd4eb8ec127d1ac42746f1c9547c388aa7dc927a
4aa57ceaadae3f59d67facca12f45535caeaeab5ab85b6eab2d2d3f6eb225f16
35d478481cf2c1f71c823a8b0b8b72e6049e66532a0651e8f86c3a10cbfa52fd
5f9144f03a12fe187308897ca66c8028f1f5498d0ddfc886af9707f5adc34123
7b74f8cb7498e42733f9ef8007b389c762026678f8120f7f0d3ce0710e7c48b3
838231eaf0819061b01a088c72270c5412942dc00ef5590d85c08842a0d7028b
aca3c0993d148265144cf29399fcc03e0a9c58446131013314028942b0060af0
380714a429ab3f946f696db01e0ae1f45050b6402cfad5a9101a5108f55a7089
75145c6e0f8570190593fc642a9fbf030aae4d1416133043219428846ba0008f
7340419a5df5cb446ab6fc527269fffad6476b41e292e979a16c01b6f9bc4848
64ac92c8d45630cb7d055b1f1250b3542399517e3695fff6e5c46d37167c7d46
b265fd334622c948b40623fdd73be74aafc0a9da5ea803c6c7164435fd951009
98037b7892003a3a47f05895eb2a199498c8a0c4d854584363e82a6cb041c922
1bc60464b304bc031ccc221ccb0998c201f91070c09f15e0181b08ad8390952f
fb0ccd5e0b031aea1c8ceec13293408d2450634f618d84a1a9b042025d26c194
806c9680c03e094357618584c504cc48a09204ba0a09a17a4e0c2359fdb2cdd0
ecb548e0542761740f969904662481195b0a6b240c3d851512d83209a60464d3
04f07720c1b549c2620266243049025ba5a9a0ea99308ea8da5aa803c985ec3f
347b2d465ca63332ba076bcec8662ffe11f5b4f9092f83b847d91a00004f9304
0f36040000
#<end update:2020/02/21 12:19:16>
#<begin attach ID:lPDgpmFIGvg>
789c012b05d4fa160000006c504467706d46494776672e73616d706c652e7376
679f2300000505000001000000789cbd9a5d6fa3381486af9b5fe1d56ac5aed4
107f600c55e85cccfdcc4aabb91ea50112540a119049667ffdd8982f035e553b
f65cb43d6072ec73fc3e3627eefec3fd2d07df92aaceca2272900b1d9014c732
ce8a53e45c9b741b38e0c3f3665f7f3b01fe685147ceb9692e4fbbdded76736f
c42dabd30e430877fc09473ef274cfb3e275ed411486e1ae6d75a69d2207bc1c
eae4efaa4cb33c899cf49ae7adafa7fa7238f21b71921eae79e3805b1637e7c8
f1211fe739c94ee726723c7ef1bc79d83cec7fdb6ec1a9ca62b0ddf21bfbcba1
6992aa00591c395fbf8a86c1019a7c5ed8dda35f8aace1115eeba4fa47f4fcb9
f852270ee0ce1ef655726cc03d72f8d3dfdbdf1a573c843c726ee7ace19fdcb5
1fbd94f9771e74d2b51565c19beaa62a5f796c2ff975b8da763ea18bf998caac
10a341f01102f923fc0b97fb5d376061eb0706ff980e4d5cc9015cabfccfdf65
46fe7ac740da1e456e5388c01368927bf352debb249fdaf4f21647c912662ea6
ed807c3a8cc8a32e1d4744e6c91a077238bece4782fa648aee450f54c61b708f
e2d6f6501ccf6515396f591ce7dc5b5a16cd363dbc65397fea6379adb2a4029f
925bd75267ff26222b97a61f45d7ed338f65bf132edb449ffae0636df0f13c78
663d78046d451faf477f2c8b8247575620adcab756094dd9e6a463edbf25be1e
53af700a5df8e8531782d622c2e211aaa668efb4f8539d85d8a58f14bb10863e
1e7c73834dee4f441f43ac9d77ac133db2ac7a6463e2f1dac4a7daf0d379f8cc
7ef8bdee2dc49faec7bf103e96c2c726842fd587fc51e5880c184c4d53e2f784
f851a772343807944def2b4b3ee1d32f66f8509cf2a40bba9d71a901e2887921
725a301db79f60b22f06ff67d6dbfedb89979df61af0babe189c49a06e0e55f3
530a20a30224fa448b3ed1699f20cbda27c402fbe45dda2752fbc484f699d01e
160a04d2c470a0606af37c1a5cf809941a1f9d772b7fdfa0689f6a973eaa4e3f
a2c3fc07b6a63fe8963e6861e9a3eb6f3cbaf8e345fcc1b8f6534b09c0a84b00
b3a0ffd5042cf44fa5fea991b53f10020cdaa5bf35a9307990aa89a821f963d8
aefd5ebff60feeb9c5a62d0a01be96007ff6eee35b2700871609f0d709d0c51f
2fe267f60920d02201ab095810e04b027c1304f0f9ec0990662b7bc275c8a862
cb3721327941ea6c636c842a1b837b6ee9d9605a3698aa0d0f5a67c32316d960
eb6ce8e28fe7f193d03e1b1eb6c8c66a02166c30c90633c1069fcf9e0d694a1e
da4546b1250f1e1ed9e86c536c7848656370cf2d3d1b81968d40d506b5cf06b5
c946b0ce862efe781ebff70bf60d6a73df584dc0828d40b21118f9ba6864838e
6c503833cd1130db1d06f7806a778718865a0584dada01db2e1e887904783ceb
df1be912902e1230160fc476f140cc2390ae276081402811088dbc3a21f9ede8
5827603a56128a1d18a200314101667dfddc7b0762fac686290308ea1840505b
3d5863a02f1f6c3080e02a03da04a48b0430fb0cf4e5830d06d613306780e743
30c0ff186080c09181ce2693a241b99044c82a43b14dd18103858ec13bb7b474
68cf9310d2d60fd6e8e80b082b74ac1e29a5da04a4f3044c0a086b74f4058415
3ade75a686e4991a3272a6265fd3251d9d4d266583722189907586629ba2c3c3
0a1d83776e69e9d09eba21acad20acd1416dd2b17eeea64d403a4f80f70bf60e
6a73ef78d7c11b92076fc8c8c11b9dec1dd296baa764619b6280aa0c0cdeb9b5
6060b317ff4ef3bcf901188344959f23000004f1835d2b050000
#<end update:2020/02/21 12:19:16>
#<begin attach ID:lPGn2iQ6CFp>
789c01fe0201fd160000006c50476e326951364346702e73616d706c652e7376
67d3080000d802000001000000789cb556516fda30107e2ebfc2d3b47a931a27
31240196d01fb0874e9afa5ca58949ac1a1b39a6d0fdfa9d9d044247d58e7612
09e7b37ddf77779f0de9f56e25d023d30d5732c321093062b250259755863766
e94d31ba5e8cd2e6b142b0543619ae8d59cf7d7fbbdd92ed98285df93408021f
56e076c97c27b87c38b5309ccd66be9bc543d010a3fbbc613fb55a72c132bcdc
08e162cd9b755e80a364cb7c230c465b5e9a3ac3930078d68c57b5c9f018068b
d1c5e822fde479a8d2bc449e078e749d1bc3b444bcccf0dd9d9dd8070807fbad
dd2dbd95dc40869b86e95f16f946de360c230876916a5618b4cb30ac7e72ef17
42410a22c3db9a1bd8e9bbad6b259e2069d6cd492561aa315a3d406ef762b31f
795dcc8050e0a4b8b46cc2e02a40ed63e3db90a9df11b6f6cbc4822f436a76d4
12d868f1f5735b916f6f20e2106d6df3c2288de668b3125e6bb785ae5c899d07
bb840bae0bc15001ac9208a30278854942c0d46045e479990e14f2e2e13987f0
8d653cbdb5af6202a857e18c92083993b6343e207214b8c831a111822aef071f
179c8e9323da1d8c73f72886ed9c0a6cbda1dc349ad939ebf57259d40a0abfe2
6529007ba9a4f11afe1be043ba367d2f3a2a0bd7c7d4b75b9dd4aabefd702c0a
38a69d00fad150029daf15011382af9b5605f68c3a19506b68f0c4f6fbc9ce9c
a5853e5d17d8c58dcfcbb6a37c2adf4249c99ccc975aad3af51b858e337f577b
bb46da37a293bd3d3873b6d45299215aa5e4bf956c8f46c72481bb3a88ae2613
32458371184484229ac4647c64c7761d8dac69b774c4faea87e33640e87a3075
cc8f9ad0985c9b577b606ade20f8f4b99243374e23cd266722ade0578423d72e
c0bbf9f12a521cdba4cf40ba14e6bb7d0ab55a31692e2b18c273c07b5727ff6a
cee93e9da5cdce51e64d9d6b9ddb338ac668a0a27846a69d48bafb2ed9dfa5ff
0792d20909e3bd301392847104a24d28092751e2a047a9fd0bb218fd010972a1
c1d30800003ad07346fe020000
#<end update:2020/02/21 12:03:49>
