
(in-package :cl-diagram-user)

(load-stencil :uml-keyword-info)

(defparameter *uml-package-font*       nil)
(defparameter *uml-package-fill*    :white)
(defparameter *uml-package-stroke*  :black)
(defparameter *uml-package-width*      100)
(defparameter *uml-package-height*      80)
(defparameter *uml-package-tab-width*   40)
(defparameter *uml-package-tab-height*  15)
(defparameter *uml-package-tab-margin*   3)


(defun uml-package-calc-tabsize (pkg)
  (with-slots (contents-p keyword name font tab-margin) pkg
	(if (not contents-p)
		(values *uml-package-tab-width*
				*uml-package-tab-height*)
		(let ((txt (with-output-to-string (s)
					 (when keyword
					   (format s "~A~%" (uml-keyword-to-string keyword)))
					 (princ name s))))
		  (multiple-value-bind (w h) (diagram:font-calc-textarea font txt)
			(incf w (* 2 tab-margin))
			(incf h (* 2 tab-margin))
			(values (max w *uml-package-tab-width*)
					(max h *uml-package-tab-height*)))))))



(defclass uml-package (diagram:group)
  ((name		:initform nil :initarg :name)			; (or string keyword)
   (keyword		:initform nil :initarg :keyword)		; (or nil uml-keyword-info)
   (contents-p	:initform nil :initarg :contents-p)		; boolean
   (font		:initform nil :initarg :font)			; (or nil font-info)
   (fill		:initform nil :initarg :fill)			; (or nil fill-info)
   (stroke		:initform nil :initarg :stroke)			; (or nil link-info)
   (tab-width	:initform   0 :initarg :tab-width)		; number
   (tab-height	:initform   0 :initarg :tab-height)		; number
   (tab-margin	:initform   0 :initarg :tab-margin)))	; number

(defmethod initialize-instance :after ((pkg uml-package) &rest initargs)
  (declare (ignore initargs))
  (with-slots (keyword font fill stroke #|tab-width tab-height tab-margin|#) pkg
	(setf keyword (and keyword (make-uml-keyword keyword)))
	(setf font    (make-font   (or font   *uml-package-font*   *default-font*  )))
	(setf fill    (make-fill   (or fill   *uml-package-fill*   *default-fill*  )))
	(setf stroke  (make-stroke (or stroke *uml-package-stroke* *default-stroke*))))
  pkg)

(defmethod check ((pkg uml-package) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (name keyword font fill stroke tab-width tab-height) pkg
	(multiple-value-setq (tab-width tab-height) (uml-package-calc-tabsize pkg))
	(check-member name       :nullable nil :types (or string keyword))
	(check-object keyword    canvas dict :nullable t :class uml-keyword-info)
	(check-object font       canvas dict :nullable t :class   font-info)
	(check-object fill       canvas dict :nullable t :class   fill-info)
	(check-object stroke     canvas dict :nullable t :class stroke-info)
	(check-member tab-width   :nullable nil :types number)
	(check-member tab-height  :nullable nil :types number))
  nil)

(defmethod shape-connect-point ((pkg uml-package) type arg)
  ;;ToDo : 95KvWqh6oVU : タブ部分と交差する場合の考慮ができてない（まともにやると難しそう）
  (with-slots (tab-height) pkg
	(rectangle-connect-point (shape-center    pkg)
							 (+ (shape-middle pkg) (/ tab-height 2))
							 (shape-width     pkg)
							 (- (shape-height pkg) tab-height) type arg)))
  
;;MEMO : use impelementation of group...
;;(defmethod group-get-canvas ((pkg uml-package)) ...)

(defmethod shape-get-subcanvas ((pkg uml-package))
  (with-slots (tab-height) pkg
	;;(format t "tab-height is ~A~%" tab-height)
	(make-canvas (+ (shape-top pkg) tab-height)
				 (shape-bottom pkg)
				 (shape-left   pkg)
				 (shape-right  pkg))))

;; override of group::draw-group
(defmethod draw-group ((pkg uml-package) writer)
  (let ((canvas (group-get-canvas pkg)))
	(with-slots (name keyword contents-p font
					  fill stroke tab-width tab-height tab-margin) pkg
	  (let* ((width     (canvas-width  canvas))
			 (height    (canvas-height canvas))
			 (font-size (slot-value font 'diagram::size)))
		(macrolet ((register-entity (entity)
					 `(check-and-draw-local-entity ,entity canvas writer)))
		  (let ((*default-fill*   fill)
				(*default-stroke* stroke))
			(rectangle (/ width 2) (/ (+ height tab-height) 2) width (- height tab-height))
			(rectangle (/ tab-width 2) (/ tab-height 2) tab-width tab-height))
		  (let ((name (if (stringp name)
						  name
						  (string-downcase (symbol-name name))))
				(x    (/ (if contents-p tab-width   width) 2))
				(y    (/ (if contents-p tab-height height) 2)))
			(if (null keyword)
				(incf y (/ font-size 2))
				(progn
				  (uml-keyword-draw keyword
									(+ (canvas-left canvas) x)
									(+ (canvas-top  canvas) y) :center writer)
				  (incf y font-size)))
			(text x y name :align :center :font font))))))
  nil)

;;for debug...
;(defmethod post-draw ((pkg uml-package) writer)
;  (call-next-method)
;  (draw-canvas-frame (group-get-canvas #|shape-get-subcanvas|# pkg) writer))
 


(defmacro uml-package (x y name &key keyword width height
									 font fill stroke link layer id contents)
  (let* ((contents-p (not (null contents)))
		 (code `(register-entity (make-instance 'uml-package
											   :center-x ,x :center-y ,y
											   :width  (or ,width  *uml-package-width*)
											   :height (or ,height *uml-package-height*)
											   :name ,name :keyword ,keyword
											   :contents-p ,contents-p
											   :font ,font :fill ,fill :stroke ,stroke
											   :tab-width  *uml-package-tab-width*
											   :tab-height *uml-package-tab-height*
											   :tab-margin *uml-package-tab-margin*
											   :link ,link :layer ,layer :id ,id))))
	(if (null contents)
		code
		(let ((g-obj (gensym "OBJ")))
		  `(let* ((,g-obj ,code)
				  (canvas (shape-get-subcanvas ,g-obj)))
			 (declare (special canvas))
			 ,@contents)))))


