
(in-package :cl-diagram-user)

(defparameter *default-textbox-rx*           nil)
(defparameter *default-textbox-ry*           nil)
(defparameter *default-textbox-align*        :center)
(defparameter *default-textbox-valign*       :center)
(defparameter *default-textbox-margin*       10)


(defclass textbox (diagram:text-shape)
  ((rx	;:type     number
		:initform nil
		:initarg  :rx
		:accessor textbox-rx)
   (ry	;:type     number
		:initform nil
		:initarg  :ry
		:accessor textbox-ry)))
  
;; override of group::draw-group
(defmethod draw-group ((box textbox) writer)
  (let ((canvas (shape-canvas box)))
	(declare (special canvas))
	;;ToDo : export fill/stroke/entity-canvas ???
	(with-canvas (top bottom left right) canvas
	  (let ((width  (- right  left))
			(height (- bottom top)))
		(macrolet ((register-entity (entity)
					 (let ((g-entity (gensym "ENTITY")))
					   `(let ((,g-entity ,entity))
						  (setf (diagram::entity-canvas ,g-entity) canvas)
						  (check ,g-entity canvas nil)
						  (draw-entity ,g-entity writer)))))
		  (with-slots (rx ry diagram::fill diagram::stroke) box
			;; draw box
			(rectangle (/ width 2) (/ height 2) width height
					   :rx rx :ry ry :fill diagram::fill :stroke diagram::stroke))))))
  (call-next-method))

;; no override.
;(defmethod text-shape-calc-size ((box textbox))
;  (call-next-method))

;; no override.
;(defmethod text-shape-paragraph-area ((box textbox))
;  (call-next-method))

(defmacro textbox (x y text &key rx ry width height align valign
								 font fill stroke margin link layer id)
  `(register-entity (make-instance 'textbox
								   :center-x ,x :center-y ,y
								   :width ,width :height ,height
								   :text ,text :font ,font
								   :rx     (or ,rx     *default-textbox-rx*)
								   :ry     (or ,ry     *default-textbox-ry*)
								   :align  (or ,align  *default-textbox-align*)
								   :valign (or ,valign *default-textbox-valign*)
								   :margin (or ,margin *default-textbox-margin*)
								   :fill ,fill :stroke ,stroke
								   :link ,link :layer ,layer :id ,id)))

