
(in-package :cl-diagram-user)

(defparameter *uml-time-signal-fill*         :white)
(defparameter *uml-time-signal-stroke*       :black)
(defparameter *uml-time-signal-width*            20)
(defparameter *uml-time-signal-height-ratio*    1.5)


;-------------------------------------------------------------------------------
;
; class uml-time-signal
;
;-------------------------------------------------------------------------------
(defclass uml-time-signal (diagram:group)
  ((name		;:type     (or nil label-info)
				:initform nil
				:initarg  :name
				:accessor uml-time-signal-name)
   (fill		;:type     (or nil fill-info)
				:initform nil
				:initarg  :fill
				:accessor uml-time-signal-fill)
   (stroke		;:type     (or nil stroke-info)
				:initform nil
				:initarg  :stroke
				:accessor uml-time-signal-stroke)))

(defmethod initialize-instance :after ((tm-sig uml-time-signal) &rest initargs)
  (declare (ignore initargs))
  (with-slots (name fill stroke) tm-sig
	(setf name   (and name (make-label name)))
	(setf fill   (make-fill   (or fill   *uml-time-signal-fill*   *default-fill*  )))
	(setf stroke (make-stroke (or stroke *uml-time-signal-stroke* *default-stroke*))))
  tm-sig)

(defmethod check ((tm-sig uml-time-signal) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (check-object (name   (uml-time-signal-name   tm-sig)) canvas dict :nullable t :class  label-info)
  (check-object (fill   (uml-time-signal-fill   tm-sig)) canvas dict :nullable t :class   fill-info)
  (check-object (stroke (uml-time-signal-stroke tm-sig)) canvas dict :nullable t :class stroke-info))

;; override of group::draw-group
(defmethod draw-group ((tm-sig uml-time-signal) writer)
  (with-slots (name fill stroke) tm-sig
	(let* ((canvas (group-get-canvas tm-sig))
		   (width  (canvas-width  canvas))
		   (height (canvas-height canvas))
		   ;(center (/ width 2))
		   (*default-fill*   fill)
		   (*default-stroke* stroke))
	  (macrolet ((register-entity (entity)
				   `(check-and-draw-local-entity ,entity canvas writer)))
		;; draw note body
		(polygon `(0 0 ,width 0 0 ,height ,width ,height 0 0))))
	(when name
	  (draw-label name tm-sig writer)))
  nil)

;for debug...
;(defmethod post-draw ((obj uml-time-signal) writer)
;  (call-next-method)
;  (draw-canvas-frame (shape-get-subcanvas obj) writer))
 

(defmethod shape-connect-point ((tm-sig uml-time-signal) type arg)
  (let* ((canvas (group-get-canvas tm-sig)))
	(with-canvas (top bottom left right) canvas
		(let* ((qw  (/ (canvas-width  canvas) 4))
			   (qh  (/ (canvas-height canvas) 4))
			   (center (+ left qw qw))
			   (middle (+ top  qh qh)))
		  (ecase type
			((:center) (call-next-method))
			((:top)    (make-point (+ center (* qw arg))    top))
			((:bottom) (make-point (+ center (* qw arg)) bottom))
			((:left)   (make-point (+ center (* qw arg arg -1)) (+ middle (* qh arg))))
			((:right)  (make-point (+ center (* qw arg arg  1)) (+ middle (* qh arg)))))))))



(defmacro uml-time-signal (x y name &key width height fill stroke link layer id)
  `(register-entity (make-instance 'uml-time-signal
								   :center-x ,x :center-y ,y
								   :name ,name
								   :width  (or ,width *uml-time-signal-width*)
								   :height (or ,height
											   (* *uml-time-signal-height-ratio*
												  (or ,width *uml-time-signal-width*)))
								   :fill ,fill :stroke ,stroke
								   :link ,link :layer ,layer :id ,id)))

