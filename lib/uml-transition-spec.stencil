(in-package :cl-diagram-user)

(defparameter *uml-transition-spec-font*  nil)
(defparameter *uml-transition-spec-class* nil)

;-------------------------------------------------------------------------------
;
; class uml-transition-spec
;
;-------------------------------------------------------------------------------
(defclass uml-transition-spec ()
  ((trigger		;:type     (or keyword string)
				:initform nil
				:initarg  :trigger
				:accessor uml-transition-spec-trigger)
   (guard		;:type     (or keyword string)
				:initform nil
				:initarg  :guard
				:accessor uml-transition-spec-guard)
   (action		;:type     (or keyword string)
				:initform nil
				:initarg  :action
				:accessor uml-transition-spec-action)
   (class		;:type     (or keyword string)
				:initform nil
				:initarg  :class
				:accessor uml-transition-spec-class)
   (font		;:type     (or nil font-info)
				:initform nil
				:initarg  :font
				:accessor uml-transition-spec-font)))


;;MEMO : no impl.
;(defmethod initialize-instance :after ((obj uml-transition-spec) &rest initargs)
;;  ...)

(defmethod check ((mul uml-transition-spec) canvas dict)
  (check-member (trigger   (uml-transition-spec-trigger   mul)) :nullable t :types (or keyword string))
  (check-member (guard     (uml-transition-spec-guard     mul)) :nullable t :types (or keyword string))
  (check-member (action    (uml-transition-spec-action    mul)) :nullable t :types (or keyword string))
  (check-member (class     (uml-transition-spec-class     mul)) :nullable t :types (or keyword string))
  (check-object (font      (uml-transition-spec-font      mul)) canvas dict :nullable t :class font-info)
  nil)

(defun uml-transition-spec-to-string (obj)
  (with-slots (trigger guard action) obj
	(format-string trigger
				   (when guard
					 (format-string "[" guard "]"))
				   (when action
					 (format-string "/" action)))))

(defun uml-transition-spec-draw (obj x y align writer)
  (let ((txt (uml-transition-spec-to-string obj))
		(txt-anchor (ecase align
					  ((:left)   "start")
					  ((:center) "middle")
					  ((:right)  "end"))))
	(with-slots (class font) obj
	  (writer-write writer
					"<text "
					"x='" x "' "
					"y='" y "' "
					"text-anchor='" txt-anchor "' "
					(write-when class "class='" it "' ")
					(when font
					  (to-property-strings font))
					">" (escape-characters txt) "</text>"))))

(defun uml-transition-spec-draw-beside-line (obj line writer)
  (unless (typep line 'diagram:line)
	(throw-exception "multiplicity-info : line parameter is not line object"))
  (multiple-value-bind (x y sin cos) (diagram::line-get-center line)	;;ToDo : export!?
	(declare (ignorable x y sin cos))
;	(format t "x=~A, y=~A, sin=~A, cos=~A.~%" x y sin cos)
	(let* ((f-size (diagram::font-size (uml-transition-spec-font obj)))	;;ToDo : export!?
		   (offset f-size)
		   (align (cond ((zerop sin) :center)
						((<  0  sin) :left)
						(t           :right))))
	  (incf y (/ f-size 2))
;	  (macrolet ((register-entity (entity)
;				   `(check-and-draw-local-entity ,entity canvas writer)))
;		(let ((x (+ x (* sin offset)))
;			  (y (- y (* cos offset)))
;			  (st (stroke :color :red :dasharray '(3 3))))
;		  (line `(,(- x 25) ,y ,(+ x 25) ,y) :stroke st)
;		  (line `(,x ,(- y 25) ,x ,(+ y 25)) :stroke st)))
	  (uml-transition-spec-draw obj (+ x (* sin offset))
									 (- y (* cos offset)) align writer))))


(defun make-uml-transition-spec (&rest params)
  (if (= 1 (length params))
	  (let ((param (car params)))
		(cond
		  ((typep   param  'uml-transition-spec) param)
		  ((listp   param) (apply #'make-uml-transition-spec param))
		  (t               (make-uml-transition-spec :trigger param))))
	  (destructuring-bind (&key trigger guard action
								(class nil class-p)
								(font  nil  font-p)) params
		(make-instance 'uml-transition-spec
					   :trigger   trigger
					   :guard     guard
					   :action    action
					   :class    (if class-p class *uml-transition-spec-class*)
					   :font     (if font-p  font  (or *uml-transition-spec-font*
															diagram:*default-font*))))))

