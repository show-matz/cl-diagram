
(in-package :cl-diagram-user)

(defparameter *uml-role-font*     nil)
(defparameter *uml-role-degree*   240)
(defparameter *uml-role-distance*  10)

;;------------------------------------------------------------------------------
;;
;; class uml-role-info
;;
;;------------------------------------------------------------------------------
(defclass uml-role-info ()
  ((name		:initform nil :initarg :name)		; (or keyword string)
   (font		:initform nil :initarg :font)		; (or nil font-info)
   (degree		:initform nil :initarg :degree)		; integer
   (distance	:initform nil :initarg :distance)))	; integer

(defmethod initialize-instance :after ((rol uml-role-info) &rest initargs)
  (declare (ignore initargs))
  (with-slots (font) rol
	(when font
	  (setf font (make-font font)))))

(defmethod check ((rol uml-role-info) canvas dict)
  (with-slots (name font degree distance) rol
	(check-member name     :nullable nil :types (or keyword string))
	(check-object font     canvas dict :nullable t :class font-info)
	(check-member degree   :nullable nil :types integer)
	(check-member distance :nullable nil :types integer))
  nil)

(defun uml-role-to-string (rol)
  (format-string (slot-value rol 'name)))

(defun uml-role-draw (rol x y align writer)
  (let ((txt (uml-role-to-string rol))
		(txt-anchor (ecase align
					  ((:left)   "start")
					  ((:center) "middle")
					  ((:right)  "end"))))
	(with-slots (font) rol
	  (write-text-tag x y txt-anchor txt writer :font font))))

;; type := :from|:dest
(defun uml-role-draw-beside-line (rol line type writer)
  (unless (typep line 'diagram:line)
	(throw-exception "role-info : line parameter is not line object"))
  (with-slots (font degree distance) rol
	(destructuring-bind (p1 . p2) (diagram::line-get-endpoints line type)
	  (let* ((x1    (point-x p2))
			 (y1    (point-y p2))
			 (x2    (+ x1 (* distance (diagram::math/cos3 p1 p2 degree))))
			 (y2    (+ y1 (* distance (diagram::math/sin3 p1 p2 degree))))
			 (align (if (< x1 x2) :left :right)))
		(when (< y1 y2)
		  (incf y2 (slot-value font 'diagram::size)))
		(uml-role-draw rol x2 y2 align writer)))))


(defun make-uml-role (&rest params)
  (if (= 1 (length params))
	  (let ((param (car params)))
		(cond
		  ((typep param 'uml-role-info) param)
		  ((listp param) (apply #'make-uml-role param))
		  (t             (make-uml-role :name param))))
	  (destructuring-bind (&key (name     nil     name-p)
								(font     nil     font-p)
								(degree   nil   degree-p)
								(distance nil distance-p)) params
		(make-instance 'uml-role-info
					   :name     (if name-p     name     nil)
					   :font     (if font-p     font     (or *uml-role-font*
															 diagram:*default-font*))
					   :degree   (if degree-p   degree   *uml-role-degree*)
					   :distance (if distance-p distance *uml-role-distance*)))))

