(in-package :cl-diagram-user)

(load-stencil :uml-keyword-info)

(defparameter *uml-flow-spec-font*  nil)
(defparameter *uml-flow-spec-class* nil)

(defparameter *uml-flow-stroke* :black)

;-------------------------------------------------------------------------------
;
; class uml-flow-spec
;
;-------------------------------------------------------------------------------
(defclass uml-flow-spec ()
  ((guard	:initform nil :initarg :guard)	;: (or keyword string)
   (action	:initform nil :initarg :action)	;: (or keyword string)
   (class	:initform nil :initarg :class)	;: (or keyword string)
   (font	:initform nil :initarg :font)))	;: (or nil font-info)


;;MEMO : no impl.
;(defmethod initialize-instance :after ((obj uml-flow-spec) &rest initargs)
;;  ...)

(defmethod check ((spec uml-flow-spec) canvas dict)
  (with-slots (guard action class font) spec
	(check-member guard  :nullable t :types (or keyword string))
	(check-member action :nullable t :types (or keyword string))
	(check-member class  :nullable t :types (or keyword string))
	(check-object font   canvas dict :nullable t :class font-info))
  nil)

(defun uml-flow-spec-to-string (obj)
  (with-slots (guard action) obj
	(format-string (when guard
					 (format-string "[" guard "]"))
				   (when action
					 (format-string "/" action)))))

(defun uml-flow-spec-draw (obj x y align writer)
  (let ((txt (uml-flow-spec-to-string obj))
		(txt-anchor (ecase align
					  ((:left)   "start")
					  ((:center) "middle")
					  ((:right)  "end"))))
	(with-slots (class font) obj
	  (writer-write writer
					"<text "
					"x='" x "' "
					"y='" y "' "
					"text-anchor='" txt-anchor "' "
					(write-when class "class='" it "' ")
					(when font
					  (to-property-strings font))
					">" (escape-characters txt) "</text>"))))

(defun uml-flow-spec-draw-beside-line (obj line writer)
  (unless (typep line 'diagram:line)
	(throw-exception "uml-flow-spec : line parameter is not line object"))
  (multiple-value-bind (x y sin cos) (diagram::line-get-center line)	;;ToDo : export!?
	(declare (ignorable x y sin cos))
	(let* ((f-size (diagram::font-size (slot-value obj 'font)))	;;ToDo : export!?
		   (offset f-size)
		   (align (cond ((zerop sin) :center)
						((<  0  sin) :left)
						(t           :right))))
	  (incf y (/ f-size 2))
	  (uml-flow-spec-draw obj (+ x (* sin offset))
									 (- y (* cos offset)) align writer))))


(defun make-uml-flow-spec (&rest params)
  (if (= 1 (length params))
	  (let ((param (car params)))
		(cond
		  ((typep   param  'uml-flow-spec) param)
		  ((listp   param) (apply #'make-uml-flow-spec param))
		  (t               (make-uml-flow-spec :guard param))))
	  (destructuring-bind (&key guard action
								(class nil class-p)
								(font  nil  font-p)) params
		(make-instance 'uml-flow-spec
					   :guard guard
					   :action    action
					   :class    (if class-p class *uml-flow-spec-class*)
					   :font     (if font-p  font  (or *uml-flow-spec-font*
															diagram:*default-font*))))))


;-------------------------------------------------------------------------------
;
; class uml-flow
;
;-------------------------------------------------------------------------------
(defclass uml-flow (diagram:connector)
  ((keyword	:initform nil :initarg :keyword)	; (or nil uml-keyword-info)
   (spec	:initform nil :initarg    :spec)))	; (or nil uml-flow-spec)

(defmethod initialize-instance :after ((flow uml-flow) &rest initargs)
  (declare (ignore initargs))
  (with-slots (keyword spec) flow
	(setf keyword (and keyword (make-uml-keyword   keyword)))
	(setf spec    (and spec    (make-uml-flow-spec spec))))
  flow)


(defmethod check ((flow uml-flow) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (keyword spec) flow 
	(check-object keyword canvas dict :nullable t :class uml-keyword-info)
	(check-object spec    canvas dict :nullable t :class uml-flow-spec))
  nil)
	

(defmethod entity-composition-p ((flow uml-flow))
  (with-slots (keyword spec) flow
	(or keyword
		spec
		(call-next-method))))

(defmethod post-draw ((flow uml-flow) writer)
  (with-slots (keyword spec) flow
	(when keyword (uml-keyword-draw-beside-line   keyword flow writer))
	(when spec    (uml-flow-spec-draw-beside-line spec    flow writer)))
  (call-next-method))
	  


(defmacro uml-flow (from to &key keyword spec style layer id)
  `(register-entity (make-instance 'uml-flow
								   :from ,from :to ,to
								   :keyword ,keyword :spec ,spec
								   :class nil :style ,style
								   :stroke (or *uml-flow-stroke* *default-stroke*)
								   :end1 nil :end2 :arrow :layer ,layer :id ,id)))

