
(in-package :cl-diagram-user)

(defparameter *uml-multiplicity-font*     nil)
(defparameter *uml-multiplicity-degree*   120)
(defparameter *uml-multiplicity-distance*  10)

;;------------------------------------------------------------------------------
;;
;; class uml-multiplicity-info
;;
;;------------------------------------------------------------------------------
(defclass uml-multiplicity-info ()
  ((min			:initform nil :initarg :min)		; (or keyword integer)
   (max			:initform nil :initarg :max)		; (or keyword integer)
   (font		:initform nil :initarg :font)		; (or nil font-info)
   (degree		:initform nil :initarg :degree)		; integer
   (distance	:initform nil :initarg :distance)))	; integer

(defmethod initialize-instance :after ((mul uml-multiplicity-info) &rest initargs)
  (declare (ignore initargs))
  (with-slots (font) mul
	(when font
	  (setf font (make-font font)))))

(defmethod check ((mul uml-multiplicity-info) canvas dict)
  (with-slots (min max font degree distance) mul
	(check-member min      :nullable nil :types (or keyword integer))
	(check-member max      :nullable nil :types (or keyword integer))
	(check-object font     canvas dict :nullable t :class font-info)
	(check-member degree   :nullable nil :types integer)
	(check-member distance :nullable nil :types integer)
	(when (keywordp min)
	  (check-keywords min :*))
	(when (keywordp max)
	  (check-keywords max :*)))
  nil)

(defun uml-multiplicity-to-string (mul)
  (with-slots (min max) mul
	(if (eql min max)
		(format-string min)
		(format-string min ".." max))))

(defun uml-multiplicity-draw (mul x y align writer)
  (let ((txt (uml-multiplicity-to-string mul))
		(txt-anchor (ecase align
					  ((:left)   "start")
					  ((:center) "middle")
					  ((:right)  "end"))))
	(with-slots (font) mul
	  (write-text-tag x y txt-anchor txt writer :font font))))

;; type := :from|:dest
(defun uml-multiplicity-draw-beside-line (mul line type writer)
  (unless (typep line 'diagram:line)
	(throw-exception "multiplicity-info : line parameter is not line object"))
  (with-slots (font degree distance) mul
	(destructuring-bind (p1 . p2) (diagram::line-get-endpoints line type)
	  (let* ((x1    (point-x p2))
			 (y1    (point-y p2))
			 (x2    (+ x1 (* distance (diagram::math/cos3 p1 p2 degree))))
			 (y2    (+ y1 (* distance (diagram::math/sin3 p1 p2 degree))))
			 (align (if (< x1 x2) :left :right)))
		(when (< y1 y2)
		  (incf y2 (slot-value font 'diagram::size)))
		(uml-multiplicity-draw mul x2 y2 align writer)))))


(defun make-uml-multiplicity (&rest params)
  (labels ((minmaxp (param)
			 (and (consp param)
				  (or (eq :* (car param))
					  (integerp (car param)))
				  (or (eq :* (cdr param))
					  (integerp (cdr param))))))
	(if (= 1 (length params))
		(let ((param (car params)))
		  (cond
			((minmaxp param) (make-uml-multiplicity :min (car param)
													:max (cdr param)))
			((typep   param  'uml-multiplicity-info) param)
			((listp   param) (apply #'make-uml-multiplicity param))
			(t               (make-uml-multiplicity :min param :max param))))
		(destructuring-bind (&key (min      nil      min-p)
								  (max      nil      max-p)
								  (font     nil     font-p)
								  (degree   nil   degree-p)
								  (distance nil distance-p)) params
		  (make-instance 'uml-multiplicity-info
						 :min      (if min-p      min      nil)
						 :max      (if max-p      max      nil)
						 :font     (if font-p     font     (or *uml-multiplicity-font*
															   diagram:*default-font*))
						 :degree   (if degree-p   degree   *uml-multiplicity-degree*)
						 :distance (if distance-p distance *uml-multiplicity-distance*))))))

