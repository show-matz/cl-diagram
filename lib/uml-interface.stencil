(in-package :cl-diagram-user)

(defun calculate-degrees (cx cy points degree)
  (labels ((reverse-degree (sin cos)
			 (when (< 1 (abs cos))
			   (setf cos (round cos)))
			 (let* ((RADIAN-UNIT (/ pi 180))
					(acos        (/ (cl:acos cos) RADIAN-UNIT)))
			   (round (if (<= 0 sin)
						  acos
						  (- 360 acos))))))
	(multiple-value-bind (px py)
		(do ((pts1 points (cdr pts1))
			 (pts2 (cddr points) (cdr pts2)))
			((null pts2) (values (car pts1) (cadr pts1))))
	  (let ((half (/ degree 2)))
		(values (reverse-degree (math/sin5 cx cy px py (- 360 half))
								(math/cos5 cx cy px py (- 360 half)))
				(reverse-degree (math/sin5 cx cy px py half)
								(math/cos5 cx cy px py half)))))))


;;------------------------------------------------------------------------------
;;
;; class uml-interface
;;
;;------------------------------------------------------------------------------
(defparameter *uml-interface-radius*     10)
(defparameter *uml-interface-fill*   :white)
(defparameter *uml-interface-stroke* :black)

(defclass uml-interface (diagram:circle)
  ((name :initform nil :initarg :name)))	; (or nil label-info)

(defmethod initialize-instance :after ((obj uml-interface) &rest initargs)
  (declare (ignore initargs))
  (with-slots (name) obj
	(setf name   (and name (make-label name))))
  obj)

(defmethod check ((obj uml-interface) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (name) obj
	(check-object name canvas dict :nullable nil :class label-info))
  nil)

(defmethod entity-composition-p ((obj uml-interface))
  t)  

(defmethod post-draw ((obj uml-interface) writer)
  (with-slots (name) obj
	(when name
	  (draw-label name obj writer)))
  (call-next-method)
;  (draw-canvas-frame (shape-get-subcanvas obj) writer)	;for debug...
  nil)

(defmacro uml-interface (x y name &key fill stroke link layer id)
  `(register-entity (make-instance 'uml-interface
								   :center-x ,x :center-y ,y
								   :radius *uml-interface-radius*
								   :name ,name :class nil 
								   :fill   (or ,fill   *uml-interface-fill*)
								   :stroke (or ,stroke *uml-interface-stroke*)
								   :link ,link :layer ,layer :id ,id)))


;;------------------------------------------------------------------------------
;;
;; class uml-interface-socket
;;
;;------------------------------------------------------------------------------
(defparameter *uml-interface-socket-stroke*   :black)
(defparameter *uml-interface-socket-degree*      150)

(defclass uml-interface-socket (diagram:entity)
  ((name			:initform nil :initarg :name)	; (or nil label-inf)
   (x				:initform   0 :initarg :x)		; number
   (y				:initform   0 :initarg :y)		; number
   (from			:initform nil :initarg :from)	; keyword
   (style			:initform nil :initarg :style)	; keyword - :(CC|[BLRT][123]?[BLRT][123]?) ( keyword -> list )
   (stroke			:initform nil :initarg :stroke)	; (or nil stroke-info)
   (points			:initform nil)					; list
   (canvas-cache	:initform nil)					; (or nil canvas)
   (dummy-circle	:initform nil)					; (or nil circle)
   (degree			:initform nil)))				; number

(defmethod initialize-instance :after ((sock uml-interface-socket) &rest initargs)
  (declare (ignore initargs))
  (with-slots (name style stroke degree) sock
	(setf name   (and name (make-label name)))
	(setf style  (or style *default-connector-style* :CC))
	(setf stroke (make-stroke (or stroke *uml-interface-socket-stroke* *default-stroke*)))
	(setf degree *uml-interface-socket-degree*))
  sock)

(defmethod check ((sock uml-interface-socket) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (name x y from style stroke
					points canvas-cache dummy-circle #|degree|#) sock
	(check-object name   canvas dict :nullable nil :class label-info)
	(check-member x      :nullable nil :types number)
	(check-member y      :nullable nil :types number)
	(check-member from   :nullable nil :types keyword)
	(check-member style  :nullable nil :types keyword)
	(check-object stroke canvas dict :nullable nil :class stroke-info)
	(setf style (diagram::check-and-fix-connector-style style))
	(setf canvas-cache (copy-canvas canvas))
	(let ((left (canvas-left canvas))
		  (top  (canvas-top  canvas))
		  (from-entity (diagram::dict-get-entity dict from)))
	  (unless from-entity
		(throw-exception "Entity '~A' not found in dictionary." from))
	  (unless (typep from-entity 'shape)
		(throw-exception "Entity '~A' is not shape object." from))
	  (setf dummy-circle (make-instance 'diagram:circle
										:center-x (+ x left)
										:center-y (+ y top)
										:radius *uml-interface-radius*))
	  (setf points (resolve-connector-points from-entity dummy-circle style))))
  nil)


(defmethod entity-composition-p ((sock uml-interface-socket))
  (declare (ignore sock))
  t)

(defmethod draw-entity ((sock uml-interface-socket) writer)
  (pre-draw sock writer)
  (with-slots (name x y stroke
				canvas-cache dummy-circle points degree) sock
	(let ((canvas canvas-cache))
	  (declare (special canvas))
	  (macrolet ((register-entity (entity)
				   `(check-and-draw-local-entity ,entity canvas writer)))
		(let ((*default-stroke* stroke))
		  (line points)
		  (multiple-value-bind (deg1 deg2)
			  (calculate-degrees (slot-value dummy-circle 'diagram::center-x)
								 (slot-value dummy-circle 'diagram::center-y) points degree)
			(when (<= 360 deg1) (decf deg1 360))
			(when (<= 360 deg2) (decf deg2 360))
			(arc x y (slot-value dummy-circle 'diagram::radius) deg1 deg2))
		  (when name
			(draw-label name dummy-circle writer))))))    ;;ToDo : font OK...?
  (post-draw sock writer)
  nil)
		  


(defmacro uml-interface-socket (x y from name &key style stroke layer id)
  `(register-entity (make-instance 'uml-interface-socket
								   :name ,name :x ,x :y ,y
								   :from ,from :style ,style
								   :stroke ,stroke :layer ,layer :id ,id)))


;;------------------------------------------------------------------------------
;;
;; class uml-interface-request
;;
;;------------------------------------------------------------------------------
(defparameter *uml-interface-request-stroke*         :black)
(defparameter *uml-interface-request-degree*            150)
(defparameter *uml-interface-request-length-threshold*   40)
(defparameter *uml-interface-request-maximum-dependency* 40)



;; (0 1 2 3 4 5 6 7) ->  tail (6 7) & copied (4 5 6 7).
(defun get-last-2-points (points &optional (cnt nil))
  (if (null cnt)
	  (let ((cnt (length points)))
		(unless (and (<= 4 cnt) (zerop (mod cnt 2)))
		  (error "Invalid points list."))
		(get-last-2-points points cnt))
	  (if (= cnt 4)
		  (values (cddr points) (copy-list points))
		  (get-last-2-points (cdr points) (1- cnt)))))

;;returns 4 values
(defun fix-points (arrow-p radius points)
  (multiple-value-bind (tail last2) (get-last-2-points points)
	(let ((x   (first  tail))
		  (y   (second tail))
		  (sin (apply #'math/sin4 last2))
		  (cos (apply #'math/cos4 last2))
		  (len (apply #'math/len4 last2)))
	  (if (or (not arrow-p)
			  (< len *uml-interface-request-length-threshold*))
		  (progn
			(decf (first  tail) (* radius cos))
			(decf (second tail) (* radius sin))
			(setf last2 nil))
		  (let ((half (/ len 2)))
			(when (< *uml-interface-request-maximum-dependency* half)
			  (setf half (- len *uml-interface-request-maximum-dependency*)))
			(setf x (+ (first  last2) (* half cos)))
			(setf y (+ (second last2) (* half sin)))
			(setf (first  tail)  (- x (* radius cos)))
			(setf (second tail)  (- y (* radius sin)))
			(setf (first  last2) (- x (* radius cos)))
			(setf (second last2) (- y (* radius sin)))))
	  (values points last2 x y))))



;-------------------------------------------------------------------------------
;
; class uml-interface-request
;
;-------------------------------------------------------------------------------
(defclass uml-interface-request (diagram:connector)
  ((arrow-p			:initform nil :initarg :arrow-p)	; boolean value
   (x-cache			:initform 0)						; number
   (y-cache			:initform 0)						; (or nil uml-role-info)
   (canvas-cache	:initform nil)						; (or nil canvas)
   (points-cache	:initform nil)						; list
   (radius-cache	:initform nil)						; number
   (degree-cache	:initform nil)))					; number

(defmethod initialize-instance :after ((req uml-interface-request) &rest initargs)
  (declare (ignore initargs))
  (with-slots (radius-cache degree-cache) req
	(setf radius-cache *uml-interface-radius*)
	(setf degree-cache *uml-interface-request-degree*))
  req)


(defmethod check ((req uml-interface-request) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (arrow-p x-cache y-cache
				canvas-cache points-cache radius-cache) req
	(setf canvas-cache (copy-canvas canvas))
	(let ((new-points nil))
	  (multiple-value-setq (new-points points-cache x-cache y-cache)
								(fix-points arrow-p radius-cache
									(copy-list (slot-value req 'diagram::points))))
	  (let ((left (canvas-left canvas))
			(top  (canvas-top  canvas)))
		(decf x-cache left)
		(decf y-cache  top)
		(when points-cache
		  (decf (first  points-cache) left)
		  (decf (second points-cache)  top)
		  (decf (third  points-cache) left)
		  (decf (fourth points-cache)  top)))
	  (setf (slot-value req 'diagram::points) new-points)))
  nil)

(defmethod entity-composition-p ((req uml-interface-request))
  (declare (ignore req))
  t)

(defmethod post-draw ((req uml-interface-request) writer)
  (with-slots (canvas-cache points-cache x-cache y-cache
				degree-cache radius-cache diagram::stroke) req
	(let ((canvas canvas-cache))
	  (declare (special canvas))
	  (macrolet ((register-entity (entity)
				   `(check-and-draw-local-entity ,entity canvas writer)))
		(let ((*default-stroke* diagram::stroke))
		  (when points-cache
			(line points-cache :end1 nil :end2 :arrow
							   :stroke '(:dasharray (3 3)))) ; ToDo : fix ?
			  (multiple-value-bind (deg1 deg2)
				  (calculate-degrees (+ x-cache (canvas-left canvas))
									 (+ y-cache (canvas-top  canvas))
									 (copy-list (slot-value req 'diagram::points)) degree-cache)
				(when (<= 360 deg1) (decf deg1 360))
				(when (<= 360 deg2) (decf deg2 360))
				(arc x-cache y-cache radius-cache deg1 deg2))))))
  (call-next-method))


(defmacro uml-interface-request (from to &key arrow-p style stroke layer id)
  `(register-entity (make-instance 'uml-interface-request
								   :from ,from :to ,to
								   :arrow-p ,arrow-p :style ,style
								   :stroke (or ,stroke
											   *uml-interface-request-stroke*
											   *default-stroke* :black)
								   :end1 nil :end2 nil :layer ,layer :id ,id)))

