(in-package :cl-diagram-user)

(load-stencil :grid)
(load-stencil :textbox)
(load-stencil :uml-diagram-activity)

(create-svg (:width 400 :height 750 :desc "test of uml-action" :encoding :utf8)
	(grid)
	(let ((*default-font* (make-font :family "sans-serif" :size 10))
		  (*uml-action-fill* (make-fill "#FFFACD")))
	  (text '(200 30) "Figure 11.1. A simple activity diagram"
			:align :center :font '(:family "sans-serif" :weight :bold :size 14))
	  (uml-activity-start '(200 70) :id :start)
	  (uml-action (point/y+ $1.center 70) "Receive~%Order" :id :rcv-order)
	  (uml-fork-v (point/y+ $1.center 70) :length 60 :id :fork)
	  (uml-action (make-point 130 (+ (point-y $1.center) 80)) "Fill Order" :id :fill-order)
	  (uml-action (make-point 320 (point-y $1.center)) "Send Invoice" :id :send-invoice)
	  (uml-action (point/y+ $1.center 160) "Receive~%Payment" :id :rcv-payment)
	  (uml-decision (point/y+ $3.center 70) :id :decision)
	  (uml-action (point/xy+ $1.center -70 70) "Overnight~%Delivery" :id :night-delivery)
	  (uml-action (make-point (+ (point-x $2.center) 70)
							  (point-y $1.center)) "Regular~%Delivery" :id :reg-delivery)
	  (uml-merge  (make-point (point-x decision.center)
							  (+ (point-y $1.center) 70)) :id :merge)
	  (uml-join-v (make-point (point-x fork.center)
							  (+ (point-y $1.center) 70)) :length 60 :id :join)
	  (uml-action (point/y+ $1.center 70) "Close~%Order" :id :close-order)
	  (uml-activity-final (point/y+ $1.center 70) :id :final)
	  (uml-flow :start :rcv-order)
	  (uml-flow :rcv-order :fork)
	  (uml-flow :fork :fill-order   :style :B1T)
	  (uml-flow :fork :send-invoice :style :B3T)
	  (uml-flow :send-invoice :rcv-payment)
	  (uml-flow :fill-order :decision)
	  (let ((*uml-flow-spec-font* (make-font 9)))
		(uml-flow :decision :night-delivery :style :LT
				  :spec '(:guard "priority order" :offset (10 -20)))
		(uml-flow :decision :reg-delivery :style :RT
				  :spec '(:guard "else" :offset (-25 20))))
	  (uml-flow :night-delivery :merge :style :BL)
	  (uml-flow :reg-delivery   :merge :style :BR)
	  (uml-flow :merge       :join :style :BT1)
	  (uml-flow :rcv-payment :join :style :BT3)
	  (uml-flow :join :close-order)
	  (uml-flow :close-order :final))
	(let ((*default-font*   (make-font :family "sans-serif" :size 10 :fill :blue))
		  (*default-stroke* (make-stroke :color :blue :width 3 :dasharray '(3 3))))
	  (textbox (point/x+ rcv-order.topright 60) "Initial node" :no-frame t :align :left :id :txt1)
	  (connector :txt1 :start :end2 :arrow)))
	  
