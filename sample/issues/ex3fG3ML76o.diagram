(in-package :diagram-user)

(load-stencil :grid)
(load-stencil :textbox)

(create-svg (:width 400 :height 300 :encoding :utf8)
	(grid)
	(rectangle '(200 150) 300 250 :id :outer :stroke :black :fill :white
			   :contents ((rectangle '(25 25) 30 30 :id :in1)
						  (rectangle (point/x+  in1.center 50) in1.width in1.height :id :in2)
						  (text '(50 60) "test text" :align :center)
						  (circle    (point/y+  in1.center 50) (/ in1.width 2) :id :in3)
						  (ellipse   (point/xy+ in1.center 50 50)
									 (/ in1.width 2) (/ in1.height 3) :id :in4)
						  (paragraph '(50 100) "paragraph~%multi-line." :align :center :valign :top)
						  (polygon '((25 135) (10 155) (40 155)) :fill :lightgreen :stroke :black)
						  (textbox '(50 190) "text~%box" :rx 5 :ry 5 :fill :wheat)
						  (path '((:move-to (110 10))
								  :relative
								  (:line-to (30 0) (-15 15))
								  :close-path) :fill :pink :stroke :black)
						  (let ((pt1 (point/x+ in2.bottomright 10))
								(pt2 (point/x+ in4.right       10)))
							(path `((:move-to ,pt1 ,pt2)
									:relative
									(:line-to (20 -30))
									:close-path) :fill :pink :stroke :black))
						  (arc '(130 130) 30 90 359 :stroke :black)
						  (line  '((160 130) (130 130) (130 160)) :stroke :black)
						  (rectangle '(200 50) 30 30 :id :x1)
						  (rectangle (point/x+ x1.center 70) 30 30 :id :x2)
						  (connector :x1 :x2 :style :CC :end2 :arrow)
						  (connector :x1 :x2 :style :TT :end2 :arrow)
						  (connector :x1 :x2 :style :BB :end2 :arrow)
						  )))
			   
	
