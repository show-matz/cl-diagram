(in-package :diagram-user)

(load-stencil :grid)
(load-stencil :uml-activity-partitions)

(create-svg (:width 900 :height 300 :encoding :utf8)
	(grid)
	(with-subcanvas ('(0 0) 300 300)
	  (uml-activity-partitions '(20 20)
							   '((:part1~%foo 80)
								 (:part2~%bar 100) (:part3~%quux 70)) 230
								 :lines :min :fill :white :stroke :black
								 :contents (((:part1~%foo)
											 (let ((w (canvas-width  diagram:canvas))
												   (h (canvas-height diagram:canvas)))
											   (rectangle (make-point (/ w 2) (/ h 2))
														  w h :stroke :none
														  :fill '(:color :red :opacity 0.2))))
											((:part2~%bar)
											 (let ((w (canvas-width  diagram:canvas))
												   (h (canvas-height diagram:canvas)))
											   (rectangle (make-point (/ w 2) (/ h 2))
														  w h :stroke :none
														  :fill '(:color :green :opacity 0.2))))
											((:part3~%quux)
											 (let ((w (canvas-width  diagram:canvas))
												   (h (canvas-height diagram:canvas)))
											   (rectangle (make-point (/ w 2) (/ h 2))
														  w h :stroke :none
														  :fill '(:color :blue :opacity 0.2)))))))
	(with-subcanvas ('(300 0) 300 300)
	  (uml-activity-partitions '(20 20)
							   230 '((:part1~%foo 80)
									 (:part2~%bar 100) (:part3~%quux 70))
							   :lines :min :fill :white :stroke :black
							   :contents (((:part1~%foo)
											 (let ((w (canvas-width  diagram:canvas))
												   (h (canvas-height diagram:canvas)))
											   (rectangle (make-point (/ w 2) (/ h 2))
														  w h :stroke :none
														  :fill '(:color :red :opacity 0.2))))
											((:part2~%bar)
											 (let ((w (canvas-width  diagram:canvas))
												   (h (canvas-height diagram:canvas)))
											   (rectangle (make-point (/ w 2) (/ h 2))
														  w h :stroke :none
														  :fill '(:color :green :opacity 0.2))))
											((:part3~%quux)
											 (let ((w (canvas-width  diagram:canvas))
												   (h (canvas-height diagram:canvas)))
											   (rectangle (make-point (/ w 2) (/ h 2))
														  w h :stroke :none
														  :fill '(:color :blue :opacity 0.2)))))))
	(with-subcanvas ('(600 0) 300 300)
	  (uml-activity-partitions '(20 20)
							   '((:part1~%foo 80) (:part2~%bar 100))
							   '((:part3~%baz 70) (:part4~%quux 120))
							   :lines :min :fill :white :stroke :black
							   :contents (((:part1~%foo :part3~%baz)
										   (let ((w (canvas-width  diagram:canvas))
												 (h (canvas-height diagram:canvas)))
											 (rectangle (make-point (/ w 2) (/ h 2))
														w h :stroke :none
														:fill '(:color :red :opacity 0.2))))
										  ((:part1~%foo :part4~%quux)
										   (let ((w (canvas-width  diagram:canvas))
												 (h (canvas-height diagram:canvas)))
											 (rectangle (make-point (/ w 2) (/ h 2))
														w h :stroke :none
														:fill '(:color :green :opacity 0.2))))
										  ((:part2~%bar :part3~%baz)
										   (let ((w (canvas-width  diagram:canvas))
												 (h (canvas-height diagram:canvas)))
											 (rectangle (make-point (/ w 2) (/ h 2))
														w h :stroke :none
														:fill '(:color :blue :opacity 0.2))))
										  ((:part2~%bar :part4~%quux)
										   (let ((w (canvas-width  diagram:canvas))
												 (h (canvas-height diagram:canvas)))
											 (rectangle (make-point (/ w 2) (/ h 2))
														w h :stroke :none
														:fill '(:color :gray :opacity 0.2))))))))
